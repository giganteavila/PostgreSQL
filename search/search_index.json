{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PostgreSQL","text":""},{"location":"#que-es-postgresql","title":"\u00bfQu\u00e9 es PostgreSQL?","text":"<p>PostgreSQL es un potente sistema de bases de datos de c\u00f3digo abierto que utiliza y extiende el lenguaje SQL combinado con muchas caracter\u00edsticas que almacenan y escalan las cargas de datos m\u00e1s complicadas. Los or\u00edgenes de PostgreSQL se remontan a 1986 como parte del proyecto POSTGRES en la Universidad de California en Berkeley y tiene m\u00e1s de 35 a\u00f1os de desarrollo activo en la plataforma central.</p> <p>PostgreSQL se ha ganado una s\u00f3lida reputaci\u00f3n por su arquitectura probada, fiabilidad, integridad de datos, conjunto de caracter\u00edsticas robustas, extensibilidad y la dedicaci\u00f3n de la comunidad de c\u00f3digo abierto detr\u00e1s del software para ofrecer constantemente soluciones eficaces e innovadoras. PostgreSQL se ejecuta en todos los principales sistemas operativos, ha sido compatible con ACID desde 2001, y tiene potentes complementos como el popular extensor de bases de datos geoespaciales PostGIS. No es de extra\u00f1ar que PostgreSQL se haya convertido en la base de datos relacional de c\u00f3digo abierto de elecci\u00f3n para muchas personas y organizaciones.</p> <p>Empezar con el uso de PostgreSQL nunca ha sido m\u00e1s f\u00e1cil: elige un proyecto que quieres construir, y deja que PostgreSQL almacene de forma segura y robusta tus datos.</p>"},{"location":"#por-que-usar-postgresql","title":"\u00bfPor qu\u00e9 usar PostgreSQL?","text":"<p>PostgreSQL viene con muchas caracter\u00edsticas destinadas a ayudar a los desarrolladores a construir aplicaciones, administradores para proteger la integridad de los datos y construir entornos tolerantes a fallos, y ayudarle a administrar sus datos sin importar el conjunto de datos tan grande o peque\u00f1o. Adem\u00e1s de ser de c\u00f3digo libre y abierto, PostgreSQL es muy extensible. Por ejemplo, puede definir sus propios tipos de datos, construir funciones personalizadas, incluso escribir c\u00f3digo de diferentes lenguajes de programaci\u00f3n sin recompilar su base de datos.</p> <p>PostgreSQL trata de ajustarse al est\u00e1ndar SQL donde tal conformidad no contradice las caracter\u00edsticas tradicionales o podr\u00eda conducir a malas decisiones arquitect\u00f3nicas. Muchas de las caracter\u00edsticas requeridas por el est\u00e1ndar SQL son compatibles, aunque a veces con una sintaxis o funci\u00f3n ligeramente diferente. Se pueden esperar nuevos pasos hacia la conformidad con el tiempo. A partir de la versi\u00f3n 16 de septiembre de 2023, PostgreSQL se ajusta al menos a 170 de las 179 funciones obligatorias para la conformidad del n\u00facleo SQL:2023. A partir de este escrito, ninguna base de datos relacional cumple con toda la conformidad con esta norma.</p> <p>A continuaci\u00f3n se muestra una lista no exhaustiva de varias caracter\u00edsticas que se encuentran en PostgreSQL, se a\u00f1aden m\u00e1s en cada versi\u00f3n importante:</p> <ul> <li>Tipos de datos<ul> <li>Primitivas: entero, num\u00e9rico, cadena, booleano</li> <li>Estructurado: Fecha/hora, Array, Range / Multirange, UUID</li> <li>Documento: JSON/JSONB, XML, Clave-valor (Hstore)</li> <li>Geometr\u00eda: Punto, L\u00ednea, C\u00edrculo, Pol\u00edgono</li> <li>Personalizaciones: Composite, Tipos personalizados</li> </ul> </li> <li>Integridad de los datos<ul> <li>UNIQUE, NO NULL</li> <li>Claves primarias</li> <li>Claves for\u00e1neas</li> <li>Restricciones de exclusi\u00f3n</li> <li>Explicit Locks, Advisory Locks</li> </ul> </li> <li>Concurrencia, Rendimiento<ul> <li>Indizaci\u00f3n: \u00c1rbol B, Multicolumna, Expresiones, Partial</li> <li>Indizaci\u00f3n avanzada: GiST, SP-Gist, KNN Gist, GIN, BRIN, Covering indexes, Bloom filters</li> <li>Sofisticado planificador de consultas/optimizador, escaneos de solo \u00edndice, estad\u00edsticas multicolumna</li> <li>Transacciones, Operaciones anidadas (a trav\u00e9s de puntos de ahorro)</li> <li>Control de concurrencia Multi-Versi\u00f3n (MVCC)</li> <li>Paralelizaci\u00f3n de las consultas de lectura y la construcci\u00f3n de \u00edndices de \u00e1rbol B</li> <li>Particionado de tablas</li> <li>Todos los niveles de aislamiento de las transacciones definidos en la norma SQL, incluyendo Serializable</li> <li>Compilati\u00f3n de expresiones Just-In-Time (JIT)</li> </ul> </li> <li>Fiabilidad, Recuperaci\u00f3n de Desastres</li> <li>Write-ahead Logging (WAL)</li> <li>Replication: Asynchronous, Synchronous, Logical</li> <li>Point-in-time-recovery (PITR), active standbys</li> <li>Tablespaces</li> <li>Seguridad<ul> <li>Autenticaci\u00f3n: GSSAPI, SSPI, LDAP, SCRAM-SHA-256, Certificado, y m\u00e1s</li> <li>Sistema de control de acceso robusto</li> <li>Seguridad a nivel de columna y fila</li> <li>La autenticaci\u00f3n multifactor con certificados y un m\u00e9todo adicional</li> </ul> </li> <li>Extensibilidad<ul> <li>Funciones y procedimientos almacenados</li> <li>Lenguajes procedurales: PL/pgSQL, Perl, Python y Tcl. Hay otros lenguajes disponibles a trav\u00e9s de extensiones, por ejemplo. Java, JavaScript (V8), R, Lua y Rust</li> <li>Constructores SQL/JSON y expresiones de ruta</li> <li>Envoltorios de datos extranjeros: con\u00e9ctese a otras bases de datos o flujos con una interfaz SQL est\u00e1ndar</li> <li>Interfaz de almacenamiento personalizable para tablas</li> <li>Muchas extensiones que proporcionan funcionalidad adicional, incluyendo PostGIS</li> </ul> </li> <li>Internacionalizaci\u00f3n, B\u00fasqueda de Texto<ul> <li>Apoyo a conjuntos internacionales de caracteres, por ejemplo, a trav\u00e9s de las recopilaciones de la UCI</li> <li>Cifras de casos insensibles e insensibles a los acentos</li> <li>B\u00fasqueda de texto completo</li> </ul> </li> </ul> <p>Hay muchas m\u00e1s caracter\u00edsticas que se pueden descubrir en la documentaci\u00f3n PostgreSQL. Adem\u00e1s, PostgreSQL es altamente extensible: muchas caracter\u00edsticas, como los \u00edndices, tienen API definidas para que se pueda construir con PostgreSQL tus desaf\u00edos.</p> <p>PostgreSQL ha demostrado ser altamente escalable tanto en la cantidad de datos que puede gestionar y en el n\u00famero de usuarios concurrentes que puede acomodarse. Hay cl\u00fasteres activos PostgreSQL en entornos de producci\u00f3n que manejan muchos terabytes de datos, y sistemas especializados que manejan petabytes.</p>"},{"location":"#alguna-pregunta","title":"\u00bfAlguna pregunta?","text":"<p>El primer lugar al que acudir para cualquier pregunta en PostgreSQL es su documentaci\u00f3n de renombre mundial que discute c\u00f3mo usar PostgreSQL en profundidad.</p> <p>Tambi\u00e9n hay muchas listas de correo donde te puedes conectar y participar en la comunidad. Tambi\u00e9n hay muchos eventos y grupos de usuarios locales donde te puedes conectar con otros usuarios de PostgreSQL.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/01.-Datos%20y%20archivos/","title":"01.-La necesidad de gestionar informaci\u00f3n","text":"<p>En el mundo actual existe una cada vez mayor demanda de gesti\u00f3n de la informaci\u00f3n. No es una demanda nueva, todas las sociedades a lo largo de la historia han tenido esta necesidad. Desde el principio de los tiempos se ha necesitado disponer de herramientas que facilitaran la gesti\u00f3n de los datos ya que, como herramienta, el ser humano al principio s\u00f3lo dispon\u00eda de su memoria y c\u00e1lculo inmediato y, como mucho, de la ayuda de sus dedos.</p> <p>La escritura fue la herramienta que permiti\u00f3 al ser humano almacenar informaci\u00f3n y realizar c\u00e1lculos sobre ella. Adem\u00e1s de permitir compartir esa informaci\u00f3n entre diferentes personas, tambi\u00e9n posibilit\u00f3 que los datos se guardaran de manera continua e incluso estuvieran disponibles para las siguientes generaciones. Los problemas actuales con la privacidad ya aparecieron con la propia escritura y as\u00ed el cifrado de datos es una t\u00e9cnica tan antigua como la propia escritura para conseguir uno de los todav\u00eda requisitos fundamentales de la gesti\u00f3n de datos, la seguridad.</p> <p>Cuanto m\u00e1s se han desarrollado las sociedades, mejores m\u00e9todos se han desarrollado para gestionar la informaci\u00f3n y, a la vez, m\u00e1s datos se han necesitado gestionar. Para poder almacenar datos y cada vez m\u00e1s datos, el ser humano ide\u00f3 nuevas herramientas: archivos, cajones, carpetas y fichas en las que se almacenaban los datos.</p> <p>Antes de la aparici\u00f3n de las computadoras, el tiempo requerido para manipular estos datos era enorme. Sin embargo el proceso de aprendizaje era relativamente sencillo, ya que se usaban elementos que las personas manejaban desde su infancia.</p> <p>Por esa raz\u00f3n, la inform\u00e1tica se adapt\u00f3 para que la terminolog\u00eda en el propio ordenador se pareciera a los t\u00e9rminos de organizaci\u00f3n de datos cl\u00e1sicos. As\u00ed, en inform\u00e1tica se sigue hablado de ficheros, formularios, carpetas, directorios,....</p> <p>En estos \u00faltimos a\u00f1os, la demanda ha crecido a niveles espectaculares debido al acceso multitudinario a Internet y a los enormes flujos de informaci\u00f3n que generan los usuarios. Cada a\u00f1o la necesidad de almacenar informaci\u00f3n crece exponencialmente en un frenes\u00ed que, por ahora, no parece tener fin.</p> <p>Desde la aparici\u00f3n de las primeras computadoras, se intent\u00f3 automatizar la gesti\u00f3n de los datos. El propio nombre Inform\u00e1tica hace referencia al hecho de ser una ciencia que trabaja con informaci\u00f3n. Por ello las bases de datos son una de las aplicaciones m\u00e1s antiguas de la inform\u00e1tica.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/01.-Datos%20y%20archivos/#02-datos-e-informacion","title":"02.-Datos e informaci\u00f3n","text":"<p>Tradicionalmente siempre se ha separado el concepto de dato sobre el de informaci\u00f3n.</p> <p>Un dato es una propiedad en crudo, es decir, sin contextualizar. Por ejemplo S\u00e1nchez y 32 son datos. Desde el punto de vista de la computaci\u00f3n, ambos datos se pueden almacenar. Sin embargo, no podemos considerarlos informaci\u00f3n hasta que no les demos significado. Si decimos que S\u00e1nchez es mi primer apellido y que 32 son los grados cent\u00edgrados de temperatura que hace ahora en la calle, esos datos pasan a ser informaci\u00f3n.</p> <p>La informaci\u00f3n tiene una importancia humana, es interpretable, reconocible, presentable,.. El dato es simplemente el paso previo. Resumiendo: todo dato debe de ser procesado para obtener informaci\u00f3n, y es la informaci\u00f3n lo que nos interesa a los seres humanos.</p> <p>Como veremos m\u00e1s adelante, los datos se convierten en informaci\u00f3n gracias a los metadatos: datos que sirven para describir otros datos.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/01.-Datos%20y%20archivos/#03-sistemas-de-informacion","title":"03.-Sistemas de Informaci\u00f3n","text":""},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/01.-Datos%20y%20archivos/#la-empresa-como-sistema","title":"La empresa como sistema","text":"<p>Seg\u00fan la RAE, la definici\u00f3n de sistema es \u201cConjunto de cosas que ordenadamente relacionadas entre s\u00ed contribuyen a un determinado objeto\u201d .</p> <p>La clientela fundamental del profesional de la inform\u00e1tica es la empresa, sin distinguir entre la empresa privada y las entidades p\u00fablicas. Una empresa est\u00e1 formada por diversos elementos que son comunes: el capital, los recursos humanos, los inmuebles, los servicios que presta, etc. Todos ellos forman el sistema de la empresa.</p> <p>El sistema completo que forma la empresa, por otra parte, se suele dividir en los siguientes subsistemas:</p> <ul> <li> <p>Subsistema productivo. Tambi\u00e9n llamado subsistema real o f\u00edsico. Representa la parte de la empresa encargada de gestionar la producci\u00f3n de la misma.</p> </li> <li> <p>Subsistema financiero. Encargado de la gesti\u00f3n de los bienes econ\u00f3micos de la empresa</p> </li> <li> <p>Subsistema directivo. Encargado de la gesti\u00f3n organizativa de la empresa</p> </li> </ul> <p>Hay que hacer notar que cada subsistema se asocia a un departamento concreto de la empresa.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/01.-Datos%20y%20archivos/#sistemas-de-informacion","title":"Sistemas de Informaci\u00f3n","text":"<p>Los sistemas que aglutinan los elementos que intervienen para gestionar la informaci\u00f3n que manejan los subsistemas empresariales es lo que se conoce como Sistemas de Informaci\u00f3n. Se suele utilizar las siglas SI o IS (de Information Server) para referirse a este concepto.</p> <p>Vale tambi\u00e9n para gestionar la informaci\u00f3n de cualquier sistema, aunque no sea empresarial. Pero la teor\u00eda est\u00e1 basada en el sistema empresarial.</p> <p>Realmente un sistema de informaci\u00f3n s\u00f3lo incluye aquello que nos interesa de la empresa y los elementos necesarios para gestionar esa informaci\u00f3n.</p> <p>Un sistema de informaci\u00f3n gen\u00e9rico est\u00e1 formado por los siguientes elementos:</p> <ul> <li> <p>Recursos f\u00edsicos. Carpetas, documentos, equipamiento, discos,...</p> </li> <li> <p>Recursos humanos. Personal que maneja la informaci\u00f3n</p> </li> <li> <p>Protocolo. Normas que debe cumplir la informaci\u00f3n para que sea manejada (formato de la informaci\u00f3n, modelo para los documentos,...)</p> </li> </ul> <p>Las empresas necesitan implantar estos sistemas de informaci\u00f3n debido a la competencia que las obliga a gestionar de la forma m\u00e1s eficiente sus datos para una mayor calidad en la organizaci\u00f3n de las actividades de los subsistemas empresariales</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/01.-Datos%20y%20archivos/#componentes-de-un-sistema-de-informacion-electronico","title":"Componentes de un Sistema de Informaci\u00f3n Electr\u00f3nico","text":"<p>En el caso de una gesti\u00f3n electr\u00f3nica de la informaci\u00f3n (lo que actualmente se considera un sistema de informaci\u00f3n electr\u00f3nico), los componentes son:</p> <ul> <li> <p>Datos. Se trata de la informaci\u00f3n relevante que almacena y gestiona el sistema de informaci\u00f3n. Ejemplos de datos son: S\u00e1nchez, 12764569F, Calle Mayo 5, Azul\u2026</p> </li> <li> <p>Hardware. Equipamiento f\u00edsico que se utiliza para gestionar los datos. cada uno de los dispositivos electr\u00f3nicos que permiten el funcionamiento del sistema de informaci\u00f3n: servidores, m\u00e1quinas de los clientes, routers, switches, impresoras,\u2026</p> </li> <li> <p>Software. Aplicaciones inform\u00e1ticas que se encargan de la gesti\u00f3n de la base de datos y de las herramientas que facilitan su uso.</p> </li> <li> <p>Recursos humanos. Personal que maneja el sistema de informaci\u00f3n.</p> </li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/02.-Tipos%20de%20gesti%C3%B3n%20de%20Informaci%C3%B3n%20mediante%20el%20ordenador/","title":"02.-Tipos de gesti\u00f3n de Informaci\u00f3n mediante el ordenador","text":"<p>En la evoluci\u00f3n de los sistemas de informaci\u00f3n ha habido dos puntos determinantes, que han formado los dos tipos fundamentales de sistemas de informaci\u00f3n electr\u00f3nico.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/02.-Tipos%20de%20gesti%C3%B3n%20de%20Informaci%C3%B3n%20mediante%20el%20ordenador/#01-sistemas-de-gestion-de-ficheros","title":"01.-Sistemas de gesti\u00f3n de ficheros","text":"<p>Este tipo de sistemas hace referencia a la forma que inicialmente se desarroll\u00f3 en la inform\u00e1tica para gestionar ficheros (y que a\u00fan se usa). En realidad, es una forma que traduc\u00eda la manera cl\u00e1sica de gestionar sistemas de informaci\u00f3n (con sus archivadores, carpetas,\u2026) al mundo electr\u00f3nico.</p> <p></p> <p>La idea es que los datos se almacenan en ficheros y se crean aplicaciones (cuyo c\u00f3digo posee la empresa que crea dichas aplicaciones) para acceder a los ficheros. Cada aplicaci\u00f3n organiza los datos en los ficheros como le parece mejor y si incorporamos aplicaciones nuevas, \u00e9stas usar\u00e1n sus propios ficheros.</p> <p>Cada aplicaci\u00f3n almacena y utiliza sus propios datos de forma un tanto ca\u00f3tica. La ventaja de este sistema (la \u00fanica ventaja), es que los procesos son independientes por lo que la modificaci\u00f3n de uno no afecta al resto. Pero tiene grandes inconvenientes:</p> <ul> <li> <p>Programaci\u00f3n de aplicaciones compleja. Ya que los programadores se deben de encargar de lo que tiene que hacer la aplicaci\u00f3n y adem\u00e1s de estructurar los datos en disco.</p> </li> <li> <p>Datos redundantes. Ya que se repiten continuamente. Podr\u00eda, por ejemplo, ocurrir que una segunda aplicaci\u00f3n utilice datos de personales, que resulta que ya estaban almacenados en los ficheros de una primera aplicaci\u00f3n, pero como ambas son independientes, los datos se repetir\u00e1n.</p> </li> <li> <p>Datos inconsistentes. En relaci\u00f3n con el problema anterior, ya que un proceso cambia sus datos y no los del resto. Por lo que la misma informaci\u00f3n puede tener distintos valores seg\u00fan qu\u00e9 aplicaci\u00f3n acceda a \u00e9l.</p> </li> <li> <p>Dif\u00edcil acceso a los datos. Cada vez que se requiera una consulta no prevista inicialmente, hay que modificar el c\u00f3digo de las aplicaciones o incluso crear una nueva aplicaci\u00f3n. Esto hace imposible pensar en nuevas consultas e instant\u00e1neamente obtener sus resultados; inviable para aplicaciones que requieren grandes capacidades de consultas y an\u00e1lisis de datos.</p> </li> <li> <p>Coste de almacenamiento elevado. Al almacenarse varias veces el mismo dato, se requiere m\u00e1s espacio en los discos. Adem\u00e1s, las aplicaciones tambi\u00e9n ocupan mucho al tener que pensar en todas las posibles consultas sobre los datos que la organizaci\u00f3n precisa.</p> </li> <li> <p>Dependencia de los datos a nivel f\u00edsico. Para poder saber c\u00f3mo se almacenan los datos, es decir qu\u00e9 estructura se utiliza de los mismos, necesitamos ver el c\u00f3digo de la aplicaci\u00f3n; es decir el c\u00f3digo y los datos no son independientes.</p> </li> <li> <p>Dificultad para el acceso simult\u00e1neo a los datos. El acceso simult\u00e1neo requiere que varios usuarios al puedan acceder a la misma informaci\u00f3n. Con este tipo de sistemas es extremadamente dif\u00edcil conseguir esta capacidad.</p> </li> <li> <p>Dificultad para administrar la seguridad del sistema. Ya que cada aplicaci\u00f3n se crea independientemente. Es, por tanto, muy dif\u00edcil establecer criterios de seguridad uniformes. Es decir, los permisos que cada usuario tiene sobre los datos, se establecen de forma muy confusa (y nada uniforme ya que cada aplicaci\u00f3n puede variar la seguridad).</p> </li> </ul> <p>Se consideran tambi\u00e9n sistemas de gesti\u00f3n de ficheros, a los sistemas que utilizan programas ofim\u00e1ticos (como procesadores de texto u hojas de c\u00e1lculo por ejemplo) para gestionar sus datos. Esta \u00faltima idea, la utilizan muchas peque\u00f1as empresas para gestionar los datos, debido al presupuesto limitado del que disponen. Gestionar la informaci\u00f3n de esta forma produce los mismos (si no m\u00e1s) problemas.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/02.-Tipos%20de%20gesti%C3%B3n%20de%20Informaci%C3%B3n%20mediante%20el%20ordenador/#02-sistemas-de-bases-de-datos","title":"02.-Sistemas de Bases de Datos","text":"<p>En este tipo de sistemas, los datos se centralizan en una base de datos com\u00fan a todas las aplicaciones. Un software llamado Sistema Gestor de Bases de Datos (SGBD) es el que realmente accede a los datos y se encarga de gestionarlos. Las aplicaciones que creen los programadores, no acceden directamente a los datos, de modo que la base de datos es com\u00fan para todas las aplicaciones.</p> <p>De esta forma, hay, al menos, dos capas a la hora de acceder a los datos. Las aplicaciones se abstraen sobre la forma de acceder a los datos, dejando ese problema al SGBD. As\u00ed se pueden concentrar exclusivamente en la tarea de conseguir una interfaz de acceso a los datos para los usuarios.</p> <p></p> <p>Cuando una aplicaci\u00f3n modifica un dato, la modificaci\u00f3n ser\u00e1 visible inmediatamente para el resto de aplicaciones; ya que todas utilizar\u00e1n la misma base de datos.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/02.-Tipos%20de%20gesti%C3%B3n%20de%20Informaci%C3%B3n%20mediante%20el%20ordenador/#ventajas","title":"Ventajas","text":"<ul> <li> <p>Independencia de los datos y los programas. Esto permite modificar los datos sin modificar el c\u00f3digo de las aplicaciones y viceversa.</p> </li> <li> <p>Menor redundancia. Este modelo no requiere que los datos se repitan para cada aplicaci\u00f3n que los requiera., en su lugar se dise\u00f1an los datos de forma independiente a las aplicaciones. Los programadores de aplicaciones deber\u00e1n conocer la estructura creada para los datos y la forma en la que deben acceder a ellos.</p> </li> <li> <p>Integridad de los datos. Al estar centralizados, es m\u00e1s dif\u00edcil que haya datos incoherentes. Es decir, que una aplicaci\u00f3n muestre informaci\u00f3n distinta al resto de aplicaciones, ya que los datos son los mismos para todas.</p> </li> <li> <p>Mayor seguridad en los datos. El SGBD es el encargado de la seguridad y se puede centrar en ella de forma independiente a las aplicaciones. Como las aplicaciones deben atravesar la capa del SGBD para llegar a los datos, no se podr\u00e1n saltar la seguridad.</p> </li> <li> <p>Visiones distintas seg\u00fan el usuario. Nuevamente, centralizar los datos facilita crear pol\u00edticas que permitan que los usuarios vean la informaci\u00f3n de la base de datos de forma distinta.</p> </li> <li> <p>Datos m\u00e1s documentados. Las bases de datos tienen mucho mejor gestionados los metadatos, que permiten describir la informaci\u00f3n de la base de datos y que pueden ser consultados por las aplicaciones.</p> </li> <li> <p>Acceso a los datos m\u00e1s eficiente. Esta forma de organizar los datos produce un resultado m\u00e1s \u00f3ptimo en rendimiento ya que los sistemas gestores centralizan el acceso pudiendo ejecutar pol\u00edticas diferentes en funci\u00f3n de la demanda.</p> </li> <li> <p>Menor espacio de almacenamiento. Puesto que hay muy poca redundancia.</p> </li> <li> <p>Acceso simult\u00e1neo a los datos. Nuevamente el SGBD tiene m\u00e1s capacidad de conseguir esto. Cuando hay varias aplicaciones que intentan acceder a los datos en los sistemas orientados a los ficheros, compiten por los datos y es f\u00e1cil el bloqueo mutuo. En el caso de los sistemas orientados a bases de datos, toda petici\u00f3n pasa la capa del SGBD y esto permite evitar los bloqueos.</p> </li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/02.-Tipos%20de%20gesti%C3%B3n%20de%20Informaci%C3%B3n%20mediante%20el%20ordenador/#desventajas","title":"Desventajas","text":"<ul> <li> <p>Instalaci\u00f3n costosa. El control y administraci\u00f3n de bases de datos requiere de un software y hardware poderoso.</p> </li> <li> <p>Requiere personal cualificado. Debido a la dificultad de manejo de este tipo de sistemas.</p> </li> <li> <p>Implantaci\u00f3n larga y dif\u00edcil. En relaci\u00f3n a los puntos anteriores. La adaptaci\u00f3n del personal y del equipamiento es mucho m\u00e1s complicada y lleva bastante tiempo.</p> </li> <li> <p>Ausencia de est\u00e1ndares totales. Lo cual significa una excesiva dependencia hacia los sistemas comerciales del mercado. Aunque, hoy en d\u00eda, hay un funcionamiento base y un lenguaje de gesti\u00f3n (SQL) que desde hace tiempo se considera est\u00e1ndar (al menos en las bases de datos relacionales).</p> </li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/","title":"01.-Funciones. Lenguajes de los SGBD","text":"<p>Los SGBD tienen que realizar tres tipos de funciones para ser considerados v\u00e1lidos. A continuaci\u00f3n se describen estas tres funciones.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#funcion-de-descripcion-o-definicion","title":"Funci\u00f3n de descripci\u00f3n o definici\u00f3n","text":"<p>Permite al dise\u00f1ador de la base de datos crear las estructuras apropiadas para integrar adecuadamente los datos. Se dice que esta funci\u00f3n es la que permite definir las tres estructuras de la base de datos (relacionadas con los tres niveles de abstracci\u00f3n de las mismas).</p> <ul> <li> <p>Estructura interna</p> </li> <li> <p>Estructura conceptual</p> </li> <li> <p>Estructura externa</p> </li> </ul> <p>M\u00e1s adelante se explican estas tres estructuras, relacionadas con las tres formas (o niveles) de ver la base de datos.</p> <p>Realmente la funci\u00f3n de definici\u00f3n gestiona los metadatos. Los metadatos son la estructura de la dispone el sistema de base de datos para documentar cada dato. Los metadatos tambi\u00e9n son datos que se almacenan en la propia base de datos; pero su finalidad es describir los datos.</p> <p>Un metadato nos permite para saber a qu\u00e9 informaci\u00f3n real se refiere cada dato. Por ejemplo: S\u00e1nchez, Rodr\u00edguez y Crespo son datos. Pero Primer Apellido es un metadato que, si est\u00e1 correctamente creado, nos permite determinar que S\u00e1nchez, Rodr\u00edguez y Crespo son primeros apellidos.</p> <p>Dicho de otra forma, sin los metadatos, no podr\u00edamos manejar los datos como informaci\u00f3n relevante. Por ello son fundamentales. Son, de hecho, la base de la creaci\u00f3n de las bases de datos.</p> <p>Los metadatos pueden indicar cuestiones complejas. Por ejemplo, que de los Alumnos almacenamos su dni el cual lo forman 9 caracteres. Incluso podremos indicar que en el dni los 8 primeros son n\u00fameros y el noveno un car\u00e1cter en may\u00fasculas que adem\u00e1s cumple una regla concreta y sirve para identificar al alumno.</p> <p>Por lo tanto, en realidad, la funci\u00f3n de definici\u00f3n sirve para crear, eliminar o modificar metadatos.</p> <p>Resumiendo: con la funci\u00f3n de definici\u00f3n podremos:</p> <ul> <li> <p>Especificar el significado de los datos</p> </li> <li> <p>Organizar la informaci\u00f3n en estructuras m\u00e1s complejas</p> </li> <li> <p>Relacionar los datos de forma precisa</p> </li> <li> <p>Especificar reglas especiales que deben cumplir los datos</p> </li> <li> <p>Crear todos los elementos estructurales de la base de datos (incluidos los usuarios)</p> </li> </ul> <p>Un lenguaje conocido como lenguaje de descripci\u00f3n de datos o DDL (Data Description Language), es el que permite realizar la funci\u00f3n de definici\u00f3n en las bases de datos.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#funcion-de-manipulacion","title":"Funci\u00f3n de manipulaci\u00f3n","text":"<p>Permite cambiar y consultar los datos de la base de datos. Se realiza mediante un lenguaje de manipulaci\u00f3n de datos o DML (Data Manipulation Language). Mediante este lenguaje se puede:</p> <ul> <li> <p>A\u00f1adir datos</p> </li> <li> <p>Eliminar datos</p> </li> <li> <p>Modificar datos</p> </li> <li> <p>Consultar datos</p> </li> </ul> <p>Actualmente se suele diferenciar la funci\u00f3n de consulta de datos, diferenci\u00e1ndola del resto de operaciones de manipulaci\u00f3n de datos. Se habla de que la funci\u00f3n de consulta se realiza con un lenguaje de consulta de datos o DQL (Data Query Language).</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#funcion-de-control","title":"Funci\u00f3n de control","text":"<p>Mediante esta funci\u00f3n los administradores poseen mecanismos para proteger los datos. De manera que se permite a cada usuario ver ciertos datos y otros no, o bien usar ciertos recursos concretos de la base de datos y prohibir otros. Es decir, es la funci\u00f3n encargada de establecer los permisos de acceso a los elementos que forman parte de la base de datos.</p> <p>El lenguaje que implementa esta funci\u00f3n es el lenguaje de control de datos o DCL (Data Control Language).</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#02-utilidad-de-los-sgbd","title":"02.-Utilidad de los SGBD","text":"<p>Un sistema gestor de bases de datos o SGBD (aunque se suele utilizar m\u00e1s a menudo en los libros especializados las siglas DBMS procedentes del ingl\u00e9s, Data Base Management System) es el software que permite a los usuarios procesar, describir, administrar y recuperar los datos almacenados en una base de datos.</p> <p>En estos sistemas se proporciona un conjunto coordinado de programas, procedimientos y lenguajes que permiten a los distintos usuarios realizar sus tareas habituales con los datos, garantizando adem\u00e1s la seguridad de los mismos.</p> <p>El \u00e9xito del SGBD reside en mantener la seguridad e integridad de los datos. L\u00f3gicamente tiene que proporcionar herramientas a los distintos usuarios.</p> <p>Adem\u00e1s de las tres funciones principales comentadas anteriormente, hoy en d\u00eda los SGBD son capaces de realizar numerosas operaciones. Para ello proporcionan numerosas herramientas, muchas de ellas permiten trabajar de una forma m\u00e1s c\u00f3moda con las . Las m\u00e1s destacadas son:</p> <ul> <li> <p>Herramientas para la creaci\u00f3n y especificaci\u00f3n del diccionario de datos. El diccionario de datos es la estructura de la base de datos que almacena los metadatos. Es decir el diccionario de datos contiene la descripci\u00f3n de todos los datos de la base de datos.</p> </li> <li> <p>Herramientas para administrar y crear la estructura f\u00edsica de la base de datos. El SGBD proporciona herramientas para especificar la forma en la que se almacenar\u00e1n los datos en la computadora (o computadoras) que alojen la base de datos. Estas herramientas nos permitir\u00e1n dise\u00f1ar una forma de almacenamiento centrada en optimizar el acceso a los datos.</p> </li> <li> <p>Herramientas para la manipulaci\u00f3n de los datos. Nos permitir\u00e1n a\u00f1adir, modificar, suprimir o consultar datos (funci\u00f3n de manipulaci\u00f3n) de la forma m\u00e1s sencilla posible.</p> </li> <li> <p>Herramientas de recuperaci\u00f3n en caso de desastre. Si ocurre un mal funcionamiento del sistema, un fallo en la alimentaci\u00f3n del sistema, errores de red, etc. En ese caso los buenos SGBD poseen y proporcionan mecanismos para que se recupere la m\u00e1xima informaci\u00f3n posible y se asegure su integridad.</p> </li> <li> <p>Herramientas para la creaci\u00f3n y restablecimiento de copias de seguridad. Es una de las tareas fundamentales, ya que permite recuperar la informaci\u00f3n en caso de p\u00e9rdida de datos.</p> </li> <li> <p>Herramientas para la gesti\u00f3n de la comunicaci\u00f3n de la base de datos. Encargadas de configurar el hardware y software de conexi\u00f3n a la red. As\u00ed como los mecanismos necesarios para configurar adecuadamente el software que se encarga de recibir y comunicar las peticiones de los clientes.</p> </li> <li> <p>Herramientas para la creaci\u00f3n de aplicaciones de usuario. Es decir, herramientas para los programadores de aplicaciones, los cuales crean el software con el que los usuarios acceder\u00e1n de forma c\u00f3moda a la base de datos.</p> </li> <li> <p>Herramientas de instalaci\u00f3n y configuraci\u00f3n de la base de datos.</p> </li> <li> <p>Herramientas para la exportaci\u00f3n e importaci\u00f3n de datos a o desde otros sistemas.</p> </li> <li> <p>Herramientas para gestionar la seguridad. Permiten establecer privilegios y permisos diferentes para los usuarios, as\u00ed como impedir el acceso no deseado (funci\u00f3n de control).</p> </li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#03-niveles-de-abstraccion-de-una-base-de-datos","title":"03.-Niveles de abstracci\u00f3n de una base de datos","text":""},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#introduccion","title":"Introducci\u00f3n","text":"<p>En cualquier software siempre hay dos puntos de vista:</p> <ul> <li> <p>Nivel externo. Esta es la visi\u00f3n del software que tienen los usuarios</p> </li> <li> <p>Nivel interno. Visi\u00f3n de los creadores del software, que determina su forma de funcionar.</p> </li> </ul> <p>Esta separaci\u00f3n distingue al usuario, del programador que ha creado la aplicaci\u00f3n, y es crucial que sea as\u00ed. Del mismo modo una casa se la puede observar desde el punto de vista del inquilino de la misma o bien de las personas que la construyeron. Los primeros ven la funci\u00f3n real de la misma y los constructores nos podr\u00e1n hablar de los materiales empleados por ejemplo.</p> <p>En el caso de las bases de datos hay m\u00e1s niveles, m\u00e1s formas de observar la base de datos y estos niveles son manejados por los distintos usuarios de la base de datos. A eso se le llama los niveles de abstracci\u00f3n porque nos permite efectivamente abstraernos para observar la base de datos en base a diferentes intereses. Los usuarios podr\u00e1n entender la base de datos sin conocer los entresijos t\u00e9cnicos y los administradores podr\u00e1n trabajar con base de datos sin conocer la forma en la que los usuarios realmente a\u00f1aden los datos.</p> <p>Los niveles habituales son:</p> <ul> <li> <p>Nivel f\u00edsico. Nos permite saber la forma en la que est\u00e1 almacenada la base de datos. Por ejemplo en qu\u00e9 discos duros, qu\u00e9 archivos utiliza, de qu\u00e9 tipo son los archivos, bajo qu\u00e9 sistema operativo,\u2026 Este nivel es el que est\u00e1 m\u00e1s cercano a la visi\u00f3n de la base de datos que posee la computadora, por lo que es absolutamente dependiente del hardware y el software (especialmente del Sistema Operativo).</p> </li> <li> <p>Nivel interno. Un poco m\u00e1s cercano a la visi\u00f3n que tenemos las personas. Permite observar la base de datos como un conjunto de estructuras que relacionan la informaci\u00f3n humana con la informaci\u00f3n digital. A este nivel no se depende del hardware concreto que tengamos; es decir, no se habla de discos, servidores, archivos,\u2026 sino de las estructuras que disponemos en nuestro SGBD en particular para organizar los datos.</p> </li> <li> <p>Nivel conceptual. Es el nivel de mayor abstracci\u00f3n y el m\u00e1s importante. Se trata de una visi\u00f3n organizativa de los datos independiente tanto del hardware como del software que tengamos. Es el plano o modelo general de la base de datos y a este nivel es al que trabajan las o los analistas y dise\u00f1adores cuando crean el primer esquema de la base de datos. En ning\u00fan momento queda influido por el SGBD en particular que usemos.</p> </li> <li> <p>Nivel externo. Se trata de la visi\u00f3n de los datos que poseen los usuarios finales de la base de datos. Esa visi\u00f3n es la que obtienen a trav\u00e9s de las aplicaciones. Las aplicaciones creadas por los desarrolladores abstraen la realidad conceptual de modo que el usuario no conoce las relaciones entre los datos, como tampoco conoce d\u00f3nde realmente se est\u00e1n almacenando los datos. Es la forma en la que cualquier persona desea manejar una base de datos a trav\u00e9s de formularios, informes, listas,\u2026</p> </li> </ul> <p>La idea de estos niveles procede de la normalizaci\u00f3n hecha en el modelo ANSI/X3/SPARC y sigue estando muy presente en la gesti\u00f3n actual de las bases de datos.</p> <p>Este modelo dict\u00f3 que podemos pasar de unos modelos a otros de manera casi autom\u00e1tica utilizando un software adecuado. El modelo ANSI llama a ese software procesador de modelos y hoy en d\u00eda es lo que se conoce como herramientas CASE (Computer Aided for Software Engineering, Asistente Computerizado para Ingenier\u00eda del Software). Para cada nivel se realizan esquemas relacionados con ellos. As\u00ed hay esquemas externos (varios), esquema conceptual, esquema interno y esquema f\u00edsico que forman todos los aspectos de la base de datos.</p> <p></p> <p>En la Ilustraci\u00f3n se observa la distancia que poseen los usuarios de la base de datos respecto a la realidad f\u00edsica de la base de datos (representada con el cilindro). La f\u00edsica son los datos en crudo, es decir en formato binario dentro del disco o discos que los contienen. El esquema f\u00edsico es el que se realiza pensando m\u00e1s en esa realidad y los esquemas externos los que se crean pensando en la visi\u00f3n de los usuarios.</p> <p>Las dos columnas que aparecen en la imagen reflejan dos fronteras a tener en cuenta:</p> <ul> <li> <p>Independencia L\u00f3gica. Los esquemas de los niveles conceptual y externo son independientes del software concreto de base de datos que usemos; no dependen en absoluto de \u00e9l. Por ello esos esquemas nos valdr\u00edan para cualquier SGBD que utilicemos.</p> </li> <li> <p>Independencia F\u00edsica. La da la barrera entre el esquema f\u00edsico y el interno e indica que el esquema interno es independiente del hardware concreto que usemos. El esquema f\u00edsico se dise\u00f1a en base a un hardware concreto, pero \u00e9l interno no. Eso permite concentrarse en detalles m\u00e1s conceptuales.</p> </li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#04-recursos-humanos-de-las-bases-de-datos","title":"04.-Recursos humanos de las bases de datos","text":"<p>Intervienen (como ya se ha comentado) muchas personas en el desarrollo y manipulaci\u00f3n de una base de datos. Se describen, a continuaci\u00f3n, los actores m\u00e1s importantes.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#informaticos","title":"Inform\u00e1ticos","text":"<p>L\u00f3gicamente, son los profesionales que definen y preparan la base de datos. Pueden ser:</p> <ul> <li> <p>Directivos. Organizadores y coordinadores del proyecto a desarrollar y m\u00e1ximos responsables del mismo. Esto significa que son los encargados de decidir los recursos que se pueden utilizar, planificar el tiempo y las tareas, la atenci\u00f3n al usuario y de dirigir las entrevistas y reuniones pertinentes.</p> <p>Son especialistas en gesti\u00f3n de recursos, tanto materiales como humanos.</p> </li> <li> <p>Analistas. Son los encargados de controlar el desarrollo de la base de datos aprobada por la direcci\u00f3n. Dirigen a los desarrolladores y operadores. Normalmente son, adem\u00e1s, los dise\u00f1adores de la base de datos: es decir, crean el esquema conceptual de la misma.</p> </li> <li> <p>Administradores de las bases de datos. Encargados de crear el esquema interno de la base de datos. Tambi\u00e9n gestionan el correcto funcionamiento del SGBD. Sus tareas incluyen la planificaci\u00f3n de copia de seguridad, gesti\u00f3n de usuarios y permisos, optimizaci\u00f3n del rendimiento, monitorizaci\u00f3n de problemas y creaci\u00f3n de los objetos de la base de datos.</p> </li> <li> <p>Desarrolladores o programadores. Encargados de la realizaci\u00f3n de las aplicaciones de usuario para que estos accedan a la base de datos.</p> </li> <li> <p>Equipo de mantenimiento. Tambi\u00e9n se les llama operadores. Encargados de dar soporte a los usuarios en el trabajo diario (suelen incorporar adem\u00e1s tareas administrativas como la creaci\u00f3n de copias de seguridad por ejemplo o el arreglo de problemas de red por ejemplo).</p> </li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#usuarios","title":"Usuarios","text":"<ul> <li> <p>Expertos Realizan operaciones avanzadas sobre la base de datos. Normalmente conocen el lenguaje de manipulaci\u00f3n de datos (DML) para acceder a la base de datos. Son usuarios, por lo tanto, con conocimientos inform\u00e1ticos que se encargan en las empresas de los clientes de algunas acciones m\u00e1s complejas sobre la base de datos que las que realizan los usuarios habituales.</p> </li> <li> <p>Habituales. Utilizan las aplicaciones creadas por los desarrolladores para consultar y actualizar los datos. Son los que trabajan en la empresa a diario con estas herramientas y el objetivo fundamental de todo el desarrollo de la base de datos.</p> </li> <li> <p>Ocasionales. Son usuarios que utilizan un acceso m\u00ednimo a la base de datos a trav\u00e9s de una aplicaci\u00f3n que permite consultar ciertos datos. Ser\u00edan por ejemplo los usuarios que consultan el horario de trenes a trav\u00e9s de Internet. Aunque se les llama ocasionales son el n\u00facleo del trabajo con la base de datos ya que son los que m\u00e1s la utilizan (ya que son sus usuarios m\u00e1s numerosos) y son, por ejemplo, los que visitan la base de datos para realizar compras o para informarse del negocio representado en la base de datos.</p> </li> </ul> <p></p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#05-proceso-de-creacion-y-manipulacion-de-una-base-de-datos","title":"05.-Proceso de creaci\u00f3n y manipulaci\u00f3n de una base de datos","text":""},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#fase-de-creacion","title":"Fase de creaci\u00f3n:","text":"<ol> <li> <p>El analista o dise\u00f1ador crea el esquema conceptual. En muchas ocasiones, utilizando una herramienta CASE para dise\u00f1ar el esquema de forma m\u00e1s c\u00f3moda.</p> </li> <li> <p>El administrador de la base de datos (DBA) recoge ese esquema y crea el esquema interno de la base de datos. Tambi\u00e9n se encarga, previamente, de determinar el SGBD id\u00f3neo y de configurar el software del SGBD as\u00ed como de establecer las pol\u00edticas de copia de seguridad.</p> </li> <li>Los desarrolladores tambi\u00e9n recogen el esquema conceptual y utilizan las aplicaciones necesarias para generar los esquemas externos, que realmente se traducir\u00e1n en programas y aplicaciones, que necesitan los usuarios.</li> </ol>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#fase-de-manipulacion","title":"Fase de manipulaci\u00f3n:","text":"<p>Ocurre con la base de datos ya creada y en funcionamiento.</p> <ol> <li>El usuario realiza una operaci\u00f3n sobre la base de datos (una consulta, modifica o a\u00f1ade un dato, etc.)</li> <li>Las aplicaciones las traducen a su forma conceptual utilizando el diccionario de datos, que posee todos los metadatos necesarios.</li> <li>El esquema conceptual es traducido por la SGBD a su forma interna, nuevamente con ayuda del Diccionario de Datos.</li> <li>EL SGBD se comunica con el Sistema Operativo para pedir que acceda al disco (estamos, por lo tanto ya en el nivel f\u00edsico) y recoja los datos requeridos (siempre con ayuda del Diccionario de Datos).</li> <li>El Sistema Operativo accede al almacenamiento f\u00edsico correspondiente y devuelve los datos al SGBD.</li> <li>El SGBD transforma los datos internos en datos conceptuales y los entrega a la aplicaci\u00f3n.</li> <li>La aplicaci\u00f3n muestra los datos habi\u00e9ndolos traducido a una forma (externa) amigable y apta para ser entregada al usuario que hizo la petici\u00f3n.</li> </ol>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#06-estructura-multicapa","title":"06.-Estructura multicapa","text":"<p>El proceso que realiza un SGBD para acceder a los datos est\u00e1 en realidad formado por varias capas que act\u00faan como interface. El usuario nunca accede a los datos directamente. Estas capas son las que consiguen implementar los niveles de abstracci\u00f3n de la base de datos.</p> <p>Fue el propio organismo ANSI (en su modelo ANSI/X3/SPARC) la que introdujo una mejora de su modelo de bases de datos en 1988 a trav\u00e9s de un grupo de trabajo llamado UFTG (User Facilities Task Group, grupo de trabajo para las facilidades de usuario). Este modelo toma como objeto principal al usuario habitual de la base de datos y modela el funcionamiento de la base de datos en una sucesi\u00f3n de capas cuya finalidad es ocultar y proteger la parte interna de las bases de datos.</p> <p>Desde esta \u00f3ptica, para llegar a los datos hay que pasar una serie de capas que desde la parte m\u00e1s externa poco a poco van entrando m\u00e1s en la realidad f\u00edsica de la base de datos.</p> <p>Este marco sigue teniendo vigencia actualmente e indica que el acceso a los datos no es instant\u00e1neo, que los datos est\u00e1n protegidos de los usuarios que pasan (sin saberlo) por varias capas de proceso antes de que sus peticiones a la base de datos sean atendidas.</p> <p>Se explican las capas en detalle</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#aplicaciones-de-usuario","title":"Aplicaciones de usuario","text":"<p>Es la capa a la que acceden los usuarios. Proporciona el SGBD a los usuarios un acceso m\u00e1s sencillo a los datos. Son, en definitiva, las p\u00e1ginas web y los programas con las que los usuarios manejan la base de datos. Permite abstraer la realidad de la base de datos a las usuarias y usuarios, mostrando la informaci\u00f3n de una forma m\u00e1s humana.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#capa-de-acceso-a-datos","title":"Capa de acceso a datos","text":"<p>La capa de acceso a datos es la que permite comunicar a las aplicaciones de usuario con el diccionario de datos. Es un software (un driver o controlador, en realidad) que se encarga traducir las peticiones del usuario para que lleguen de forma correcta a la base de datos y \u00e9sta pueda responder de forma adecuada.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#diccionario-de-datos","title":"Diccionario de datos","text":"<p>Se trata de una estructura interna del SGBD que contiene todos los metadatos. Esta estructura es la que permite pasar de un nivel a otro.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#nucleo","title":"N\u00facleo","text":"<p>El n\u00facleo de la base de datos es la capa encargada de traducir todas las instrucciones requeridas y prepararlas para su correcta interpretaci\u00f3n por parte del sistema. Realiza la traducci\u00f3n f\u00edsica de las peticiones.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#sistema-operativo","title":"Sistema operativo","text":"<p>Es una capa externa al software SGBD pero es la \u00fanica capa que realmente accede a los datos en s\u00ed. En realidad los SGBD no acceden directamente al disco, sino que piden al Sistema Operativo que lo haga, ya que es el que maneja el sistema de discos.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#07-funcionamiento-del-sgbd","title":"07.-Funcionamiento del SGBD","text":"<p>La siguiente ilustraci\u00f3n presenta el funcionamiento t\u00edpico de un SGBD. En ella se reproduce la comunicaci\u00f3n entre un usuario que desea acceder a los datos y el SGBD:</p> <p></p> <ol> <li>Los usuarios utilizan una aplicaci\u00f3n para acceder a los datos. Estamos en el nivel externo de la base de datos, por lo que la propia aplicaci\u00f3n traduce la petici\u00f3n que hizo el usuario de forma sencilla, a una petici\u00f3n entendible por la capa de acceso a los datos.</li> <li> <p>El proceso cliente es el software de acceso a la base de datos y que est\u00e1 instalado en el lado del cliente. Se encarga simplemente de recoger y enviar la petici\u00f3n (comprobando antes si hay comunicaci\u00f3n con el servidor de la base de datos).</p> </li> <li> <p>A trav\u00e9s de la red (normalmente) el proceso cliente se comunica con el proceso servidor, que es el software de comunicaci\u00f3n instalado en el lado del servidor. Ambos procesos (cliente y servidor) forman la capa de acceso a los datos.</p> </li> <li> <p>Estando ya en el servidor, la petici\u00f3n pasa al software del Sistema Gestor de Bases de Datos (habr\u00e1 aqu\u00ed, como se ha visto en el apartado anterior una traducci\u00f3n de datos, desde el nivel externo al nivel interno).</p> </li> <li> <p>El SGBD, comprobando el diccionario de datos, comprueba si la petici\u00f3n es correcta.</p> </li> <li> <p>El SGBD tambi\u00e9n revisa el diccionario de datos (si la petici\u00f3n es correcta) para saber con exactitud en qu\u00e9 archivos y en qu\u00e9 parte dentro de ellos, se encuentran los datos requeridos</p> </li> <li> <p>Con la informaci\u00f3n sobre d\u00f3nde est\u00e1n los datos, el SGBD hace una petici\u00f3n al Sistema Operativo, que es el que tiene capacidad realmente de acceder a los archivos de datos. Por ello la petici\u00f3n del SGBD se traduce al formato utilizado por el Sistema Operativo.El Sistema Operativo accede a los datos.</p> </li> <li> <p>El Sistema Operativo recibe los datos.</p> </li> <li> <p>Se entregan los datos al Sistema Gestor de Bases de Datos o, si ha habido un error al acceder a los datos, se indica el error ocurrido.</p> </li> <li> <p>El SGBD traduce los datos a una forma m\u00e1s conceptual y se los entrega al proceso servidor.</p> </li> <li> <p>Los datos se entregan al proceso cliente.</p> </li> <li> <p>Los datos llegan a la aplicaci\u00f3n.</p> </li> <li> <p>La aplicaci\u00f3n de usuario traduce los datos recibidos en informaci\u00f3n presentada de la forma m\u00e1s conveniente para el usuario.</p> </li> </ol>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#08-formas-de-ejecucion-de-un-sgbd","title":"08.-Formas de ejecuci\u00f3n de un SGBD","text":""},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#sgbd-monocapa","title":"SGBD monocapa","text":"<p>Se trata de Sistemas Gestores instalados en una m\u00e1quina desde la que se conectan los propios usuarios y administradores. Es decir, todo el sistema est\u00e1 en una sola m\u00e1quina.</p> <p></p> <p>Es un modelo que s\u00f3lo se utiliza con bases de datos peque\u00f1as y poca cantidad de conexiones. La popular Access de Microsoft es considerada un sistema gestor monocapa (aunque tiene algunas posibilidades para utilizar en dos capas).</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#sgbd-bicapa","title":"SGBD bicapa","text":"<p>Usa un modelo de funcionamiento tipo cliente/servidor. La base de datos y el sistema gestor se alojan en un servidor al cual se conectan los usuarios desde m\u00e1quinas clientes. Un software de comunicaciones se encarga de permitir el acceso a trav\u00e9s de la red. Los clientes deben instalar el software cliente de acceso seg\u00fan las instrucciones de configuraci\u00f3n del administrador.</p> <p>Hay dos posibilidades:</p> <ul> <li> <p>Arquitectura cliente/servidor \u00fanico. Un solo servidor gestiona la base de datos, todos los clientes se conectan a \u00e9l para realizar las peticiones a la base de datos.</p> </li> <li> <p>Arquitectura cliente/multiservidor. La base de datos se distribuye entre varios servidores. El cliente no sabe realmente a qu\u00e9 servidor se conecta; el software de control de comunicaciones se encargar\u00e1 de dirigir al usuario al servidor adecuado. De forma l\u00f3gica, es como si se tratara de un solo servidor aunque f\u00edsicamente sean muchos (el cliente no percibe que haya m\u00e1s de un servidor).</p> </li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/03.-Funcionamiento%20de%20un%20SGBD/#sgbd-de-tres-o-mas-capas","title":"SGBD de tres o m\u00e1s capas","text":"<p>En este caso entre el cliente y el servidor hay al menos una capa intermedia (puede haber varias). Esa capa (o capas) se encarga de recoger las peticiones de los clientes y luego de comunicarse con el servidor (o servidores) de bases de datos para recibir la respuesta y enviarla al cliente.</p> <p>El caso t\u00edpico es que la capa intermedia sea un servidor web, que recibe las peticiones a trav\u00e9s de aplicaciones web; de este modo para conectarse a la base de datos, el usuario solo requiere un navegador web, que es un software muy habitual en cualquier m\u00e1quina y por lo tanto no requiere una instalaci\u00f3n de software adicional en la m\u00e1quina cliente.</p> <p></p> <p>Este modelo es el que m\u00e1s se est\u00e1 potenciando en la actualidad por motivos de seguridad y portabilidad de la base de datos.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/04.-Tipos%20de%20SGBD/","title":"01.-Introducci\u00f3n","text":"<p>Como se ha visto en los apartados anteriores, resulta que cada SGBD puede utilizar un modelo diferente para los datos. Por lo que hay modelos conceptuales diferentes seg\u00fan que SGBD utilicemos. Esto da lugar a un diagrama de trabajo para los profesionales de la base de datos que permite saber qu\u00e9 esquemas hay que realizar (y en qu\u00e9 orden) para crear una base de datos.</p> <p></p> <p>El punto de partida es el uso en el mundo real que tendr\u00e1 la base de datos. Ese punto es en el que est\u00e1n los usuarios y es crucial tenerlo muy claro. El punto final es el almacenamiento f\u00edsico de la base de datos.</p> <p>En este esquema aparece el llamado Esquema L\u00f3gico, que permite pasar de forma m\u00e1s gradual del esquema conceptual al esquema interno.</p> <p>No obstante existen modelos l\u00f3gicos comunes, ya que hay SGBD de diferentes tipos. En la realidad el modelo conceptual cl\u00e1sico se modifica para que existan dos modelos internos: el modelo l\u00f3gico (referido a cualquier SGBD de ese tipo) y el modelo conceptual propiamente interno (aplicable s\u00f3lo a un SGBD en particular). De hecho, en la pr\u00e1ctica, al definir las bases de datos desde el mundo real hasta llegar a los datos f\u00edsicos se pasa por todos los esquemas se\u00f1alados en la Ilustraci\u00f3n.</p> <p>Por lo tanto la diferencia entre los distintos SGBD est\u00e1 en que proporcionan diferentes modelos l\u00f3gicos.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/04.-Tipos%20de%20SGBD/#diferencias-entre-el-modelo-logico-y-el-conceptual","title":"Diferencias entre el modelo l\u00f3gico y el conceptual","text":"<ul> <li> <p>El modelo conceptual es independiente del DBMS que se vaya a utilizar. El l\u00f3gico depende de un tipo de SGBD en particular</p> </li> <li> <p>El modelo l\u00f3gico est\u00e1 m\u00e1s cerca del modelo f\u00edsico, el que utiliza internamente el ordenador</p> </li> <li> <p>El modelo conceptual es el m\u00e1s cercano al usuario, el l\u00f3gico es el encargado de establecer el paso entre el modelo conceptual y el modelo f\u00edsico del sistema.</p> </li> </ul> <p>Algunos ejemplos de modelos conceptuales son:</p> <ul> <li> <p>Modelo Entidad Relaci\u00f3n</p> </li> <li> <p>Modelo RM/T</p> </li> <li> <p>Modelo UML</p> </li> </ul> <p>Ejemplos de modelos l\u00f3gicos son:</p> <ul> <li> <p>Modelo Relacional</p> </li> <li> <p>Modelo Codasyl</p> </li> <li> <p>Modelo Jer\u00e1rquico</p> </li> </ul> <p>A continuaci\u00f3n se comentar\u00e1n los modelos l\u00f3gicos m\u00e1s importantes.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/04.-Tipos%20de%20SGBD/#02-modelo-jerarquico","title":"02.-Modelo jer\u00e1rquico","text":"<p>Era utilizado por los primeros SGBD, desde que IBM lo defini\u00f3 para su IMS (Information Management System, Sistema Administrador de Informaci\u00f3n) en 1970. Se le llama tambi\u00e9n modelo en \u00e1rbol debido a que utiliza una estructura en \u00e1rbol para organizar los datos.</p> <p>La informaci\u00f3n se organiza con un jerarqu\u00eda en la que la relaci\u00f3n entre las entidades de este modelo siempre es del tipo padre / hijo. De esta forma hay una serie de nodos que contendr\u00e1n atributos y que se relacionar\u00e1n con nodos hijos de forma que puede haber m\u00e1s de un hijo para el mismo padre (pero un hijo s\u00f3lo tiene un padre).</p> <p></p> <p>Los datos de este modelo se almacenan en estructuras l\u00f3gicas llamadas segmentos. Los segmentos se relacionan entre s\u00ed utilizando arcos.</p> <p>La forma visual de este modelo es de \u00e1rbol invertido, en la parte superior est\u00e1n los padres y en la inferior los hijos.</p> <p>Este esquema est\u00e1 en absoluto desuso ya que no es v\u00e1lido para modelar la mayor\u00eda de problemas de bases de datos. Su virtud era la facilidad de manejo ya que s\u00f3lo existe un tipo de relaci\u00f3n (padre/hijo) entre los datos; su principal desventaja es que no basta para representar la mayor\u00eda de relaciones. Adem\u00e1s no manten\u00eda la independencia con la base de datos f\u00edsica.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/04.-Tipos%20de%20SGBD/#03-modelo-en-red-codasyl","title":"03.-Modelo en red (Codasyl)","text":"<p>Es un modelo que ha tenido una gran aceptaci\u00f3n (aunque apenas se utiliza actualmente). En especial se hizo popular la forma definida por el est\u00e1ndar Codasyl a principios de los 70 que se convirti\u00f3 en el modelo en red m\u00e1s utilizado.</p> <p></p> <p>El modelo en red organiza la informaci\u00f3n en registros (tambi\u00e9n llamados nodos) y enlaces. En los registros se almacenan los datos, mientras que los enlaces permiten relacionar estos datos. Las bases de datos en red son parecidas a las jer\u00e1rquicas s\u00f3lo que en ellas puede haber m\u00e1s de un padre.</p> <p>En este modelo se pueden representar perfectamente cualquier tipo de relaci\u00f3n entre los datos (aunque el Codasyl restring\u00eda un poco las relaciones posibles), pero hace muy complicado su manejo.</p> <p>Pose\u00eda un lenguaje poderoso de trabajo con la base de datos. El problema era la complejidad para trabajar con este modelo tanto para manipular los datos como programar aplicaciones de acceso a la base de datos. Tampoco manten\u00eda una buena independencia con la f\u00edsica de la base de datos.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/04.-Tipos%20de%20SGBD/#04-modelo-relacional","title":"04.-Modelo Relacional","text":"<p>Es el modelo m\u00e1s popular. Los datos se organizan en tablas y estas en columnas y filas de datos. Las tablas se relacionan entre s\u00ed para ligar todos los datos.</p> <p>Se basa en la teor\u00eda de conjuntos y consigue una gran separaci\u00f3n entre lo conceptual y lo f\u00edsico, consiguiendo su total independencia. Tiene un lenguaje considerado est\u00e1ndar, el SQL y una enorme red de usuarios y documentaci\u00f3n que facilita su aprendizaje. Adem\u00e1s dota de una gran facilidad para establecer reglas complejas a los datos.</p> <p>El problema es que la simplicidad de manejo y la independencia que consigue se logra a base de un software muy complejo que requiere tambi\u00e9n un hardware poderoso.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/04.-Tipos%20de%20SGBD/#05-modelo-de-bases-de-datos-orientadas-a-objetos","title":"05.-Modelo de bases de datos orientadas a objetos","text":"<p>Desde la aparici\u00f3n de la programaci\u00f3n orientada a objetos (POO u OOP) se empez\u00f3 a pensar en bases de datos adaptadas a estos lenguajes. La programaci\u00f3n orientada a objetos permite cohesionar datos y procedimientos, haciendo que se dise\u00f1en estructuras que poseen datos (atributos) en las que se definen los procedimientos (operaciones) que pueden realizar con los datos. En las bases orientadas a objetos se utiliza esta misma idea.</p> <p>A trav\u00e9s de este concepto se intenta que estas bases de datos consigan arreglar las limitaciones de las relacionales. Por ejemplo el problema de la herencia (el hecho de que no se puedan realizar relaciones de herencia entre las tablas), tipos definidos por el usuario, disparadores (triggers) almacenables en la base de datos, soporte multimedia...</p> <p>Se supone que son las bases de datos de tercera generaci\u00f3n (la primera fue las bases de datos en red y la segunda las relacionales), lo que significa que el futuro parece estar a favor de estas bases de datos. Pero siguen sin reemplazar a las relacionales, aunque son el tipo de base de datos que m\u00e1s est\u00e1 creciendo en los \u00faltimos a\u00f1os.</p> <p>Su modelo conceptual se suele dise\u00f1ar usando la notaci\u00f3n UML (Unified Modeling Language) y el l\u00f3gico usando ODMG (Object Data Management Group, grupo de administraci\u00f3n de objetos de datos), organismo que intenta crear est\u00e1ndares para este modelo.</p> <p>Sus ventajas est\u00e1n en el hecho de usar la misma notaci\u00f3n que la de los programas (lo que facilita la tarea de su aprendizaje a los analistas y desarrolladores) y que el significado de los datos es m\u00e1s completo. Lo malo es que no posee un lenguaje tan poderoso como el modelo relacional para manipular datos y metadatos, que tiene m\u00e1s dificultades para establecer reglas a los datos y que al final es m\u00e1s complejo para manejar los datos.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/04.-Tipos%20de%20SGBD/#06-bases-de-datos-objeto-relacionales","title":"06.-Bases de datos objeto-relacionales","text":"<p>Tratan de ser un h\u00edbrido entre el modelo relacional y el orientado a objetos. El problema de las bases de datos orientadas a objetos es que requieren reinvertir capital y esfuerzos de nuevo para convertir las bases de datos relacionales en bases de datos orientadas a objetos. En las bases de datos objeto relacionales se intenta conseguir una compatibilidad relacional dando la posibilidad de integrar mejoras de la orientaci\u00f3n a objetos.</p> <p>Estas bases de datos se basan en el est\u00e1ndar ISO SQL 2000 y los siguientes. En ese est\u00e1ndar se a\u00f1ade a las bases relacionales la posibilidad de almacenar procedimientos de usuario, triggers, tipos definidos por el usuario, consultas recursivas, bases de datos OLAP, tipos LOB,...</p> <p>Las \u00faltimas versiones de la mayor\u00eda de las cl\u00e1sicas grandes bases de datos relacionales (Oracle, SQL Server, DB2, ...) son objeto relacionales.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/04.-Tipos%20de%20SGBD/#07-bases-de-datos-nosql","title":"07.-Bases de datos NoSQL","text":"<p>En los \u00faltimos a\u00f1os ha aparecido todo un g\u00e9nero de bases de datos (de varios tipos) que intentan paliar deficiencias detectadas en el modelo relacional.</p> <p>El dominio de este modelo parec\u00eda demostrar, durante d\u00e9cadas, que era el tipo ideal de base de datos. El cambio de perspectiva se ha producido por la alt\u00edsima demanda de servicios que requiere Internet. En especial si lo que se requiere es escribir o modificar datos, ya que actualmente todos los usuarios de Internet crean much\u00edsimos datos cada d\u00eda que requieren ser almacenados inmediatamente (el caso m\u00e1s claro es el de las redes sociales).</p> <p>Con este panorama han aparecido nuevos tipos de bases de datos y se han modificado y actualizado tipos antiguos que ahora parecen \u00fatiles. Lo que aportan la mayor\u00eda de estos tipos de bases de datos, es el uso de otro tipo de esquemas conceptuales e internos m\u00e1s apropiados para este tipo de demandas de usuario.</p> <p>En resumen las bases de datos NoSQL renuncian al modelo relacional para paliar las carencias del modelo relacional en estos aspectos:</p> <ul> <li> <p>Aceptar un enorme cantidad peticiones de consulta y especialmente de modificaci\u00f3n de datos por minuto</p> </li> <li> <p>Gestionar datos muy heterog\u00e9neos (irregulares, con tipos de datos cambiantes)</p> </li> <li> <p>Gestionar datos que se relacionan de manera muy compleja</p> </li> <li> <p>Usar otros lenguajes (diferentes a SQL), m\u00e1s aptos para otras tareas</p> </li> </ul> <p>Esto no significa que cada base de datos NoSQL sea capaz de mejorar en todos los aspectos anteriores, cada tipo de base de datos NoSQL est\u00e1 pensado para algunos de los puntos anteriores.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/","title":"01.-Introducci\u00f3n","text":"<p>Los ficheros o archivos son la herramienta fundamental de trabajo en una computadora todav\u00eda a d\u00eda de hoy. Las computadoras siguen almacenando la informaci\u00f3n en ficheros; eso s\u00ed, su estructura es cada vez m\u00e1s compleja.</p> <p>Los datos deben de ser almacenados en componentes de almacenamiento permanente, lo que se conoce como memoria secundaria (discos duros u otras unidades de disco). En esas memorias, los datos se estructuran en archivos (tambi\u00e9n llamados ficheros).</p> <p>Un fichero es una secuencia de n\u00fameros binarios que organiza informaci\u00f3n relacionada a un mismo aspecto.</p> <p>En general sobre los archivos se pueden realizar las siguientes operaciones:</p> <ul> <li> <p>Abrir (open). Prepara el fichero para su proceso.</p> </li> <li> <p>Cerrar (close). Cierra el fichero impidiendo su proceso inmediato.</p> </li> <li> <p>Leer (read). Obtiene informaci\u00f3n del fichero.</p> </li> <li> <p>Escribir (write). Graba informaci\u00f3n en el fichero.</p> </li> <li> <p>Posicionarse (seek). Coloca el puntero de lectura en una posici\u00f3n concreta del mismo (no se puede realizar en todos los tipos de ficheros).</p> </li> <li> <p>Comprobar fin de fichero (eof). Indica si hemos llegado al final del fichero.</p> </li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#02-uso-de-archivos-para-grabar-datos","title":"02.-Uso de archivos para grabar datos","text":"<p>Los archivos, como herramienta para almacenar informaci\u00f3n, tomaron la terminolog\u00eda del mundo de la oficina empresarial. As\u00ed la palabra dato hace referencia a un valor sea un n\u00famero o un texto o cualquier otro tipo de datos almacenable.</p> <p>Cuando podemos distinguir datos referidos a una misma propiedad real a la que podemos poner un nombre, hablamos de campos. As\u00ed: S\u00e1nchez, Rodr\u00edguez, Serrat y Crespo son datos que perfectamente podr\u00edan encajar en un campo llamado Primer Apellido.</p> <p>Los datos que se refieren al mismo elemento real (una persona, una factura, un movimiento bancario,\u2026) se agrupan en registros. En un fichero de datos personales, cada registro ser\u00eda una persona; cada campo ser\u00eda cada propiedad distinguible en la persona.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#03-tipos-de-archivos","title":"03.-Tipos de archivos","text":""},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#ficheros-secuenciales","title":"ficheros secuenciales","text":"<p>En estos ficheros, los datos se organizan secuencialmente en el orden en el que fueron grabados. Para leer los \u00faltimos datos hay que leer los anteriores. Es decir leer el registro n\u00famero nueve, implica leer previamente los ocho anteriores.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#ventajas","title":"ventajas","text":"<ul> <li> <p>R\u00e1pidos para obtener registros contiguos de una base de datos</p> </li> <li> <p>No hay huecos en el archivo al grabarse los datos seguidos, datos m\u00e1s compactos.</p> </li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#desventajas","title":"desventajas","text":"<ul> <li> <p>Consultas muy lentas al tener que leer todos los registros anteriores en el orden del archivo respecto al que queremos leer. Es decir, que si queremos leer el quinto registro, hay que leer los cuatro anteriores.</p> </li> <li> <p>Algoritmos de lectura y escritura complejos. No es f\u00e1cil hacer operaciones avanzadas con los datos</p> </li> <li> <p>No se pueden eliminar registros del fichero (se pueden marcar de manera especial para que no sean tenidos en cuenta, pero no se pueden borrar)</p> </li> <li> <p>El borrado provoca archivos que no son compactos</p> </li> <li> <p>La ordenaci\u00f3n de los datos requiere leer todos los datos, reorganizarlos en memoria y volver a grabarles en el archivo en el orden correcto. Se trata de una operaci\u00f3n excesivamente lenta</p> </li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#ficheros-de-acceso-directo-o-aleatorio","title":"ficheros de acceso directo o aleatorio","text":"<p>En estos ficheros se puede leer una posici\u00f3n concreta directamente; bastar\u00e1 saber la posici\u00f3n exacta (normalmente en bytes) del dato a leer para obtenerle. Es decir, posicionarnos en el quinto registro se har\u00eda de golpe, con una sola instrucci\u00f3n. Lo \u00fanico que necesitamos saber el tama\u00f1o de cada registro, que en este tipo de ficheros debe de ser el mismo. Suponiendo que cada registro ocupa 100 bytes, el quinto registro comenzar\u00e1 en la posici\u00f3n 400. A partir de esa posici\u00f3n podremos leer todos los datos del registro.</p> <p></p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#ventajas_1","title":"ventajas","text":"<ul> <li> <p>Acceso r\u00e1pido a un registro concreto. No necesita leer los datos anteriores</p> </li> <li> <p>La modificaci\u00f3n de datos es m\u00e1s sencilla</p> </li> <li> <p>Permiten acceso secuencial adem\u00e1s del aleatorio (por lo que mejoran el caso anterior)</p> </li> <li> <p>Permiten tanto leer como escribir a sin necesidad de cerrar el archivo.</p> </li> <li> <p>Aptos para organizaciones relativas directas, en las que la clave del registro se relaciona con su posici\u00f3n en el archivo.</p> </li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#desventajas_1","title":"desventajas","text":"<ul> <li> <p>Salvo en archivos relativos directos, no es apto por s\u00ed mismo para usar en bases de datos, ya que los datos se organizan en base a una clave que casi nunca coincide con la posici\u00f3n del registro en el archivo</p> </li> <li> <p>No se pueden borrar datos (s\u00ed marcar para borrado, pero generar\u00e1n huecos)</p> </li> <li> <p>Las consultas sobre multitud de registros son m\u00e1s lentas que en el caso anterior.</p> </li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#ficheros-secuenciales-encadenados","title":"ficheros secuenciales encadenados","text":"<p>Son ficheros con registros grabados secuencialmente que podr\u00edamos recorrer registro a registro o de forma aleatoria. Adem\u00e1s cada registro posee un campo que contiene la direcci\u00f3n de otro registro (a este tipo de campos se les llama punteros). Cada registro usa su puntero para indicar la direcci\u00f3n del siguiente registro. Usando los punteros podremos recorrer los registros en un orden concreto.</p> <p>Cuando aparece un nuevo registro, se a\u00f1ade al final del archivo, pero los punteros se reordenan para que se mantenga el orden.</p> <p></p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#ventajas_2","title":"ventajas","text":"<ul> <li> <p>El fichero mantiene el orden en el que se a\u00f1adieron los registros y un segundo orden en base a una clave. Incluso a\u00f1adiendo m\u00e1s punteros a cada registro podremos establecer m\u00e1s formas de ordenar los registros.</p> </li> <li> <p>La operaci\u00f3n de ordenaci\u00f3n no requiere reorganizar todo el fichero, sino s\u00f3lo modificar los punteros</p> </li> <li> <p>Posee las mismas ventajas que el acceso secuencial y el acceso aleatorio</p> </li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#desventajas_2","title":"desventajas","text":"<ul> <li> <p>No se borran los registros, sino que se marcan para ser ignorados. Por lo que se malgasta espacio</p> </li> <li> <p>A\u00f1adir registros o modificar las claves son operaciones que requieren recalcular los punteros por lo que llevan m\u00e1s tiempo que en los casos anteriores</p> </li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#ficheros-secuenciales-indexados","title":"ficheros secuenciales indexados","text":"<p>Se utilizan dos ficheros para los datos, uno posee los registros almacenados de forma secuencial, pero que permite su acceso aleatorio. El otro posee una tabla con punteros a la posici\u00f3n ordenada de los registros. Ese segundo fichero es el \u00edndice, una tabla con la ordenaci\u00f3n deseada para los registros y la posici\u00f3n que ocupan en el archivo.</p> <p>El archivo de \u00edndices posee unas cuantas entradas s\u00f3lo en las que se indica la posici\u00f3n de ciertos valores claves en el archivo (cada 10, 15 ,20,... registros del archivo principal se a\u00f1ade una entrada en el de \u00edndices). El archivo principal tiene que estar siempre ordenado y as\u00ed cuando se busca un registro, se busca su valor clave en la tabla de \u00edndices, la cual poseer\u00e1 la posici\u00f3n del registro buscado. Desde esa posici\u00f3n se busca secuencialmente el registro hasta encontrarlo.</p> <p>Existe un tercer archivo llamado de desbordamiento u overflow en el que se colocan los nuevos registros que se van a\u00f1adiendo (para no tener que ordenar el archivo principal cada vez que se a\u00f1ade un nuevo registro) este archivo est\u00e1 desordenado. Se utiliza s\u00f3lo si se busca un registro y no se encuentra en el archivo principal. En ese caso se recorre todo el archivo de overflow hasta encontrarlo.</p> <p>Para no tener demasiados archivos en overflow (lo que restar\u00eda velocidad ya que no utilizar\u00edamos el archivo de \u00edndices que es el que da velocidad), cada cierto tiempo se reorganiza el archivo principal, ordenando los datos en el orden correcto y recalculando el archivo de \u00edndices. Ejemplo:</p> <p></p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#ventajas_3","title":"ventajas","text":"<ul> <li> <p>El archivo est\u00e1 siempre ordenado de forma secuencial en base a una clave. Por lo que la simple lectura secuencial del archivo obtiene un listado ordenado de los datos.</p> </li> <li> <p>La b\u00fasqueda de datos es rapid\u00edsima</p> </li> <li> <p>Permite la lectura secuencial (que adem\u00e1s ser\u00e1 en el orden de la clave)</p> </li> <li> <p>A\u00f1adir un solo registro no conlleva un tiempo extra como en el caso anterior</p> </li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#desventajas_3","title":"desventajas","text":"<ul> <li>Para un uso \u00f3ptimo hay que reorganizar el archivo principal cada cierto tiempo y esta operaci\u00f3n es muy costosa ya que hay que reescribir de nuevo y de forma ordenada todo el archivo con el \u00e1rea primeria, adem\u00e1s de reorganizar el \u00e1rea de \u00edndices y eliminar el fichero de desbordamiento. Es tan costosa que se hace muy poco a menudo, pero en archivos de datos que se modifican muy a menudo, no reorganizar provocar\u00eda un \u00e1rea de desbordamiento enorme y perder\u00edamos las ventajas de este modelo.</li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#ficheros-indexado-encadenados","title":"ficheros indexado-encadenados","text":"<p>Utiliza punteros e \u00edndices, es una variante encadenada del caso anterior. Hay un fichero de \u00edndices equivalente al comentado en el caso anterior y otro fichero de tipo encadenado con punteros a los siguientes registros. La diferencia est\u00e1 en que este segundo fichero que contiene el \u00e1rea primaria de los datos, no est\u00e1 ordenado secuencialmente, sino que el orden se realizar\u00eda recorriendo un puntero (como en el caso de los ficheros secuencialmente encadenados).</p> <p>Cuando se a\u00f1aden registros se a\u00f1aden en un tercer fichero llamado de desbordamiento u overflow. En el \u00e1rea de desbordamiento los datos se almacenan secuencialmente, se accede a ellos si se busca un dato y no se encuentra el \u00e1rea primaria.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#ventajas_4","title":"ventajas","text":"<ul> <li>Posee las mismas ventajas que el modelo anterior adem\u00e1s de que la reordenaci\u00f3n es m\u00e1s r\u00e1pida ya que s\u00f3lo requiere modificar los punteros y el \u00e1rea de \u00edndices (no requiere reordenar todos los datos del \u00e1rea primaria).</li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#desventajas_4","title":"desventajas","text":"<ul> <li>Requieren compactar los datos a menudo para reorganizar \u00edndices y quitar el fichero de desbordamiento y es una operaci\u00f3n lenta (aunque mucho menos lenta que en el caso anterior)</li> </ul> <p>Ilustraci\u00f3n 16. Ejemplo fichero secuencial indexado y encadenado</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#04-operaciones-relacionadas-con-uso-de-archivos-en-bases-de-datos","title":"04.-Operaciones relacionadas con uso de archivos en bases de datos","text":""},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#borrado-y-recuperacion-de-registros","title":"borrado y recuperaci\u00f3n de registros","text":"<p>Algunos de los tipos de ficheros vistos anteriormente no admiten el borrado real de datos, sino que s\u00f3lo permiten a\u00f1adir un dato que indica si el registro est\u00e1 borrado o no. Esto es interesante ya que permite anular una operaci\u00f3n de borrado. Por ello esta t\u00e9cnica de marcar registros, se utiliza casi siempre en todos los tipos de archivos.</p> <p>En otros casos los datos antes de ser eliminados del todo pasan a un fichero especial (conocido como papelera) en el que se mantienen durante cierto tiempo para su posible recuperaci\u00f3n.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#fragmentacion-y-compactacion-de-datos","title":"fragmentaci\u00f3n y compactaci\u00f3n de datos","text":"<p>La fragmentaci\u00f3n en un archivo hace referencia a la posibilidad de que \u00e9ste tenga huecos interiores debido a borrado de datos u a otras causas. Causa los siguientes problemas:</p> <ul> <li> <p>Mayor espacio de almacenamiento</p> </li> <li> <p>Lentitud en las operaciones de lectura y escritura del fichero</p> </li> </ul> <p>Por ello se requiere compactar los datos. Esta t\u00e9cnica permite eliminar los huecos interiores a un archivo. Las formas de realizarla son:</p> <ul> <li> <p>Reescribir el archivo para eliminar los huecos. Es la mejor, pero l\u00f3gicamente es la m\u00e1s lenta al requerir releer y reorganizar todo el contenido del fichero.</p> </li> <li> <p>Aprovechar huecos. De forma que los nuevos registros se inserten en esos huecos. Esta t\u00e9cnica suele requerir un paso previo para reorganizar esos huecos.</p> </li> </ul>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#compresion-de-datos","title":"compresi\u00f3n de datos","text":"<p>En muchos casos para ahorrar espacio de almacenamiento, se utilizan t\u00e9cnicas de compresi\u00f3n de datos. La ventaja es que los datos ocupan menos espacio y la desventaja es que al manipular los datos hay que descomprimirlos lo que hace que las operaciones b\u00e1sicas con el fichero se ralentizan.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/05.-Archivos/#cifrado-de-datos","title":"cifrado de datos","text":"<p>Otra de las opciones habituales sobre ficheros de datos es utilizar t\u00e9cnicas de cifrado para proteger los ficheros en caso de que alguien no autorizado se haga con el fichero. Para leer un fichero de datos, har\u00eda falta descifrar el fichero. Para descifrar necesitamos una clave o bien aplicar m\u00e9todos de descifrado; l\u00f3gicamente cuanto mejor sea la t\u00e9cnica de cifrado, m\u00e1s dif\u00edcil ser\u00e1 descifrar los datos.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/06.-Est%C3%A1ndares%20y%20modelo%20ANSI/","title":"06.-Est\u00e1ndares y modelo ANSI","text":"<p>Es uno de los aspectos que todav\u00eda sigue pendiente. Desde la aparici\u00f3n de los primeros gestores de base de datos se intent\u00f3 llegar a un acuerdo para que hubiera una estructura com\u00fan para todos ellos, a fin de que el aprendizaje y manejo de este software fuera m\u00e1s provechoso y eficiente.</p> <p>El acuerdo nunca se ha conseguido del todo, no hay est\u00e1ndares aceptados del todo. Aunque s\u00ed hay unas cuentas propuestas de est\u00e1ndares que s\u00ed funcionan como tales.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/06.-Est%C3%A1ndares%20y%20modelo%20ANSI/#01-organismos-de-estandarizacion","title":"01.-Organismos de estandarizaci\u00f3n","text":"<p>Los intentos por conseguir una estandarizaci\u00f3n han estado promovidos por organismos de todo tipo. Algunos son estatales, otros privados y otros promovidos por los propios usuarios. Los tres que han tenido gran relevancia en el campo de las bases de datos son ANSI/SPARC/X3, CODASYL y ODMG (\u00e9ste s\u00f3lo para las bases de datos orientadas a objetos). Los organismos grandes (que recogen grandes responsabilidades) dividen sus tareas en comit\u00e9s, y \u00e9stos en grupos de trabajo que se encargan de temas concretos.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/06.-Est%C3%A1ndares%20y%20modelo%20ANSI/#02-isojtc1sc21wg3","title":"02.-ISO/JTC1/SC21/WG3","text":"<ul> <li> <p>ISO (International Organization for Standardization). Es un organismo internacional de definici\u00f3n de est\u00e1ndares de gran prestigio.</p> </li> <li> <p>IEC (International Electrotechnical Commission). Organismo de definici\u00f3n de normas en ambientes electr\u00f3nicos. Es la parte, en definitiva de ISO, dedicada a la creaci\u00f3n de est\u00e1ndares.</p> </li> <li> <p>JTC 1 (Joint Technical Committee). Comit\u00e9 parte de IEC dedicado a la tecnolog\u00eda de la informaci\u00f3n (inform\u00e1tica). En el campo de las bases de datos, el subcomit\u00e9 SC 21 (en el que participan otros organismos nacionales, como el espa\u00f1ol AENOR) posee un grupo de trabajo llamado WG 3 que se dedica a las bases de datos. Este grupo de trabajo es el que define la estandarizaci\u00f3n del lenguaje SQL entre otras cuestiones.</p> </li> </ul> <p>Entre los trabajos que realiza el grupo WG3 est\u00e1 la normalizaci\u00f3n de SQL, adem\u00e1s de otras normas de estandarizaci\u00f3n.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/06.-Est%C3%A1ndares%20y%20modelo%20ANSI/#03-dbtgcodasyl","title":"03.-DBTG/Codasyl","text":"<p>Codasyl (_COnference on DAta SYstem Languages_) es el nombre de una conferencia iniciada en el a\u00f1o 1959 y que dio lugar a un organismo con la idea de conseguir un lenguaje est\u00e1ndar para la mayor\u00eda de m\u00e1quinas inform\u00e1ticas. Participaron organismos privados y p\u00fablicos del gobierno de Estados Unidos con la finalidad de definir est\u00e1ndares. Su primera tarea fue desarrollar el lenguaje COBOL y otros elementos del an\u00e1lisis, dise\u00f1o y la programaci\u00f3n de ordenadores.</p> <p>La tarea real de estandarizar esos lenguajes se la cedieron al organismo ANSI, pero las ideas e inicios de muchas tecnolog\u00edas se idearon en el consorcio Codasyl.</p> <p>En 1967 se crea un grupo de tareas para bases de datos (Data Base Task Group) y este grupo defini\u00f3 el modelo en red de bases de datos y su integraci\u00f3n con COBOL. A este modelo en red se le denomina modelo Codasyl o modelo DBTG y fue finalmente aceptado por la ANSI.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/06.-Est%C3%A1ndares%20y%20modelo%20ANSI/#a24ansix3sparc","title":"[a2.4]ANSI/X3/SPARC","text":"<p>ANSI (American National Standards Institute) es un organismo cient\u00edfico de Estados Unidos que ha definido diversos est\u00e1ndares en el campo de las bases de datos. X3 es la parte de ANSI encargada de los est\u00e1ndares en el mundo de la electr\u00f3nica. Finalmente SPARC, System Planning and Repairments Committee, comit\u00e9 de planificaci\u00f3n de sistemas y reparaciones es una subsecci\u00f3n de X3 encargada de los est\u00e1ndares en Sistemas Inform\u00e1ticos en especial del campo de las bases de datos. Su logro fundamental ha sido definir un modelo de referencia para las bases de datos (que se estudiar\u00e1 posteriormente).</p> <p></p> <p>En la actualidad ANSI para Estados Unidos e ISO para todo el mundo son nombres equivalentes en cuanto a estandarizaci\u00f3n de bases de datos, puesto que se habla ya de un \u00fanico modelo de sistema de bases de datos.</p>"},{"location":"00.-Conceptos%20B%C3%A1sicos%20sobre%20SGBD/06.-Est%C3%A1ndares%20y%20modelo%20ANSI/#05-modelo-ansix3sparc","title":"05.-Modelo ANSI/X3/SPARC","text":"<p>El organismo ANSI ha marcado la referencia para la construcci\u00f3n de SGBD. El modelo definido por el grupo de trabajo SPARC se basa en estudios anteriores en los que se defin\u00edan tres niveles de abstracci\u00f3n necesarios para gestionar una base de datos. ANSI profundiza m\u00e1s en esta idea y define c\u00f3mo debe ser el proceso de creaci\u00f3n y utilizaci\u00f3n de estos niveles.</p> <p>En el modelo ANSI se indica que hay tres modelos: externo, conceptual e interno. Se entiende por modelo, el conjunto de normas que permiten crear esquemas (dise\u00f1os de la base de datos).</p> <p>Los esquemas externos reflejan la informaci\u00f3n preparada para el usuario final, el esquema conceptual refleja los datos y relaciones de la base de datos y el esquema interno la preparaci\u00f3n de los datos para ser almacenados.</p> <p>El esquema conceptual contiene la informaci\u00f3n l\u00f3gica de la base de datos. Su estructuraci\u00f3n y las relaciones que hay entre los datos.</p> <p>El esquema interno contiene informaci\u00f3n sobre c\u00f3mo est\u00e1n almacenados los datos en disco. Es el esquema m\u00e1s cercano a la organizaci\u00f3n real de los datos.</p> <p>En definitiva el modelo ANSI es una propuesta te\u00f3rica sobre c\u00f3mo debe de funcionar un sistema gestor de bases de datos (sin duda, la propuesta m\u00e1s importante). Su idea es la siguiente:</p> <p></p> <p>Ilustraci\u00f3n 18. Niveles en el modelo ANSI</p> <p>En la Ilustraci\u00f3n 18, el paso de un esquema a otro se realiza utilizando una interfaz o funci\u00f3n de traducci\u00f3n. En su modelo, la ANSI no indica c\u00f3mo se debe realizar esta funci\u00f3n, s\u00f3lo que debe existir.</p> <p>La arquitectura completa (Ilustraci\u00f3n 19) est\u00e1 dividida en dos secciones, la zona de definici\u00f3n de datos y la de manipulaci\u00f3n. Esa arquitectura muestra las funciones realizadas por humanos y las realizadas por programas.</p> <p>En la fase de definici\u00f3n, una serie de interfaces permiten la creaci\u00f3n de los metadatos que se convierten en el eje de esta arquitectura. La creaci\u00f3n de la base de datos comienza con la elaboraci\u00f3n del esquema conceptual realiz\u00e1ndola el administrador de la empresa (actualmente es el dise\u00f1ador, pero ANSI no lo llam\u00f3 as\u00ed). Ese esquema se procesa utilizando un procesador del esquema conceptual (normalmente una herramienta CASE, interfaz 1 del dibujo anterior) que lo convierte en los metadatos (interfaz 2).</p> <p>La interfaz 3 permite mostrar los datos del esquema conceptual a los otros dos administradores: el administrador de la base de datos y el de aplicaciones (el desarrollador). Mediante esta informaci\u00f3n construyen los esquemas internos y externos mediante las interfaces 4 y 5 respectivamente, los procesadores de estos esquemas almacenan la informaci\u00f3n correspondiente a estos esquemas en los metadatos (interfaces 6 y 7).</p> <p></p> <p>En la fase de manipulaci\u00f3n el usuario puede realizar operaciones sobre la base de datos usando la interfaz 8 (normalmente una aplicaci\u00f3n) esta petici\u00f3n es transformada por el transformador externo/conceptual que obtiene el esquema correspondiente ayud\u00e1ndose tambi\u00e9n de los metadatos (interfaz 9). El resultado lo convierte otro transformador en el esquema interno (interfaz 10) usando tambi\u00e9n la informaci\u00f3n de los metadatos (interfaz 11). Finalmente del esquema interno se pasa a los datos usando el \u00faltimo transformador (interfaz 12) que tambi\u00e9n accede a los metadatos (interfaz 13) y de ah\u00ed se accede a los datos (interfaz 14). Para que los datos se devuelvan al usuario en formato adecuado para \u00e9l se tiene que hacer el proceso contrario (observar dibujo).</p>"},{"location":"01.-Tutorial/","title":"Index","text":"<p>Bienvenido a PostgreSQL. Los siguientes cap\u00edtulos est\u00e1n destinados a dar una simple introducci\u00f3n a PostgreSQL, conceptos de base de datos relacionales y el lenguaje SQL a aquellos  que son nuevos en cualquiera de estos aspectos. S\u00f3lo asumimos algunos  conocimientos generales sobre c\u00f3mo usar las computadoras. No se requiere ning\u00fan Unix/Linux en particular o experiencia de programaci\u00f3n. Esta parte  est\u00e1 destinada principalmente a dar una experiencia pr\u00e1ctica con  aspectos importantes del sistema PostgreSQL. No intenta ser un tratamiento completo o exhaustivo de los temas que cubre.</p>"},{"location":"01.-Tutorial/01.-C%C3%B3mo%20empezar/01.-Instalaci%C3%B3n/","title":"01.-Instalaci\u00f3n","text":"<p>Antes de poder usar PostgreSQL necesitamos instalarlo, por supuesto. Es posible que PostgreSQL ya est\u00e9 instalado, ya sea porque estaba incluido en la distribuci\u00f3n de nuestro sistema operativo o porque el administrador del sistema ya lo instal\u00f3. Si ese es el caso, debemos obtener informaci\u00f3n de la documentaci\u00f3n del sistema operativo o del administrador del sistema sobre c\u00f3mo acceder a PostgreSQL.</p> <p>Si no se est\u00e1 seguro de si PostgreSQL ya est\u00e1 disponible o si se puede utilizar para experimentaci\u00f3n, entonces puedemos instalarlo nosotros mismos. Hacerlo no es dif\u00edcil y puede ser un buen ejercicio. PostgreSQL puede ser instalado por cualquier usuario no privilegiado; no se requiere acceso al superusuario (root).</p>"},{"location":"01.-Tutorial/01.-C%C3%B3mo%20empezar/01.-Instalaci%C3%B3n/#instalacion","title":"Instalaci\u00f3n","text":""},{"location":"01.-Tutorial/01.-C%C3%B3mo%20empezar/01.-Instalaci%C3%B3n/#instalacion-en-arch-linux","title":"Instalaci\u00f3n en Arch Linux","text":""},{"location":"01.-Tutorial/01.-C%C3%B3mo%20empezar/01.-Instalaci%C3%B3n/#resumen","title":"Resumen","text":"<pre><code>$ sudo pacman -S postgresql\n$ postgres --version\n$ sudo -iu postgres\n</code></pre> <ul> <li><code>sudo</code>: Ejecuta el comando siguiente con permisos de superusuario o root</li> <li><code>-i</code>: Activa el login shell del usuario especificado, en este caso postgres</li> <li><code>-u postgres</code>: Establece al usuario espec\u00edfico como postgres</li> </ul> <pre><code>$ initdb -D /var/lib/postgres/data\n$ sudo vim /var/lib/postgress/data/postgresql.conf\n\n    # Agregaremos/modificaremos la siguiente linea\n\n       listen_addresses = '*'\n\n$ ip addr | grep inet\n$ sudo vim /var/lib/postgres/data/pg_hba.conf\n\n# Dentro del archivo, encontrar las siguientes l\u00edneas...\n\n    # TYPE  DATABASE        USER            ADDRESS                 METHOD\n    # \"local\" is for Unix domain socket connections only\n    local   all             user                                    trust\n\n    # Agrega la siguiente linea en donde\n    # reemplazar xxx.xxx.xxx.xxx/xx por su direcci\u00f3n IP\n    host    all             all             xxx.xxx.xxx.xxx/xx      md5\n\n$ sudo passwd postgres\n$ sudo -iu postgres\n\n# Dentro...\n[postgres]$ psql\n[postgres]$ ALTER USER postgres WITH password 'xxxx';\n# En las 'xxxx' pondremos nuestra contrase\u00f1a\n\n\n$ sudo systemctl start postgresql.service\n$ sudo systemctl enable postgresql.service\n$ sudo systemctl status postgresql.service\n\n# Habilitar el hist\u00f3rico /var/lib/postgres/.psql_history\n#\n# Debemos crear los ficheros .psql_history y .bashrc en /var/lib/postgres\n# y hacerlos pertenecer al usuario \"postgres\" y al grupo \"postgres\"\n\n$ sudo touch /var/lib/postgres/.bashrc\n$ sudo touch /var/lib/postgres/.psql_history\n$ sudo chown postgres:postgres /var/lib/postgres/.bashrc\n$ sudo chown postgres:postgres /var/lib/postgres/.psql_history\n$ sudo chmod 644 /var/lib/postgres/.bashrc\n$ sudo chmod 644 /var/lib/postgres/.psql_history\n\n# Cargar la variable de entorno PSQL_HISTORY con el fichero .psql_history\n# y exportarla para hacerlo permanente en .bashrc\n\n$ sudo -iu postgres\n$ echo 'export PSQL_HISTORY=/var/lib/postgres/.psql_history' &gt;&gt; /var/lib/postgres/.bashrc\n</code></pre>"},{"location":"01.-Tutorial/01.-C%C3%B3mo%20empezar/01.-Instalaci%C3%B3n/#instalacion-desde-los-binarios","title":"Instalaci\u00f3n desde los binarios","text":"<p>Si el administrador de no ha establecido las cosas de la manera predeterminada, es posible que tengamos algo m\u00e1s de trabajo que hacer. Por ejemplo, si la m\u00e1quina de servidor de base de datos es una m\u00e1quina remota, tendremos que configurar la variable de entorno <code>PGHOST</code> al nombre de la m\u00e1quina servidor de bases de datos. La variable de entorno <code>PGPORT</code> tambi\u00e9n deber\u00eda que ser establecida. La conclusi\u00f3n es esta: si intentamos iniciar un programa de aplicaci\u00f3n y se queja de que no puede conectarse a la base de datos, debemos consultar al administrador del sitio o, si somos nosotros mismos, la documentaci\u00f3n para asegurarnos de que el entorno est\u00e1 correctamente configurado.</p>"},{"location":"01.-Tutorial/01.-C%C3%B3mo%20empezar/02.-Fundamentos%20arquitect%C3%B3nicos/","title":"02.-Fundamentos arquitect\u00f3nicos","text":"<p>Antes de proceder,  debemos entender la arquitectura b\u00e1sica del sistema PostgreSQL. Entender c\u00f3mo interact\u00faan entre s\u00ed las partes de PostgreSQL har\u00e1 este cap\u00edtulo algo m\u00e1s claro.</p> <p>En la jerga de bases de datos, PostgreSQL utiliza un modelo cliente/servidor. Una sesi\u00f3n de PostgreSQL consiste en los siguientes procesos de cooperaci\u00f3n (programas):</p> <ul> <li> <p>Un proceso de servidor, que administra los archivos de la base de datos, acepta conexiones a la base de datos de aplicaciones de clientes y realiza acciones de base de datos en nombre de los clientes. El programa de servidores de bases de datos se llama <code>postgres</code>.</p> </li> <li> <p>La aplicaci\u00f3n cliente (frontend) del usuario que quiere realizar operaciones de base de datos. Las aplicaciones de cliente pueden ser de muy diversa naturaleza: un cliente podr\u00eda ser una herramienta orientada al texto, una aplicaci\u00f3n gr\u00e1fica, un servidor web que acceda a la base de datos para mostrar p\u00e1ginas web, o una herramienta especializada de mantenimiento de bases de datos. Algunas aplicaciones de clientes se suministran con la distribuci\u00f3n PostgreSQL; la mayor\u00eda son desarrolladas por los usuarios.</p> </li> </ul> <p>Como es t\u00edpico de las aplicaciones cliente/servidor, el cliente y el servidor pueden estar en diferentes hosts. En ese caso se comunican a trav\u00e9s de una conexi\u00f3n de red TCP/IP.  Debemos tener esto en cuenta, porque los archivos a los que se puede acceder en una m\u00e1quina cliente pueden no ser accesibles (o s\u00f3lo podr\u00edan ser accesibles usando un nombre de archivo diferente) en la m\u00e1quina del servidor de bases de datos.</p> <p>El servidor PostgreSQL puede manejar m\u00faltiples conexiones simult\u00e1neas de los clientes. Para lograrlo comienza un nuevo proceso (\"forks\")  para cada conexi\u00f3n. A partir de ese momento, el cliente y el nuevo proceso de servidor se comunican sin la intervenci\u00f3n del proceso original <code>postgres</code>. Por lo tanto, el proceso de servidor supervisor siempre est\u00e1 funcionando, esperando conexiones de clientes, mientras que los procesos de servidor asociados y el cliente van y vienen. (Todo esto es, por supuesto, invisible para el usuario. S\u00f3lo lo mencionamos aqu\u00ed para estar al tanto.)</p>"},{"location":"01.-Tutorial/01.-C%C3%B3mo%20empezar/03.-Creando%20una%20Base%20de%20Datos/","title":"03.-Creando una Base de Datos","text":"<p>La primera prueba para ver si puede acceder al servidor de base de datos es tratar de crear una base de datos. Un servidor PostgreSQL en ejecuci\u00f3n puede administrar muchas bases de datos. Normalmente, se utiliza una base de datos separada para cada proyecto o para cada usuario.</p> <p>Posiblemente, el administrador de tu sitio ya ha creado una base de datos para nuestro uso. En ese caso puedes omitir este paso y saltar a la siguiente secci\u00f3n.</p> <p>Para crear una nueva base de datos, en este ejemplo nombrada <code>mydb</code>, se utiliza el siguiente comando:</p> <pre><code>$ createdb mydb\n</code></pre> <p>Si esto no produce respuesta, este paso fue exitoso y se puede saltar el resto de esta secci\u00f3n.</p> <p>Si ves un mensaje similar a:</p> <pre><code>createdb: comando no encontrado\n</code></pre> <p>Entonces PostgreSQL no se instal\u00f3 correctamente. O no se instal\u00f3 en absoluto o la ruta de b\u00fasqueda de su shell no estaba configurada para incluirlo. Llamaremos al comando con un camino absoluto en su lugar:</p> <pre><code>$/usr/local/pgsql/bin/createdb mydb\n</code></pre> <p>El camino en nuestro sitio podr\u00eda ser diferente (<code>/usr/bin/createdb mydb</code> en archlinux). El administrador del sitio o las instrucciones de instalaci\u00f3n puede ayudarnos a corregir la situaci\u00f3n.</p> <p>Otra respuesta podr\u00eda ser esta:</p> <pre><code>createdb: error: connection to server on socket \"/tmp/.s.PGSQL.5432\" failed: No such file or directory\n        Is the server running locally and accepting connections on that socket?\n</code></pre> <p>Esto significa que el servidor no se inici\u00f3, o no est\u00e1 escuchando d\u00f3nde <code>createdb</code>espera contactarlo. Una vez m\u00e1s, revise las instrucciones de instalaci\u00f3n o consulte al administrador.</p> <p>Otra respuesta podr\u00eda ser esta:</p> <pre><code>createdb: error: connection to server on socket \"/tmp/.s.PGSQL.5432\" failed: FATAL:  role \"joe\" does not exist\n</code></pre> <p>donde se menciona nuestro propio nombre de inicio de sesi\u00f3n. Esto suceder\u00e1 si el administrador no ha creado una cuenta de usuario de PostgreSQL para nosotros. (Las cuentas de usuario de PostgreSQL son distintas de las cuentas de usuario del sistema operativo.) Si somos el administrador, consultar el cap\u00edtulo 22 para ayudar en la creaci\u00f3n de cuentas. Debemos convertirnos en el usuario del sistema operativo bajo el cual PostgreSQL fue instalado (generalmente <code>postgres</code>) para crear la primera cuenta de usuario. Tambi\u00e9n podr\u00eda ser que se nos asign\u00f3 un nombre de usuario de PostgreSQL que es diferente de nuestro nombre de usuario de nuestro sistema operativo; en ese caso necesitamos utilizar la opci\u00f3n <code>-U</code> o configurar la variable de entorno <code>PGUSER</code> para especificar nuestro nombre de usuario de PostgreSQL.</p> <p>Si tenemos una cuenta de usuario pero no tiene los privilegios necesarios para crear una base de datos, veremos lo siguiente:</p> <pre><code>createdb: error: database creation failed: ERROR:  permission denied to create database\n</code></pre> <p>No todos los usuarios tienen autorizaci\u00f3n para crear nuevas bases de datos. Si PostgreSQL se niega a crear bases de datos para nosotros, entonces el administrador del sitio necesita concedenos permiso para crear bases de datos. Consultaremos a nuestro administrador del sitio si esto ocurre. Si hemos instalado PostgreSQL nosotros mismos, entonces debemos iniciar sesi\u00f3n bajo la cuenta de usuario con la que iniciamos el servidor. </p> <p>Tambi\u00e9n podemos crear bases de datos con otros nombres. PostgreSQL nos permite crear cualquier n\u00famero de bases de datos en un sitio determinado. Los nombres de la base de datos deben tener un primer car\u00e1cter alfab\u00e9tico y se limitan a 63 bytes de longitud. Una opci\u00f3n conveniente es crear una base de datos con el mismo nombre que nuestro nombre de usuario actual. Muchas herramientas asumen ese nombre de base de datos como predeterminado, por lo que puede ahorrarnos algo de escritura. Para crear esa base de datos, simplemente escribiremos:</p> <pre><code>$ createdb\n</code></pre> <p>Si ya no queremos usar tu base de datos, podemos eliminarla. Por ejemplo, si somos el propietario (creador) de la base de datos <code>mydb</code>, podemos destruirla usando el siguiente comando:</p> <pre><code>$ dropdb mydb\n</code></pre> <p>(Para este comando, el nombre de la base de datos no predetermina el nombre de la cuenta de usuario. Siempre tienes que especificarlo.) Esta acci\u00f3n elimina f\u00edsicamente todos los archivos asociados con la base de datos y no se puede deshacer, por lo que debe hacerse con mucho cuidado.</p> <p>M\u00e1s sobre <code>createdb</code>y <code>dropdb</code>se puede encontrar en createdb y dropdb respectivamente.</p> <p>Nota aclaratoria: Los nombres de usuario est\u00e1n separados de las cuentas de usuario del sistema operativo. Cuando nos conectamos a una base de datos, se puede elegir con qu\u00e9 nombre de usuario de PostgreSQL nos conectamos; si no lo hacemos, se predeterminar\u00e1 al mismo nombre de nuestra cuenta actual del sistema operativo. Sucede que siempre habr\u00e1 una cuenta de usuario de PostgreSQL que tenga el mismo nombre que el usuario del sistema operativo que inici\u00f3 el servidor, y tambi\u00e9n sucede que ese usuario siempre tiene permiso para crear bases de datos. En lugar de iniciar sesi\u00f3n como ese usuario tambi\u00e9n se puede especificar opci\u00f3n <code>-U</code>opci\u00f3n en todas partes para seleccionar un nombre de usuario de PostgreSQL con el que conectarse.</p>"},{"location":"01.-Tutorial/01.-C%C3%B3mo%20empezar/04.-Accediendo%20a%20una%20base%20de%20datos/","title":"04.-Accediendo a una base de datos","text":"<p>Una vez que se haya creado una base de datos, podemos acceder a ella...:</p> <ul> <li> <p>Ejecutando el programa de terminal interactivo PostgreSQL, llamado <code>psql</code>, que nos permite entrar, editar y ejecutar interactivamente comandos SQL.</p> </li> <li> <p>Usando una herramienta web existente como <code>pgAdmin</code> o una suite de oficina con soporte para <code>ODBC</code> o <code>JDBC</code>  para crear y manipular una base de datos. Estas posibilidades no las cubriremos por ahora.</p> </li> <li> <p>Escribiendo una aplicaci\u00f3n personalizada, utilizando una de las varias conexiones con diferentes lenguajes disponibles como pgSQL, Python, Tcl y Perl. Estas posibilidades se examinar\u00e1n m\u00e1s adelante.</p> </li> </ul> <p>Vamos a empezar con <code>psql</code> para probar los ejemplos. Se puede activar para la base de datos <code>mydb</code> escribiendo el comando:</p> <pre><code>$ psql mydb\n</code></pre> <p>Si no suministramos el nombre de la base de datos, se presupone el nombre de la cuenta de usuario. Ya descubrimos este esquema en la secci\u00f3n anterior usando <code>createdb</code>.</p> <p>En <code>psql</code>, nos recibir\u00e1 el siguiente mensaje:</p> <pre><code>psql (16.0)\nEscriba \"ayuda\" para ayuda.\n\nmydb=&gt;\n</code></pre> <p>La \u00faltima l\u00ednea tambi\u00e9n podr\u00eda ser:</p> <pre><code>mydb=#\n</code></pre> <p>Eso significar\u00eda que somos un superusuario de la base de datos, que ser\u00e1 el caso m\u00e1s probable ya que nosotros fuimos los instaladores de la instancia PostgreSQL. Ser superusuario significa no estar sujeto a controles de acceso. Por ahora no es un hecho importante.</p> <p>Si hay problemas de inicio con <code>psql</code> volveremos a la secci\u00f3n anterior. El diagn\u00f3stico de <code>createdb</code>y <code>psql</code>son similares, y si el primero funcionaba, el segundo deber\u00eda funcionar tambi\u00e9n.</p> <p>La \u00faltima l\u00ednea impresa por <code>psql</code>es el prompt, e indica que <code>psql</code> nos est\u00e1 escuchando y que podemos empezar a escribir consultas SQL en un espacio de trabajo mantenido por <code>psql</code>. Prueba estos comandos:</p> <pre><code>mydb=&gt; SELECT version();\n                                         versi\u00f3n\n-------------------------------------------------------------------------------\n PostgreSQL 16.0 on x86o64-pc-linux-gnu, compiled by gcc (Debian 4.9.2-10) 4.9.2, 64-bit\n(1 fila) \n\nmydb=&gt; SELECT current_date;\n current_date\n--------------\n 2023-10-19\n(1 row)\n\n\nmydb=&gt; SELECT 2 + 2;\n ?column?\n----------\n        4\n(1 row)\n</code></pre> <p>El programa  <code>psql</code> tiene una serie de comandos internos que no son comandos SQL. Comienzan con el car\u00e1cter, <code>\\</code>. Por ejemplo, podemos obtener ayuda en la sintaxis de varios comandos PostgreSQL SQL escribiendo:</p> <pre><code>mydb=&gt; \\h\n</code></pre> <p>Para salir de <code>psql</code>, escribiremos:</p> <pre><code>mydb=&gt; \\q\n</code></pre> <p>y <code>psql</code> nos devolver\u00e1 a nuestra l\u00ednea de comandos habitual. (Para m\u00e1s comandos internos, escribir <code>\\?</code>en el prompt <code>psql</code>). Todas la capacidades de <code>psql</code>est\u00e1n documentadas . No usaremos estas caracter\u00edsticas expl\u00edcitamente, pero podemos usarlas cuando sea preciso.</p>"},{"location":"01.-Tutorial/02.-El%20lenguaje%20SQL/01.-Introducci%C3%B3n/","title":"01.-Introducci\u00f3n","text":"<p>Este cap\u00edtulo ofrece una visi\u00f3n general de c\u00f3mo utilizar SQL para realizar operaciones sencillas. Solo se tiene la intenci\u00f3n de dar una introducci\u00f3n y no es de ninguna manera un tutorial completo sobre SQL. Se han escrito numerosos libros sobre SQL, incluyendo [melt93] y [DATE97].  Debemos ser conscientes de que algunas caracter\u00edsticas del lenguaje PostgreSQL son extensiones del est\u00e1ndar.</p> <p>En los ejemplos que siguen, asumimos que se ha creado una base de datos nombrada <code>mydb</code> y se ha podido iniciar <code>psql</code>.</p> <p>Los ejemplos de este manual tambi\u00e9n se pueden encontrar en la distribuci\u00f3n de la fuente PostgreSQL en el directorio <code>src/tutorial/</code>. (Las distribuciones en binario de PostgreSQL podr\u00edan no proporcionar esos archivos). Para usar esos archivos, primero cambiaremos a ese directorio y ejecutaremos <code>make</code>:</p> <pre><code>$ cd .../src/tutorial\n$ make\n</code></pre> <p>Esto crea los scripts y compila los archivos C que contienen funciones y tipos definidos por el usuario. Luego, para iniciar el tutorial, haga lo siguiente:</p> <pre><code>$ psql -s mydb\n\n...\n\nmydb=&gt; \\i basics.sql\n</code></pre> <p>El comando <code>\\i</code> lee entre los comandos del archivo especificado.  La opci\u00f3n <code>-s</code> de <code>psql</code> nos pondr\u00e1 en el modo single step el cual se detiene antes de enviar cada declaraci\u00f3n al servidor. Los comandos utilizados en esta secci\u00f3n est\u00e1n en el archivo <code>basics.sql</code>.</p>"},{"location":"01.-Tutorial/02.-El%20lenguaje%20SQL/02.-Conceptos/","title":"02.-Conceptos","text":"<p>PostgreSQL es un sistema de gesti\u00f3n relacional de bases de datos (RDBMS - Relational Data Base Management System). Eso significa que es un sistema para gestionar los datos almacenados en relaciones. La relaci\u00f3n es esencialmente un t\u00e9rmino matem\u00e1tico para la tabla. La noci\u00f3n de almacenar datos en tablas es tan com\u00fan hoy d\u00eda que puede parecer inherentemente obvio, pero hay una serie de otras formas de organizar bases de datos. Los archivos y directorios en sistemas operativos similares a Unix forman un ejemplo de una base de datos jer\u00e1rquica. Un desarrollo m\u00e1s moderno son las bases de datos orientadas a objetos.</p> <p>Cada tabla es una colecci\u00f3n de filas nombradas. Cada fila de una tabla dada tiene el mismo conjunto de columnas nombradas, y cada columna es de un tipo de datos espec\u00edfico. Mientras que las  columnas tienen un orden fijo en cada fila, es importante recordar que  SQL no garantiza el orden de las filas dentro de la tabla de ninguna manera (aunque se pueden ordenar expl\u00edcitamente para su visualizaci\u00f3n).</p> <p>Las tablas se agrupan en bases de datos, y una colecci\u00f3n de bases de datos gestionadas por una sola instancia de servidor PostgreSQL constituye un cluster de bases de datos.</p>"},{"location":"01.-Tutorial/02.-El%20lenguaje%20SQL/03.-Creando%20una%20nueva%20tabla/","title":"03.-Creando una nueva tabla","text":"<p>Podemos crear una nueva tabla especificando el nombre de la tabla, junto con todos los nombres de la columna y sus tipos:</p> <pre><code>CREATE TABLE weather (\n    city            varchar(80),\n    temp_lo         int,           -- low temperature\n    temp_hi         int,           -- high temperature\n    prcp            real,          -- precipitation\n    date            date\n);\n</code></pre> <p>Podemos entrar esto en  <code>psql</code> con los avances de l\u00ednea.  <code>psql</code> reconocer\u00e1 que el comando no se termina hasta el punto y coma.</p> <p>Los espacios blanco (es decir, espacios, tabuladores y avances de l\u00ednea) se pueden utilizar libremente en comandos SQL. Eso significa que podemos escribir el comando alineado de manera diferente, o incluso todo en una l\u00ednea. Los dos guiones <code>--</code> permiten presentar comentarios. Lo que les sigue es ignorado hasta el final de la l\u00ednea. SQL es insensible a las may\u00fasculas y min\u00fasculas y tambi\u00e9n sus identificadores, excepto cuando los identificadores se enmarcan con dobles comillas para preservar las may\u00fasculas/min\u00fasculas (no se hace arriba).</p> <p><code>varchar(80)</code>especifica un tipo de datos que puede almacenar cadenas de caracteres arbitrarias de hasta 80 caracteres de longitud.  </p> <p><code>int</code> es el tipo entero normal.  </p> <p><code>real</code> es un tipo para almacenar n\u00fameros de punto flotante de una sola precisi\u00f3n. </p> <p><code>date</code> debe ser autoexplicativo. (S\u00ed, la columna de tipo  <code>date</code> tambi\u00e9n se nombra <code>date</code>. Esto puede ser conveniente o confuso.)</p> <p>PostgreSQL soporta el est\u00e1ndar de tipos SQL <code>int</code>, <code>smallint</code>, <code>real</code>, <code>double precision</code>, <code>char(N)</code>, <code>varchar(N)</code>, <code>date</code>, <code>time</code>, <code>timestamp</code> y <code>interval</code>, as\u00ed como otros tipos de utilidad general y un rico conjunto de tipos geom\u00e9tricos. PostgreSQL se puede personalizar con un n\u00famero arbitrario de tipos de datos definidos por el usuario. Por lo tanto, los nombres de tipo no son  palabras clave en la sintaxis, excepto cuando sea necesario para apoyar casos especiales en el SQL est\u00e1ndar.</p> <p>El segundo ejemplo almacenar\u00e1 las ciudades y su ubicaci\u00f3n geogr\u00e1fica asociada:</p> <pre><code>CREATE TABLE cities (\n    name            varchar(80),\n    location        point\n);\n</code></pre> <p>El tipo <code>point</code> es un ejemplo de un tipo de datos PostgreSQL espec\u00edfico.</p> <p>Por \u00faltimo, debe mencionarse que si no se necesita una tabla por m\u00e1s tiempo o se desea recrearla de manera diferente se puede eliminar usando el  siguiente comando:</p> <pre><code>DROP TABLE tablename;\n</code></pre>"},{"location":"01.-Tutorial/02.-El%20lenguaje%20SQL/03.-Creando%20una%20nueva%20tabla/#ejercicios","title":"Ejercicios","text":"<p>1.- Crear una tabla llamada <code>employees</code> con columnas para <code>id</code>, <code>first_name</code>,  <code>last_name</code>, <code>email</code> y <code>hire_date</code>. Usar los tipos de datos apropiados para cada columna.</p>"},{"location":"01.-Tutorial/02.-El%20lenguaje%20SQL/03.-Creando%20una%20nueva%20tabla/#solucion","title":"Soluci\u00f3n","text":"<pre><code>CREATE TABLE employees (\n  id INTEGER, \n  firs_name VARCHAR(50),\n  last_name VARCHAR(50), \n  email VARCHAR(100),\n  hire_date DATE\n);\n</code></pre> <p>2.- Crea una tabla llamada <code>products</code> con las siguientes columnas:</p> <ul> <li><code>product_id</code> de tipo entero para almacenar un identificador \u00fanico para cada producto.</li> <li><code>name</code> de tipo texto para almacenar el nombre del producto.</li> <li><code>price</code> de tipo num\u00e9rico con precisi\u00f3n 10 y escala 2 para almacenar el precio del producto con 2 d\u00edgitos decimales.</li> <li><code>stock</code> de tipo entero para almacenar la cantidad en stock de ese producto.</li> <li><code>arrival_date</code> de tipo fecha para almacenar la fecha en que ese producto ingres\u00f3 al inventario.</li> </ul> <p>Utiliza los tipos de datos adecuados para cada columna.</p>"},{"location":"01.-Tutorial/02.-El%20lenguaje%20SQL/03.-Creando%20una%20nueva%20tabla/#solucion_1","title":"Soluci\u00f3n","text":"<pre><code>CREATE TABLE products (\n  product_id INTEGER,      -- product unique indentificator\n  name VARCHAR(100),\n  price DECIMAL(10,2),     -- price in 10 digits and 2 decimals\n  stock INTEGER,\n  arrival_date DATE        -- arrival product date\n);\n</code></pre>"},{"location":"01.-Tutorial/02.-El%20lenguaje%20SQL/04.-Cargando%20una%20tabla%20con%20filas/","title":"04.-Cargando una tabla con filas","text":"<p>La sentencia <code>INSERT</code> se utiliza para cargar una tabla con filas:</p> <pre><code>INSERT INTO weather VALUES ('San Francisco', 46, 50, 0.25, '1994-11-27');\n</code></pre> <p>Todos los tipos de datos utilizan formatos de  entrada bastante obvios. Las constantes que no son simples valores num\u00e9ricos generalmente deben estar rodeados de comillas individuales (<code>'</code>), como en el ejemplo. El tipo <code>date</code> es realmente bastante flexible en lo que acepta, pero para este  tutorial nos acogeremos al formato inequ\u00edvoco que se muestra aqu\u00ed.</p> <p>El tipo <code>point</code> requiere un par de coordenadas como entrada, como se muestra aqu\u00ed:</p> <pre><code>INSERT INTO cities VALUES ('San Francisco', '(-194.0, 53.0)');\n</code></pre> <p>La sintaxis utilizada hasta ahora requiere recordar el orden de las columnas. Una sintaxis alternativa permite enumerar las columnas  expl\u00edcitamente:</p> <pre><code>INSERT INTO weather (city, temp_lo, temp_hi, prcp, date)\n    VALUES ('San Francisco', 43, 57, 0.0, '1994-11-29');\n</code></pre> <p>Puedes listar las columnas en un orden diferente si deseas o  incluso omite algunas columnas, por ejemplo, si se desconoce la  precipitaci\u00f3n:</p> <pre><code>INSERT INTO tiempo (date, city, temp_hi, temp_lo)\n    VALUES ('1994-11-29', 'Hayward', 54, 37);\n</code></pre> <p>Muchos desarrolladores consideran que enumerar expl\u00edcitamente las columnas es m\u00e1s estiloso que confiar en el orden impl\u00edcitamente.</p> <p>Introduzcamos todos los comandos mostrados  anteriormente para que tener algunos datos con los que trabajar en las secciones siguientes.</p> <p>Tambi\u00e9n se puede usar <code>COPY</code> para cargar grandes cantidades de datos de archivos de texto plano. Esto suele ser m\u00e1s r\u00e1pido porque el comando  <code>COPY</code> est\u00e1 optimizado para esta aplicaci\u00f3n, aunque permitiendo menos flexibilidad que <code>INSERT</code>. Un ejemplo ser\u00eda:</p> <pre><code>COPY weather FROM '/home/user/weather.txt';\n</code></pre> <p>donde el nombre del archivo para el archivo fuente debe estar  disponible en la m\u00e1quina que ejecuta el proceso de backend, no en el  cliente, ya que el proceso de backend lee el archivo directamente.  Puedes leer m\u00e1s sobre el  comando <code>COPY</code> en COPY.</p>"},{"location":"01.-Tutorial/02.-El%20lenguaje%20SQL/04.-Cargando%20una%20tabla%20con%20filas/#ejercicios","title":"Ejercicios","text":"<ol> <li>Inserta 5 registros de prueba en la tabla <code>employees</code> con diferentes valores para cada columna.</li> </ol> <pre><code>INSERT INTO employees (id, first_name, last_name, email, hire_date)\nVALUES (1, 'Juan', 'Perez', 'jperez@mail.com', '2022-01-05'),\n       (2, 'Maria', 'Garcia', 'mgarcia@mail.com', '2021-05-15'),\n       (3, 'Pedro', 'Gomez', 'pgomez@mail.com', '2020-08-22'),\n       (4, 'Luisa', 'Fernandez', 'lufe@mail.com', '2023-02-01'),\n       (5, 'Pablo', 'Morales', 'pmorales@mail.com', '2019-12-15');\n</code></pre> <ol> <li>Inserta 10 registros de prueba en la tabla <code>products</code> con precios entre 5 y 100 y stock entre 10 y 50 unidades a partir de un fichero de texto.</li> </ol>"},{"location":"01.-Tutorial/02.-El%20lenguaje%20SQL/05.-Consulta%20de%20tablas/","title":"05.-Consulta de tablas","text":"<p>Para recuperar datos de una tabla, se consulta; para locual utilizamos la declaraci\u00f3n SQL <code>SELECT</code>. La declaraci\u00f3n se divide en una lista de selecci\u00f3n (la parte que enumera las columnas a devolver), una lista de tablas (la parte que enumera las tablas a partir de las cuales recuperar los datos), y una calificaci\u00f3n opcional (la parte que especifica cualquier restricci\u00f3n). Por ejemplo, para recuperar todas las filas de la tabla <code>weather</code>, escribimos:</p> <pre><code>SELECT * FROM weather;\n</code></pre> <p>Aqu\u00ed  <code>*</code> es una abreviatura para todas las columnas. <sup>1</sup> As\u00ed que el mismo resultado ser\u00eda tenido con: </p> <pre><code>SELECT city, temp_lo, temp_hi, prcp, date FROM weather;\n</code></pre> <p>La salida debe ser:</p> <pre><code>     city      | temp_lo | temp_hi | prcp |    date\n---------------+---------+---------+------+------------\n San Francisco |      46 |      50 | 0.25 | 1994-11-27\n San Francisco |      43 |      57 |    0 | 1994-11-29\n Hayward       |      37 |      54 |      | 1994-11-29\n(3 rows)\n</code></pre> <p>Puedes escribir expresiones, no solo referencias de columna simples, en la lista de selecci\u00f3n. Por ejemplo, puede hacer:</p> <pre><code>SELECT city, (temp_hi+temp_lo)/2 AS temp_avg, date FROM weather;\n</code></pre> <p>Esto deber\u00eda dar:</p> <pre><code>     city      | temp_avg |    date\n---------------+----------+------------\n San Francisco |       48 | 1994-11-27\n San Francisco |       50 | 1994-11-29\n Hayward       |       45 | 1994-11-29\n(3 rows)\n</code></pre> <p>Observe c\u00f3mo el  <code>AS</code>cl\u00e1usula se utiliza para reetiquete la columna de salida. (El  <code>AS</code>la cl\u00e1usula es opcional.)</p> <p>Una consulta puede ser calificada.  <code>WHERE</code>cl\u00e1usula que especifica qu\u00e9 filas se quieren. El  <code>WHERE</code>cl\u00e1usula contiene una expresi\u00f3n booleana (valor de la verdad), y s\u00f3lo se  devuelven filas para las que la expresi\u00f3n booleana es verdadera. Los  habituales operadores booleanos (<code>AND</code>, <code>OR</code>, y <code>NOT</code>) est\u00e1n permitidos en la calificaci\u00f3n. Por ejemplo, los siguientes recuperan el clima de San Francisco en d\u00edas lluviosos:</p> <pre><code>SELECT * FROM weather\n    WHERE city = 'San Francisco' AND prcp &gt; 0.0;\n</code></pre> <p>Resultado:</p> <pre><code>     city      | temp_lo | temp_hi | prcp |    date\n---------------+---------+---------+------+------------\n San Francisco |      46 |      50 | 0.25 | 1994-11-27\n(1 row)\n</code></pre> <p>Puede solicitar que los resultados de una consulta sean devueltos en orden ordenado:</p> <pre><code>SELECT * FROM weather\n    ORDER BY city;\n</code></pre> <pre><code>     city      | temp_lo | temp_hi | prcp |    date\n---------------+---------+---------+------+------------\n Hayward       |      37 |      54 |      | 1994-11-29\n San Francisco |      43 |      57 |    0 | 1994-11-29\n San Francisco |      46 |      50 | 0.25 | 1994-11-27\n</code></pre> <p>En este ejemplo, el orden de tipo no est\u00e1 completamente  especificado, y por lo que podr\u00eda obtener las filas de San Francisco en  cualquier orden. Pero siempre obtendr\u00edas los resultados mostrados arriba si lo haces:</p> <pre><code>SELECT * FROM weather\n    ORDER BY city, temp_lo;\n</code></pre> <p>Puede solicitar que se eliminen las filas duplicadas del resultado de una consulta:</p> <pre><code>SELECT DISTINCT city\n    FROM weather;\n</code></pre> <pre><code>     city\n---------------\n Hayward\n San Francisco\n(2 rows)\n</code></pre> <p>Una vez m\u00e1s, el pedido de la fila de resultados podr\u00eda variar. Usted puede asegurar resultados consistentes mediante el uso de  <code>DISTINCT</code>y  <code>ORDER BY</code>en conjunto: <sup>2</sup></p> <pre><code>SELECT DISTINCT city\n    FROM weather\n    ORDER BY city;\n</code></pre> <ol> <li> <p>Mientras  <code>SELECT *</code>es \u00fatil para las consultas fuera de las esposas, se considera ampliamente  mal estilo en el c\u00f3digo de producci\u00f3n, ya que a\u00f1adir una columna a la  tabla cambiar\u00eda los resultados.\u00a0\u21a9</p> </li> <li> <p>En algunos sistemas de bases de datos, incluidas versiones anteriores de PostgreSQL, la implementaci\u00f3n de  <code>DISTINCT</code> autom\u00e1ticamente ordena las filas con lo que  <code>ORDER BY</code> es innecesario. Pero esto no es requerido por el est\u00e1ndar SQL, y el PostgreSQL actual no garantiza que  <code>DISTINCT</code> haga que las filas aparezcan ordenadas.\u00a0\u21a9</p> </li> </ol>"},{"location":"01.-Tutorial/02.-El%20lenguaje%20SQL/06.-Uniones%20de%20tablas/","title":"06.-Uniones de tablas","text":"<p>Hasta ahora, nuestras consultas s\u00f3lo han accedido a una mesa a la  vez. Las consultas pueden acceder a varias mesas a la vez, o acceder a  la misma tabla de tal manera que se est\u00e1n procesando varias filas de la  tabla al mismo tiempo. Las consultas que acceden a m\u00faltiples tablas (o  m\u00faltiples instancias de la misma mesa) en un momento se llaman a consultas de unirse. Combinan filas de una tabla con filas de una segunda tabla, con una  expresi\u00f3n que especifica qu\u00e9 filas deben ser emparejados. Por ejemplo,  para devolver todos los registros meteorol\u00f3gicos junto con la ubicaci\u00f3n  de la ciudad asociada, la base de datos necesita comparar la  <code>city</code>columna de cada hilera de la  <code>weather</code>mesa con el  <code>name</code>columna de todas las filas en el  <code>cities</code>mesa y seleccione los pares de filas donde coinciden estos valores.<sup>1</sup> Esto se lograr\u00eda con la siguiente consulta:</p> <pre><code>SELECT * FROM weather JOIN cities ON city = name;\n</code></pre> <pre><code>     city      | temp_lo | temp_hi | prcp |    date    |     name      | location\n---------------+---------+---------+------+------------+---------------+-----------\n San Francisco |      46 |      50 | 0.25 | 1994-11-27 | San Francisco | (-194,53)\n San Francisco |      43 |      57 |    0 | 1994-11-29 | San Francisco | (-194,53)\n(2 rows)\n</code></pre> <p>Observe dos cosas sobre el conjunto de resultados:</p> <ul> <li> <p>No hay ninguna fila de resultados para la ciudad de Hayward. Esto se debe a que no hay ninguna entrada a juego en el  <code>cities</code>mesa para Hayward, as\u00ed que la uni\u00f3n ignora las filas inigualables en el  <code>weather</code>mesa. En breve veremos c\u00f3mo se arregla esto.</p> </li> <li> <p>Hay dos columnas que contienen el nombre de la ciudad. Esto es correcto porque las listas de columnas de la  <code>weather</code>y  <code>cities</code>las mesas est\u00e1n concatenadas. En la pr\u00e1ctica esto es indeseable, sin  embargo, por lo que probablemente querr\u00e1 enumerar las columnas de salida expl\u00edcitamente en lugar de usar <code>*</code>:</p> </li> </ul> <p><code>postgresql   SELECT city, temp_lo, temp_hi, prcp, date, location       FROM weather JOIN cities ON city = name;</code></p> <p>Dado que todas las columnas ten\u00edan diferentes nombres, el  analizador encontr\u00f3 autom\u00e1ticamente a qu\u00e9 tabla pertenec\u00edan. Si hubiera  nombres de columnas duplicados en las dos tablas tendr\u00edas que calificar los nombres de las columnas para mostrar cu\u00e1l se refer\u00eda, como en:</p> <pre><code>SELECT weather.city, weather.temp_lo, weather.temp_hi,\n       weather.prcp, weather.date, cities.location\n    FROM weather JOIN cities ON weather.city = cities.name;\n</code></pre> <p>Es ampliamente considerado buen estilo para calificar todos los  nombres de columna en una consulta de uni\u00f3n, de modo que la consulta no  fallar\u00e1 si un nombre de columna duplicado se a\u00f1ade m\u00e1s tarde a una de  las tablas.</p> <p>Suscr\u00edmense a las preguntas del tipo visto hasta ahora tambi\u00e9n se pueden escribir en esta forma:</p> <pre><code>SELECT *\n    FROM weather, cities\n    WHERE city = name;\n</code></pre> <p>Esta sintaxis es anterior a la <code>JOIN</code>/ <code>ON</code>sintaxis, que se introdujo en SQL-92. Las tablas se enumeran simplemente en la  <code>FROM</code>cl\u00e1usula, y la expresi\u00f3n de comparaci\u00f3n se a\u00f1ade a la  <code>WHERE</code>cl\u00e1usula. Los resultados de esta sintaxis impl\u00edcita m\u00e1s antigua y de lo m\u00e1s reciente expl\u00edcito <code>JOIN</code>/ <code>ON</code>Sintaxis son id\u00e9nticas. Pero para un lector de la consulta, la sintaxis  expl\u00edcita hace su significado m\u00e1s f\u00e1cil de entender: La condici\u00f3n de  uni\u00f3n se introduce por su propia palabra clave, mientras que  anteriormente la condici\u00f3n se mezclaba en el  <code>WHERE</code>cl\u00e1usula junto con otras condiciones.</p> <p>Ahora averiguaremos c\u00f3mo podemos conseguir los discos de Hayward. Lo que queremos que haga la consulta es es escanear el  <code>weather</code>mesa y para cada fila para encontrar la coincidencia  <code>cities</code>filas (s). Si no se encuentra ninguna fila a juego queremos que algunos valores vac\u00edos sean sustituidos por el  <code>cities</code>las columnas de la mesa. Este tipo de consulta se llama uni\u00f3n externa. (Las uniones que hemos visto hasta ahora son uniciones internas.) El comando se ve as\u00ed:</p> <pre><code>SELECT *\n    FROM weather LEFT OUTER JOIN cities ON weather.city = cities.name;\n</code></pre> <pre><code>     city      | temp_lo | temp_hi | prcp |    date    |     name      | location\n---------------+---------+---------+------+------------+---------------+-----------\n Hayward       |      37 |      54 |      | 1994-11-29 |               |\n San Francisco |      46 |      50 | 0.25 | 1994-11-27 | San Francisco | (-194,53)\n San Francisco |      43 |      57 |    0 | 1994-11-29 | San Francisco | (-194,53)\n(3 rows)\n</code></pre> <p>Esta consulta se llama uni\u00f3n externa izquierda porque la tabla mencionada a la izquierda del operador de uni\u00f3n tendr\u00e1  cada una de sus filas en la salida al menos una vez, mientras que la  tabla en la derecha s\u00f3lo tendr\u00e1 esa salida de filas que coincen con  alguna fila de la tabla izquierda. Al salir de una fila de mesa  izquierda para la que no hay coincidencia de la mesa derecha, los  valores vac\u00edos (null) se sustituyen por las columnas de la mesa derecha.</p> <p>Ejercicio: Tambi\u00e9n hay uniones exteriores derechas y \u00fanete exterior completo. Intenta averiguar qu\u00e9 hacen.</p> <p>Tambi\u00e9n podemos unirnos a una mesa contra s\u00ed misma. Esto se llama unirse a s\u00ed mismo. Como ejemplo, supongamos que deseamos encontrar todos los registros  meteorol\u00f3gicos que est\u00e1n en el rango de temperatura de otros registros  meteorol\u00f3gicos. As\u00ed que tenemos que comparar el  <code>temp_lo</code>y  <code>temp_hi</code>columnas de cada uno  <code>weather</code>fila a la  <code>temp_lo</code>y  <code>temp_hi</code>columnas de todos los dem\u00e1s  <code>weather</code>filas. Podemos hacerlo con la siguiente consulta:</p> <pre><code>SELECT w1.city, w1.temp_lo AS low, w1.temp_hi AS high,\n       w2.city, w2.temp_lo AS low, w2.temp_hi AS high\n    FROM weather w1 JOIN weather w2\n        ON w1.temp_lo &lt; w2.temp_lo AND w1.temp_hi &gt; w2.temp_hi;\n</code></pre> <pre><code>     city      | low | high |     city      | low | high\n---------------+-----+------+---------------+-----+------\n San Francisco |  43 |   57 | San Francisco |  46 |   50\n Hayward       |  37 |   54 | San Francisco |  46 |   50\n(2 rows)\n</code></pre> <p>Aqu\u00ed hemos reetiquetado la tabla de la meteorolog\u00eda como  <code>w1</code>y  <code>w2</code>para poder distinguir el lado izquierdo y derecho de la uni\u00f3n. Tambi\u00e9n puede utilizar este tipo de alias en otras consultas para ahorrar algunos  mees, por ejemplo:</p> <pre><code>SELECT *\n    FROM weather w JOIN cities c ON w.city = c.name;\n</code></pre> <p>Usted encontrar\u00e1 este estilo de abreviatura con bastante frecuencia.</p> <ol> <li> <p>Esto es s\u00f3lo un modelo conceptual. La uni\u00f3n se realiza normalmente de una manera m\u00e1s eficiente que la comparaci\u00f3n real de cada par posible de filas, pero esto es invisible para el usuario.\u00a0\u21a9</p> </li> </ol>"},{"location":"01.-Tutorial/02.-El%20lenguaje%20SQL/07.-Funciones%20agregadas/","title":"07.-Funciones agregadas","text":"<p>Como la mayor\u00eda de los otros productos de base de datos relacionales, PostgreSQL admite funciones agregadas. Una funci\u00f3n agregada calcula un solo resultado de m\u00faltiples filas de entrada. Por ejemplo, hay agregados para calcular la <code>count</code>, <code>sum</code>,  <code>avg</code>(promedio),  <code>max</code>(m\u00e1ximo) y  <code>min</code>(m\u00ednimo) sobre un conjunto de filas.</p> <p>Como ejemplo, podemos encontrar la lectura m\u00e1s alta a bajo temperatura en cualquier lugar con:</p> <pre><code>SELECT max(temp_lo) FROM weather;\n</code></pre> <pre><code> max\n-----\n  46\n(1 row)\n</code></pre> <p>Si quer\u00edamos saber en qu\u00e9 ciudad (o ciudades) se produjo esa lectura, podr\u00edamos intentar:</p> <pre><code>SELECT city FROM weather WHERE temp_lo = max(temp_lo);     Err\u00f3neo\n</code></pre> <p>pero esto no funcionar\u00e1 desde el agregado  <code>max</code>no se puede utilizar en el  <code>WHERE</code>cl\u00e1usula. (Esta restricci\u00f3n existe porque el  <code>WHERE</code>la cl\u00e1usula determina qu\u00e9 filas se incluir\u00e1n en el c\u00e1lculo agregado; por  lo que obviamente debe ser evaluada antes de que se computen las  funciones agregadas.) Sin embargo, como suele ocurrir, la consulta se  puede reafirmar para lograr el resultado deseado, aqu\u00ed mediante una subcoquer\u00eda:</p> <pre><code>SELECT city FROM weather\n    WHERE temp_lo = (SELECT max(temp_lo) FROM weather);\n</code></pre> <pre><code>     city\n---------------\n San Francisco\n(1 row)\n</code></pre> <p>Esto est\u00e1 bien porque la subcoquer\u00eda es un c\u00e1lculo independiente  que calcula su propio agregado por separado de lo que est\u00e1 sucediendo en la consulta exterior.</p> <p>Los agregados tambi\u00e9n son muy \u00fatiles en combinaci\u00f3n con  <code>GROUP BY</code>cl\u00e1usulas. Por ejemplo, podemos obtener el n\u00famero de lecturas y la temperatura m\u00e1xima baja observada en cada ciudad con:</p> <pre><code>SELECT city, count(*), max(temp_lo)\n    FROM weather\n    GROUP BY city;\n</code></pre> <pre><code>     city      | count | max\n---------------+-------+-----\n Hayward       |     1 |  37\n San Francisco |     2 |  46\n(2 rows)\n</code></pre> <p>lo que nos da una fila de salida por ciudad. Cada resultado  agregado se calcula sobre las filas de la mesa que coinciden con esa  ciudad. Podemos filtrar estas filas agrupadas usando <code>HAVING</code>:</p> <pre><code>SELECT city, count(*), max(temp_lo)\n    FROM weather\n    GROUP BY city\n    HAVING max(temp_lo) &lt; 40;\n</code></pre> <pre><code>  city   | count | max\n---------+-------+-----\n Hayward |     1 |  37\n(1 row)\n</code></pre> <p>que nos da los mismos resultados s\u00f3lo para las ciudades que tienen todas  <code>temp_lo</code>valores inferiores a 40. Por \u00faltimo, si s\u00f3lo nos importan las ciudades cuyos nombres comienzan con<code>S</code>- Podr\u00edamos hacerlo:</p> <pre><code>SELECT city, count(*), max(temp_lo)\n    FROM weather\n    WHERE city LIKE 'S%'            -- (1)\n    GROUP BY city;\n</code></pre> <pre><code>     city      | count | max\n---------------+-------+-----\n San Francisco |     2 |  46\n(1 row)\n</code></pre> <p>El operador <code>LIKE</code> trabaja con patrones y se explicar\u00e1 m\u00e1s adelante.</p> <p>Es importante comprender la interacci\u00f3n entre agregados y SQLde  <code>WHERE</code>y  <code>HAVING</code>cl\u00e1usulas. La diferencia fundamental entre  <code>WHERE</code>y  <code>HAVING</code>Esto es:  <code>WHERE</code>selecciona filas de entrada antes de que se computen los grupos y agregados (por  lo tanto, controla qu\u00e9 filas van en el c\u00f3mputo agregado), mientras que  <code>HAVING</code>selecciona filas de grupo despu\u00e9s de grupos y agregados se calculan. As\u00ed, el  <code>WHERE</code>la cl\u00e1usula no debe contener funciones agregadas; no tiene sentido tratar  de utilizar un agregado para determinar qu\u00e9 filas ser\u00e1n entradas a los  agregados. Por otro lado, el  <code>HAVING</code>cl\u00e1usula siempre contiene funciones agregadas. (Estrictamente hablando, se te permite escribir un  <code>HAVING</code>cl\u00e1usula que no usa agregados, pero rara vez es \u00fatil. La misma condici\u00f3n podr\u00eda ser utilizada de manera m\u00e1s eficiente en el  <code>WHERE</code>etapa.)</p> <p>En el ejemplo anterior, podemos aplicar la restricci\u00f3n del nombre de la ciudad en <code>WHERE</code>, ya que no necesita ning\u00fan agregado. Esto es m\u00e1s eficiente que a\u00f1adir la restricci\u00f3n a <code>HAVING</code>, porque evitamos hacer la agrupaci\u00f3n y los c\u00e1lculos agregados para todas las filas que fallan el  <code>WHERE</code>compruebas.</p> <p>Otra forma de seleccionar las filas que entran en un c\u00f3mputo agregado es usar <code>FILTER</code>, que es una opci\u00f3n por agregado:</p> <pre><code>SELECT city, count(*) FILTER (WHERE temp_lo &lt; 45), max(temp_lo)\n    FROM weather\n    GROUP BY city;\n</code></pre> <pre><code>     city      | count | max\n---------------+-------+-----\n Hayward       |     1 |  37\n San Francisco |     1 |  46\n(2 rows)\n</code></pre> <p><code>FILTER</code>es como <code>WHERE</code>, excepto que elimina las filas s\u00f3lo de la entrada de la funci\u00f3n agregada particular a la que se une. Aqu\u00ed, el  <code>count</code>agregados s\u00f3lo cuenta filas con  <code>temp_lo</code>debajo de 45; pero el  <code>max</code>agregados se sigue aplicando a todas las filas, por lo que todav\u00eda encuentra la lectura de 46.</p>"},{"location":"01.-Tutorial/02.-El%20lenguaje%20SQL/08.-Actualizaciones/","title":"08.-Actualizaciones","text":"<p>Puede actualizar las filas existentes utilizando el  <code>UPDATE</code>comando. Supongamos que descubres que las lecturas de temperatura est\u00e1n todas  desactivadas en 2 grados despu\u00e9s del 28 de noviembre. Puede corregir los datos de la siguiente manera:</p> <pre><code>UPDATE weather\n    SET temp_hi = temp_hi - 2,  temp_lo = temp_lo - 2\n    WHERE date &gt; '1994-11-28';\n</code></pre> <p>Veamos el nuevo estado de los datos:</p> <pre><code>SELECT * FROM weather;\n\n     city      | temp_lo | temp_hi | prcp |    date\n---------------+---------+---------+------+------------\n San Francisco |      46 |      50 | 0.25 | 1994-11-27\n San Francisco |      41 |      55 |    0 | 1994-11-29\n Hayward       |      35 |      52 |      | 1994-11-29\n(3 rows)\n</code></pre>"},{"location":"01.-Tutorial/02.-El%20lenguaje%20SQL/09.-Borrados/","title":"09.-Borrados","text":"<p>Las filas se pueden quitar de una mesa usando el  <code>DELETE</code>comando. Supongamos que ya no est\u00e1 interesado en el clima de Hayward. Entonces  puede hacer lo siguiente para eliminar esas filas de la tabla:</p> <pre><code>DELETE FROM weather WHERE city = 'Hayward';\n</code></pre> <p>Todos los registros meteorol\u00f3gicos pertenecientes a Hayward se retiran.</p> <pre><code>SELECT * FROM weather;\n</code></pre> <pre><code>     city      | temp_lo | temp_hi | prcp |    date\n---------------+---------+---------+------+------------\n San Francisco |      46 |      50 | 0.25 | 1994-11-27\n San Francisco |      41 |      55 |    0 | 1994-11-29\n(2 rows)\n</code></pre> <p>Uno debe ser cauto de las declaraciones de la forma</p> <pre><code>DELETE FROM tablename;\n</code></pre> <p>Sin una cualificaci\u00f3n,  <code>DELETE</code>eliminar\u00e1 todas las filas de la mesa dada, dej\u00e1ndola vac\u00eda. El sistema no solicitar\u00e1 confirmaci\u00f3n antes de hacer esto.</p>"},{"location":"01.-Tutorial/03.-Caracter%C3%ADsticas%20avanzadas/01.-Introducci%C3%B3n/","title":"01.-Introducci\u00f3n","text":"<p>En el cap\u00edtulo anterior hemos cubierto los fundamentos de la utilizaci\u00f3n  SQLpara almacenar y acceder a sus datos en PostgreSQL. Ahora discutiremos algunas caracter\u00edsticas m\u00e1s avanzadas de  SQLque simplifica la gesti\u00f3n y previene la p\u00e9rdida o corrupci\u00f3n de sus datos. Finalmente, veremos algunas extensiones de PostgreSQL.</p> <p>Este cap\u00edtulo se referir\u00e1 en ocasiones a los ejemplos encontrados en  para cambiarlos o mejorarlos, por lo que ser\u00e1 \u00fatil haber le\u00eddo ese  cap\u00edtulo. Algunos ejemplos de este cap\u00edtulo tambi\u00e9n se pueden encontrar  en  <code>advanced.sql</code>en el directorio de tutoriales. Este archivo tambi\u00e9n contiene algunos  datos de muestra para cargar, lo que no se repite aqu\u00ed. (Para saber la  para usar el expediente.)</p>"},{"location":"01.-Tutorial/03.-Caracter%C3%ADsticas%20avanzadas/02.-Vistas/","title":"02.-Vistas","text":"<p>Consulte de nuevo a las consultas de la Secci\u00f3n 2.6. Supongamos que la lista combinada de los registros meteorol\u00f3gicos y la  ubicaci\u00f3n de la ciudad es de particular inter\u00e9s para su aplicaci\u00f3n, pero no quiere escribir la consulta cada vez que lo necesite. Puede crear  una vista sobre la consulta, que da un nombre a la consulta que se puede referir como una tabla ordinaria:</p> <pre><code>CREATE VIEW myview AS\n    SELECT name, temp_lo, temp_hi, prcp, date, location\n        FROM weather, cities\n        WHERE city = name;\n\nSELECT * FROM myview;\n</code></pre> <p>Hacer un uso liberal de las opiniones es un aspecto clave del buen  dise\u00f1o de la base de datos SQL. Las vistas le permiten encapsular los  detalles de la estructura de sus tablas, lo que podr\u00eda cambiar a medida  que su aplicaci\u00f3n evoluciona, detr\u00e1s de interfaces consistentes.</p> <p>Las vistas se pueden utilizar en casi cualquier lugar se puede  utilizar una tabla real. Construir la vista sobre otras vistas no es  raros.</p>"},{"location":"01.-Tutorial/03.-Caracter%C3%ADsticas%20avanzadas/03.-Claves%20for%C3%A1neas/","title":"03.-Claves for\u00e1neas","text":"<p>Recordemos el  <code>weather</code>y  <code>cities</code>cuadros del cap\u00edtulo 2. Considere el siguiente problema: Usted desea asegurarse de que nadie puede insertar filas en el  <code>weather</code>mesa que no tiene una entrada a juego en el  <code>cities</code>mesa. Esto se llama mantener la integridad referencial de sus datos. En los sistemas de bases de datos simplist\u00e1s esto se implementar\u00eda (si no lo hace) examinando primero la  <code>cities</code>tabla para comprobar si existe un registro de coincidencia, y luego insertar o rechazar el nuevo  <code>weather</code>Registros. Este enfoque tiene una serie de problemas y es muy inconveniente, por lo que PostgreSQL puede hacer esto por usted.</p> <p>La nueva declaraci\u00f3n de las tablas se ver\u00eda as\u00ed:</p> <pre><code>CREATE TABLE cities (\n        name     varchar(80) primary key,\n        location point\n);\n\nCREATE TABLE weather (\n        city      varchar(80) references cities(name),\n        temp_lo   int,\n        temp_hi   int,\n        prcp      real,\n        date      date\n);\n</code></pre> <p>Ahora intenta insertar un registro inv\u00e1lido:</p> <pre><code>INSERT INTO weather VALUES ('Berkeley', 45, 53, 0.0, '1994-11-28');\n</code></pre> <pre><code>ERROR:  insert or update on table \"weather\" violates foreign key constraint \"weather_city_fkey\"\nDETAIL:  Key (city)=(Berkeley) is not present in table \"cities\".\n</code></pre> <p>El comportamiento de las teclas extranjeras puede estar finamente  sintonizado con su aplicaci\u00f3n. No iremos m\u00e1s all\u00e1 de este simple ejemplo en este tutorial, sino que nos referimos al  para m\u00e1s informaci\u00f3n. Hacer un uso correcto de las claves extranjeras  definitivamente mejorar\u00e1 la calidad de sus aplicaciones de base de  datos, por lo que se le anima encarecidamente a aprender sobre ellas.</p>"},{"location":"01.-Tutorial/03.-Caracter%C3%ADsticas%20avanzadas/04.-Transacciones/","title":"04.-Transacciones","text":"<p>Las transacciones son un concepto fundamental de todos los sistemas de bases de datos. El punto esencial de una transacci\u00f3n es que agrupa m\u00faltiples pasos en una  operaci\u00f3n \u00fanica, todo o nada. Los estados intermedios entre los pasos no son visibles para otras transacciones simult\u00e1neas, y si se produce  alg\u00fan fallo que impide que la transacci\u00f3n se complete, entonces ninguno  de los pasos afecta a la base de datos en absoluto.</p> <p>Por ejemplo, considere una base de datos bancaria que contenga  saldos para diversas cuentas de clientes, as\u00ed como saldos totales de  dep\u00f3sitos para sucursales. Supongamos que queremos registrar un pago de  $100.00 de la cuenta de Alice a la cuenta de Bob. Simplificando  escandalosamente, los comandos SQL para esto podr\u00edan parecer:</p> <pre><code>UPDATE accounts SET balance = balance - 100.00\n    WHERE name = 'Alice';\nUPDATE branches SET balance = balance - 100.00\n    WHERE name = (SELECT branch_name FROM accounts WHERE name = 'Alice');\nUPDATE accounts SET balance = balance + 100.00\n    WHERE name = 'Bob';\nUPDATE branches SET balance = balance + 100.00\n    WHERE name = (SELECT branch_name FROM accounts WHERE name = 'Bob');\n</code></pre> <p>Los detalles de estos comandos no son importantes aqu\u00ed; el punto  importante es que hay varias actualizaciones separadas involucradas para lograr esta operaci\u00f3n bastante simple. Los oficiales de nuestro banco  querr\u00e1n estar seguros de que o todas estas actualizaciones ocurren, o  ninguna de ellas sucede. Ciertamente no har\u00eda por un fallo del sistema  que result\u00f3 en que Bob recibiera $100.00 que no fue debitado de Alice.  Alice tampoco seguir\u00eda siendo una clienta feliz si fuera cargada sin que Bob fuera acreditado. Necesitamos una garant\u00eda de que si algo sale mal a lo largo de la operaci\u00f3n, ninguno de los pasos ejecutados hasta ahora  entrar\u00e1 en vigor. Agrupar las actualizaciones en una transacci\u00f3n nos da esta garant\u00eda. Se dice que una transacci\u00f3n es at\u00f3mica: desde el punto de vista de otras transacciones, o bien ocurre completamente o no en absoluto.</p> <p>Tambi\u00e9n queremos una garant\u00eda de que una vez que una transacci\u00f3n  sea completada y reconocida por el sistema de bases de datos, de hecho  se haya registrado permanentemente y no se pierda incluso si se produce  un accidente poco despu\u00e9s. Por ejemplo, si estamos grabando un retiro de efectivo por parte de Bob, no queremos ninguna posibilidad de que el  adeudo a su cuenta desaparezca en un accidente justo despu\u00e9s de salir  por la puerta del banco. Una base de datos transaccional garantiza que  todas las actualizaciones realizadas por una transacci\u00f3n se registran en el almacenamiento permanente (es decir, en el disco) antes de que se  informe de la transacci\u00f3n.</p> <p>Otra propiedad importante de las bases de datos transaccionales  est\u00e1 estrechamente relacionada con la noci\u00f3n de actualizaciones  at\u00f3micas: cuando varias transacciones se ejecutan simult\u00e1neamente, cada  una no deber\u00eda ser capaz de ver los cambios incompletos realizados por  otros. Por ejemplo, si una transacci\u00f3n est\u00e1 ocupada por un total de  todos los saldos de la sucursal, no har\u00eda para que incluyera el adeudo  de la sucursal de Alice, pero no el cr\u00e9dito a la sucursal de Bob, ni  viceversa. As\u00ed que las transacciones deben ser todo o nada no s\u00f3lo en  t\u00e9rminos de su efecto permanente en la base de datos, sino tambi\u00e9n en  t\u00e9rminos de su visibilidad a medida que suceden. Las actualizaciones  realizadas hasta ahora por una transacci\u00f3n abierta son invisibles a  otras transacciones hasta que la transacci\u00f3n se complete, con lo cual  todas las actualizaciones se hacen visibles simult\u00e1neamente.</p> <p>En PostgreSQL, una transacci\u00f3n se establece alrededor de los comandos SQL de la transacci\u00f3n con  <code>BEGIN</code>y  <code>COMMIT</code>comandos. As\u00ed que nuestra transacci\u00f3n bancaria en realidad se ver\u00eda como:</p> <pre><code>BEGIN;\nUPDATE accounts SET balance = balance - 100.00\n    WHERE name = 'Alice';\n-- etc etc\nCOMMIT;\n</code></pre> <p>Si, a lo largo de la transacci\u00f3n, decidimos que no queremos  comprometernos (quiz\u00e1s nos acabamos de notar que el saldo de Alice sali\u00f3 negativo), podemos emitir el comando  <code>ROLLBACK</code>en vez de <code>COMMIT</code>, y todas nuestras actualizaciones hasta ahora ser\u00e1n canceladas.</p> <p>PostgreSQL realmente trata cada declaraci\u00f3n de SQL como si se ejecutara dentro de una transacci\u00f3n. Si no emites un  <code>BEGIN</code>comando, entonces cada declaraci\u00f3n individual tiene un  <code>BEGIN</code>y (si tiene \u00e9xito)  <code>COMMIT</code>Envuelto alrededor de ella. Un grupo de declaraciones rodeados de  <code>BEGIN</code>y  <code>COMMIT</code>A veces se llama bloque de transacciones.</p> <p>Nota Algunas bibliotecas clientes emiten  <code>BEGIN</code>y  <code>COMMIT</code>comandos autom\u00e1ticamente, para que pueda obtener el efecto de los bloques de  transacciones sin preguntar. Coma control la documentaci\u00f3n de la  interfaz que est\u00e1 utilizando.</p> <p>Es posible controlar las declaraciones en una transacci\u00f3n de una manera m\u00e1s granular a trav\u00e9s del uso de puntos de ahorro. Savepoints le permite descartar selectivamente partes de la  transacci\u00f3n, al tiempo que compromete el resto. Despu\u00e9s de definir un  punto de salvaci\u00f3n con <code>SAVEPOINT</code>, puede si es necesario volver al punto de salvado con <code>ROLLBACK TO</code>. Todos los cambios de base de datos de la transacci\u00f3n entre definir el  punto de reserva y volver a ella se descartan, pero los cambios antes  del punto de salvado se mantienen.</p> <p>Despu\u00e9s de volver a un punto de salva, se sigue definiendo, por lo  que puede volver a \u00e9l varias veces. Por el contrario, si usted est\u00e1  seguro de que no tendr\u00e1 que volver a un punto de salvado en particular  de nuevo, se puede liberar, por lo que el sistema puede liberar algunos  recursos. Tenga en cuenta que la liberaci\u00f3n o la vuelta a un punto de  ahorro liberar\u00e1 autom\u00e1ticamente todos los puntos de ahorro que se  definieron despu\u00e9s de \u00e9l.</p> <p>Todo esto est\u00e1 sucediendo dentro del bloque de transacciones, por  lo que nada de esto es visible para otras sesiones de base de datos.  Cuando y si usted comete el bloque de transacciones, las acciones  comprometidas se hacen visibles como una unidad a otras sesiones,  mientras que las acciones de la espalda enrollada nunca se hacen  visibles en absoluto.</p> <p>Recordando la base de datos del banco, supongamos que debitamos  $100.00 de la cuenta de Alice, y la cuenta de acreditar a Bob, s\u00f3lo para encontrar m\u00e1s tarde que deber\u00edamos haber acreditado la cuenta de Wally. Podr\u00edamos hacerlo usando puntos de ahorro como este:</p> <pre><code>BEGIN;\nUPDATE accounts SET balance = balance - 100.00\n    WHERE name = 'Alice';\nSAVEPOINT my_savepoint;\nUPDATE accounts SET balance = balance + 100.00\n    WHERE name = 'Bob';\n-- oops ... forget that and use Wally's account\nROLLBACK TO my_savepoint;\nUPDATE accounts SET balance = balance + 100.00\n    WHERE name = 'Wally';\nCOMMIT;\n</code></pre> <p>Este ejemplo es, por supuesto, demasiado simplificado, pero hay  mucho control posible en un bloque de transacciones a trav\u00e9s del uso de  puntos de ahorro. Adem\u00e1s,  <code>ROLLBACK TO</code>es la \u00fanica manera de recuperar el control de un bloque de transacciones  que fue puesto en estado abortado por el sistema debido a un error, a  falta de rodarlo completamente y empezar de nuevo.</p>"},{"location":"01.-Tutorial/03.-Caracter%C3%ADsticas%20avanzadas/05.-Funciones%20de%20ventanas/","title":"05.-Funciones de ventanas","text":"<p>Una funci\u00f3n de ventana realiza un c\u00e1lculo a trav\u00e9s de un conjunto de filas de tablas que de  alguna manera est\u00e1n relacionadas con la fila actual. Esto es comparable  al tipo de c\u00e1lculo que se puede hacer con una funci\u00f3n agregada. Sin  embargo, las funciones de las ventanas no hacen que las filas se agrupen en una sola fila de salida como las llamadas agregadas no de ventana.  En cambio, las filas conservan sus identidades separadas. Detr\u00e1s de las  escenas, la funci\u00f3n de la ventana es capaz de acceder a algo m\u00e1s que la  fila actual del resultado de la consulta.</p> <p>Aqu\u00ed hay un ejemplo que muestra c\u00f3mo comparar el salario de cada empleado con el salario promedio en su departamento:</p> <pre><code>SELECT depname, empno, salary, avg(salary) OVER (PARTITION BY depname) FROM empsalary;\n</code></pre> <pre><code>  depname  | empno | salary |          avg\n-----------+-------+--------+-----------------------\n develop   |    11 |   5200 | 5020.0000000000000000\n develop   |     7 |   4200 | 5020.0000000000000000\n develop   |     9 |   4500 | 5020.0000000000000000\n develop   |     8 |   6000 | 5020.0000000000000000\n develop   |    10 |   5200 | 5020.0000000000000000\n personnel |     5 |   3500 | 3700.0000000000000000\n personnel |     2 |   3900 | 3700.0000000000000000\n sales     |     3 |   4800 | 4866.6666666666666667\n sales     |     1 |   5000 | 4866.6666666666666667\n sales     |     4 |   4800 | 4866.6666666666666667\n(10 rows)\n</code></pre> <p>Las tres primeras columnas de salida provienen directamente de la tabla <code>empsalary</code>, y hay una fila de salida para cada fila en la tabla. La cuarta columna  representa un promedio tomado en todas las filas de tabla que tienen lo  mismo  <code>depname</code>valor como la fila actual. (En realidad es la misma funci\u00f3n que la no-ventada  <code>avg</code>agregado, pero el  <code>OVER</code>cl\u00e1usula hace que sea tratada como una funci\u00f3n de la ventana y calculada a trav\u00e9s del marco de la ventana.)</p> <p>Una llamada de funci\u00f3n de ventana siempre contiene un  <code>OVER</code>cl\u00e1usula directamente siguiendo el nombre y los argumentos de la funci\u00f3n de la  ventana. Esto es lo que lo distingue sint\u00e1cticamente de una funci\u00f3n  normal o agregado no de ventana. El  <code>OVER</code>la cl\u00e1usula determina exactamente c\u00f3mo se dividen las filas de la consulta para su procesamiento por la funci\u00f3n de la ventana. El  <code>PARTITION BY</code>cl\u00e1usula dentro  <code>OVER</code>divide las filas en grupos, o particiones, que comparten los mismos valores de la  <code>PARTITION BY</code>la expresi\u00f3n (s). Para cada fila, la funci\u00f3n de la ventana se calcula a  trav\u00e9s de las filas que caen en la misma partici\u00f3n que la fila actual.</p> <p>Tambi\u00e9n puede controlar el orden en el que las filas se procesan por funciones de ventana usando  <code>ORDER BY</code>dentro <code>OVER</code>. (La ventana  <code>ORDER BY</code>ni siquiera tiene que coincidir con el orden en el que las filas son de salida.) He aqu\u00ed un ejemplo:</p> <pre><code>SELECT depname, empno, salary,\n       rank() OVER (PARTITION BY depname ORDER BY salary DESC)\nFROM empsalary;\n</code></pre> <pre><code>  depname  | empno | salary | rank\n-----------+-------+--------+------\n develop   |     8 |   6000 |    1\n develop   |    10 |   5200 |    2\n develop   |    11 |   5200 |    2\n develop   |     9 |   4500 |    4\n develop   |     7 |   4200 |    5\n personnel |     2 |   3900 |    1\n personnel |     5 |   3500 |    2\n sales     |     1 |   5000 |    1\n sales     |     4 |   4800 |    2\n sales     |     3 |   4800 |    2\n(10 rows)\n</code></pre> <p>Como se muestra aqu\u00ed, el  <code>rank</code>funci\u00f3n produce un rango num\u00e9rico para cada distinto  <code>ORDER BY</code>valor en la partici\u00f3n de la fila actual, utilizando el orden definido por el  <code>ORDER BY</code>cl\u00e1usula.  <code>rank</code>no necesita un par\u00e1metro expl\u00edcito, porque su comportamiento est\u00e1 totalmente determinado por la  <code>OVER</code>cl\u00e1usula.</p> <p>Las filas consideradas por una funci\u00f3n de ventana son las de la tabla virtual . producida por la consulta's  <code>FROM</code>cl\u00e1usula filtrada por su <code>WHERE</code>, <code>GROUP BY</code>, y  <code>HAVING</code>cl\u00e1usulas, si las hay. Por ejemplo, una fila eliminada porque no cumple con la  <code>WHERE</code>la condici\u00f3n no se ve por ninguna funci\u00f3n de ventana. Una consulta puede  contener m\u00faltiples funciones de ventana que cortan los datos de  diferentes maneras usando diferentes  <code>OVER</code>cl\u00e1usulas, pero todas act\u00faan sobre la misma colecci\u00f3n de filas definidas por esta tabla virtual.</p> <p>Ya vimos eso.  <code>ORDER BY</code>se puede omitir si el orden de las filas no es importante. Tambi\u00e9n es posible omitir <code>PARTITION BY</code>, en cuyo caso hay una sola partici\u00f3n que contiene todas las filas.</p> <p>Hay otro concepto importante asociado a las funciones de la  ventana: para cada fila, hay un conjunto de filas dentro de su partici\u00f3n llamada marco de la ventana. Algunas funciones de ventana act\u00faan s\u00f3lo en las filas del marco de la  ventana, en lugar de toda la partici\u00f3n. Por defecto, si  <code>ORDER BY</code>se suministra entonces el marco consiste en todas las filas desde el  inicio de la partici\u00f3n hasta la fila actual, adem\u00e1s de cualquier fila  siguiente que sean iguales a la fila actual de acuerdo con el  <code>ORDER BY</code>cl\u00e1usula. Cuando  <code>ORDER BY</code>se omite el marco predeterminado consiste en todas las filas en la partici\u00f3n. <sup>1</sup> Aqu\u00ed hay un ejemplo de uso <code>sum</code>:</p> <pre><code>SELECT salary, sum(salary) OVER () FROM empsalary;\n</code></pre> <pre><code> salary |  sum\n--------+-------\n   5200 | 47100\n   5000 | 47100\n   3500 | 47100\n   4800 | 47100\n   3900 | 47100\n   4200 | 47100\n   4500 | 47100\n   4800 | 47100\n   6000 | 47100\n   5200 | 47100\n(10 rows)\n</code></pre> <p>Arriba, ya que no hay  <code>ORDER BY</code>en el  <code>OVER</code>cl\u00e1usula, el marco de la ventana es el mismo que la partici\u00f3n, que por falta de  <code>PARTITION BY</code>es toda la tabla; en otras palabras, cada suma se toma sobre toda la tabla y por lo tanto obtenemos el mismo resultado para cada fila de salida.  Pero si a\u00f1adimos un  <code>ORDER BY</code>cl\u00e1usula, obtenemos resultados muy diferentes:</p> <pre><code>SELECT salary, sum(salary) OVER (ORDER BY salary) FROM empsalary;\n</code></pre> <pre><code> salary |  sum\n--------+-------\n   3500 |  3500\n   3900 |  7400\n   4200 | 11600\n   4500 | 16100\n   4800 | 25700\n   4800 | 25700\n   5000 | 30700\n   5200 | 41100\n   5200 | 41100\n   6000 | 47100\n(10 rows)\n</code></pre> <p>Aqu\u00ed la suma se toma del primer (menor) sueldo hasta el actual,  incluyendo cualquier duplicado de la actual (adunice los resultados para los salarios duplicados).</p> <p>Las funciones de la ventana s\u00f3lo se permiten en la  <code>SELECT</code>lista y la  <code>ORDER BY</code>cl\u00e1usula de la consulta. Est\u00e1n prohibidos en otros lugares, como en <code>GROUP BY</code>,  <code>HAVING</code>y  <code>WHERE</code>cl\u00e1usulas. Esto se debe a que l\u00f3gicamente se ejecutan despu\u00e9s de la tramitaci\u00f3n de esas cl\u00e1usulas. Adem\u00e1s, las funciones de la ventana se ejecutan despu\u00e9s de funciones de agregados no de ventana. Esto significa que es v\u00e1lido  incluir una llamada de funci\u00f3n agregada en los argumentos de una funci\u00f3n de ventana, pero no viceversa.</p> <p>Si hay una necesidad de filtrar o agrupar filas despu\u00e9s de que se  realizan los c\u00e1lculos de la ventana, puede utilizar un subseleccionado.  Por ejemplo:</p> <pre><code>SELECT depname, empno, salary, enroll_date\nFROM\n  (SELECT depname, empno, salary, enroll_date,\n          rank() OVER (PARTITION BY depname ORDER BY salary DESC, empno) AS pos\n     FROM empsalary\n  ) AS ss\nWHERE pos &lt; 3;\n</code></pre> <p>La consulta anterior s\u00f3lo muestra las filas de la consulta interior teniendo  <code>rank</code>menos de 3.</p> <p>Cuando una consulta implica m\u00faltiples funciones de ventana, es posible escribir cada una con una separada  <code>OVER</code>cl\u00e1usula, pero esto es duplicado y propenso a errores si se quiere el mismo  comportamiento de escaparate para varias funciones. En su lugar, cada  comportamiento de ventanas puede ser nombrado en un  <code>WINDOW</code>cl\u00e1usula y luego referenciada en <code>OVER</code>. Por ejemplo:</p> <pre><code>SELECT sum(salary) OVER w, avg(salary) OVER w\n  FROM empsalary\n  WINDOW w AS (PARTITION BY depname ORDER BY salary DESC);\n</code></pre> <p>Se ver\u00e1n m\u00e1s detalles sobre las funciones de la ventana m\u00e1s adelante</p> <ol> <li> <p>Hay opciones para definir el marco de la ventana de otras maneras, pero este tutorial no los cubre. Para m\u00e1s detalles v\u00e9ase.\u00a0\u21a9</p> </li> </ol>"},{"location":"01.-Tutorial/03.-Caracter%C3%ADsticas%20avanzadas/06.-Herencia/","title":"06.-Herencia","text":"<p>La herencia es un concepto de bases de datos orientadas a objetos.  Abre interesantes nuevas posibilidades de dise\u00f1o de bases de datos.</p> <p>Vamos a crear dos tablas: Una tabla  <code>cities</code>y una mesa <code>capitals</code>. Naturalmente, las capitales tambi\u00e9n son ciudades, as\u00ed que quieres  alguna manera de mostrar las capitales impl\u00edcitamente cuando listas  todas las ciudades. Si eres realmente listo podr\u00edas inventar alg\u00fan  esquema como este:</p> <pre><code>CREATE TABLE capitals (\n  name       text,\n  population real,\n  elevation  int,    -- (in ft)\n  state      char(2)\n);\n\nCREATE TABLE non_capitals (\n  name       text,\n  population real,\n  elevation  int     -- (in ft)\n);\n\nCREATE VIEW cities AS\n  SELECT name, population, elevation FROM capitals\n    UNION\n  SELECT name, population, elevation FROM non_capitals;\n</code></pre> <p>Esto funciona bien en cuanto a consultas va, pero se pone feo cuando necesitas actualizar varias filas, para una cosa.</p> <p>Una mejor soluci\u00f3n es la siguiente:</p> <pre><code>CREATE TABLE cities (\n  name       text,\n  population real,\n  elevation  int     -- (in ft)\n);\n\nCREATE TABLE capitals (\n  state      char(2) UNIQUE NOT NULL\n) INHERITS (cities);\n</code></pre> <p>En este caso, una fila de  <code>capitals</code>hereda todas las columnas (<code>name</code>, <code>population</code>, y <code>elevation</code>) de su progenitor, <code>cities</code>. El tipo de la columna  <code>name</code>es <code>text</code>, un tipo nativo PostgreSQL para cadenas de caracteres de longitud variable. El  <code>capitals</code>tabla tiene una columna adicional, <code>state</code>, que muestra su abreviatura estatal. En PostgreSQL, una tabla puede heredar de cero o m\u00e1s otras tablas.</p> <p>Por ejemplo, la siguiente consulta encuentra los nombres de todas  las ciudades, incluidas las capitales de los estados, que se encuentran  en una elevaci\u00f3n de m\u00e1s de 500 pies:</p> <pre><code>SELECT name, elevation\n  FROM cities\n  WHERE elevation &gt; 500;\n</code></pre> <p>que devuelve:</p> <pre><code>   name    | elevation\n-----------+-----------\n Las Vegas |      2174\n Mariposa  |      1953\n Madison   |       845\n(3 rows)\n</code></pre> <p>Por otro lado, la siguiente consulta encuentra todas las ciudades  que no son capitales de estado y est\u00e1n situadas en una elevaci\u00f3n de m\u00e1s  de 500 pies:</p> <pre><code>SELECT name, elevation\n    FROM ONLY cities\n    WHERE elevation &gt; 500;\n</code></pre> <pre><code>   name    | elevation\n-----------+-----------\n Las Vegas |      2174\n Mariposa  |      1953\n(2 rows)\n</code></pre> <p>Aqu\u00ed el  <code>ONLY</code> antes de  <code>cities</code> indica que la consulta debe ser atropaleada s\u00f3lo el  <code>cities</code> tablas y no tablas a continuaci\u00f3n  <code>cities</code>en la jerarqu\u00eda de herencias. Muchas de las \u00f3rdenes que ya hemos discutido. <code>SELECT</code>, <code>UPDATE</code>, y  <code>DELETE</code>- apoyar esto  <code>ONLY</code>notaci\u00f3n.</p> <p>Nota</p> <p>Aunque la herencia es a menudo \u00fatil, no se ha integrado con  limitaciones \u00fanicas o con claves for\u00e1neas, lo que limita su utilidad.</p>"},{"location":"01.-Tutorial/03.-Caracter%C3%ADsticas%20avanzadas/07.-Conclusi%C3%B3n/","title":"07.-Conclusi\u00f3n","text":"<p>PostgreSQL tiene muchas caracter\u00edsticas no tocadas en esta introducci\u00f3n, que se ha orientado hacia los nuevos usuarios de SQL. Estas caracter\u00edsticas se discuten con m\u00e1s detalle en adelante.</p>"},{"location":"02.-El%20lenguaje%20SQL/","title":"Index","text":"<p>Esta parte describe el uso de la  SQLlenguaje en PostgreSQL. Empezamos con la descripci\u00f3n de la sintaxis general de SQL, entonces explicar c\u00f3mo crear las estructuras para mantener los datos,  c\u00f3mo poblar la base de datos y c\u00f3mo consultarlo. La parte media enumera  los tipos de datos disponibles y las funciones para su uso en  SQLcomandos. El resto trata varios aspectos que son importantes para sintonizar una base de datos para un rendimiento \u00f3ptimo.</p> <p>La informaci\u00f3n en esta parte se arregla para que un usuario  novato pueda seguirla de punta para obtener una comprensi\u00f3n completa de  los temas sin tener que referirse demasiado tiempo. Los cap\u00edtulos est\u00e1n  destinados a ser aut\u00f3nomos, para que los usuarios avanzados puedan leer  los cap\u00edtulos individualmente como ellos elijan. La informaci\u00f3n en esta  parte se presenta de manera narrativa en unidades de actualidad. Los  lectores que buscan una descripci\u00f3n completa de un comando en particular deben ver la Parte VI.</p> <p>Los lectores de esta parte deben saber c\u00f3mo conectarse a una base de datos PostgreSQL y emitir  SQLcomandos. Se anima a los lectores que no est\u00e1n familiarizados con estos temas a leer la Parte I primero.  SQLLos comandos se introducen t\u00edpicamente usando el terminal interactivo PostgreSQL psql, pero otros programas que tienen una funcionalidad similar tambi\u00e9n se pueden utilizar. </p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/","title":"Index","text":"<p>La entrada SQL consiste en una secuencia de comandos. Un comando se compone de una secuencia de tokens, terminada por un puntomico (   . El final de la corriente de entrada tambi\u00e9n termina un comando. Qu\u00e9  fichas son v\u00e1lidas depende de la sintaxis del comando en particular.</p> <p>Un token puede ser una palabra clave, un identificador, un identificador cotizado, un literal (o constante), o un s\u00edmbolo de caracteres especial. Los fichas  normalmente se separan por espacio en blanco (espacio, pesta\u00f1a,  newline), pero no tienen por qu\u00e9 ser si no hay ambiguedad (que  generalmente es s\u00f3lo el caso si un car\u00e1cter especial est\u00e1 adyacente a  alg\u00fan otro tipo simb\u00f3lico).</p> <p>Por ejemplo, lo siguiente es (synt\u00e1cticamente) la entrada SQL v\u00e1lida:</p> <pre><code>SELECT * DESDE MITABLE;\nActualizaci\u00f3n MY-TABLE SET A = 5;\nINSERT INTO MALL VALUE (3, 'hola all\u00ed');\n</code></pre> <p>Esta es una secuencia de tres comandos, uno por l\u00ednea (aunque esto  no se requiere; m\u00e1s de un comando puede estar en una l\u00ednea, y los  comandos pueden ser divididos \u00fatilmente a trav\u00e9s de las l\u00edneas).</p> <p>Adem\u00e1s, los comentarios pueden ocurrir en la entrada de SQL. No son fichas, son efectivamente equivalentes al espacio en blanco.</p> <p>La sintaxis SQL no es muy consistente con respecto a qu\u00e9 fichas  identifican los comandos y cu\u00e1les son operandos o par\u00e1metros. Las  primeras fichas son generalmente el nombre de comando, as\u00ed que en el  ejemplo anterior normalmente hablar\u00edamos de un \"SELECT\", un \"ActADE\", y un INSERTcomando INSERT. Pero, por ejemplo, el  <code>UPDATE</code>El mando siempre requiere un  <code>SET</code>token aparecer en una determinada posici\u00f3n, y esta variaci\u00f3n particular de  <code>INSERT</code>tambi\u00e9n requiere un  <code>VALUES</code>para estar completa. Las reglas de sintaxis precisas para cada comando se describen en la Parte VI.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/01.-Identificadores%20y%20palabras%20clave/","title":"01.-Identificadores y palabras clave","text":""},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/01.-Identificadores%20y%20palabras%20clave/#411-identificadores-y-palabras-claves","title":"4.1.1. Identificadores y Palabras Claves","text":"<p>fichas como <code>SELECT</code>, <code>UPDATE</code>, o  <code>VALUES</code>en el ejemplo anterior hay ejemplos de palabras clave, es decir, palabras que tienen un significado fijo en el idioma SQL. Las fichas  <code>MY_TABLE</code>y  <code>A</code>son ejemplos de identificadores. Identan nombres de tablas, columnas u otros objetos de base de datos,  dependiendo del comando en el que se utilicen. Por lo tanto, a veces  simplemente se les llaman nombres. Las palabras clave y los identificadores tienen la misma estructura  l\u00e9xica, lo que significa que no se puede saber si un token es un  identificador o una palabra clave sin conocer el idioma. En el ap\u00e9ndice C se puede encontrar una lista completa de palabras clave.</p> <p>Los identificadores SQL y las palabras clave deben comenzar con una letra (<code>a</code>- -<code>z</code>, pero tambi\u00e9n letras con marcas diacr\u00edticas y letras no latinas) o un subrayado (<code>_</code>). Los caracteres posteriores en un identificador o palabra clave pueden ser letras, subrayados, d\u00edgitos (<code>0</code>- -<code>9</code>), o signos en d\u00f3lares (<code>$</code>). Tenga en cuenta que los signos en d\u00f3lares no est\u00e1n permitidos en los  identificadores de acuerdo con la letra del est\u00e1ndar SQL, por lo que su  uso podr\u00eda hacer que las aplicaciones sean menos port\u00e1tiles. El est\u00e1ndar SQL no definir\u00e1 una palabra clave que contenga d\u00edgitos o arranques o  termines con un subrayado, por lo que los identificadores de este  formulario son seguros contra posibles conflictos con futuras  extensiones del est\u00e1ndar.</p> <p>El sistema no utiliza m\u00e1s que <code>NAMEDATALEN</code>-1 bytes de un identificador; nombres m\u00e1s largos se pueden escribir en comandos, pero ser\u00e1n truncados. Por defecto,  <code>NAMEDATALEN</code>es de 64 por lo que la longitud m\u00e1xima del identificador es de 63 bytes.  Si este l\u00edmite es problem\u00e1tico, se puede elevar cambiando la  <code>NAMEDATALEN</code>constante en <code>src/include/pg_config_manual.h</code>.</p> <p>Las palabras clave y los identificadores no con citas son insensibles a los casos. Por lo tanto:</p> <pre><code>Actualizaci\u00f3n MY-TABLE SET A = 5;\n</code></pre> <p>puede escribirse de manera equivalente como:</p> <pre><code>uPDaTE my-TabLE SeT a = 5;\n</code></pre> <p>Una convenci\u00f3n que se utiliza a menudo es para escribir palabras  clave en el caso superior y nombres en el caso inferior, por ejemplo:</p> <pre><code>Actualizaci\u00f3n de miable SET a = 5;\n</code></pre> <p>Hay un segundo tipo de identificador: el identificador delimitado o identificador cotizado. Est\u00e1 formado adjuntando una secuencia arbitraria de caracteres en dobles citas (<code>\"</code>). Un identificador delimitado es siempre un identificador, nunca una palabra clave. As\u00ed que  <code>\"select\"</code>podr\u00eda utilizarse para referirse a una columna o tabla llamada . select , mientras que un no cotizado   se tomar\u00eda como una palabra clave y, por lo tanto, provocar\u00eda un error  de parse cuando se usara cuando se espera una tabla o nombre de columna. El ejemplo se puede escribir con identificadores citados como este:</p> <pre><code>Actualizaci\u00f3n de la SET \"a\" = 5;\n</code></pre> <p>Los identificadores cotizados pueden contener cualquier car\u00e1cter, excepto el car\u00e1cter con c\u00f3digo cero. (Para incluir una doble cita,  escriba dos comillas dobles.) Esto permite la construcci\u00f3n de nombres de tablas o columnas que de otra manera no ser\u00edan posibles, como aquellos  que contienen espacios o ampersands. La limitaci\u00f3n de longitud todav\u00eda  se aplica.</p> <p>Citar un identificador tambi\u00e9n lo hace sensible al caso, mientras que los nombres no cotizados siempre se doblan a min\u00fasculas. Por  ejemplo, los identificadores <code>FOO</code>, <code>foo</code>, y  <code>\"foo\"</code>son considerados los mismos por PostgreSQL, pero  <code>\"Foo\"</code>y  <code>\"FOO\"</code>son diferentes de estos tres y entre s\u00ed. (El plegado de nombres no cotizado al caso inferior en PostgreSQL es incompatible con el est\u00e1ndar SQL, que dice que los nombres no cotizado deben plegarse a la caja superior. As\u00ed,  <code>foo</code>debe ser equivalente a  <code>\"FOO\"</code>no  <code>\"foo\"</code>seg\u00fan el est\u00e1ndar. Si quieres escribir aplicaciones port\u00e1tiles, se te  aconseja citar siempre un nombre en particular o nunca citarlo.)</p> <p>Una variante de identificadores cotizados permite incluir los  caracteres de Unicode escapados identificados por sus puntos de c\u00f3digo.  Esta variante comienza con  <code>U&amp;</code>(\u00faper o min\u00fasculo U seguido de ampersand) inmediatamente antes de la doble  cita de apertura, sin ning\u00fan espacio en el medio, por ejemplo <code>U&amp;\"foo\"</code>. (Tenga en cuenta que esto crea una ambiguedad con el operador <code>&amp;</code>. Utilice espacios alrededor del operador para evitar este problema.)  Dentro de las citas, los caracteres de Unicode se pueden especificar en  forma escapada escribiendo una reacci\u00f3n seguida por el n\u00famero de punto  de c\u00f3digo hexadecimal de cuatro d\u00edgitos o alternativamente una reacci\u00f3n  tras una se\u00f1al plus seguida de un n\u00famero de punto de c\u00f3digo hexadecimal  de seis d\u00edgitos. Por ejemplo, el identificador  <code>\"data\"</code>podr\u00eda escribirse como</p> <pre><code>U&amp;\"d.0061t.000061\"\n</code></pre> <p>El siguiente ejemplo menos trivial escribe la palabra rusa \" slon\" (elefante) en letras cir\u00edlicos:</p> <pre><code>U&amp;\"-0441-043B-043E-043D\"\n</code></pre> <p>Si se desea un car\u00e1cter de escape diferente al de la reacci\u00f3n, se puede especificar usando el  <code>UESCAPE</code>cl\u00e1usula despu\u00e9s de la cadena, por ejemplo:</p> <pre><code>U&amp;\"d-0061t-000061\" UESCAPE ''\n</code></pre> <p>El personaje de escape puede ser cualquier personaje que no sea  un d\u00edgito hexadecimal, el signo m\u00e1s, una sola cita, una comici\u00f3n doble, o un car\u00e1cter de espacio blanco. Tenga en cuenta que el car\u00e1cter de  escape est\u00e1 escrito en comillas individuales, no comillas dobles,  despu\u00e9s de <code>UESCAPE</code>.</p> <p>Para incluir el car\u00e1cter de escape en el identificador literalmente, escr\u00edbalo dos veces.</p> <p>Ya sea el formulario de escape de 4 d\u00edgitos o de 6 d\u00edgitos se  puede utilizar para especificar pares de alquiler UTF-16 para componer  caracteres con puntos de c\u00f3digo m\u00e1s grandes que U-FFFF, aunque la  disponibilidad de la forma de 6 d\u00edgitos t\u00e9cnicamente hace esto  innecesario. (Los pares de sorroga no se almacenan directamente, sino  que se combinan en un solo punto de c\u00f3digo.)</p> <p>Si la codificaci\u00f3n del servidor no es UTF-8, el punto de c\u00f3digo  Unicode identificado por una de estas secuencias de escape se convierte  en la codificaci\u00f3n del servidor real; se informa un error si eso no es  posible.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/02.-Constantes/","title":"02.-Constantes","text":""},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/02.-Constantes/#412-constantes","title":"4.1.2. Constantes","text":"<p>Hay tres tipos de constantes de tipo impl\u00edcita en PostgreSQL: cuerdas, bits y n\u00fameros. Los constantes tambi\u00e9n se pueden especificar  con tipos expl\u00edcitos, que pueden permitir una representaci\u00f3n m\u00e1s precisa y un manejo m\u00e1s eficiente por parte del sistema. Estas alternativas se  discuten en las subsecciones siguientes.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/02.-Constantes/#4121-string-constants","title":"4.1.2.1. String Constants","text":"<p>Una constante de cadena en SQL es una secuencia arbitraria de caracteres limitado por comillas simples (<code>'</code>), por ejemplo <code>'This is a string'</code>. Para incluir un personaje de una sola cita dentro de una constante de  cuerda, escriba dos comillas \u00fanicas adyacentes, por ejemplo, <code>'Dianne''s horse'</code>. Tenga en cuenta que esto no es lo mismo que un personaje de doble cotizaci\u00f3n (<code>\"</code>).</p> <p>Dos constantes de cuerda que s\u00f3lo est\u00e1n separadas por el espacio blanco con al menos una nueva l\u00ednea son concatenadas y tratadas eficazmente como si la cuerda hubiera sido escrita como una constante. Por ejemplo:</p> <pre><code>SELECT 'foo'\n\"bar\";\n</code></pre> <p>equivalente a:</p> <pre><code>SELECT 'foobar';\n</code></pre> <p>pero:</p> <pre><code>SELECT 'foo' 'bar';\n</code></pre> <p>no es sintaxis v\u00e1lida. (Este comportamiento ligeramente extra\u00f1o es especificado por SQL; PostgreSQL est\u00e1 siguiendo el est\u00e1ndar.)</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/02.-Constantes/#4122-constantes-de-cuerda-con-c-style-escapes","title":"4.1.2.2 Constantes de cuerda con C-Style Escapes","text":"<p>PostgreSQL tambi\u00e9n acepta las constantes de  cadena , que son una extensi\u00f3n del est\u00e1ndar SQL. Una constante de la cadena de escape se especifica escribiendo la carta  <code>E</code>(caso superior o inferior) justo antes de la cita \u00fanica de apertura, por ejemplo, <code>E'foo'</code>. (Cuando contin\u00fae una cuerda de escape constante a trav\u00e9s de las l\u00edneas, escriba  <code>E</code>s\u00f3lo antes de la primera cita de apertura.) Dentro de una cuerda de escape, un personaje de reacci\u00f3n (<code>\\</code>) comienza una secuencia de escape de  similar a C, en la que la combinaci\u00f3n de la reacci\u00f3n y los siguientes  caracteres (s) representan un valor de byte especial, como se muestra en .</p> <p>Cuadro 4.1. Retola de las secuencias de escape</p> Retablos de Escape Sequence Interpretaci\u00f3n <code>\\b</code> espacio trasero <code>\\f</code> pienso en el pienso <code>\\n</code> nueva l\u00ednea <code>\\r</code> Retornaje del transporte <code>\\t</code> pesta\u00f1a <code>\\*</code>o<code>*</code>, <code>\\*</code>oo<code>*</code>,  <code>\\*</code>ooo<code>*</code>( <code>o</code>= 0-7) valor de byte octal <code>\\x*</code>h<code>*</code>,  <code>\\x*</code>hh<code>*</code>( <code>h</code>= 0,9, A-F) Valor hexadecimal de byte <code>\\u*</code>xxxx<code>*</code>,  <code>\\U*</code>xxxxxxxx<code>*</code>( <code>x</code>= 0,9, A-F) 16 o 32 bits hexadecimal El valor de car\u00e1cter de Unicode <p>Cualquier otro personaje despu\u00e9s de una reacci\u00f3n es tomado  literalmente. As\u00ed, para incluir un personaje de reacci\u00f3n, escribir dos  backslashes (<code>\\\\</code>). Adem\u00e1s, una sola cita se puede incluir en una cuerda de escape escribiendo <code>\\'</code>, adem\u00e1s de la forma normal de <code>''</code>.</p> <p>Es su responsabilidad que las secuencias de byte que crea,  especialmente cuando se utilizan los escapes octales o hexadecimales,  compongan caracteres v\u00e1lidos en la codificaci\u00f3n del conjunto de  caracteres del servidor. Una alternativa \u00fatil es utilizar Unicode  escapes o la sintaxis alternativa de escape Unicode, explicado en la Secci\u00f3n 4.1.2.3 ; entonces el servidor comprobar\u00e1 que la conversi\u00f3n de caracteres es posible.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/02.-Constantes/#precaucion","title":"Precauci\u00f3n","text":"<p>Si el par\u00e1metro de configuraci\u00f3n est\u00e1ndar.conformidad.strings es <code>off</code>, entonces PostgreSQL reconoce escapes de reacci\u00f3n en constantes regulares y de cuerdas de escape. Sin embargo, a partir de PostgreSQL 9.1, el predeterminado es <code>on</code>, lo que significa que las fugas de reacci\u00f3n se reconocen s\u00f3lo en las  constantes de la cuerda de escape. Este comportamiento es m\u00e1s compatible con los est\u00e1ndares, pero podr\u00eda romper aplicaciones que se basan en el  comportamiento hist\u00f3rico, donde las fugas de reacci\u00f3n siempre fueron  reconocidas. Como soluci\u00f3n, puedes establecer este par\u00e1metro en <code>off</code>, pero es mejor migrar lejos de usar escapes de reacci\u00f3n. Si necesitas  usar un escape de reacci\u00f3n para representar un personaje especial,  escribe la constante de cuerda con un <code>E</code>.</p> <p>Adem\u00e1s de <code>standard_conforming_strings</code>, los par\u00e1metros de configuraci\u00f3n escapen.advertida y contrada-resistencia-cuerno tratamiento de espaldas contradas en constantes de cuerda.</p> <p>El car\u00e1cter con el c\u00f3digo cero no puede estar en una constante de cadena.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/02.-Constantes/#4123-string-constants-con-unicode-escapes","title":"4.1.2.3. String Constants con Unicode Escapes","text":"<p>PostgreSQL tambi\u00e9n admite otro tipo de sintaxis de escape para cadenas que permite especificar caracteres de Unicode arbitrarios por punto de c\u00f3digo.  Comienza con una constante de cuerda de escape Unicode  <code>U&amp;</code>(\u00faltima carta de caso U seguida de ampersand) inmediatamente antes de la cita  de apertura, sin ning\u00fan espacio en el medio, por ejemplo <code>U&amp;'foo'</code>. (Tenga en cuenta que esto crea una ambiguedad con el operador <code>&amp;</code>. Utilice espacios alrededor del operador para evitar este problema.)  Dentro de las citas, los caracteres de Unicode se pueden especificar en  forma escapada escribiendo una reacci\u00f3n seguida por el n\u00famero de punto  de c\u00f3digo hexadecimal de cuatro d\u00edgitos o alternativamente una reacci\u00f3n  tras una se\u00f1al plus seguida de un n\u00famero de punto de c\u00f3digo hexadecimal  de seis d\u00edgitos. Por ejemplo, la cadena  <code>'data'</code>podr\u00eda escribirse como</p> <pre><code>U&amp;'d-0061t-000061'\n</code></pre> <p>El siguiente ejemplo menos trivial escribe la palabra rusa \" slon\" (elefante) en letras cir\u00edlicos:</p> <pre><code>U&amp;'-0441-043B-043E-043D'\n</code></pre> <p>Si se desea un car\u00e1cter de escape diferente al de la reacci\u00f3n, se puede especificar usando el  <code>UESCAPE</code>cl\u00e1usula despu\u00e9s de la cadena, por ejemplo:</p> <pre><code>U&amp;'d.0061t.000061' UESCAPE ''\n</code></pre> <p>El personaje de escape puede ser cualquier personaje que no sea un d\u00edgito hexadecimal, el signo m\u00e1s, una sola cita, una comici\u00f3n doble, o un car\u00e1cter de espacio blanco.</p> <p>Para incluir el personaje de escape en la cuerda literalmente, escr\u00edbalo dos veces.</p> <p>Ya sea el formulario de escape de 4 d\u00edgitos o de 6 d\u00edgitos se  puede utilizar para especificar pares de alquiler UTF-16 para componer  caracteres con puntos de c\u00f3digo m\u00e1s grandes que U-FFFF, aunque la  disponibilidad de la forma de 6 d\u00edgitos t\u00e9cnicamente hace esto  innecesario. (Los pares de sorroga no se almacenan directamente, sino  que se combinan en un solo punto de c\u00f3digo.)</p> <p>Si la codificaci\u00f3n del servidor no es UTF-8, el punto de c\u00f3digo Unicode identificado por una de estas secuencias de escape se convierte en la codificaci\u00f3n del servidor real; se informa un error si eso no es  posible.</p> <p>Adem\u00e1s, la sintaxis de escape de Unicode para las constantes de cadena s\u00f3lo funciona cuando se encende el par\u00e1metro de configuraci\u00f3n est\u00e1ndar. Esto se debe a que de lo contrario esta sintaxis podr\u00eda confundir a los clientes que analizan las declaraciones de SQL hasta el punto de que  podr\u00eda conducir a inyecciones SQL y problemas de seguridad similares. Si el par\u00e1metro est\u00e1 listo para desactivar, esta sintaxis ser\u00e1 rechazada  con un mensaje de error.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/02.-Constantes/#4124-constants-de-cuerda-de-cuerda-de-dolar","title":"4.1.2.4. Constants de cuerda de cuerda de D\u00f3lar","text":"<p>Si bien la sintaxis est\u00e1ndar para especificar constantes de  cadena es generalmente conveniente, puede ser dif\u00edcil de entender cuando la cuerda deseada contiene muchas comillas individuales, ya que cada  una de ellas debe ser duplicada. Para permitir m\u00e1s consultas legibles en tales situaciones, PostgreSQL proporciona otra manera, llamada \"---- cita de d\u00f3lares, para escribir constantes de cadena. Una constante de cuerda cotizado en d\u00f3lares consiste en un signo de d\u00f3lar (<code>$</code>), una etiqueta opcional de cero o m\u00e1s caracteres, otro signo de d\u00f3lar, una secuencia  arbitraria de caracteres que compone el contenido de cuerda, un signo de d\u00f3lar, la misma etiqueta que comenz\u00f3 esta cotizaci\u00f3n en d\u00f3lares, y un  signo de d\u00f3lar. Por ejemplo, aqu\u00ed hay dos maneras diferentes de  especificar la cadena. El caballo de Dianne.</p> <pre><code>$$Cierdo de Danina$$\n$SmeTag$Dianne's horse$SomeTag$\n</code></pre> <p>Observe que dentro de la cadena cotizado por el d\u00f3lar, las  citas simples se pueden usar sin necesidad de ser escapada. De hecho,  nunca se escapan personajes dentro de una cuerda cotizado en d\u00f3lares: el contenido de cuerdas siempre se escribe literalmente. Los contraspaldas no son especiales, y tampoco los signos de d\u00f3lares, a menos que sean  parte de una secuencia que coinja con la etiqueta de apertura.</p> <p>Es posible anidar constantes de cuerda con citas en d\u00f3lares  eligiendo diferentes etiquetas en cada nivel de anidaci\u00f3n. Esto se  utiliza m\u00e1s com\u00fanmente en las definiciones de funciones de escritura.  Por ejemplo:</p> <pre><code>$function$\nBEGIN\n    RETURN ($1 - $q$[-t.r.n.v]$q$2).\nEND;\n$function$\n</code></pre> <p>Aqu\u00ed, la secuencia  <code>$q$[\\t\\r\\n\\v\\\\]$q$</code>representa una cuerda literal con el d\u00f3lar <code>[\\t\\r\\n\\v\\\\]</code>, que ser\u00e1 reconocido cuando el cuerpo de la funci\u00f3n sea ejecutado por PostgreSQL. Pero como la secuencia no coincide con el d\u00f3lar exterior citando delimitador <code>$function$</code>, es s\u00f3lo algunos m\u00e1s caracteres dentro de la constante en lo que respecta a la cuerda externa.</p> <p>La etiqueta, si la hay, de una cadena con cita en d\u00f3lares sigue las mismas reglas que un identificador no citado, excepto que no puede  contener un signo de d\u00f3lar. Las etiquetas son sensibles, por lo que  <code>$tag$String content$tag$</code>es correcto, pero  <code>$TAG$String content$tag$</code>No lo es.</p> <p>Una cadena con el d\u00f3lar que sigue una palabra clave o  identificador debe separarse de \u00e9l por espacio en blanco; de lo  contrario, el delimitador de d\u00f3lares que citar\u00eda el delimitador se  tomar\u00eda como parte del identificador anterior.</p> <p>La cita de d\u00f3lares no es parte del est\u00e1ndar SQL, pero a menudo  es una manera m\u00e1s conveniente de escribir literales de cuerda  complicados que la sintaxis de cotizaci\u00f3n \u00fanica compatible con el  est\u00e1ndar. Es particularmente \u00fatil cuando se representan constantes de  cuerda dentro de otras constantes, como a menudo se necesita en las  definiciones de funci\u00f3n de procedimiento. Con una sola cita de sintaxis, cada reacci\u00f3n en el ejemplo anterior tendr\u00eda que ser escrito como  cuatro contrasueldos, que se reducir\u00edan a dos barras de fondo en el par  en parar la constante de la cadena original, y luego a una cuando la  constante de la cadena interna se repara durante la ejecuci\u00f3n de la  funci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/02.-Constantes/#4125-bit-string-constants","title":"4.1.2.5. Bit-String Constants","text":"<p>Las constantes de cuerda de cuerda parecen constantes de cuerda regulares con un  <code>B</code>(caso superior o inferior) inmediatamente antes de la cita de apertura (sin espacio en blanco intervenida), por ejemplo, <code>B'1001'</code>. Los \u00fanicos personajes permitidos dentro de las constantes de la cuerda de bits son  <code>0</code>y <code>1</code>.</p> <p>Alternativamente, las constantes de bit-cadeo se pueden especificar en la notaci\u00f3n hexadecimal, utilizando un liderazgo  <code>X</code>(\u00fabre o minustada), por ejemplo, <code>X'1FF'</code>. Esta notaci\u00f3n es equivalente a una constante de bit-string con cuatro d\u00edgitos binarios para cada d\u00edgito hexadecimal.</p> <p>Ambas formas de constante de bit-cadeing pueden continuar a  trav\u00e9s de las l\u00edneas de la misma manera que las constantes regulares de  cuerda. La cita en d\u00f3lares no se puede utilizar en una constante de  cuerdas.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/02.-Constantes/#4126-numeric-constants","title":"4.1.2.6. Numeric Constants","text":"<p>Se aceptan constantes num\u00e9ricas en estas formas generales:</p> <pre><code>digitsdigits.[digits][e-]digits]\n[digits] ].digits[e-]digits]\ndigitse[-]digits\n</code></pre> <p>d\u00f3nde  <code>digits</code>es uno o m\u00e1s d\u00edgitos decimales (0 a 9). Al menos un d\u00edgito debe ser antes o despu\u00e9s del punto decimal, si se utiliza uno. Al menos un d\u00edgito debe  seguir el marcador exponencial (<code>e</code>), si uno est\u00e1 presente. No puede haber espacios u otros caracteres  incrustados en la constante, excepto por subrayados, que se pueden  utilizar para la agrupaci\u00f3n visual como se describe a continuaci\u00f3n.  Tenga en cuenta que cualquier signo de ventaja o menos no se considera  realmente parte de la constante; es un operador aplicado a la constante.</p> <p>Estos son algunos ejemplos de constantes num\u00e9ricas v\u00e1lidas:</p> <p>\u200b       42       3.5        </p> <p>.001       5e2       1.925e-3</p> <p>Adem\u00e1s, se aceptan constantes en n\u00fameros enteros no decimales en estos formularios:</p> <pre><code>0x\nhexdigits0o\noctdigits0bbindigits\n</code></pre> <p>d\u00f3nde  <code>hexdigits</code>es uno o m\u00e1s d\u00edgitos hexadecimales (0-9, A-F),  <code>octdigits</code>es uno o m\u00e1s d\u00edgitos octales (0-7), y  <code>bindigits</code>es uno o m\u00e1s d\u00edgitos binarios (0 o 1). Los d\u00edgitos hexadeciales y los  prefijos de radix pueden ser en may\u00fasculas o inferior. Tenga en cuenta  que s\u00f3lo los enteros pueden tener formularios no decimosmales, no  n\u00fameros con partes fraccionarias.</p> <p>Estos son algunos ejemplos de constantes v\u00e1lidas no decimales enteros:</p> <p>\u200b       0b100101       0B10011001       0o273       0O755       0x42f       0XFFFF</p> <p>Para la agrupaci\u00f3n visual, se pueden insertar subrayados entre  d\u00edgitos. Estos no tienen ning\u00fan efecto m\u00e1s sobre el valor de la  constante. Por ejemplo:</p> <p>\u200b       1o500o000o       0b10001000-00000000       0o1o755       0xFFFF       1.618o034</p> <p>No se permiten puntar en el inicio o al final de una constante  num\u00e9rica o un grupo de d\u00edgitos (es decir, inmediatamente antes o despu\u00e9s del punto decimal o el marcador exponente), y no se permite m\u00e1s de un  subrayado en una fila.</p> <p>Una constante num\u00e9rica que no contiene ni un punto decimal ni un exponente se presume que es de tipo  <code>integer</code>si su valor encaja en el tipo  <code>integer</code>(32 bits); de lo contrario se presume que es de tipo  <code>bigint</code>si su valor encaja en el tipo  <code>bigint</code>(64 bits); de lo contrario, se considera que es de tipo <code>numeric</code>. Los estantes que contienen puntos decimales y/o exponentes siempre se presumen inicialmente que son de tipo <code>numeric</code>.</p> <p>El tipo de datos inicialmente asignado de una constante  num\u00e9rica es s\u00f3lo un punto de partida para los algoritmos de resoluci\u00f3n  de tipo. En la mayor\u00eda de los casos la constante se coacciar\u00e1  autom\u00e1ticamente al tipo m\u00e1s apropiado dependiendo del contexto. Cuando  sea necesario, puede forzar un valor num\u00e9rico a ser interpretado como un tipo de datos espec\u00edfico al lanzarlo. Por ejemplo, puedes forzar un valor num\u00e9rico para ser tratado como tipo  <code>real</code>(<code>float4</code>) por escrito:</p> <pre><code>REAL '1.23' - estilo de cuerda\n1.23::REAL -- estilo PostgreSQL (hist\u00f3rico)\n</code></pre> <p>Estos son en realidad s\u00f3lo casos especiales de las notaciones generales de casting discutidas a continuaci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/02.-Constantes/#4127-constantes-de-otros-tipos","title":"4.1.2.7. Constantes de otros tipos","text":"<p>Una constante de tipo arbitrario se puede introducir utilizando cualquiera de las siguientes notaciones:</p> <pre><code> type\"string\"\n\"string':\ntypeCAST ('stringAS  type)\n</code></pre> <p>El texto de la cadena de la constante se pasa a la rutina de conversi\u00f3n de entrada para el tipo llamado <code>type</code>. El resultado es una constante del tipo indicado. El elenco expl\u00edcito  puede omitirse si no hay ambiguedad en cuanto al tipo que debe ser la  constante (por ejemplo, cuando se asigna directamente a una columna de  tabla), en cuyo caso se coacita autom\u00e1ticamente.</p> <p>La constante de la cadena se puede escribir usando la notaci\u00f3n SQL regular o citas en d\u00f3lares.</p> <p>Tambi\u00e9n es posible especificar una coacci\u00f3n de tipo mediante una sintaxis similar a la funci\u00f3n:</p> <pre><code> typename( ( 'string\" \" )\n</code></pre> <p>pero no todos los nombres de tipo se pueden utilizar de esta manera; consulte la Secci\u00f3n 4.2.9 para m\u00e1s detalles.</p> <p>El <code>::</code>, <code>CAST()</code>, y las sintaxis de la funci\u00f3n-llama tambi\u00e9n se pueden utilizar para  especificar conversiones de expresiones arbitrarias en el momento del  tiempo de ejecuci\u00f3n, como se examina en la secci\u00f3n 4.2.9. Para evitar la ambiguuidad sint\u00e1ctica, el  <code>*</code>type<code>* '*</code>string<code>*'</code>la sintaxis s\u00f3lo se puede utilizar para especificar el tipo de una constante literal simple. Otra restricci\u00f3n a la  <code>*</code>type<code>* '*</code>string<code>*'</code>sintaxis es que no funciona para los tipos de array; use  <code>::</code>o o  <code>CAST()</code>para especificar el tipo de constante de array.</p> <p>El  <code>CAST()</code>sintaxis se ajusta a SQL. El  <code>*</code>type<code>* '*</code>string<code>*'</code>Sintaxis es una generalizaci\u00f3n de la norma: SQL especifica esta sintaxis s\u00f3lo para unos pocos tipos de datos, pero PostgreSQL lo permite para todo tipo. La sintaxis con  <code>::</code>es el uso hist\u00f3rico de PostgreSQL, al igual que la sintaxis de la funci\u00f3n-llama.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/03.-Operadores/","title":"03.-Operadores","text":"<p>4.1.3. Operadores</p> <p>Un nombre de operador es una secuencia de hasta <code>NAMEDATALEN</code>caracteres -1 (63 por defecto) de la siguiente lista:</p> <p>\u200b     - * * / * = * % y * * * * * * * * ?</p> <p>Sin embargo, hay algunas restricciones a los nombres de los operadores:</p> <ul> <li> <p><code>--</code>y  <code>/*</code>no puede aparecer en ninguna parte en un nombre del operador, ya que ser\u00e1n tomados como el comienzo de un comentario.</p> </li> <li> <p>Un nombre de operador de car\u00e1cter m\u00faltiple no puede terminar en  <code>+</code>o o <code>-</code>, a menos que el nombre contenga tambi\u00e9n al menos uno de estos caracteres:</p> </li> </ul> <p>\u200b             - ? % y * * * * * * * * ?</p> <p>Por ejemplo,  <code>@-</code>es un nombre permitido del operador, pero  <code>*-</code>No lo es. Esta restricci\u00f3n permite a PostgreSQL analizar consultas compatibles con SQL sin necesidad de espacios entre tokens.</p> <p>Cuando se trabaja con nombres de operadores no est\u00e1ndar SQL, por  lo general tendr\u00e1 que separar a los operadores adyacentes con espacios  para evitar la ambiguedad. Por ejemplo, si ha definido un operador de  prefijo nombrado <code>@</code>, no puedes escribir <code>X*@Y</code>; usted debe escribir  <code>X* @Y</code>para asegurarse de que PostgreSQL lo lee como dos nombres de operador no uno.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/03.-Operadores/#414-personajes-especiales","title":"4.1.4. Personajes especiales","text":"<p>Algunos personajes que no son alfanum\u00e9ricos tienen un significado especial que es diferente de ser operador. Los detalles sobre el uso se pueden encontrar en el lugar donde se describe el elemento de sintaxis  respectiva. Esta secci\u00f3n s\u00f3lo existe para aconsejar la existencia y  resumir los prop\u00f3sitos de estos personajes.</p> <ul> <li>Una se\u00f1al de d\u00f3lar (<code>$</code>) seguido de d\u00edgitos se utiliza para representar un par\u00e1metro posicional  en el cuerpo de una definici\u00f3n de funci\u00f3n o una declaraci\u00f3n preparada.  En otros contextos el signo del d\u00f3lar puede ser parte de un  identificador o una constante de cuerda cosida en d\u00f3lares.</li> <li>Parentesis (<code>()</code>) tener su significado habitual de las expresiones de grupo y hacer  cumplir precedencia. En algunos casos se requieren entre par\u00e9ntesis como parte de la sintaxis fija de un comando SQL en particular.</li> <li>Brackets (<code>[]</code>) se utilizan para seleccionar los elementos de un array. V\u00e9ase la secci\u00f3n 8.15 para m\u00e1s informaci\u00f3n sobre los arrays.</li> <li>Comas (<code>,</code>) se utilizan en algunas construcciones sint\u00e1cticas para separar los elementos de una lista.</li> <li>El punto y coma (<code>;</code>) pone fin a un comando SQL. No puede aparecer en ninguna parte dentro de un comando, excepto dentro de un identificador constante o cotizado de  cadena.</li> <li>El colon (<code>:</code>) se utiliza para seleccionar las rodajas de los arrays. (V\u00e9ase la secci\u00f3n 8.15.) En ciertos dialectos SQL (como SQL empedernido), el colon se utiliza para prefijar nombres variables.</li> <li>El asterisco (<code>*</code>) se utiliza en algunos contextos para denotar todos los campos de una  fila de mesa o valor compuesto. Tambi\u00e9n tiene un significado especial  cuando se utiliza como argumento de una funci\u00f3n agregada, a saber, que  el agregado no requiere ning\u00fan par\u00e1metro expl\u00edcito.</li> <li>El per\u00edodo (<code>.</code>) se utiliza en constantes num\u00e9ricas, y para separar los nombres de esquema, tabla y columna.</li> </ul>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/04.-Comentarios/","title":"04.-Comentarios","text":""},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/04.-Comentarios/#415-comentarios","title":"4.1.5. Comentarios","text":"<p>Un comentario es una secuencia de caracteres que comienzan con  dobles guiones y se extienden hasta el final de la l\u00ednea, por ejemplo:</p> <pre><code>-- Este es un comentario est\u00e1ndar SQL\n</code></pre> <p>Alternativamente, se pueden utilizar comentarios de bloques al estilo C:</p> <pre><code>/* comentario multil\u00ednea\n * con anidaci\u00f3n: /* anidado de bloque comentario */\n *\n</code></pre> <p>donde el comentario comienza con  <code>/*</code>y se extiende a la ocurrencia a juego de <code>*/</code>. Estos comentarios de bloquean nido, como se especifica en el est\u00e1ndar  SQL, pero a diferencia de C, de modo que uno puede comentar bloques m\u00e1s  grandes de c\u00f3digo que podr\u00edan contener comentarios de bloques  existentes.</p> <p>Un comentario se elimina de la secuencia de entrada antes de un  an\u00e1lisis de sintaxis y es reemplazado efectivamente por espacio en  blanco.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/05.-Precedencia%20de%20Operadores/","title":"05.-Precedencia de Operadores","text":""},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/05.-Precedencia%20de%20Operadores/#416-operadora-precedencia","title":"4.1.6. Operadora Precedencia","text":"<p>La Tabla 4.2 muestra la precedencia y asociatividad de los operadores en PostgreSQL. La mayor\u00eda de los operadores tienen la misma precedencia y son de  izquierdas. La precedencia y asociatividad de los operadores se conscura en el analizador. A\u00f1adir par\u00e9ntesis si desea que una expresi\u00f3n con  varios operadores se analice de otra manera que no sea lo que implican  las reglas anteriores.</p> <p>Cuadro 4.2. Operadora Precedencia (m\u00e1s alta a m\u00e1s bajo)</p> Operador/Elemento Asociatividad Descripci\u00f3n <code>.</code> a la izquierda separador de nombres de mesa/columna <code>::</code> a la izquierda PostgreSQL -style typecast <code>[</code> <code>]</code> a la izquierda selecci\u00f3n de elementos de array <code>+</code> <code>-</code> derecho, unry plus, unry menos <code>^</code> a la izquierda exponenciaci\u00f3n <code>*</code> <code>/</code> <code>%</code> a la izquierda multiplicaci\u00f3n, divisi\u00f3n, modulo <code>+</code> <code>-</code> a la izquierda adici\u00f3n, resta (cual otro operador) a la izquierda todos los dem\u00e1s operadores nativos y definidos por el usuario <code>BETWEEN</code> <code>IN</code> <code>LIKE</code> <code>ILIKE</code> <code>SIMILAR</code> rango de contenci\u00f3n, membres\u00eda fija, combinaci\u00f3n de cuerdas <code>&lt;</code> <code>&gt;</code> <code>=</code> <code>&lt;=</code> <code>&gt;=</code> <code>&lt;&gt;</code> operadores de comparaci\u00f3n <code>IS</code> <code>ISNULL</code> <code>NOTNULL</code> <code>IS TRUE</code>, <code>IS FALSE</code>, <code>IS NULL</code>, <code>IS DISTINCT FROM</code>, etc. <code>NOT</code> derecho, negaci\u00f3n l\u00f3gica <code>AND</code> a la izquierda conjunci\u00f3n l\u00f3gica <code>OR</code> a la izquierda disyunci\u00f3n l\u00f3gica <p>Tenga en cuenta que las normas de preceder del operador tambi\u00e9n  se aplican a los operadores definidos por el usuario que tengan los  mismos nombres que los operadores incorporados mencionados  anteriormente. Por ejemplo, si usted define un \u201c+\u201doperador para alg\u00fan tipo \u201c+\u201dde datos personalizado tendr\u00e1 la misma precedencia que el operador incorporado, no importa lo que haga el tuyo.</p> <p>Cuando se utiliza un nombre de operador calificado de esquema en el  <code>OPERATOR</code>sintaxis, como por ejemplo en:</p> <pre><code>SELECT 3 OPEROCEr (pg-catalog.) 4;\n</code></pre> <p>el  <code>OPERATOR</code>constructo se toma para tener la precedencia por defecto que se muestra en el cuadro 4.2 para cualquier otro operador. Esto es cierto no importa qu\u00e9 operador espec\u00edfico aparezca dentro <code>OPERATOR()</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/01.-Estructura%20l%C3%A9xica/05.-Precedencia%20de%20Operadores/#nota","title":"Nota","text":"<p>Versiones PostgreSQL antes de 9.5 utilizaron reglas de precedencia del operador ligeramente diferentes. En particular,   <code>&lt;=``&gt;=</code>y  <code>&lt;&gt;</code>utilizado para ser tratados como operadores gen\u00e9ricos;  <code>IS</code>las pruebas utilizadas para tener una mayor prioridad, y  <code>NOT BETWEEN</code>y las construcciones conexas actuaron de manera incoherente, siendo tomadas en algunos casos como con la prioridad de  <code>NOT</code>en lugar de <code>BETWEEN</code>. Estas reglas fueron cambiadas para un mejor cumplimiento de la norma  SQL y para reducir la confusi\u00f3n de un tratamiento inconsistente de  construcciones l\u00f3gicamente equivalentes. En la mayor\u00eda de los casos,  estos cambios no resultar\u00e1n en ning\u00fan cambio de comportamiento, o tal  vez en tales fallas de operador que se pueden resolver a\u00f1adiendo par\u00e9ntesis. Sin embargo, hay casos de  esquina en los que una consulta podr\u00eda cambiar el comportamiento sin que se reporte ning\u00fan error de parsing.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/","title":"Index","text":"<p>Las expresiones de valor se utilizan en una variedad de contextos, como en la lista de destino de la  <code>SELECT</code>comando, como nuevos valores de columna en  <code>INSERT</code>o o <code>UPDATE</code>, o en condiciones de b\u00fasqueda en una serie de comandos. El resultado de una expresi\u00f3n de valor se llama a veces un escalar, para distinguirlo del resultado de una expresi\u00f3n de tabla (que es una  tabla). Por lo tanto, las expresiones de valor tambi\u00e9n se llaman expresiones escalaras (o incluso simplemente expresiones). La sintaxis de la expresi\u00f3n permite el c\u00e1lculo de valores de partes  primitivas usando aritm\u00e9tica, l\u00f3gica, configuraci\u00f3n y otras operaciones.</p> <p>Una expresi\u00f3n de valor es una de las siguientes:</p> <ul> <li>Un valor constante o literal</li> <li>Una columna de referencia</li> <li>Una referencia de par\u00e1metros posicionales, en el cuerpo de una definici\u00f3n de funci\u00f3n o declaraci\u00f3n preparada</li> <li>Una expresi\u00f3n subscripti</li> <li>Una expresi\u00f3n de selecci\u00f3n de campo</li> <li>Una invocaci\u00f3n de operador</li> <li>Una llamada de funci\u00f3n</li> <li>Una expresi\u00f3n agregada</li> <li>Llama de funci\u00f3n de ventana</li> <li>Un elenco tipo</li> <li>Una expresi\u00f3n de cotejar</li> <li>Una subecuencia escalar</li> <li>Un constructor de matrices</li> <li>Un constructor de filas</li> <li>Otra expresi\u00f3n de valor entre par\u00e9ntesis (utilizada para las subexpresiones de grupo y sobrediferencia)</li> </ul> <p>Adem\u00e1s de esta lista, hay una serie de construcciones que pueden  clasificarse como una expresi\u00f3n pero no siguen ninguna regla general de  sintaxis. Estos generalmente tienen la sem\u00e1ntica de una funci\u00f3n u  operador y se explican en la ubicaci\u00f3n apropiada en el cap\u00edtulo 9. Un ejemplo es el  <code>IS NULL</code>cl\u00e1usula.</p> <p>Ya hemos discutido las constantes en la secci\u00f3n 4.1.2. En las secciones siguientes se examinan las opciones restantes.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/01.-Referencias%20de%20columnas/","title":"01.-Referencias de columnas","text":"<p>Una columna puede ser referenciada en el formulario:</p> <pre><code>correlation.columnname\n</code></pre> <p><code>correlation</code>es el nombre de una tabla (posiblemente cualificada con un nombre de  esquema), o un alias para una tabla definida por medio de una  <code>FROM</code>cl\u00e1usula. El nombre de correlaci\u00f3n y el punto separador se pueden omitir si el  nombre de la columna es \u00fanico en todas las tablas que se utilizan en la  consulta actual. (V\u00e9ase tambi\u00e9n el cap\u00edtulo 7).</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/02.-Par%C3%A1metros%20de%20posici%C3%B3n/","title":"02.-Par\u00e1metros de posici\u00f3n","text":"<p>Se utiliza una referencia del par\u00e1metro posicional para indicar un  valor que se suministra externamente a una instrucci\u00f3n SQL. Los  par\u00e1metros se utilizan en las definiciones de la funci\u00f3n SQL y en  consultas preparadas. Algunas bibliotecas de clientes tambi\u00e9n admiten  especificar los valores de datos por separado de la cadena de comandos  SQL, en cuyo caso se utilizan par\u00e1metros para referirse a los valores de datos fuera de l\u00ednea. La forma de referencia de un par\u00e1metro es:</p> <pre><code>$number\n</code></pre> <p>Por ejemplo, considere la definici\u00f3n de una funci\u00f3n, <code>dept</code>, como:</p> <pre><code>CREATE FUNCTION dept(texto) RETURNS dept\n    AS $$ SELECT * DESDE Dept DOHERE name = $1 $$\n    LANGUAGE SQL;\n</code></pre> <p>Aqu\u00ed el  <code>$1</code>hace referencia al valor del primer argumento de la funci\u00f3n cuando se invoca la funci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/03.-Suscriptores/","title":"03.-Suscriptores","text":"<p>Si una expresi\u00f3n produce un valor de un tipo de array, entonces  un elemento espec\u00edfico del valor de array puede ser extra\u00eddo por escrito</p> <pre><code>expression[subscript]\n</code></pre> <p>o varios elementos adyacentes (una rebanada de matriz -) se pueden extraer por escrito</p> <pre><code>expression[lower_subscript:upper_subscript]\n</code></pre> <p>(Ah\u00ed, los corchetes  <code>[ ]</code>est\u00e1n destinados a aparecer literalmente.) Cada uno  <code>subscript</code>es en s\u00ed misma una expresi\u00f3n, que se redondear\u00e1 al valor entero m\u00e1s cercano.</p> <p>En general la matriz  <code>expression</code>debe ser entre par\u00e9ntesis, pero los par\u00e9ntesis se pueden omitir cuando la  expresi\u00f3n a subscripte es s\u00f3lo una referencia de columna o par\u00e1metro  posicional. Adem\u00e1s, m\u00faltiples subscripts se pueden concatenar cuando la  matriz original es multidimensional. Por ejemplo:</p> <pre><code>mytable.arraycolumn[4]\nmytable.two-d-column[17][34]\n$1[10:42]\n(arrayfunction (a,b))[42]\n</code></pre> <p>Los par\u00e9ntesis en el \u00faltimo ejemplo son requeridos. V\u00e9ase Secci\u00f3n 8.15 para m\u00e1s informaci\u00f3n sobre los arrays.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/04.-Selecci%C3%B3n%20de%20Campo/","title":"04.-Selecci\u00f3n de Campo","text":"<p>Si una expresi\u00f3n produce un valor de un tipo compuesto (tipo de  fila), entonces un campo espec\u00edfico de la fila se puede extraer por  escrito</p> <pre><code>expression.fieldname\n</code></pre> <p>En general la fila  <code>expression</code>Debe ser entre par\u00e9ntesis, pero los par\u00e9ntesis pueden omitirse cuando la  expresi\u00f3n que se seleccionar\u00e1 es s\u00f3lo una referencia de tabla o  par\u00e1metro posicional. Por ejemplo:</p> <pre><code>mytable.mycolumn\n$1.somecolumn\n(glifunction (a,b)).col3\n</code></pre> <p>(Por lo tanto, una referencia de columna cualificada es en  realidad s\u00f3lo un caso especial de la sintaxis de selecci\u00f3n de campo.) Un caso especial importante es la extracci\u00f3n de un campo de una columna de tabla de un tipo compuesto:</p> <pre><code>(compositecol).somefieldfield\n(mytable.compositecol).somefield\n</code></pre> <p>Los par\u00e9ntesis se requieren aqu\u00ed para demostrar que  <code>compositecol</code>es un nombre de columna, no un nombre de tabla, o que  <code>mytable</code>es un nombre de tabla no un nombre de esquema en el segundo caso.</p> <p>Usted puede pedir todos los campos de un valor compuesto por la escritura <code>.*</code>:</p> <pre><code>(compositecol).*\n</code></pre> <p>Esta notaci\u00f3n se comporta de manera diferente dependiendo del contexto; v\u00e9ase la secci\u00f3n 8.16.5 para m\u00e1s detalles.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/05.-Invocatorias%20de%20operador/","title":"05.-Invocatorias de operador","text":"<p>Hay dos posibles sintaxis para una invocaci\u00f3n de operador:</p> <code>expression</code><code>operator</code><code>expression</code>(operador de infixbinario) <code>operator</code><code>expression</code>(operador prefijo unitario) <p>donde el  <code>operator</code>token sigue las reglas de sintaxis de la Secci\u00f3n 4.1.3, o es una de las palabras clave <code>AND</code>, <code>OR</code>, y <code>NOT</code>, o es un nombre de operador cualificado en la forma:</p> <pre><code>OPERATOR(schema.operatorname)\n</code></pre> <p>Qu\u00e9 operadores particulares existen y si no son binarios o  binarios depende de lo que los operadores hayan sido definidos por el  sistema o por el usuario. El cap\u00edtulo 9 describe a los operadores incorporados.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/06.-Llamadas%20de%20funci%C3%B3n/","title":"06.-Llamadas de funci\u00f3n","text":"<p>La sintaxis para una llamada de funci\u00f3n es el nombre de una  funci\u00f3n (posiblemente calificada con un nombre de esquema), seguida de  su lista de argumentos adjunta entre par\u00e9ntesis:</p> <pre><code> function_name( expression[,  expression... ]] )\n</code></pre> <p>Por ejemplo, la siguiente calcula la ra\u00edz cuadrada de 2:</p> <pre><code>sqrt(2)\n</code></pre> <p>La lista de funciones incorporadas est\u00e1 en el Cap\u00edtulo 9. El usuario puede a\u00f1adir otras funciones.</p> <p>Al emitir consultas en una base de datos donde algunos usuarios desconf\u00edan de otros usuarios, observen precauciones de seguridad de la  al escribir llamadas de funci\u00f3n.</p> <p>Los argumentos pueden tener nombres adjuntos opcionalmente. V\u00e9ase la secci\u00f3n 4.3 para m\u00e1s detalles.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/06.-Llamadas%20de%20funci%C3%B3n/#nota","title":"Nota","text":"<p>Una funci\u00f3n que toma un solo argumento de tipo compuesto puede  llamarse opcionalmente usando sintaxis de selecci\u00f3n de campo, y a la  inversa la selecci\u00f3n de campo se puede escribir en estilo funcional. Es  decir, las anotaciones  <code>col(table)</code>y  <code>table.col</code>son intercambiables. Este comportamiento no es est\u00e1ndar SQL, pero se proporciona en PostgreSQL porque permite el uso de funciones para emular campos computados. Para m\u00e1s informaci\u00f3n v\u00e9ase la secci\u00f3n 8.16.5.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/07.-Expresiones%20agregadas/","title":"07.-Expresiones agregadas","text":"<p>Una expresi\u00f3n agregada representa la aplicaci\u00f3n de una funci\u00f3n agregada a trav\u00e9s de las filas  seleccionadas por una consulta. Una funci\u00f3n agregada reduce m\u00faltiples  entradas a un solo valor de salida, como la suma o media de los insumos. La sintaxis de una expresi\u00f3n agregada es una de las siguientes:</p> <pre><code> aggregate_name( expression[ , ... ] [  order_by_clause]) [ FILTER (DADRE)  filter_clause) ]\n aggregate_name(Todo  expression[ , ... ] [  order_by_clause]) [ FILTER (DADRE)  filter_clause) ]\n aggregate_name(DISTINCT  expression[ , ... ] [  order_by_clause]) [ FILTER (DADRE)  filter_clause) ]\n aggregate_name( *) [ FILTER (DRETRO)  filter_clause) ]\n aggregate_name( [  expression[ , ... ] ] ] ) CONIN GRUPO (  order_by_clause[ FILTER (AQUI  filter_clause) ]\n</code></pre> <p>d\u00f3nde  <code>aggregate_name</code>es un agregado previamente definido (posiblemente calificado con un nombre de esquema) y  <code>expression</code>es cualquier expresi\u00f3n de valor que no contenga una expresi\u00f3n agregada o una llamada de funci\u00f3n de la ventana. La opcional  <code>order_by_clause</code>y  <code>filter_clause</code>se describen a continuaci\u00f3n.</p> <p>La primera forma de expresi\u00f3n agregada invoca el agregado una vez para cada fila de entrada. La segunda forma es la misma que la primera, desde  <code>ALL</code>es  el predeterminado. La tercera forma invoca el agregado una vez por cada  valor distinto de la expresi\u00f3n (o distinto conjunto de valores, para  expresiones m\u00faltiples) que se encuentra en las filas de entrada. La  cuarta forma invoca el agregado una vez para cada fila de entrada; ya  que no se especifica ning\u00fan valor de entrada en particular, generalmente s\u00f3lo es \u00fatil para el  <code>count(*)</code>funci\u00f3n agregada. El \u00faltimo formulario se utiliza con funciones agregadas ordenadas, que se describen a continuaci\u00f3n.</p> <p>La mayor\u00eda de las funciones agregadas ignoran los insumos nulos,  de modo que las filas en las que una o m\u00e1s de las expresiones (s) rinden null se descartan. Esto puede ser asumido como verdadero, a menos que  se especifique lo contrario, para todos los agregados incorporados.</p> <p>Por ejemplo,  <code>count(*)</code>produce el n\u00famero total de filas de entradas;  <code>count(f1)</code>c) rinde el n\u00famero de filas de entradas en las que  <code>f1</code>no es nido, desde entonces  <code>count</code>ignora nulos; y  <code>count(distinct f1)</code>produce el n\u00famero de distintos valores no nulos de <code>f1</code>.</p> <p>Normalmente, las filas de entrada se alimentan a la funci\u00f3n  agregada en un orden no especificado. En muchos casos esto no importa;  por ejemplo,  <code>min</code>produce el mismo resultado sin importar en qu\u00e9 orden reciba las entradas. Sin embargo, algunas funciones agregadas (como  <code>array_agg</code>y <code>string_agg</code>) producir resultados que dependen del ordenamiento de las filas de entrada. Cuando se utiliza dicho agregado, la opcional  <code>order_by_clause</code>se puede utilizar para especificar el pedido deseado. El  <code>order_by_clause</code>tiene la misma sintaxis que para un nivel de consulta  <code>ORDER BY</code>cl\u00e1usula, como se describe en la secci\u00f3n 7.5, excepto que sus expresiones son siempre expresiones justas y no pueden ser nombres o n\u00fameros de salida-columna. Por ejemplo:</p> <pre><code>SELECT array.agg(a ORDEN POR b DESC) DESDE tabla;\n</code></pre> <p>Cuando se trate de funciones agregadas de m\u00faltiples arb p\u00e1rrafo, tenga en cuenta que el  <code>ORDER BY</code>la cl\u00e1usula va despu\u00e9s de todos los argumentos agregados. Por ejemplo, escriba esto:</p> <pre><code>SELECT string-agg (a, ',' ORDEnte BY a) DESDE tabla;\n</code></pre> <p>Esto no es as\u00ed:</p> <pre><code>SELECT string-agg(a ORDEN POR una, ',') DESDE tabla; -- incorrecto\n</code></pre> <p>Este \u00faltimo es sint\u00e1cticamente v\u00e1lido, pero representa una llamada de una funci\u00f3n agregada de un solo lenguaje con dos  <code>ORDER BY</code>llaves (la segunda es bastante in\u00fatil ya que es una constante).</p> <p>Si  <code>DISTINCT</code>se especifica adem\u00e1s de un <code>order_by_clause</code>, entonces todo el  <code>ORDER BY</code>las expresiones deben coincidir con los argumentos regulares del agregado;  es decir, no se puede ordenar en una expresi\u00f3n que no est\u00e1 incluida en  el  <code>DISTINCT</code>lista.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/07.-Expresiones%20agregadas/#nota","title":"Nota","text":"<p>La capacidad de especificar ambas  <code>DISTINCT</code>y  <code>ORDER BY</code>en una funci\u00f3n agregada es una extensi\u00f3n PostgreSQL.</p> <p>Colocaci\u00f3n  <code>ORDER BY</code>Dentro de la lista de argumentos regulares del agregado, como se ha descrito  hasta ahora, se utiliza al ordenar las filas de entrada para agregados  estad\u00edsticos y de uso general, para los que el pedido es opcional. Hay  una subclase de funciones agregadas llamadas agregados ordenados para los cuales un  <code>order_by_clause</code>se requiere, por lo general porque el c\u00e1lculo del agregado es s\u00f3lo sensato en  t\u00e9rminos de un pedido espec\u00edfico de sus filas de entrada. Ejemplos  t\u00edpicos de agregados ordenados incluyen c\u00e1lculos de rango y percentil.  Para un agregado ordenado, el  <code>order_by_clause</code>est\u00e1 escrito dentro <code>WITHIN GROUP (...)</code>, como se muestra en la alternativa de sintaxis final anterior. Las expresiones en el  <code>order_by_clause</code>se eval\u00faan una vez por fila de entradas al igual que los argumentos agregados regulares, ordenados seg\u00fan el <code>order_by_clause</code>'s requisitos, y alimentados a la funci\u00f3n agregada como argumentos de entrada. (Esto no es diferente al caso de un no- <code>WITHIN GROUP</code><code>order_by_clause</code>, que no se trata como argumentos (s) a la funci\u00f3n agregada.) Los argumentos expresiones anteriores <code>WITHIN GROUP</code>, en su caso, se denominan argumentos directos para distinguirlos de los argumentos agregados enumerados en el <code>order_by_clause</code>. A diferencia de los argumentos agregados regulares, los argumentos  directos se eval\u00faan s\u00f3lo una vez por llamada agregada, no una vez por  fila de entrada. Esto significa que pueden contener variables s\u00f3lo si  esas variables est\u00e1n agrupadas por <code>GROUP BY</code>; esta restricci\u00f3n es la misma que si los argumentos directos no  estuvieran dentro de una expresi\u00f3n agregada en absoluto. Los argumentos  directos se utilizan t\u00edpicamente para cosas como fracciones percentiles, que s\u00f3lo tienen sentido como un c\u00e1lculo de un solo valor por  agregaci\u00f3n. La lista de argumentos directos puede estar vac\u00eda; en este  caso, escribir s\u00f3lo  <code>()</code>no <code>(*)</code>. (PostgreSQL aceptar\u00e1 cualquiera de las ortaciones, pero s\u00f3lo la primera manera se ajusta al est\u00e1ndar SQL.)</p> <p>Un ejemplo de una llamada agregada ordenada es:</p> <pre><code>SELECT percentile.cont. (0.5) GRUPO CONIN (ORDER BY income) DESDE hogares;\n percentile.cont\n----------------\n           50489\n</code></pre> <p>que obtiene el percentil 50o, o valor medio de la  <code>income</code>columna de la tabla <code>households</code>. Aqu\u00ed,  <code>0.5</code>es un argumento directo; no tendr\u00eda sentido que la fracci\u00f3n percentil fuera un valor que variara a trav\u00e9s de las filas.</p> <p>Si  <code>FILTER</code>se especifica, entonces s\u00f3lo las filas de entrada para las que el  <code>filter_clause</code>las evaluaciones a la verdadera se alimentan a la funci\u00f3n agregada; otras filas se descartan. Por ejemplo:</p> <pre><code>SELECT\n    conteo (\"*) AS sin filtrar,\n    conteo(*) FILTER (WHERE i 5) AS filtrado\nDESDE Generaseries (1,10) AS s(i);\n sin filtrar .\n-----------------------\n         10 4\n(1 fila)\n</code></pre> <p>Las funciones agregadas predefinidas se describen en . El usuario puede a\u00f1adir otras funciones agregadas.</p> <p>Una expresi\u00f3n agregada s\u00f3lo puede aparecer en la lista de resultados o  <code>HAVING</code>cl\u00e1usula de una  <code>SELECT</code>comando. Est\u00e1 prohibido en otras cl\u00e1usulas, como <code>WHERE</code>, porque esas cl\u00e1usulas se eval\u00faan l\u00f3gicamente antes de que se forme los resultados de los agregados.</p> <p>Cuando una expresi\u00f3n agregada aparece en una subcoquer\u00eda (ver secci\u00f3n 4.2.11 y secci\u00f3n 9.23), el agregado se eval\u00faa normalmente sobre las filas de la subcr\u00e1til. Pero se produce una excepci\u00f3n si los argumentos del agregado (y  <code>filter_clause</code>si alguno) contiene s\u00f3lo variables de nivel externo: el agregado pertenece al nivel externo m\u00e1s cercano, y se eval\u00faa sobre las filas de esa  consulta. La expresi\u00f3n agregada en su conjunto es entonces una  referencia externa para la subquer\u00eda en la que aparece, y act\u00faa como una constante sobre cualquier evaluaci\u00f3n de esa subcoquer\u00eda. La restricci\u00f3n de aparecer s\u00f3lo en la lista de resultados o  <code>HAVING</code>cl\u00e1usula se aplica con respecto al nivel de consulta al que pertenece el agregado.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/08.-Llamadas%20de%20funci%C3%B3n%20de%20ventanas/","title":"08.-Llamadas de funci\u00f3n de ventanas","text":"<p>Una llamada de funci\u00f3n de la ventana representa la aplicaci\u00f3n de una funci\u00f3n similar a la de agregado sobre  alguna parte de las filas seleccionadas por una consulta. A diferencia  de las llamadas agregadas no de ventana, esto no est\u00e1 ligado a la  agrupaci\u00f3n de las filas seleccionadas en una sola fila de salida. Sin  embargo, la funci\u00f3n de la ventana tiene acceso a todas las filas que  formar\u00edan parte del grupo actual de acuerdo con la especificaci\u00f3n de  agrupaci\u00f3n ( <code>PARTITION BY</code>lista) de la llamada de la funci\u00f3n de la ventana. La sintaxis de una llamada de funci\u00f3n de la ventana es una de las siguientes:</p> <pre><code> function_name( expression[,  expression... ]]) [ FILTER (DADRE)  filter_clause) ] OVER \n window_namefunction_name( expression[,  expression... ]]) [ FILTER (DADRE)  filter_clause) ] OVER (  window_definition)\n function_name( *) [ FILTER (DRETRO)  filter_clause) ] OVER \n window_namefunction_name( *) [ FILTER (DRETRO)  filter_clause) ] OVER (  window_definition)\n</code></pre> <p>d\u00f3nde  <code>window_definition</code>tiene la sintaxis</p> <pre><code>[  existing_window_name]\n[ PARTITION BY  expression[, ...] ]\n[ ORDEN por  expression[ASC - DESC - USING  operator] [ NULLS - FIRST . LAST . ] [, ...] ]\n[  frame_clause]\n</code></pre> <p>La opcional  <code>frame_clause</code>puede ser uno de</p> <pre><code>* RANGE ROWS - GRUPOS -  frame_start[  frame_exclusion]\nRANGE - ROWS - GRUPOS BETWEEN - BETWEEN  frame_startY  frame_end[  frame_exclusion]\n</code></pre> <p>d\u00f3nde  <code>frame_start</code>y  <code>frame_end</code>puede ser uno de</p> <pre><code>PRECED UNBOUNDEDING\n offsetPRECEDING\nCURRENTE ROW\n offsetSEGUNDO\nUNBOUNDED SEGUNDO\n</code></pre> <p>y  <code>frame_exclusion</code>puede ser uno de</p> <pre><code>EXCLUDE CURRENT ROW\nGRUPO EXCLUDE\nTIES EXCLUDE\nEXCLUDE NO OTROS\n</code></pre> <p>Aqu\u00ed,  <code>expression</code>representa cualquier expresi\u00f3n de valor que no contenga en s\u00ed misma llamadas de funci\u00f3n de la ventana.</p> <p><code>window_name</code>es una referencia a una especificaci\u00f3n de ventana designada definida en la consulta de  <code>WINDOW</code>cl\u00e1usula. Alternativamente, un lleno  <code>window_definition</code>se puede administrar entre par\u00e9ntesis, usando la misma sintaxis que para definir una ventana nombrada en el  <code>WINDOW</code>cl\u00e1usula; consulte la p\u00e1gina de referencia SELECT para m\u00e1s detalles. Vale la pena se\u00f1alar eso.  <code>OVER wname</code>no es exactamente equivalente a <code>OVER (wname ...)</code>; este \u00faltimo implica copiar y modificar la definici\u00f3n de la ventana, y  ser\u00e1 rechazada si la especificaci\u00f3n de la ventana de referencia incluye  una cl\u00e1usula marco.</p> <p>El  <code>PARTITION BY</code>la cl\u00e1usula agrupa las filas de la consulta en particiones, que se procesan por separado por la funci\u00f3n de la ventana.  <code>PARTITION BY</code>trabaja de manera similar a un nivel de consulta  <code>GROUP BY</code>cl\u00e1usula, excepto que sus expresiones son siempre expresiones justas y no pueden  ser nombres o n\u00fameros de columna de salida. Sin <code>PARTITION BY</code>, todas las filas producidas por la consulta se tratan como una sola partici\u00f3n. El  <code>ORDER BY</code>cl\u00e1usula determina el orden en que las filas de una partici\u00f3n son procesadas por la funci\u00f3n de la ventana. Funciona de manera similar a un nivel de  consulta  <code>ORDER BY</code>cl\u00e1usula, pero tampoco puede utilizar nombres o n\u00fameros de columna de salida. Sin <code>ORDER BY</code>, las filas se procesan en un orden no especificado.</p> <p>El  <code>frame_clause</code>especifica el conjunto de filas que constituyen el marco de la ventana, que es un subconjunto de la partici\u00f3n actual, para aquellas funciones  de ventana que act\u00faan en el marco en lugar de toda la partici\u00f3n. El  conjunto de filas en el marco puede variar dependiendo de qu\u00e9 fila es la fila actual. El marco se puede especificar en <code>RANGE</code>,  <code>ROWS</code>o o  <code>GROUPS</code>modo; en cada caso, se ejecuta desde el  <code>frame_start</code>a la <code>frame_end</code>. Si  <code>frame_end</code>se omite, el fin de los defectos de la <code>CURRENT ROW</code>.</p> <p>A  <code>frame_start</code>de  <code>UNBOUNDED PRECEDING</code>significa que el marco comienza con la primera fila de la partici\u00f3n, y de manera similar a  <code>frame_end</code>de  <code>UNBOUNDED FOLLOWING</code>significa que el marco termina con la \u00faltima fila de la partici\u00f3n.</p> <p>En  <code>RANGE</code>o o  <code>GROUPS</code>modo, a  <code>frame_start</code>de  <code>CURRENT ROW</code>significa que el marco comienza con la primera fila de pares de la fila actual (una fila que la ventana es  <code>ORDER BY</code>las cl\u00e1usulas clasifican como equivalente a la fila actual), mientras que a  <code>frame_end</code>de  <code>CURRENT ROW</code>significa que el marco termina con la \u00faltima fila de pares de la fila actual. En  <code>ROWS</code>modo,  <code>CURRENT ROW</code>simplemente significa la fila actual.</p> <p>En el   <code>offset</code><code>PRECEDING</code>y   <code>offset</code><code>FOLLOWING</code>opciones de marco, el  <code>offset</code>debe ser una expresi\u00f3n que no contenga ninguna variable, funciones agregadas o funciones de ventana. El significado de la  <code>offset</code>depende del modo de marco:</p> <ul> <li>En  <code>ROWS</code>modo, el  <code>offset</code>debe producir un n\u00famero entero no n\u00edti, no negativo, y la opci\u00f3n significa  que el marco comienza o termina el n\u00famero especificado de filas antes o  despu\u00e9s de la fila actual.</li> <li>En  <code>GROUPS</code>modo, el  <code>offset</code>de nuevo debe ceder un n\u00famero entero no negativo, no negativo, y la opci\u00f3n significa que el marco comienza o termina el n\u00famero especificado de grupos de pares antes o despu\u00e9s del grupo de pares de la fila actual, donde un grupo de pares es un conjunto de filas que son equivalentes en el  <code>ORDER BY</code>ordenando. (Debe haber un  <code>ORDER BY</code>cl\u00e1usula en la definici\u00f3n de ventana a utilizar  <code>GROUPS</code>modo.)</li> <li>En  <code>RANGE</code>modo, estas opciones requieren que la  <code>ORDER BY</code>cl\u00e1usula especificar exactamente una columna. El  <code>offset</code>especifica la diferencia m\u00e1xima entre el valor de esa columna en la fila actual y  su valor en las filas anteriores o siguientes del marco. Tipo de datos  de la  <code>offset</code>la expresi\u00f3n var\u00eda dependiendo del tipo de datos de la columna de pedido.  Para las columnas de pedido num\u00e9ricos es t\u00edpicamente del mismo tipo que  la columna de pedido, pero para las columnas de pedido de fecha es un <code>interval</code>. Por ejemplo, si la columna de pedido es de tipo  <code>date</code>o o <code>timestamp</code>, uno podr\u00eda escribir <code>RANGE BETWEEN '1 day' PRECEDING AND '10 days' FOLLOWING</code>. El  <code>offset</code>Todav\u00eda se requiere que no sea nenal y no negativo, aunque el significado de no negativo depende de su tipo de datos.</li> </ul> <p>En cualquier caso, la distancia al final del marco est\u00e1 limitada  por la distancia al final de la partici\u00f3n, de modo que para las filas  cerca de los extremos de partici\u00f3n el marco podr\u00eda contener menos filas  que en otros lugares.</p> <p>Note que en ambos  <code>ROWS</code>y  <code>GROUPS</code>modo,  <code>0 PRECEDING</code>y  <code>0 FOLLOWING</code>son equivalentes a <code>CURRENT ROW</code>. Esto normalmente se mantiene en  <code>RANGE</code>modo tambi\u00e9n, para un significado espec\u00edfico de tipo de datos apropiado de cerozero.</p> <p>El  <code>frame_exclusion</code>la opci\u00f3n permite excluir las filas alrededor de la fila actual del marco, incluso si se incluir\u00edan de acuerdo con las opciones de inicio de  fotogramas y final de marco.  <code>EXCLUDE CURRENT ROW</code>excluye la fila actual del marco.  <code>EXCLUDE GROUP</code>excluye la fila actual y sus pares de pedidos del marco.  <code>EXCLUDE TIES</code>excluye a cualquier par de la fila actual del marco, pero no la fila actual en s\u00ed.  <code>EXCLUDE NO OTHERS</code>Simplemente especifica expl\u00edcitamente el comportamiento predeterminado de no excluir la fila actual o sus pares.</p> <p>La opci\u00f3n de enmarcado por defecto es <code>RANGE UNBOUNDED PRECEDING</code>, que es lo mismo que <code>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</code>. Con <code>ORDER BY</code>, esto establece el marco para ser todas las filas de la partici\u00f3n de arranque a trav\u00e9s de la \u00faltima fila actual  <code>ORDER BY</code>par. Sin <code>ORDER BY</code>, esto significa que todas las filas de la partici\u00f3n est\u00e1n incluidas en  el marco de la ventana, ya que todas las filas se convierten en pares de la fila actual.</p> <p>Restricciones son que  <code>frame_start</code>no puede ser <code>UNBOUNDED FOLLOWING</code>,  <code>frame_end</code>no puede ser <code>UNBOUNDED PRECEDING</code>, y el  <code>frame_end</code>la elecci\u00f3n no puede aparecer antes en la lista anterior de  <code>frame_start</code>y  <code>frame_end</code>opciones que la  <code>frame_start</code>La elecci\u00f3n lo hace, por ejemplo.  <code>RANGE BETWEEN CURRENT ROW AND *</code>offset<code>* PRECEDING</code>no est\u00e1 permitido. Pero, por ejemplo,  <code>ROWS BETWEEN 7 PRECEDING AND 8 PRECEDING</code>est\u00e1 permitido, aunque nunca seleccionar\u00eda ninguna fila.</p> <p>Si  <code>FILTER</code>se especifica, entonces s\u00f3lo las filas de entrada para las que el  <code>filter_clause</code>Las evaluaciones a la verdad se alimentan a la funci\u00f3n de la ventana; se  descartan otras filas. S\u00f3lo funciones de ventana que son agregados  aceptan un  <code>FILTER</code>cl\u00e1usula.</p> <p>Las funciones de ventana incorporadas se describen en la Tabla 9.64. El usuario puede a\u00f1adir otras funciones de ventana. Adem\u00e1s, cualquier  agregado general o estad\u00edstico incorporado o definido por el usuario se  puede utilizar como una funci\u00f3n de ventana. (Los agregados de conjuntos  ordenados e hipot\u00e9ticas no se pueden utilizar actualmente como funciones de ventanas.)</p> <p>Las sintaxis usando  <code>*</code>se utilizan para llamar a funciones agregadas sin par\u00e1metro como funciones de ventana, por ejemplo <code>count(*) OVER (PARTITION BY x ORDER BY y)</code>. El asterisco (<code>*</code>) habitualmente no se utiliza para funciones espec\u00edficas de la ventana. Funciones espec\u00edficas de la ventana no permiten  <code>DISTINCT</code>o o  <code>ORDER BY</code>para ser usados dentro de la lista de argumentos de funci\u00f3n.</p> <p>Las llamadas de la funci\u00f3n de ventanas s\u00f3lo se permiten en el  <code>SELECT</code>lista y la  <code>ORDER BY</code>cl\u00e1usula de la consulta.</p> <p>Puede encontrarse m\u00e1s informaci\u00f3n sobre las funciones de la ventana en la secci\u00f3n 3.5, secci\u00f3n 9.22 y en la secci\u00f3n 7.2.5.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/09.-Tipos%20de%20fusi%C3%B3n/","title":"09.-Tipos de fusi\u00f3n","text":"<p>Un yeso especifica una conversi\u00f3n de un tipo de datos a otro. PostgreSQL acepta dos sintaxis equivalentes para el moldes de tipo:</p> <pre><code>CAST (  expressionAS  type)\nexpression::type\n</code></pre> <p>El  <code>CAST</code>sintaxis se ajusta a SQL; la sintaxis con  <code>::</code>es el uso hist\u00f3rico de PostgreSQL.</p> <p>Cuando un elenco se aplica a una expresi\u00f3n de valor de un tipo  conocido, representa una conversi\u00f3n de tipo de tiempo corrido. El elenco s\u00f3lo tendr\u00e1 \u00e9xito si se ha definido una operaci\u00f3n de conversi\u00f3n de tipo adecuada. Observe que esto es sutilmente diferente del uso de moldes  con constantes, como se muestra en la Secci\u00f3n 4.1.2.7. Un elenco aplicado a una cadena sin adornable literal representa la  asignaci\u00f3n inicial de un tipo a un valor constante literal, por lo que  tendr\u00e1 \u00e9xito para cualquier tipo (si el contenido de la cadena literal  son sintaxis de entrada aceptable para el tipo de datos).</p> <p>Por lo general, se puede omitir un elenco expl\u00edcito si no hay  ambiguedad en cuanto al tipo que debe producir una expresi\u00f3n de valor  (por ejemplo, cuando se asigna a una columna de tabla); el sistema  aplicar\u00e1 autom\u00e1ticamente un tipo fundido en tales casos. Sin embargo, el casting autom\u00e1tico s\u00f3lo se hace para los elencos que est\u00e1n marcados. OK para aplicar impl\u00edcitamente en los cat\u00e1logos de sistemas. Otros elencos deben ser invocados con  sintaxis expl\u00edcita de fundici\u00f3n. Esta restricci\u00f3n pretende evitar que se apliquen en silencio las conversiones sorprendentes.</p> <p>Tambi\u00e9n es posible especificar un molno tipo usando una sintaxis similar a una funci\u00f3n:</p> <pre><code> typename(  expression)\n</code></pre> <p>Sin embargo, esto s\u00f3lo funciona para tipos cuyos nombres tambi\u00e9n son v\u00e1lidos como nombres de funci\u00f3n. Por ejemplo,  <code>double precision</code>no se puede utilizar de esta manera, sino el equivalente  <code>float8</code>- Puede. Tambi\u00e9n, los nombres <code>interval</code>, <code>time</code>, y  <code>timestamp</code>S\u00f3lo se puede utilizar de esta manera si se citan dos veces, debido a  conflictos sint\u00e1cticas. Por lo tanto, el uso de la sintaxis de fundici\u00f3n similar a la funci\u00f3n conduce a inconsistencias y probablemente debe ser evitado.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/09.-Tipos%20de%20fusi%C3%B3n/#nota","title":"Nota","text":"<p>La sintaxis tipo funci\u00f3n es de hecho s\u00f3lo una llamada de  funci\u00f3n. Cuando una de las dos sintaxis de fundici\u00f3n est\u00e1ndar se utiliza para hacer una conversi\u00f3n en tiempo de ejecuci\u00f3n, invocar\u00e1 internamente una funci\u00f3n registrada para realizar la conversi\u00f3n. Por convenci\u00f3n,  estas funciones de conversi\u00f3n tienen el mismo nombre que su tipo de  salida, y por lo tanto la sintaxis de funci\u00f3n no es m\u00e1s que una invocaci\u00f3n directa de la funci\u00f3n de conversi\u00f3n  subyacente. Obviamente, esto no es algo en lo que una aplicaci\u00f3n  port\u00e1til deba confiar. Para m\u00e1s detalles, v\u00e9ase CREATE CAST.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/10.-Expresiones%20de%20la%20colaci%C3%B3n/","title":"10.-Expresiones de la colaci\u00f3n","text":"<p>El  <code>COLLATE</code>cl\u00e1usula anula la recopilaci\u00f3n de una expresi\u00f3n. Se adjunta a la expresi\u00f3n que se aplica a:</p> <pre><code> exprCOLLATE collation\n</code></pre> <p>d\u00f3nde  <code>collation</code>es un identificador posiblemente calificado de esquema. El  <code>COLLATE</code>la cl\u00e1usula se une m\u00e1s apretada que los operadores; los par\u00e9ntesis pueden utilizarse cuando sea necesario.</p> <p>Si no se especifica expl\u00edcitamente la recopilaci\u00f3n, el sistema de base de datos deriva un cocoteo de las columnas involucradas en la  expresi\u00f3n, o predetermina la recopilaci\u00f3n por defecto de la base de  datos si no hay ninguna columna involucrada en la expresi\u00f3n.</p> <p>Los dos usos comunes de la  <code>COLLATE</code>la cl\u00e1usula est\u00e1 anulada el orden de la clase en un  <code>ORDER BY</code>cl\u00e1usula, por ejemplo:</p> <pre><code>SELECT a, b, c DESDE tbl WHERE ... ORDEN POR una \"C\" COLLATE;\n</code></pre> <p>y la cocoteo de una funci\u00f3n u llamada al operador que tenga resultados sensibles a la localidad, por ejemplo:</p> <pre><code>SELECT * DESDE Tbl WHERE a \"foo\" COLLATE \"C\";\n</code></pre> <p>Tenga en cuenta que en este \u00faltimo caso el  <code>COLLATE</code>se adjunta a un argumento de entrada del operador al que deseamos afectar. No importa qu\u00e9 argumento del operador o funci\u00f3n llame a la  <code>COLLATE</code>la cl\u00e1usula se adjunta a, porque la cocoteraci\u00f3n aplicada por el operador o la funci\u00f3n se deriva considerando todos los argumentos, y un expl\u00edcito  <code>COLLATE</code>cl\u00e1usula anular\u00e1 las colisiones de todos los dem\u00e1s argumentos. (Attaching non-matching  <code>COLLATE</code>cl\u00e1usulas a m\u00e1s de un argumento, sin embargo, es un error. Para m\u00e1s detalles, v\u00e9ase la secci\u00f3n 24.2.) As\u00ed, esto da el mismo resultado que el ejemplo anterior:</p> <pre><code>SELECT * DESDE Tbl AQUI un \"C\" COLLATE . 'foo';\n</code></pre> <p>Pero esto es un error:</p> <pre><code>SELECT * DESDE Tbl WHERE (a \"foo\") COLLATE \"C\";\n</code></pre> <p>porque intenta aplicar una recopilaci\u00f3n al resultado de la  <code>&gt;</code>operador, del tipo de datos no colatable <code>boolean</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/11.-Sucoquesas%20de%20escalar/","title":"11.-Sucoquesas de escalar","text":"<p>Una subcoquea escalar es un ordinario  <code>SELECT</code>consulta entre par\u00e9ntesis que devuelve exactamente una fila con una columna. (V\u00e9ase el  para obtener informaci\u00f3n sobre las consultas de redacci\u00f3n.) El  <code>SELECT</code>La consulta se ejecuta y el valor devuelto \u00fanico se utiliza en la  expresi\u00f3n de valor circundante. Es un error utilizar una consulta que  devuelve m\u00e1s de una fila o m\u00e1s de una columna como una subecha escalar.  (Pero si, durante una ejecuci\u00f3n en particular, la subcoquer\u00eda no  devuelve filas, no hay error; el resultado escalar se toma como nulo.)  La subcoquer\u00eda puede referirse a variables de la consulta circundante,  que actuar\u00e1 como constantes durante cualquier evaluaci\u00f3n de la  subcoquer\u00eda. V\u00e9ase tambi\u00e9n la Secci\u00f3n 9.23 para otras expresiones que implican subcomitos.</p> <p>Por ejemplo, lo siguiente encuentra la mayor poblaci\u00f3n de la ciudad en cada estado:</p> <pre><code>Nombre de SELECT, (SELECT max(pop) De las ciudades D\u00f3nde las ciudades.state = states.name)\n    De los Estados;\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/11.-Sucoquesas%20de%20escalar/#_1","title":"11.-Sucoquesas de escalar","text":""},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/12.-Constructores%20de%20Array/","title":"12.-Constructores de Array","text":""},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/12.-Constructores%20de%20Array/#_1","title":"12.-Constructores de Array","text":"<p>Un constructor de array es una expresi\u00f3n que construye un valor  de matriz usando valores para sus elementos miembros. Un simple  constructor de matriz consiste en la palabra clave <code>ARRAY</code>, un soporte cuadrado izquierdo <code>[</code>, una lista de expresiones (separadas por comas) para los valores de  elementos de array, y finalmente un soporte cuadrado derecho <code>]</code>. Por ejemplo:</p> <pre><code>SELECT ARRAY[1,2,3-4];\n  matriz\n-------\n 1,2,7\n(1 fila)\n</code></pre> <p>Por defecto, el tipo de elemento de matriz es el tipo com\u00fan de  expresiones miembros, determinada usando las mismas reglas que para  <code>UNION</code>o o  <code>CASE</code>construcciones (v\u00e9ase la secci\u00f3n 10.5). Puede anular esto lanzando expl\u00edcitamente el constructor de matriz al tipo deseado, por ejemplo:</p> <pre><code>SELECT ARRAY[1,2,22.7]::integer[];\n  matriz\n---------\n - 1.223.\n(1 fila)\n</code></pre> <p>Esto tiene el mismo efecto que lanza cada expresi\u00f3n al tipo de  elemento de matriz individualmente. Para m\u00e1s informaci\u00f3n sobre el  casting, v\u00e9ase la secci\u00f3n 4.2.9.</p> <p>Los valores de matriz multidimensional se pueden construir  mediante constructores de matrices de anidaci\u00f3n. En los constructores  interiores, la palabra clave  <code>ARRAY</code>se puede omitir. Por ejemplo, estos producen el mismo resultado:</p> <pre><code>SELECT ARRAY[ARRAY[1,2], ARRAY[3,4]];\n     matriz\n- A---------------\n . . . . . . . . . . . . . . . . . . . . . . .\n(1 fila)\n\nSELECT ARRAY[[1,2],[3,4]];\n     matriz\n- A---------------\n . . . . . . . . . . . . . . . . . . . . . . .\n(1 fila)\n</code></pre> <p>Dado que los arrays multidimensionales deben ser rectangulares,  los constructores interiores al mismo nivel deben producir sub-arrays de dimensiones id\u00e9nticas. Cualquier yarde aplicado al exterior  <code>ARRAY</code>El constructor se propaga autom\u00e1ticamente a todos los constructores internos.</p> <p>Los elementos de constructor de matrices multidimensionales  pueden ser cualquier cosa que produzca una matriz del tipo apropiado, no s\u00f3lo un sub- <code>ARRAY</code>Construir. Por ejemplo:</p> <pre><code>CREATE TABLE arr(f1 int[], f2 int[]);\n\nINSERT INTO arr VALUES (ARRAY[[1,2],[3,4]], ARRAY[5,6],[7,8]]);\n\nSELECT ARRAY[f1, f2, 'o9,10o,11,12'::int[]] DESDE arr;\n                     matriz\n---------------------------------------------------------------------------\n .. .. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n(1 fila)\n</code></pre> <p>Usted puede construir una matriz vac\u00eda, pero como es imposible  tener un array sin tipo, debe expl\u00edcitamente lanzar su matriz vac\u00eda al  tipo deseado. Por ejemplo:</p> <pre><code>SELECT ARRAY[]:integer[];\n matriz\n------\n -\n(1 fila)\n</code></pre> <p>Tambi\u00e9n es posible construir un array a partir de los resultados  de una subcoquer\u00eda. En este modo, el constructor de matriz est\u00e1 escrito  con la palabra clave  <code>ARRAY</code>seguido de una subcunci\u00f3n entre par\u00e9ntesis. Por ejemplo:</p> <pre><code>SELECT ARRAY(SELECT oid FROM pg.proc WHERE proname LIKE LIKE 'bytea%');\n                              matriz\n---------------------------------------------------------------------------------------------------------------------------\n 2011,1954,1948,1952,1951,1951,191950,2005,1949,1953,2006,31,2412\n(1 fila)\n\nSELECT ARRAY(SELECT ARRAY[i, i*2] DESDE Generaseries (1.5) AS a(i));\n              matriz\n----------------------------------\n 1,2,2,4, 3,6, 4,8, , 5,10o.\n(1 fila)\n</code></pre> <p>La subcoche debe devolver una sola columna. Si la columna de  salida de la sutrocuria es de tipo no de rayos, el array unidimensional  resultante tendr\u00e1 un elemento para cada fila en el resultado de la  subcocher\u00eda, con un tipo de elemento que coincide con el de la columna  de salida de la subcoquer\u00eda. Si la columna de salida de la subcoquer\u00eda  es de tipo de array, el resultado ser\u00e1 un array del mismo tipo pero una  dimensi\u00f3n superior; en este caso todas las filas de subcoquer\u00eda deben  producir matrices de dimensionalidad id\u00e9ntica, de lo contrario el  resultado no ser\u00eda rectangular.</p> <p>Los sub\u00edndices de un valor de matriz construido con  <code>ARRAY</code>siempre empieza con uno. Para m\u00e1s informaci\u00f3n sobre arrays, v\u00e9ase la secci\u00f3n 8.15.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/13.-Constructores%20de%20filas/","title":"13.-Constructores de filas","text":"<p>Un constructor de filas es una expresi\u00f3n que construye un valor de  fila (tambi\u00e9n llamado valor compuesto) usando valores para sus campos  miembros. Un constructor de filas consiste en la palabra clave <code>ROW</code>, un par\u00e9ntesis izquierdo, cero o m\u00e1s expresiones (separadas por comas)  para los valores del campo de fila, y finalmente un par\u00e9ntesis derecho.  Por ejemplo:</p> <pre><code>SELECT ROW (1,2,5, \"esta es una prueba\";\n</code></pre> <p>La palabra clave  <code>ROW</code>es opcional cuando hay m\u00e1s de una expresi\u00f3n en la lista.</p> <p>Un constructor de filas puede incluir la sintaxis <code>rowvalue</code><code>.*</code>, que se ampliar\u00e1 a una lista de los elementos del valor de la fila, tal como se produce cuando la  <code>.*</code>sintaxis se utiliza en el nivel superior de un  <code>SELECT</code>lista (v\u00e9ase la secci\u00f3n 8.16.5). Por ejemplo, si se tabla  <code>t</code>tiene columnas  <code>f1</code>y <code>f2</code>, estos son los mismos:</p> <pre><code>SELECT ROW(t.*, 42) DESDE t;\nSELECT ROW(t.f1, t.f2, 42) DESDE t;\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/13.-Constructores%20de%20filas/#nota","title":"Nota","text":"<p>Antes de PostgreSQL 8.2, el  <code>.*</code>la sintaxis no se ampli\u00f3 en los constructores de filas, por lo que la escritura  <code>ROW(t.*, 42)</code>cre\u00f3 una fila de dos campos cuyo primer campo fue otro valor de fila. El  nuevo comportamiento suele ser m\u00e1s \u00fatil. Si necesitas el viejo  comportamiento de los valores de fila anidada, escribe el valor de la  fila interior sin <code>.*</code>, por ejemplo <code>ROW(t, 42)</code>.</p> <p>Por defecto, el valor creado por un  <code>ROW</code>expresi\u00f3n es de tipo de registro an\u00f3nimo. Si es necesario, se puede fundir a un  tipo compuesto nombrado, ya sea el tipo de fila de una tabla, o un tipo  compuesto creado con <code>CREATE TYPE AS</code>. Un elenco expl\u00edcito podr\u00eda ser necesario para evitar la ambiguedad. Por ejemplo:</p> <pre><code>CREATE TABLE mytable(f1 int, f2 float, f3 texto;\n\nCREATE FUNCTION getf1(mable) RETURNS int AS 'SELECT $1.f1' LANGUAGE SQL;\n\n-- No se necesita el elenco ya que s\u00f3lo existe un getf1()\nSELECT getf1(ROW (1,2,5, 'esto es una prueba');\n getf1\n------\n     1\n(1 fila)\n\nCREATE TIPO mycretipo AS (f1 int, f2 texto, f3 num\u00e9rico);\n\nCREATE FUNCTION getf1(myrowtype) RETURNS int AS 'SELECT $1.f1' LANGUAGE SQL;\n\nAhora necesitamos un lade\u00f1o para indicar qu\u00e9 funci\u00f3n llamar:\nSELECT getf1(ROW (1,2,5, 'esto es una prueba');\nERROR: funci\u00f3n getf1(record) no es \u00fanica\n\nSELECT getf1($1,2.5, 'esto es una prueba')::mitable);\n getf1\n------\n     1\n(1 fila)\n\nSELECT getf1(CAST(LLW (11,\" esto es una prueba\", 2.5) AS myrowtype);\n getf1\n------\n    11\n(1 fila)\n</code></pre> <p>Los constructores de filas se pueden utilizar para construir  valores compuestos para ser almacenados en una columna de tabla de tipo  compuesto, o para ser pasados a una funci\u00f3n que acepta un par\u00e1metro  compuesto. Adem\u00e1s, es posible comparar dos valores de fila o probar una  fila con  <code>IS NULL</code>o o <code>IS NOT NULL</code>, por ejemplo:</p> <pre><code>SELECT ROW (1,2.5, 'esto es un ensayo') = ROW (1, 3, 'no el mismo');\n\nSELECT ROW(table.*) IS NULL FROM table; -- detecta filas de todo nen\u00f3cidos\n</code></pre> <p>Para m\u00e1s detalles, v\u00e9ase la secci\u00f3n 9.24. Los constructores de filas tambi\u00e9n pueden utilizarse en relaci\u00f3n con subcoquer\u00edas, como se examina en la secci\u00f3n 9.23.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/02.-Expresiones%20de%20valor/14.-Reglas%20de%20evaluaci%C3%B3n%20de%20la%20expresi%C3%B3n/","title":"14.-Reglas de evaluaci\u00f3n de la expresi\u00f3n","text":"<p>El orden de evaluaci\u00f3n de subexpresiones no est\u00e1 definido. En  particular, las entradas de un operador o funci\u00f3n no se eval\u00faan  necesariamente de izquierda a derecha o en cualquier otro pedido fijo.</p> <p>Adem\u00e1s, si el resultado de una expresi\u00f3n se puede determinar  evaluando s\u00f3lo algunas partes de ella, entonces otras subexpresiones  podr\u00edan no ser evaluadas en absoluto. Por ejemplo, si uno escribi\u00f3:</p> <pre><code>SELECT true O algo de ();\n</code></pre> <p>entonces  <code>somefunc()</code>(probablemente) no ser\u00eda llamada en absoluto. Lo mismo ser\u00eda si uno escribiera:</p> <pre><code>SELECT somefunc () O cierto;\n</code></pre> <p>Tenga en cuenta que esto no es lo mismo que el cortocircuito de izquierda a derecha de los operadores booleanos que se encuentra en algunos lenguajes de programaci\u00f3n.</p> <p>Como consecuencia, no es prudente utilizar funciones con efectos  secundarios como parte de expresiones complejas. Es especialmente  peligroso confiar en los efectos secundarios o en el orden de evaluaci\u00f3n en  <code>WHERE</code>y  <code>HAVING</code>cl\u00e1usulas, ya que esas cl\u00e1usulas se reprocesan ampliamente como parte de la  elaboraci\u00f3n de un plan de ejecuci\u00f3n. Expresiones boolenas (<code>AND</code>/<code>OR</code>/ <code>NOT</code>combinaciones) en esas cl\u00e1usulas se pueden reorganizar de cualquier manera permitida por las leyes del \u00e1lgebra booleana.</p> <p>Cuando es esencial forzar el orden de evaluaci\u00f3n, a  <code>CASE</code>La construcci\u00f3n (ver Secci\u00f3n 9.18) se puede utilizar. Por ejemplo, esta es una manera poco confiable de tratar de evitar la divisi\u00f3n por cero en un  <code>WHERE</code>cl\u00e1usula:</p> <pre><code>SELECT ... DONE x 0 Y y/x 1.5;\n</code></pre> <p>Pero esto es seguro:</p> <pre><code>SELECT ... D\u00f3nde QUIEN CUANDO x . 0 THEN y/x . 1.5 ELSE falso END;\n</code></pre> <p>A  <code>CASE</code>La construcci\u00f3n utilizada en esta moda derrotar\u00e1 los intentos de  optimizaci\u00f3n, por lo que s\u00f3lo debe hacerse cuando sea necesario. (En  este ejemplo en particular, ser\u00eda mejor eludir el problema escribiendo  <code>y &gt; 1.5*x</code>en su lugar.)</p> <p><code>CASE</code>Sin embargo, no es una cura para este tipo de cuestiones. Una limitaci\u00f3n de la t\u00e9cnica ilustrada anteriormente es que no impide la evaluaci\u00f3n  temprana de las continuas subexpresiones. Como se describe en la secci\u00f3n 38.7, las funciones y los operadores marcaron  <code>IMMUTABLE</code>se puede evaluar cuando la consulta est\u00e1 planeada en lugar de cuando se ejecuta. As\u00ed, por ejemplo</p> <pre><code>SELECT CASE WHEN x 0 THEN x ELSE 1/0FIN DE Pesta p:\n</code></pre> <p>es probable que resulte en un fracaso de divisi\u00f3n por cero debido al planificador tratando de simplificar la subexpresi\u00f3n constante,  incluso si cada fila de la tabla ha  <code>x &gt; 0</code>de modo que el  <code>ELSE</code>brazo nunca entrar\u00eda en el momento corrido.</p> <p>Si bien ese ejemplo en particular puede parecer tonto, los casos  relacionados que obviamente no implican constantes pueden ocurrir en  consultas ejecutadas dentro de funciones, ya que los valores de los  argumentos de la funci\u00f3n y las variables locales se pueden insertar en  consultas como constantes con fines de planificaci\u00f3n. Dentro de las  funciones de PL/pgSQL, por ejemplo, usando un <code>IF</code>- -<code>THEN</code>- - <code>ELSE</code>declaraci\u00f3n para proteger un c\u00f3mputo arriesgo es mucho m\u00e1s segura que simplemente anidarla en un  <code>CASE</code>la expresi\u00f3n.</p> <p>Otra limitaci\u00f3n del mismo tipo es que a  <code>CASE</code>no puede impedir la evaluaci\u00f3n de una expresi\u00f3n agregada contenida en  ella, porque las expresiones agregadas se calculan antes de otras  expresiones en un  <code>SELECT</code>lista o  <code>HAVING</code>se considere la cl\u00e1usula. Por ejemplo, la siguiente consulta puede causar  un error de divisi\u00f3n por cero a pesar de que aparentemente se ha  protegido contra \u00e9l:</p> <pre><code>SELECT CASE WHEN min(employees)\n            THEN avg (expenses / empleados)\n       FIN\n    De los departamentos;\n</code></pre> <p>El  <code>min()</code>y  <code>avg()</code>los agregados se calculan simult\u00e1neamente sobre todas las filas de entrada, as\u00ed que si hay alguna fila  <code>employees</code>igual a cero, el error de divisi\u00f3n por cero se producir\u00e1 antes de que haya alguna oportunidad de probar el resultado de <code>min()</code>. En su lugar, use un  <code>WHERE</code>o o  <code>FILTER</code>cl\u00e1usula para evitar que las filas de entrada problem\u00e1ticas alcancen una funci\u00f3n agregada en primer lugar.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/03.-Llamada%20a%20funciones/","title":"03.-Llamada a funciones","text":"<p>PostgreSQL permite que las funciones que tienen par\u00e1metros nombrados se llamen usando notaci\u00f3n posicional o nombrada. La notaci\u00f3n nombrada es especialmente \u00fatil para funciones que tienen un gran n\u00famero de par\u00e1metros, ya que hace que las asociaciones entre par\u00e1metros y argumentos reales sean m\u00e1s expl\u00edcitas y fiables. En la notaci\u00f3n posicional, una llamada de funci\u00f3n se escribe con sus valores argumentales en el mismo orden que se definen en la declaraci\u00f3n de funci\u00f3n. En la notaci\u00f3n, los argumentos se ajustan a los par\u00e1metros de la funci\u00f3n por su nombre y se pueden escribir en cualquier orden. Para cada notaci\u00f3n, tambi\u00e9n considere el efecto de los tipos de argumentos de funci\u00f3n, documentados en la secci\u00f3n 10.3.</p> <p>En cualquier notaci\u00f3n, los par\u00e1metros que tienen valores por defecto dados en la declaraci\u00f3n de funci\u00f3n no tienen que ser escritos en la llamada en absoluto. Pero esto es particularmente \u00fatil en la notaci\u00f3n nombrada, ya que cualquier combinaci\u00f3n de par\u00e1metros puede ser omitida; mientras que en los par\u00e1metros de notaci\u00f3n posicional s\u00f3lo se puede omitir de derecha a izquierda.</p> <p>PostgreSQL tambi\u00e9n es compatible con notaci\u00f3n mixta, que combina notaci\u00f3n posicional y llamada. En este caso, los par\u00e1metros posicionales se escriben primero y aparecen par\u00e1metros de nombre despu\u00e9s de ellos.</p> <p>Los siguientes ejemplos ilustrar\u00e1n el uso de las tres notaciones, utilizando la siguiente definici\u00f3n de funci\u00f3n:</p> <p>CREATE FUNCTION concat.lower-upper(un texto, b texto, may\u00fascula boolean DEFAULT falso) Texto de RETURNS AS $$  CASO SELECT         Cuando \\(3N UPPER(\\)1 '$ '$ '$ \\(2)         ELSE LOWER (\\)1 \" '$ '$ $2)         END; $$ LANGUAGE SQL IMMUTABLE STRICT;</p> <p>Funci\u00f3n <code>concat_lower_or_upper</code>tiene dos par\u00e1metros obligatorios, <code>a</code>y <code>b</code>. Adem\u00e1s hay un par\u00e1metro opcional <code>uppercase</code>que por defecto a <code>false</code>. El <code>a</code>y <code>b</code>los insumos ser\u00e1n concatenados, y obligados a la parte superior o inferior en funci\u00f3n de la <code>uppercase</code>par\u00e1metro. Los detalles restantes de esta definici\u00f3n de funci\u00f3n no son importantes aqu\u00ed (ver el cap\u00edtulo 38 para m\u00e1s informaci\u00f3n).</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/03.-Llamada%20a%20funciones/01.-Usando%20notaci%C3%B3n/","title":"01.-Usando notaci\u00f3n","text":"<p>La notaci\u00f3n de posici\u00f3n es el mecanismo tradicional para pasar argumentos a funciones en PostgreSQL. Un ejemplo es:</p> <pre><code>SELECT concat.lower-or-upper ('Hola', 'Mundo', verdad);\n concat.lower-or-upper\n--------------------\n HELLO MUNDO\n(1 fila)\n</code></pre> <p>Todos los argumentos se especifican en orden. El resultado es de la m\u00e1xima situaci\u00f3n desde  <code>uppercase</code>se especifica como <code>true</code>. Otro ejemplo es:</p> <pre><code>SELECT concat.lower-orupper ('Hola', 'Mundo');\n concat.lower-or-upper\n--------------------\n hola mundo\n(1 fila)\n</code></pre> <p>Aqu\u00ed, el  <code>uppercase</code>se omite el par\u00e1metro, por lo que recibe su valor predeterminado de <code>false</code>, dando lugar a una menor salida de casos. En notaci\u00f3n posicional, los  argumentos pueden omitirse de derecha a izquierdas siempre y cuando  tengan incumplimientos.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/03.-Llamada%20a%20funciones/02.-Usando%20notaci%C3%B3n%20nombrada/","title":"02.-Usando notaci\u00f3n nombrada","text":"<p>En la notaci\u00f3n, el nombre de cada argumento se especifica usando  <code>=&gt;</code>para separarlo de la expresi\u00f3n argumental. Por ejemplo:</p> <pre><code>SELECT concat.lower-or-upper(a = 'Hola', b = 'Mundo');\n concat.lower-or-upper\n--------------------\n hola mundo\n(1 fila)\n</code></pre> <p>Una vez m\u00e1s, el argumento  <code>uppercase</code>fue omitido por lo que est\u00e1 listo para  <code>false</code>impl\u00edcitamente. Una ventaja de utilizar la notaci\u00f3n nombrada es que los argumentos  pueden especificarse en cualquier orden, por ejemplo:</p> <pre><code>SELECT concat.lower-or-upper(a =- 'Hola', b =- 'Mundo', may-; may);\n concat.lower-or-upper\n--------------------\n HELLO MUNDO\n(1 fila)\n\nSELECT concat.lower-or-upper(a =- 'Hola', may-, b =-' 'World');\n concat.lower-or-upper\n--------------------\n HELLO MUNDO\n(1 fila)\n</code></pre> <p>Una sintaxis m\u00e1s antigua basada en \":=\" se apoya para la compatibilidad hacia atr\u00e1s:</p> <pre><code>SELECT concat.lower-or-upper(a:= 'Hola', may-caja superior:= true, b:= 'Mundo');\n concat.lower-or-upper\n--------------------\n HELLO MUNDO\n(1 fila)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/03.-Llamada%20a%20funciones/03.-Usando%20Notaci%C3%B3n%20Mixta/","title":"03.-Usando Notaci\u00f3n Mixta","text":"<p>La notaci\u00f3n mixta combina la notaci\u00f3n posicional y nombrada. Sin  embargo, como ya se ha mencionado, los argumentos nombrados no pueden  preceder a los argumentos posicionales. Por ejemplo:</p> <pre><code>SELECT concat.lower-or-upper( 'Hola', 'World', may-c.\n concat.lower-or-upper\n--------------------\n HELLO MUNDO\n(1 fila)\n</code></pre> <p>En la consulta anterior, los argumentos  <code>a</code>y  <code>b</code>se especifican de forma posicional, mientras que  <code>uppercase</code>se especifica por su nombre. En este ejemplo, eso a\u00f1ade poco menos que  documentaci\u00f3n. Con una funci\u00f3n m\u00e1s compleja que tiene numerosos  par\u00e1metros que tienen valores predeterminados, llamada o notaci\u00f3n mixta  puede ahorrar mucho de escribir y reducir las posibilidades de error.</p>"},{"location":"02.-El%20lenguaje%20SQL/01.-Sintaxis%20SQL/03.-Llamada%20a%20funciones/03.-Usando%20Notaci%C3%B3n%20Mixta/#nota","title":"Nota","text":"<p>Las notaciones de llamadas nombradas y mixtas actualmente no se pueden usar cuando se llama a una funci\u00f3n agregada (pero s\u00ed funcionan  cuando se utiliza una funci\u00f3n agregada como una funci\u00f3n de ventana).</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/","title":"Index","text":"<p>Este cap\u00edtulo cubre c\u00f3mo uno crea las estructuras de base de datos que  mantendr\u00e1n los datos. En una base de datos relacional, los datos brutos  se almacenan en tablas, por lo que la mayor\u00eda de este cap\u00edtulo se dedica a explicar c\u00f3mo se crean y modifican las tablas y qu\u00e9 caracter\u00edsticas  est\u00e1n disponibles para controlar qu\u00e9 datos se almacenan en las tablas.  Posteriormente, discutimos c\u00f3mo las mesas se pueden organizar en  esquemas, y c\u00f3mo los privilegios pueden ser asignados a las mesas. Por  \u00faltimo, veremos brevemente otras caracter\u00edsticas que afectan al  almacenamiento de datos, como herencia, partici\u00f3n de tablas, vistas,  funciones y disparadores.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/01.-B%C3%A1sicos%20de%20la%20tabla/","title":"01.-B\u00e1sicos de la tabla","text":"<p>Una tabla en una base de datos relacional es muy parecida a una tabla en papel: Consiste en filas y columnas. El n\u00famero y el orden de las  columnas se fija, y cada columna tiene un nombre. El n\u00famero de filas es  variable, refleja cu\u00e1ntos datos se almacenan en un momento dado. SQL no  hace ninguna garant\u00eda sobre el orden de las filas en una tabla. Cuando  se lee una tabla, las filas aparecer\u00e1n en un orden no especificado, a  menos que se solicite expl\u00edcitamente la clasificaci\u00f3n. Esto se trata en el cap\u00edtulo 7. Adem\u00e1s, SQL no asigna identificadores \u00fanicos a las filas, por lo que es posible tener varias filas completamente id\u00e9nticas en una tabla.  Esto es una consecuencia del modelo matem\u00e1tico que subyace a SQL pero  que no suele ser deseable. M\u00e1s adelante en este cap\u00edtulo veremos c\u00f3mo  lidiar con esta cuesti\u00f3n.</p> <p>Cada columna tiene un tipo de datos. El tipo de datos limita el  conjunto de posibles valores que se pueden asignar a una columna y  asigna sem\u00e1ntica a los datos almacenados en la columna para que puedan  ser utilizados para c\u00f3mputos. Por ejemplo, una columna declarada de un  tipo num\u00e9rico no aceptar\u00e1 cadenas de texto arbitrarias, y los datos  almacenados en dicha columna se pueden utilizar para c\u00e1lculos  matem\u00e1ticos. Por el contrario, una columna declarada de tipo de cadena  de caracteres aceptar\u00e1 casi cualquier tipo de datos, pero no se presta a c\u00e1lculos matem\u00e1ticos, aunque otras operaciones como la concatenaci\u00f3n de cuerdas est\u00e1n disponibles.</p> <p>PostgreSQL incluye un conjunto considerable de tipos de datos incorporados que se  ajustan a muchas aplicaciones. Los usuarios tambi\u00e9n pueden definir sus  propios tipos de datos. La mayor\u00eda de los tipos de datos incorporados  tienen nombres obvios y sem\u00e1ntica, por lo que aplazamos una explicaci\u00f3n  detallada al Cap\u00edtulo 8. Algunos de los tipos de datos frecuentemente utilizados son  <code>integer</code>para n\u00fameros enteros,  <code>numeric</code>para los n\u00fameros de la fracci\u00f3n,  <code>text</code>para las cuerdas de caracteres,  <code>date</code>para las fechas,  <code>time</code>para los valores del tiempo de d\u00eda, y  <code>timestamp</code>para valores que contengan tanto la fecha como la hora.</p> <p>Para crear una tabla, se utiliza el comando CREATE TABLE bien llamado. En este comando se especifica al menos un nombre para la  nueva tabla, los nombres de las columnas y el tipo de datos de cada  columna. Por ejemplo:</p> <pre><code>CREATE TABLE my.first-first-table (\n    el texto de la primera columna,\n    en el entero de segundo.column\n);\n</code></pre> <p>Esto crea una tabla nombrada  <code>my_first_table</code>con dos columnas. La primera columna se llama  <code>first_column</code>y tiene un tipo de datos de <code>text</code>; la segunda columna tiene el nombre  <code>second_column</code>y el tipo <code>integer</code>. La tabla y los nombres de las columnas siguen la sintaxis de identificador que se explica en la secci\u00f3n 4.1.1. Los nombres de tipo suelen ser tambi\u00e9n identificadores, pero hay  algunas excepciones. Tenga en cuenta que la lista de columnas est\u00e1  separada por comas y rodeada de par\u00e9ntesis.</p> <p>Por supuesto, el ejemplo anterior fue muy artiuptado. Normalmente,  dar\u00edas nombres a tus cuadros y columnas que transmiten qu\u00e9 tipo de datos almacenan. As\u00ed que veamos un ejemplo m\u00e1s realista:</p> <pre><code>CREATE Productos de TABLE (\n    product-no integer,\n    texto de nombre,\n    letra de precio\n);\n</code></pre> <p>(El  <code>numeric</code>tipo puede almacenar componentes fraccionados, como ser\u00eda t\u00edpico de las cantidades monetarias.)</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/01.-B%C3%A1sicos%20de%20la%20tabla/#tip","title":"Tip","text":"<p>Cuando creas muchas tablas interrelacionadas es aconsejable  elegir un patr\u00f3n de nombres consistente para las tablas y columnas. Por  ejemplo, hay una opci\u00f3n de usar sustantivos singulares o plurales para  los nombres de la mesa, ambos favorecidos por alg\u00fan te\u00f3rico o de otro.</p> <p>Hay un l\u00edmite en cu\u00e1ntas columnas puede contener una tabla.  Dependiendo de los tipos de columna, est\u00e1 entre 250 y 1600. Sin embargo, definir una tabla con cerca de estas muchas columnas es muy inusual y a menudo un dise\u00f1o cuestionable.</p> <p>Si ya no necesita una tabla, puede eliminarla usando el comando DROP TABLE. Por ejemplo:</p> <pre><code>DROP TABLE my-first-table;\nProductos DROP TABLE;\n</code></pre> <p>Intentar soltar una tabla que no existe es un error. Sin embargo,  es com\u00fan en los archivos del script SQL tratar incondicionalmente de  soltar cada tabla antes de crearla, ignorando cualquier mensaje de  error, de modo que el script funciona independientemente de que exista o no la tabla. (Si quieres, puedes usar el  <code>DROP TABLE IF EXISTS</code>variante para evitar los mensajes de error, pero esto no es est\u00e1ndar SQL.)</p> <p>Si usted necesita modificar una tabla que ya existe, ver la Secci\u00f3n 5.6 m\u00e1s adelante en este cap\u00edtulo.</p> <p>Con las herramientas discutidas hasta ahora puede crear tablas  completamente funcionales. El resto de este cap\u00edtulo se ocupa de a\u00f1adir  caracter\u00edsticas a la definici\u00f3n de tabla para garantizar la integridad,  seguridad o conveniencia de los datos. Si est\u00e1s ansioso por llenar tus  tablas con datos ahora puedes saltarte el pr\u00f3ximo cap\u00edtulo y leer el resto de este cap\u00edtulo m\u00e1s adelante.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/02.-Valores%20predeterminados/","title":"02.-Valores predeterminados","text":"<p>A una columna se le puede asignar un valor por defecto. Cuando se  cree una nueva fila y no se especifican valores para algunas de las  columnas, esas columnas se llenar\u00e1n con sus respectivos valores por  defecto. Un comando de manipulaci\u00f3n de datos tambi\u00e9n puede solicitar  expl\u00edcitamente que una columna se configurara a su valor predeterminado, sin tener que saber cu\u00e1l es ese valor. (Los detalles sobre los comandos de manipulaci\u00f3n de datos est\u00e1n en el Cap\u00edtulo 6.)</p> <p>Si no se declara expl\u00edcitamente ning\u00fan valor por defecto, el valor por  defecto es el valor nulo. Esto generalmente tiene sentido porque un  valor nulo puede ser considerado como un valor desconocido.</p> <p>En una definici\u00f3n de tabla, los valores por defecto se enumeran despu\u00e9s del tipo de datos de la columna. Por ejemplo:</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no integer,\n    texto de nombre,\n    precio num\u00e9rico DEFAULT 9.99\n);\n</code></pre> <p>El valor por defecto puede ser una expresi\u00f3n, que se evaluar\u00e1 siempre que se inserte el valor predeterminado (no cuando se crea la tabla). Un ejemplo com\u00fan es para un  <code>timestamp</code>columna para tener un defecto de <code>CURRENT_TIMESTAMP</code>, para que se ponga en el momento de la inserci\u00f3n de la fila. Otro ejemplo com\u00fan es la generaci\u00f3n de un n\u00famero de serie para cada fila. En PostgreSQL esto se hace t\u00edpicamente por algo como:</p> <pre><code>CREATE Productos de TABLABLE (\n    product.no integer DEFAULT nextval('products.product.no-seq'),\n    ...\n);\n</code></pre> <p>donde el  <code>nextval()</code>funci\u00f3n suministra valores sucesivos de un objeto de secuencia (ver 17). Este arreglo es suficientemente com\u00fan como para que haya una abreviatura especial para ello:</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no SERIAL,\n    ...\n);\n</code></pre> <p>El  <code>SERIAL</code>En la secci\u00f3n 8.1.4 se examina m\u00e1s a poco en la secci\u00f3n 8.1.4.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/03.-Columnas%20generadas/","title":"03.-Columnas generadas","text":"<p>Una columna generada es una columna especial que siempre se calcula a partir de otras columnas. Por lo tanto, es para las columnas lo que una vista es para las tablas. Hay dos tipos de columnas generadas:  almacenadas y virtuales. Una columna generada almacenada se calcula  cuando se escribe (insertada o actualizada) y ocupa el almacenamiento  como si fuera una columna normal. Una columna generada virtual no ocupa  ning\u00fan almacenamiento y se calcula cuando se lee. As\u00ed, una columna  generada virtual es similar a una vista y una columna generada  almacenada es similar a una vista materializada (salvo que siempre se  actualiza autom\u00e1ticamente). PostgreSQL implementa actualmente s\u00f3lo  columnas generadas almacenadas.</p> <p>Para crear una columna generada, utilice la  <code>GENERATED ALWAYS AS</code>cl\u00e1usula en <code>CREATE TABLE</code>, por ejemplo:</p> <pre><code>CREATE TABLE personas (\n    ...,\n    altura-cm num\u00e9rico,\n    height.in num\u00e9rico GENERATED SIWAYS AS (altura-cm / 2.54) STORED\n);\n</code></pre> <p>La palabra clave  <code>STORED</code>deber\u00e1 especificarse para elegir el tipo almacenado de columna generada. Vea CREATE TABLE para m\u00e1s detalles.</p> <p>Una columna generada no se puede escribir directamente. En  <code>INSERT</code>o o  <code>UPDATE</code>comandos, un valor no se puede especificar para una columna generada, sino la palabra clave  <code>DEFAULT</code>podr\u00e1 especificarse.</p> <p>Considere las diferencias entre una columna con una columna  predeterminada y una columna generada. La columna por defecto se eval\u00faa  una vez que se inserta la fila por primera vez si no se proporcion\u00f3 otro valor; se actualiza una columna generada cada vez que la fila cambia y  no puede ser ana\u00eddada. Una columna por defecto puede no referirse a  otras columnas de la tabla; una expresi\u00f3n de generaci\u00f3n normalmente lo  har\u00eda. Una columna por defecto puede usar funciones vol\u00e1tiles, por  ejemplo  <code>random()</code>o funciones que se refieren al tiempo actual; esto no est\u00e1 permitido para las columnas generadas.</p> <p>Se aplican varias restricciones a la definici\u00f3n de columnas y cuadros generados con columnas generadas:</p> <ul> <li>La expresi\u00f3n de generaci\u00f3n s\u00f3lo puede utilizar funciones  inmutables y no puede utilizar subc\u00e1rbaos o referencia nada que no sea  la fila actual de ninguna manera.</li> <li>Una expresi\u00f3n de generaci\u00f3n no puede hacer referencia a otra columna generada.</li> <li>Una expresi\u00f3n de generaci\u00f3n no puede hacer referencia a una columna de sistema, excepto <code>tableoid</code>.</li> <li>Una columna generada no puede tener una columna por defecto o una definici\u00f3n de identidad.</li> <li>Una columna generada no puede ser parte de una tecla de partici\u00f3n.</li> <li>Las tablas extranjeras pueden haber generado columnas. Consulte CREATE FOREIGN TABLE para m\u00e1s detalles.</li> <li>Para la herencia y la partici\u00f3n:</li> <li>Si una columna de padres es una columna generada, su  columna infantil tambi\u00e9n debe ser una columna generada; sin embargo, la  columna infantil puede tener una expresi\u00f3n de generaci\u00f3n diferente. La  expresi\u00f3n de generaci\u00f3n que se aplica realmente durante la inserci\u00f3n o  actualizaci\u00f3n de una fila es la asociada con la tabla en la que la fila  est\u00e1 f\u00edsicamente. (Esto no es diferente al comportamiento de los  defectos de columna: para aquellos, se aplica el valor predeterminado  asociado con la tabla nombrada en la consulta.)</li> <li>Si una columna madre no es una columna generada, su columna de hijo tampoco debe generarse.</li> <li>Para tablas heredadas, si escribe una definici\u00f3n de columna para ni\u00f1os sin ninguna  <code>GENERATED</code>cl\u00e1usula en <code>CREATE TABLE ... INHERITS</code>, entonces su  <code>GENERATED</code>cl\u00e1usula ser\u00e1 copiada autom\u00e1ticamente del padre.  <code>ALTER TABLE ... INHERIT</code>insistir\u00e1 en que las columnas de padres e hijos ya coincidon con el estatus de  generaci\u00f3n, pero no requerir\u00e1 que sus expresiones de generaci\u00f3n  coincidos.</li> <li>Del mismo modo para tablas divididas, si escribe una definici\u00f3n de columna infantil sin ninguna  <code>GENERATED</code>cl\u00e1usula en <code>CREATE TABLE ... PARTITION OF</code>, entonces su  <code>GENERATED</code>cl\u00e1usula ser\u00e1 copiada autom\u00e1ticamente del padre.  <code>ALTER TABLE ... ATTACH PARTITION</code>insistir\u00e1 en que las columnas de padres e hijos ya coincidon con el estatus de  generaci\u00f3n, pero no requerir\u00e1 que sus expresiones de generaci\u00f3n  coincidos.</li> <li>En caso de herencia m\u00faltiple, si una columna de padre  es una columna generada, entonces todas las columnas de los padres deben ser columnas generadas. Si no todos tienen la misma expresi\u00f3n de  generaci\u00f3n, entonces la expresi\u00f3n deseada para el ni\u00f1o debe ser  especificada expl\u00edcitamente.</li> </ul> <p>Se aplican consideraciones adicionales al uso de columnas generadas.</p> <ul> <li>Las columnas generadas mantienen privilegios de acceso por  separado de sus columnas de base subyacentes. Por lo tanto, es posible  organizarlo para que un papel particular pueda leer de una columna  generada pero no de las columnas de base subyacentes.</li> <li>Las columnas generadas se actualizan, conceptualmente, despu\u00e9s de  <code>BEFORE</code>Los desencadenantes han corrido. Por lo tanto, los cambios introducidos en las columnas de base en un  <code>BEFORE</code>El desencadenante se reflejar\u00e1 en columnas generadas. Pero, a la inversa, no est\u00e1 permitido acceder a columnas generadas en  <code>BEFORE</code>desencadenantes.</li> </ul>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/05.-Columnas%20de%20sistema/","title":"05.-Columnas de sistema","text":"<p>Cada tabla tiene varias columnas de sistema que est\u00e1n impl\u00edcitamente definidas por el sistema. Por lo tanto, estos  nombres no pueden ser usados como nombres de columnas definidas por el  usuario. (Ten en cuenta que estas restricciones est\u00e1n separadas de si el nombre es una palabra clave o no; citar un nombre no le permitir\u00e1  escapar de estas restricciones.) Realmente no necesitas estar preocupado por estas columnas; s\u00f3lo sepan que existen.</p> <ul> <li><code>tableoid</code> </li> </ul> <p>\u200b                El OID de la mesa que contiene esta fila. Esta columna es particularmente \u00fatil para las consultas que seleccionen de las tablas divididas (ver 11) o jerarqu\u00edas de herencia (ver 10), ya que sin ella, es dif\u00edcil decir de qu\u00e9 tabla individual vino una fila. El  <code>tableoid</code>puede unirse contra la  <code>oid</code>columna de  <code>pg_class</code>para obtener el nombre de la tabla.      </p> <ul> <li><code>xmin</code> </li> </ul> <p>\u200b        La identidad (idente de transacci\u00f3n) de la transacci\u00f3n de inserci\u00f3n para  esta versi\u00f3n de fila. (Una versi\u00f3n de fila es un estado individual de  una fila; cada actualizaci\u00f3n de una fila crea una nueva versi\u00f3n de fila  para la misma fila l\u00f3gica.)</p> <ul> <li><code>cmin</code> </li> </ul> <p>\u200b        El identificador de comandos (a partir de cero) dentro de la transacci\u00f3n de inserci\u00f3n.</p> <ul> <li><code>xmax</code> </li> </ul> <p>\u200b        La identidad (idente de transacci\u00f3n) de la operaci\u00f3n de eliminaci\u00f3n, o  cero para una versi\u00f3n de fila sin borras. Es posible que esta columna  sea no cero en una versi\u00f3n de fila visible. Eso generalmente indica que  la transacci\u00f3n de eliminaci\u00f3n a\u00fan no se ha comprometido, o que un  intento de eliminaci\u00f3n fue reescrito.</p> <ul> <li><code>cmax</code> </li> </ul> <p>\u200b        El identificador de comandos dentro de la transacci\u00f3n de eliminaci\u00f3n, o cero.</p> <ul> <li><code>ctid</code> </li> </ul> <p>\u200b                La ubicaci\u00f3n f\u00edsica de la versi\u00f3n de la fila dentro de su tabla. Tenga en cuenta que, aunque el  <code>ctid</code>se puede utilizar para localizar la versi\u00f3n de la fila muy r\u00e1pidamente, una fila  <code>ctid</code>cambiar\u00e1 si se actualiza o se mueve <code>VACUUM FULL</code>. Por lo tanto  <code>ctid</code>es in\u00fatil como identificador de fila a largo plazo. Una clave primaria debe ser utilizada para identificar filas l\u00f3gicas.      </p> <p>Los identificadores de transacci\u00f3n tambi\u00e9n son cantidades de 32  bits. En una base de datos de larga duraci\u00f3n es posible que los  identificaciones de transacci\u00f3n se envuelven. Este no es un problema  fatal dados los procedimientos de mantenimiento apropiados; v\u00e9ase el cap\u00edtulo 25 para m\u00e1s detalles. Sin embargo, no es prudente depender de la  singularidad de los ID de transacci\u00f3n a largo plazo (m\u00e1s de mil millones de transacciones).</p> <p>Los identificadores de comando tambi\u00e9n son cantidades de 32 bits. Esto crea un l\u00edmite duro de 2 32 mil 400 millones de)  SQLcomandos dentro de una sola transacci\u00f3n. En la pr\u00e1ctica, este l\u00edmite no es un  problema de la nota de que el l\u00edmite est\u00e1 en el n\u00famero de  SQLcomandos, no el n\u00famero de filas procesadas. Adem\u00e1s, s\u00f3lo los comandos que  realmente modifiquen el contenido de la base de datos consumir\u00e1 un  identificador de comandos.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/07.-Privilegios/","title":"07.-Privilegios","text":"<p>Cuando se crea un objeto, se le asigna un propietario. El propietario es normalmente el papel que ejecut\u00f3 la declaraci\u00f3n de creaci\u00f3n. Para la mayor\u00eda de los tipos de objetos, el estado inicial es que s\u00f3lo el  propietario (o un superusuario) puede hacer cualquier cosa con el  objeto. Para permitir que otros roles lo usen, deben concederse privilegios.</p> <p>Hay diferentes tipos de privilegios: <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>TRUNCATE</code>, <code>REFERENCES</code>, <code>TRIGGER</code>, <code>CREATE</code>, <code>CONNECT</code>, <code>TEMPORARY</code>, <code>EXECUTE</code>, <code>USAGE</code>,  <code>SET</code>y <code>ALTER SYSTEM</code>. Los privilegios aplicables a un objeto en particular var\u00edan dependiendo del tipo del objeto (tabtil, funci\u00f3n, etc.). A continuaci\u00f3n aparece m\u00e1s detalles sobre los significados de estos privilegios. Las siguientes  secciones y cap\u00edtulos tambi\u00e9n le mostrar\u00e1n c\u00f3mo se utilizan estos  privilegios.</p> <p>El derecho a modificar o destruir un objeto es inherente a ser el  propietario del objeto, y no se puede conceder o revocar en s\u00ed mismo.  (Sin embargo, como todos los privilegios, ese derecho puede ser heredado por los miembros de la funci\u00f3n de propietaria; v\u00e9ase la Secci\u00f3n 22.3.)</p> <p>Un objeto puede ser asignado a un nuevo propietario con un  <code>ALTER</code>el mando del tipo apropiado para el objeto, por ejemplo</p> <pre><code>ALTER TABLE  table_namePROPIA A new_owner;\n</code></pre> <p>Los superusuarios siempre pueden hacer esto; los roles ordinarios  s\u00f3lo pueden hacerlo si ambos son los due\u00f1os actuales del objeto (o  heredan los privilegios del papel propio) y son capaces de  <code>SET ROLE</code>al nuevo papel de portaedor.</p> <p>Para asignar privilegios, se usa el comando GRANT. Por ejemplo, si  <code>joe</code>es un papel existente, y  <code>accounts</code>es una tabla existente, el privilegio de actualizar la tabla se puede conceder con:</p> <pre><code>GRANT UPDATE ON accounts TO joe;\n</code></pre> <p>Escrito  <code>ALL</code>en lugar de un privilegio espec\u00edfico otorga todos los privilegios que son relevantes para el tipo de objeto.</p> <p>El papel especial  <code>PUBLIC</code>puede ser utilizado para conceder un privilegio a todos los roles del sistema. Adem\u00e1s, groupse pueden configurar roles de grupo para ayudar a gestionar los privilegios cuando hay muchos usuarios de una base de datos para m\u00e1s detalles ver  22.</p> <p>Para revocar un privilegio previamente concedido, utilice el comando REVOKE apropiadamente nombrado:</p> <pre><code>REVOKE TODAS las cuentas de PUBLIC;\n</code></pre> <p>Normalmente, s\u00f3lo el propietario del objeto (o un superusuario)  puede conceder o revocar privilegios en un objeto. Sin embargo, es  posible conceder un privilegio con la opci\u00f3n de subvenci\u00f3n, que otorga al beneficiario el derecho a concederlo a su vez a otros. Si la opci\u00f3n de subvenci\u00f3n es posteriormente revocada, entonces todos los  que recibieron el privilegio de ese destinatario (directamente o a  trav\u00e9s de una cadena de subvenciones) perder\u00e1n el privilegio. Para m\u00e1s  detalles, consulte las p\u00e1ginas de referencia GRANT y REVOKE.</p> <p>El due\u00f1o de un objeto puede optar por revocar sus propios  privilegios ordinarios, por ejemplo para hacer una mesa de s\u00f3lo para s\u00ed  mismo, as\u00ed como para otros. Pero los propietarios siempre son tratados  como titulares de todas las opciones de subvenci\u00f3n, por lo que siempre  pueden volver a conceder sus propios privilegios.</p> <p>Los privilegios disponibles son:</p> <ul> <li><code>SELECT</code> </li> </ul> <p>\u200b        Permite  <code>SELECT</code>desde cualquier columna, o columna espec\u00edfica (s) de una tabla, vista, vista  materializada u otro objeto similar a una tabla. Tambi\u00e9n permite el uso  de <code>COPY TO</code>. Este privilegio tambi\u00e9n es necesario para hacer referencia a los valores de las columnas existentes en <code>UPDATE</code>, <code>DELETE</code>, o <code>MERGE</code>. Para las secuencias, este privilegio tambi\u00e9n permite el uso de la  <code>currval</code>funci\u00f3n. Para objetos grandes, este privilegio permite leer el objeto.      </p> <ul> <li><code>INSERT</code> </li> </ul> <p>\u200b        Permite  <code>INSERT</code>de una nueva fila en una tabla, vista, etc. Puede concederse en columnas  espec\u00edficas (s), en cuyo caso s\u00f3lo podr\u00e1n asignarse las columnas en el  <code>INSERT</code>comando (otras columnas recibir\u00e1n por lo tanto valores por defecto). Tambi\u00e9n permite el uso de <code>COPY FROM</code>.      </p> <ul> <li><code>UPDATE</code> </li> </ul> <p>\u200b        Permite  <code>UPDATE</code>de cualquier columna, o columnas espec\u00edficas, de una tabla, vista, etc. (En la pr\u00e1ctica, cualquier no trivial  <code>UPDATE</code>el comando requerir\u00e1  <code>SELECT</code>privilegio tambi\u00e9n, ya que debe hacer referencia a las columnas de tabla para  determinar qu\u00e9 filas actualizar, y/o calcular nuevos valores para las  columnas.)  <code>SELECT ... FOR UPDATE</code>y  <code>SELECT ... FOR SHARE</code>tambi\u00e9n requiere este privilegio en al menos una columna, adem\u00e1s de la  <code>SELECT</code>privilegio. Para secuencias, este privilegio permite el uso de la  <code>nextval</code>y  <code>setval</code>funciones. Para objetos grandes, este privilegio permite escribir o trunnar el objeto.      </p> <ul> <li><code>DELETE</code> </li> </ul> <p>\u200b        Permite  <code>DELETE</code>de una fila desde una tabla, vista, etc. (En la pr\u00e1ctica, cualquier no trivial  <code>DELETE</code>el comando requerir\u00e1  <code>SELECT</code>privilegio tambi\u00e9n, ya que debe hacer referencia a las columnas de tabla para determinar qu\u00e9 filas eliminar.)      </p> <ul> <li><code>TRUNCATE</code> </li> </ul> <p>\u200b        Permite  <code>TRUNCATE</code>en una mesa.      </p> <ul> <li><code>REFERENCES</code> </li> </ul> <p>\u200b        Permite la creaci\u00f3n de una restricci\u00f3n de clave externa haciendo referencia a una tabla, o columnas espec\u00edficas de una tabla.      </p> <ul> <li><code>TRIGGER</code> </li> </ul> <p>\u200b        Permite la creaci\u00f3n de un gatillo en una mesa, vista, etc.      </p> <ul> <li><code>CREATE</code> </li> </ul> <p>\u200b        Para bases de datos, permite crear nuevos esquemas y  publicaciones dentro de la base de datos, y permite instalar extensiones de confianza dentro de la base de datos.        Para los esquemas, permite crear nuevos objetos dentro del  esquema. Para renombrar un objeto existente, debe ser due\u00f1o del objeto y tener este privilegio para el esquema que contiene.        Para los espacios de mesa, permite crear tablas, \u00edndices y  archivos temporales dentro del espacio de tablas, y permite crear bases  de datos que tengan el espacio de mesa como su espacio de mesa  predeterminado.        Tenga en cuenta que revocar este privilegio no alterar\u00e1 la existencia o ubicaci\u00f3n de los objetos existentes.      </p> <ul> <li><code>CONNECT</code> </li> </ul> <p>\u200b        Permite al concesionario conectarse a la base de datos. Este  privilegio se comprueba en el inicio de la conexi\u00f3n (adem\u00e1s de comprobar cualquier restricci\u00f3n impuesta por <code>pg_hba.conf</code>).      </p> <ul> <li><code>TEMPORARY</code> </li> </ul> <p>\u200b        Permite crear tablas temporales utilizando la base de datos.      </p> <ul> <li><code>EXECUTE</code> </li> </ul> <p>\u200b        Permite llamar a una funci\u00f3n o procedimiento, incluido el uso de cualquier operador que se implemente en la parte superior de la  funci\u00f3n. Este es el \u00fanico tipo de privilegio aplicable a las funciones y procedimientos.      </p> <ul> <li><code>USAGE</code> </li> </ul> <p>\u200b        En el caso de las lenguas procedin las lenguas, permite el  uso de la lengua para la creaci\u00f3n de funciones en esa lengua. Este es el \u00fanico tipo de privilegio aplicable a las lenguas procesales.        Para los esquemas, permite el acceso a los objetos contenidos en el esquema (asumiendo que tambi\u00e9n se cumplen los requisitos de  privilegio de los propios objetos). Esencialmente esto permite al  concesionario buscar objetos dentro del esquema. Sin este permiso, todav\u00eda es posible ver  los nombres de objetos, por ejemplo, consultando cat\u00e1logos del sistema.  Adem\u00e1s, despu\u00e9s de revocar este permiso, las sesiones existentes podr\u00edan tener declaraciones que hayan realizado previamente esta b\u00fasqueda, por  lo que esta no es una manera completamente segura de impedir el acceso a los objetos.        Para secuencias, permite el uso de la  <code>currval</code>y  <code>nextval</code>funciones.        Para tipos y dominios, permite el uso del tipo o dominio en  la creaci\u00f3n de tablas, funciones y otros objetos de esquema. (Ten en  cuenta que este privilegio no controla todo el uso del tipo, como valores del tipo que aparecen en las consultas. S\u00f3lo impide  que se creen objetos que dependen del tipo. El prop\u00f3sito principal de  este privilegio es controlar qu\u00e9 usuarios pueden crear dependencias de  un tipo, lo que podr\u00eda impedir que el propietario cambie el tipo m\u00e1s  tarde.)        Para envoltorios de datos extra\u00f1os, permite la creaci\u00f3n de nuevos servidores usando el envoltorio de datos extra\u00f1os.        Para servidores extranjeros, permite la creaci\u00f3n de tablas  extranjeras usando el servidor. Los concesionarios tambi\u00e9n pueden crear, alterar o soltar sus propias asignaciones de usuario asociadas con ese  servidor.      </p> <ul> <li><code>SET</code> </li> </ul> <p>\u200b        Permite que un par\u00e1metro de configuraci\u00f3n del servidor se  consiente a un nuevo valor dentro de la sesi\u00f3n actual. (Si bien este  privilegio se puede conceder en cualquier par\u00e1metro, no tiene sentido  excepto para par\u00e1metros que normalmente requerir\u00edan privilegio de  superusuario para establecer.)      </p> <ul> <li><code>ALTER SYSTEM</code> </li> </ul> <p>\u200b        Permite configurar un par\u00e1metro de configuraci\u00f3n del servidor a un nuevo valor utilizando el comando ALTER SYSTEM.      </p> <p>Los privilegios requeridos por otros comandos se enumeran en la p\u00e1gina de referencia del comando respectivo.</p> <p>PostgreSQL otorga privilegios en algunos tipos de objetos a  <code>PUBLIC</code>por defecto cuando se crean los objetos. No se conceden privilegios a  <code>PUBLIC</code>por defecto en tablas, columnas de tablas, secuencias, envoltorios de datos extra\u00f1os, servidores extra\u00f1os, objetos grandes, esquemas, espacios de  mesa o par\u00e1metros de configuraci\u00f3n. Para otros tipos de objetos, los  privilegios por defecto concedidos a  <code>PUBLIC</code>son los siguientes:  <code>CONNECT</code>y  <code>TEMPORARY</code>(crear cuadros temporales) privilegios para las bases de datos;  <code>EXECUTE</code>privilegio para funciones y procedimientos; y  <code>USAGE</code>privilegio para los idiomas y tipos de datos (incluyendo dominios). El propietario del objeto puede, por supuesto,  <code>REVOKE</code>privilegios predeterminados y expresamente concedidos. (Para la m\u00e1xima seguridad, emiten la  <code>REVOKE</code>en la misma transacci\u00f3n que crea el objeto; entonces no hay ventana en la  que otro usuario pueda utilizar el objeto.) Adem\u00e1s, estos ajustes de  privilegios predeterminados se pueden anular usando el comando ALTER DEFAULT PRIVILEGES.</p> <p>La Tabla 5.1 muestra las abreviaturas de una letra que se utilizan para estos tipos de privilegios en valores de ACL (Lista de Control de Accesos). Ver\u00e1 estas letras en la salida de los comandos psql que se enumeran a continuaci\u00f3n, o cuando se miran las columnas de cat\u00e1logos de sistemas de ACL.</p> <p>Cuadro 5.1. Abreviaciones de Privilege ACL</p> Privilegia Abreviaci\u00f3n Tipos de objetos aplicables <code>SELECT</code> <code>r</code>(Lee) <code>LARGE OBJECT</code>, <code>SEQUENCE</code>,  <code>TABLE</code>(y objetos similares a la mesa), columna de tabla <code>INSERT</code> <code>a</code>(apeear) <code>TABLE</code>, columna de tabla <code>UPDATE</code> <code>w</code>Escribir <code>LARGE OBJECT</code>, <code>SEQUENCE</code>, <code>TABLE</code>, columna de tabla <code>DELETE</code> <code>d</code> <code>TABLE</code> <code>TRUNCATE</code> <code>D</code> <code>TABLE</code> <code>REFERENCES</code> <code>x</code> <code>TABLE</code>, columna de tabla <code>TRIGGER</code> <code>t</code> <code>TABLE</code> <code>CREATE</code> <code>C</code> <code>DATABASE</code>, <code>SCHEMA</code>, <code>TABLESPACE</code> <code>CONNECT</code> <code>c</code> <code>DATABASE</code> <code>TEMPORARY</code> <code>T</code> <code>DATABASE</code> <code>EXECUTE</code> <code>X</code> <code>FUNCTION</code>, <code>PROCEDURE</code> <code>USAGE</code> <code>U</code> <code>DOMAIN</code>, <code>FOREIGN DATA WRAPPER</code>, <code>FOREIGN SERVER</code>, <code>LANGUAGE</code>, <code>SCHEMA</code>, <code>SEQUENCE</code>, <code>TYPE</code> <code>SET</code> <code>s</code> <code>PARAMETER</code> <code>ALTER SYSTEM</code> <code>A</code> <code>PARAMETER</code> <p>La Tabla 5.2 resume los privilegios disponibles para cada tipo de objeto SQL, usando las abreviaturas mostramos anteriormente. Tambi\u00e9n muestra el comando psql que se puede utilizar para examinar la configuraci\u00f3n de privilegios para cada tipo de objeto.</p> <p>Cuadro 5.2. Resumen de Privilegios de Acceso</p> Tipo de objeto Todos los privilegios Fallo  <code>PUBLIC</code>Privilegios comando psql <code>DATABASE</code> <code>CTc</code> <code>Tc</code> <code>\\l</code> <code>DOMAIN</code> <code>U</code> <code>U</code> <code>\\dD+</code> <code>FUNCTION</code>o o <code>X</code> <code>X</code> <code>\\df+</code> <code>FOREIGN DATA WRAPPER</code> <code>U</code> ninguno <code>\\dew+</code> <code>FOREIGN SERVER</code> <code>U</code> ninguno <code>\\des+</code> <code>LANGUAGE</code> <code>U</code> <code>U</code> <code>\\dL+</code> <code>LARGE OBJECT</code> <code>rw</code> ninguno <code>\\dl+</code> <code>PARAMETER</code> <code>sA</code> ninguno <code>\\dconfig+</code> <code>SCHEMA</code> <code>UC</code> ninguno <code>\\dn+</code> <code>SEQUENCE</code> <code>rwU</code> ninguno <code>\\dp</code> <code>TABLE</code>(y objetos similares a la mesa) <code>arwdDxt</code> ninguno <code>\\dp</code> Columna de tabla <code>arwx</code> ninguno <code>\\dp</code> <code>TABLESPACE</code> <code>C</code> ninguno <code>\\db+</code> <code>TYPE</code> <code>U</code> <code>U</code> <code>\\dT+</code> <p>Los privilegios que se han concedido para un objeto particular se muestran como una lista de  <code>aclitem</code>entradas, donde cada una  <code>aclitem</code>describe los permisos de un concesionario que haya sido concedido por un otorgante determinado. Por ejemplo,  <code>calvin=r*w/hobbes</code>especifica que el papel  <code>calvin</code>tiene el privilegio  <code>SELECT</code>(<code>r</code>) con la opci\u00f3n de subvenci\u00f3n (<code>*</code>) as\u00ed como el privilegio no abutable  <code>UPDATE</code>(<code>w</code>), ambas concedidas por el papel <code>hobbes</code>. Si  <code>calvin</code>tambi\u00e9n tiene algunos privilegios sobre el mismo objeto concedido por un  otorgante diferente, esos aparecer\u00edan como un separado  <code>aclitem</code>entrada. Un campo de concesionario vac\u00edo en un  <code>aclitem</code>significan <code>PUBLIC</code>.</p> <p>Como ejemplo, supongamos que el usuario  <code>miriam</code>crea tabla  <code>mytable</code>y lo hace:</p> <pre><code>GRANT SELECT EN mi mesa a PUBLIC;\nGRANT SELECT, UPDATE, INSERT ON mytable TO admin;\nGRANT SELECT (col1), Actualizaci\u00f3n (col1) EN mitable A miriam-rw;\n</code></pre> <p>Luego psql 's  <code>\\dp</code>El comando mostrar\u00eda:</p> <pre><code>=-dp mytable\n                                  Privas de acceso\n Esquema y Nombre - Tipo - Privacarios de acceso - privilegios de columnas - Pol\u00edticas\n---------------------------------------------------------------------------------------------------------------------\n p\u00fablico - mytable - table Miriam=arwdDxt/miriam\" col1:\n        - =r/miriam Miriam.rw=rw/miriam\n        Admin=arw/miriam\n(1 fila)\n</code></pre> <p>Si la columna  de  est\u00e1 vac\u00eda para un objeto dado, significa que el objeto tiene  privilegios por defecto (es decir, su entrada de privilegios en el  cat\u00e1logo del sistema pertinente es nula). Los privilegios por defecto  siempre incluyen todos los privilegios para el propietario, y pueden  incluir algunos privilegios para  <code>PUBLIC</code>dependiendo del tipo de objeto, como se explic\u00f3 anteriormente. El primero  <code>GRANT</code>o o  <code>REVOKE</code>en un objeto instant\u00e1near\u00e1 los privilegios por defecto (produciendo, por ejemplo, <code>miriam=arwdDxt/miriam</code>) y luego modificarlos por la solicitud especificada. Del mismo modo, las entradas se muestran en los privilegios de la columna s\u00f3lo para columnas con privilegios no predeterminados. (Nota: para este prop\u00f3sito, los privilegios por defecto - siempre significan los privilegios de predeterminados incorporados  para el tipo del objeto. Objeto cuyos privilegios se han visto afectados por un  el comando se mostrar\u00e1 siempre con una entrada de privilegio expl\u00edcito que incluye los efectos de la .)</p> <p>Observe que las opciones de subvenci\u00f3n impl\u00edcitas del propietario no est\u00e1n marcadas en la pantalla de privilegios de acceso. A  <code>*</code>s\u00f3lo aparecer\u00e1 cuando se hayan concedido expl\u00edcitamente opciones de subvenci\u00f3n a alguien.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/08.-Pol%C3%ADticas%20de%20seguridad%20de%20filas/","title":"08.-Pol\u00edticas de seguridad de filas","text":"<p>Adem\u00e1s del sistema de privilegios est\u00e1ndar SQL disponible a trav\u00e9s de GRANT, las tablas pueden tener pol\u00edticas de seguridad de filas que restringen, sobre una base por usuario, qu\u00e9 filas pueden ser  devueltas por consultas normales o insertadas, actualizadas o eliminadas por comandos de modificaci\u00f3n de datos. Esta caracter\u00edstica tambi\u00e9n se  conoce como . Por defecto, las tablas no tienen ninguna p\u00f3liza, de modo  que si un usuario tiene privilegios de acceso a una tabla de acuerdo con el sistema de privilegios SQL, todas las filas dentro de \u00e9l est\u00e1n  igualmente disponibles para consultar o actualizar.</p> <p>Cuando la seguridad de la hilera est\u00e1 activada en una mesa (con ALTER TABLE ... SEGURIDAD ENABLE ROW LEVEL), todo acceso normal a la tabla para seleccionar filas o modificar filas  debe ser permitido por una pol\u00edtica de seguridad de filas. (Sin embargo, el propietario de la mesa normalmente no est\u00e1 sujeto a las pol\u00edticas de seguridad de filas.) Si no existe una pol\u00edtica para la tabla, se  utiliza una pol\u00edtica de desnudos por defecto, lo que significa que no  hay filas visibles o pueden ser modificadas. Operaciones que se aplican a toda la tabla, tales como  <code>TRUNCATE</code>y <code>REFERENCES</code>, no est\u00e1n sujetos a la seguridad en las filas.</p> <p>Las pol\u00edticas de seguridad de filas pueden ser espec\u00edficas de los  comandos, o de los roles, o de ambos. Se puede especificar una pol\u00edtica  aplicable a  <code>ALL</code>comandos, o <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, o <code>DELETE</code>. Se pueden asignar m\u00faltiples funciones a una pol\u00edtica determinada, y se aplican las normas normales de pertenencia y herencia.</p> <p>Para especificar qu\u00e9 filas son visibles o modificables de acuerdo a una pol\u00edtica, se requiere una expresi\u00f3n que devuelva un resultado  booleano. Esta expresi\u00f3n ser\u00e1 evaluada para cada fila antes de cualquier condici\u00f3n o funci\u00f3n proveniente de la consulta del usuario. (Las \u00fanicas excepciones a esta regla son  <code>leakproof</code>funciones, que est\u00e1n garantizadas a no filtrar informaci\u00f3n; el optimizador puede  optar por aplicar tales funciones antes del control de la  fila-seguridad.) Filas para las que la expresi\u00f3n no regresa  <code>true</code>no ser\u00e1 procesada. Se pueden especificar expresiones separadas para  proporcionar un control independiente sobre las filas que son visibles y las filas que se permiten modificar. Las expresiones de pol\u00edtica se  ejecutan como parte de la consulta y con los privilegios del usuario que ejecuta la consulta, aunque las funciones de definificaci\u00f3n de la  seguridad se pueden utilizar para acceder a los datos no disponibles  para el usuario de llamadas.</p> <p>Superusuarios y roles con el  <code>BYPASSRLS</code>atributo siempre sortean el sistema de seguridad de la fila al acceder a una  mesa. Los propietarios de la mesa normalmente sortean la seguridad de la fila tambi\u00e9n, aunque un propietario de la mesa puede optar por estar  sujeto a la seguridad de la fila con ALTER TABLE ... FORCE ROW LEVEL SEGURIDAD.</p> <p>La seguridad habilitable e incapacitada de filas, as\u00ed como a\u00f1adir  pol\u00edticas a una mesa, es siempre el privilegio del propietario de la  mesa.</p> <p>Las pol\u00edticas se crean utilizando el comando CREATE POLITICA, se alteran usando el comando ALTER POLITICA y se han retirado usando el comando DROP POLI. Para activar y desactivar la seguridad de la fila para una tabla dada, utilice el comando ALTER TABLE.</p> <p>Cada pol\u00edtica tiene un nombre y se pueden definir varias pol\u00edticas  para una tabla. Como las pol\u00edticas son espec\u00edficas de cada cuadro, cada  pol\u00edtica para una mesa debe tener un nombre \u00fanico. Diferentes cuadros  pueden tener pol\u00edticas con el mismo nombre.</p> <p>Cuando varias pol\u00edticas se aplican a una consulta dada, se combinan usando cualquiera de los dos  <code>OR</code>(para pol\u00edticas permisivas, que son el incumplimiento) o el uso  <code>AND</code>(para pol\u00edticas restrictivas). Esto es similar a la regla de que un papel  dado tiene los privilegios de todos los roles de los que son miembros. A continuaci\u00f3n se examinan m\u00e1s adelante las pol\u00edticas permisivas contra  las restricciones.</p> <p>Como simple ejemplo, aqu\u00ed est\u00e1 c\u00f3mo crear una pol\u00edtica sobre la  <code>account</code>relaci\u00f3n para permitir \u00fanicamente a los miembros de la  <code>managers</code>C\u00f3mo acceder a las filas, y s\u00f3lo filas de sus cuentas:</p> <pre><code>CREATE Cuentas de TABLABLE (texto directivo, texto de la empresa, texto de contacto-email);\n\nCuentas de ALTER TABLE ENABLE ROW LEVEL SEGURIDAD;\n\nCREATE Policy account.managers ON accounts TO managers\n    USING (gerente = corriente-usuario);\n</code></pre> <p>La pol\u00edtica anterior proporciona impl\u00edcitamente una  <code>WITH CHECK</code>cl\u00e1usula id\u00e9ntica a la de su  <code>USING</code>cl\u00e1usula, de modo que la restricci\u00f3n se aplica tanto a las filas seleccionadas por un comando (por lo que un gerente no puede <code>SELECT</code>, <code>UPDATE</code>, o  <code>DELETE</code>filas existentes pertenecientes a un gestor diferente) y a las filas  modificadas por un comando (por lo que las filas pertenecientes a un  administrador diferente no pueden crearse a trav\u00e9s de  <code>INSERT</code>o o <code>UPDATE</code>).</p> <p>Si no se especifica ninguna funci\u00f3n, o el nombre especial de usuario  <code>PUBLIC</code>se utiliza, entonces la pol\u00edtica se aplica a todos los usuarios del  sistema. Permitir a todos los usuarios acceder s\u00f3lo a su propia fila en  un  <code>users</code>cuadro, se puede utilizar una pol\u00edtica simple:</p> <pre><code>CREATE Policy user-policy ON users\n    USING (user-name = usuario actual);\n</code></pre> <p>Esto funciona de manera similar al ejemplo anterior.</p> <p>Para utilizar una pol\u00edtica diferente para las filas que se est\u00e1n  agregando a la tabla en comparaci\u00f3n con aquellas filas que son visibles, se pueden combinar m\u00faltiples pol\u00edticas. Este par de pol\u00edticas  permitir\u00eda a todos los usuarios ver todas las filas en el  <code>users</code>mesa, pero s\u00f3lo modificar las suyas:</p> <pre><code>CREATE Policy user.sel.policy ON usuarios\n    PARA SELECT\n    UU (verda.\nCREATE Policy user.mod.policy ON usuarios\n    USING (user-name = usuario actual);\n</code></pre> <p>En un  <code>SELECT</code>comando, estas dos pol\u00edticas se combinan usando <code>OR</code>, con el efecto de la red que todas las filas pueden ser seleccionadas.  En otros tipos de mando, s\u00f3lo se aplica la segunda pol\u00edtica, de modo que los efectos son los mismos que antes.</p> <p>La seguridad de las filas tambi\u00e9n se puede desactivar con el  <code>ALTER TABLE</code>comando. La seguridad de las filas de desactivaci\u00f3n no elimina ninguna pol\u00edtica  que se defina sobre la mesa; simplemente se ignoran. Entonces todas las  filas de la tabla son visibles y modificables, sujetas al sistema  est\u00e1ndar de privilegios SQL.</p> <p>A continuaci\u00f3n un ejemplo m\u00e1s amplio de c\u00f3mo esta caracter\u00edstica se puede utilizar en entornos de producci\u00f3n. La mesa  <code>passwd</code>emula un archivo de contrase\u00f1a Unix:</p> <pre><code>-- Ejemplo basado en archivos passwd simple\nCREATE TABLE passwd (\n  texto de user.name UNIQUE NOT NULL,\n  texto pwhash,\n  uid int PRIMARY KEY,\n  gid int NO NULL,\n  texto de nombre real NO NULL,\n  texto de home-phone,\n  texto de informaci\u00f3n extra,\n  home.dir texto NO NULL,\n  texto de shell NO NULL\n);\n\nCREATE ROLE admin; -- Administrador\nCREATE ROLE bob; -- Usuario normal\nCREATE ROLE alice; -- Usuario normal\n\n- Populate la mesa\nINSERT INTO passwd VALUES\n  ('admin','xxx',0,0,'Admin','111-222-3333',null,/root','/bin/dash');\nINSERT INTO passwd VALUES\n  ('bob','xxx',1,1,'Bob','123-456-7890',null,/home/bob','/bin/zsh');\nINSERT INTO passwd VALUES\n  ('lice','xxx',2,1,'Alice','098-765-4321',null,'/home/alice','/bin/zsh');\n\n-- Aseg\u00farese de permitir la seguridad a nivel de filas sobre la mesa\nALTER TABLE passwd ENABLE ROW LEVEL SEGURIDAD;\n\n- Crear pol\u00edticas\n-- Administrador puede ver todas las filas y a\u00f1adir cualquier fila\nCREATE Policy admin-all ON passwd TO admin USING (verdad) CON CHECK (verdaz);\n-- Los usuarios normales pueden ver todas las filas\nCREATE POLITICA all.view ON passwd FOR SELECT USING (verdo);\n-- Los usuarios normales pueden actualizar sus propios registros, pero\n-- l\u00edmite que shells un usuario normal est\u00e1 permitido establecer\nCREATE Policy user.mod ON passwd FOR UPDATE\n  USING (actual-usuario = nombre de usuario)\n  CON CHECK (CCE)\n    corriente. usuario = usuario y nombre\n    shell IN (\"/bin/bash', &amp;bin/sh', &amp;bin/sh',/bin/dash', &amp;quot;/bin/zsh', &amp;quot; ./tcsh')\n  );\n\n-- Permitir administraci\u00f3n todos los derechos normales\nGRANT SELECT, INSERT, UPDATE, DELETE ON passwd TO admin;\n-- Los usuarios s\u00f3lo tienen acceso selecto en columnas p\u00fablicas\nGRANT SELECT\n  (usuario, uid, uid, gid, real, nombre, home-phone, extra-info, home-dir, shell)\n  En passwd TO p\u00fablico;\n-- Permitir a los usuarios actualizar ciertas columnas\nGRANT UPDATE\n  (pwhash, real, nombre, home-phone, extra-info, shell)\n  En passwd TO p\u00fablico;\n</code></pre> <p>Como con cualquier configuraci\u00f3n de seguridad, es importante probar y asegurarse de que el sistema se est\u00e1 comportando como se esperaba.  Usando el ejemplo anterior, esto demuestra que el sistema de permisos  est\u00e1 funcionando correctamente.</p> <pre><code>-- administrador puede ver todas las filas y campos\npublicario de rol postgres=o conjunto;\nSET\npostgres=--passwd de mesa;\n usuario. pwash . uid . gid .name . home.phone . extra.info . home.dir . shell\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------\n admin xxx 0 . 0 . . . . . . . . . . . . . . . /root . /bin/dash\n bob xxx 1 1 1 - Bob 123-456-7890 - /home/bob - /bin/zsh\n alice . xxx . 2 1 . Alice 098-765-4321 . /home/alice . /bin/zsh\n(3 filas)\n\n- Pon a prueba lo que Alice es capaz de hacer\nel rol de postgres=o conjunto de rol alice;\nSET\npostgres=--passwd de mesa;\nERROR: permiso denegado para passwd de mesa\npostgres=o seleccione user-name,real-name,home-phone,extra-info,home-dir,shell from passwd;\n user.name . real.name . home.phone . extra.info . home.dir . shell\n------------------------------------------------------------------------------------------------------------------------\n admin . Admin 111-222-3333 . /root . /bin/dash\n bob . Bob . 123-456-7890 . /home/bob . /bin/zsh\n alice . Alice 098-765-4321 . . /home/alice . /bin/zsh\n(3 filas)\n\npostgres=- update passwd set user-name = 'joe';\nERROR: permiso denegado para passwd de mesa\n-- Alice tiene permitido cambiar su propio nombre real, pero no otros\npostgres=- update passwd set real-name = 'Alice Doe';\nActualizaci\u00f3n 1\npostgres=- update passwd set real-name = 'John Doe' donde usuario-name = 'admin';\nActualizaci\u00f3n 0\nshell de set de passwd postgres=o actualizaci\u00f3n = '/bin/xx';\nERROR: nueva fila viola con fracci\u00f3n CHECK OPTION por \"pasambre\"\npostgres=-bor bordo passwd;\nERROR: permiso denegado para passwd de mesa\npostgres=o insertar en los valores de passwd (user-name) ('xxx');\nERROR: permiso denegado para passwd de mesa\n-- Alice puede cambiar su propia contrase\u00f1a; RLS evita silenciosamente actualizar otras filas\npostgres=-actual passwd set pwhash = 'abc';\nActualizaci\u00f3n 1\n</code></pre> <p>Todas las pol\u00edticas ORconstruidas hasta ahora han sido pol\u00edticas permisivas, lo que significa que cuando  se aplican m\u00faltiples pol\u00edticas se combinan utilizando el operador  booleano de OR. Si bien las pol\u00edticas permisivas se pueden construir para permitir el  acceso a las filas en los casos previstos, puede ser m\u00e1s sencillo  combinar pol\u00edticas permisivas con pol\u00edticas restrictivas (que los  registros deben aprobar y que se combinan usando el \u201cAND\u201doperador booleano y el operador booleano). Bas\u00e1ndose en el ejemplo anterior,  a\u00f1adimos una pol\u00edtica restrictiva para exigir que el administrador est\u00e9  conectado a trav\u00e9s de un enchuco local de Unix para acceder a los  registros de la  <code>passwd</code>cuadro:</p> <pre><code>Pol\u00edtica de CREATE admin-local-only ON passwd AS RESTRICTIVE TO admin\n    USING (pg.catalog.inet.client.addr() IS NULL);\n</code></pre> <p>Podemos entonces ver que un administrador que se conecte a trav\u00e9s  de una red no ver\u00e1 ning\u00fan registro, debido a la pol\u00edtica restrictiva:</p> <pre><code>=- Usuario de corriente SELECT;\n usuario actual\n--------------\n admin\n(1 fila)\n\n=- seleccione inet.client.addr();\n inet.client.addr\n---------------------\n 127.0,0.1\n(1 fila)\n\n=- Pastor de mesa;\n usuario. pwash . uid . gid .name . home.phone . extra.info . home.dir . shell\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------\n(0 filas)\n\n=- ACTDATE passwd set pwhash = NULL;\nActualizaci\u00f3n 0\n</code></pre> <p>Controles de integridad referencial, tales como limitaciones clave  \u00fanicas o principales y referencias clave extranjeras, evitan siempre la  seguridad de la fila para garantizar que se mantenga la integridad de  los datos. Al desarrollar esquemas y pol\u00edticas de nivel de filas para  evitar el canal encubr\u00e1neo, filtraciones de informaci\u00f3n mediante tales controles de integridad referencial.</p> <p>En algunos contextos es importante asegurarse de que no se est\u00e1  aplicando la seguridad de las filas. Por ejemplo, cuando se toma una  copia de seguridad, podr\u00eda ser desastroso si la seguridad de la fila  hizo que algunas filas fueran omitidas de la copia de seguridad. En tal  situaci\u00f3n, puede establecer el par\u00e1metro de configuraci\u00f3n de la fila para seguridad a <code>off</code>. Esto no evita en s\u00ed misma la seguridad de la fila; lo que hace es  lanzar un error si los resultados de cualquier consulta se filtrar\u00edan  por una pol\u00edtica. El motivo del error puede entonces ser investigado y  corregido.</p> <p>En los ejemplos anteriores, las expresiones de pol\u00edtica consideran  que s\u00f3lo se puede acceder o actualizar los valores actuales en la fila.  Este es el caso m\u00e1s simple y de mejor rendimiento; cuando es posible, es mejor dise\u00f1ar aplicaciones de seguridad de fila para trabajar de esta  manera. Si es necesario consultar otras filas u otras tablas para tomar  una decisi\u00f3n pol\u00edtica, eso se puede lograr utilizando el sub-<code>SELECT</code>s, o funciones que contienen <code>SELECT</code>en las expresiones pol\u00edticas. Tenga en cuenta, sin embargo, que tales  accesos pueden crear condiciones de carrera que podr\u00edan permitir fugas  de informaci\u00f3n si no se toma el cuidado. Por ejemplo, considere el  siguiente dise\u00f1o de tabla:</p> <pre><code>- definici\u00f3n de los grupos de privilegios\nCREATE TABLE grupos (group.id int PRIMARY KEY,\n                     group-name texto NO NULL);\n\nINSERT INTO grupos VALUES\n  (1, 'low'),\n  (2, 'mediato'),\n  (5, 'alto');\n\nGRANT TODOS los grupos TO Alice; -- Alice es el administrador\nGRANT SELECT ON grupos a p\u00fablico;\n\n- definici\u00f3n de los niveles de privilegio de los usuarios\nCREATE Usuarios de la tabla (usuario-nombre texto PRIMARY KEY,\n                    group-id int NOT NULL REFERENCES grupos);\n\nUsuarios de INSERT INTO VALUES\n  ('alice', 5),\n  ('bob', 2),\n  ('mallory', 2);\n\nGRANT TODOS los usuarios TO Alice;\nGRANT SELECT ON usuarios a p\u00fablico;\n\n- tabla de la informaci\u00f3n que debe protegerse\nCREATE TABLE informaci\u00f3n (texto de informaci\u00f3n,\n                          group-id int NOT NULL REFERENCES grupos);\n\nINSERT INTO informaci\u00f3n VALUES\n  ('apenas secretos', 1),\n  ('slightly secret', 2),\n  ('muy secreto', 5);\n\nALTER Informaci\u00f3n de la tabla ENABLE ROW LEVEL SEGURIDAD;\n\n-- una fila debe ser visible / actualizaci\u00f3n por los usuarios cuyo grupo de seguridad es\n- mayor o igual al grupo de la fila.\nPol\u00edtica de CREATE fp.s ON informaci\u00f3n PARA SELECT\n  USING (group.id .= (SELECT group.id FROM users DOE user-name = current-user));\nPol\u00edtica de CREATE fp\u00fau en informaci\u00f3n PARA UPDATE\n  USING (group.id .= (SELECT group.id FROM users DOE user-name = current-user));\n\n-- dependemos s\u00f3lo de RLS para proteger la tabla de informaci\u00f3n\nGRANT TODA la informaci\u00f3n al p\u00fablico;\n</code></pre> <p>Supongamos que  <code>alice</code>desea cambiar la slightly secretinformaci\u00f3n ligeramente secreta, pero decide que  <code>mallory</code>no se debe confiar en el nuevo contenido de esa fila, por lo que lo hace:</p> <pre><code>BEGIN;\nUsuarios ACTUALTE SET group.id = 1 DOHERE user-name = 'mallory';\nActualizaci\u00f3n Informaci\u00f3n SET info = 'secreto de mallorry' WHERE group-id = 2;\n- Comprometido;\n</code></pre> <p>Eso se ve seguro; no hay ventana en la que  <code>mallory</code>deber\u00eda ser capaz de ver el secreto de la cadena mallorqu\u00edn. Sin embargo, aqu\u00ed hay una condici\u00f3n de raza. Si  <code>mallory</code>est\u00e1 haciendo al mismo tiempo, digamos,</p> <pre><code>SELECT * DESDE la informaci\u00f3n DOHERE group-id = 2 PARA Actualizaci\u00f3n;\n</code></pre> <p>y su transacci\u00f3n est\u00e1 en  <code>READ COMMITTED</code>modo, es posible para ella ver el secreto de Mallory. Eso sucede si su transacci\u00f3n llega a la  <code>information</code>fila justo despu\u00e9s <code>alice</code>S\u00ed. Bloquea esperando <code>alice</code>'s transacci\u00f3n para comprometerse, luego obtiene el contenido actualizado de la fila gracias a la  <code>FOR UPDATE</code>cl\u00e1usula. Sin embargo, no trae una fila actualizada para el  <code>SELECT</code>de <code>users</code>, porque ese sub- <code>SELECT</code>no ten\u00eda <code>FOR UPDATE</code>; en cambio la  <code>users</code>fila se lee con las instant\u00e1neas tomadas al comienzo de la consulta. Por lo  tanto, la expresi\u00f3n de la pol\u00edtica pone a prueba el antiguo valor de <code>mallory</code>'nivel de privilegio y le permite ver la fila actualizada.</p> <p>Hay varias maneras en torno a este problema. Una respuesta simple es usar  <code>SELECT ... FOR SHARE</code>en el sub-<code>SELECT</code>las pol\u00edticas de seguridad en fila. Sin embargo, eso requiere la concesi\u00f3n  <code>UPDATE</code>privilegio en la tabla de referencia (aqu\u00ed <code>users</code>) a los usuarios afectados, lo que podr\u00eda ser indeseable. (Pero se podr\u00eda aplicar otra pol\u00edtica de seguridad para impedirles ejercer realmente  ese privilegio; o el sub- <code>SELECT</code>podr\u00eda estar incrustado en una funci\u00f3n de definici\u00f3n de seguridad.) Adem\u00e1s, el uso simult\u00e1neo de cerramientos de cuota de fila en la tabla de  referencia podr\u00eda plantear un problema de rendimiento, especialmente si  las actualizaciones de la misma son frecuentes. Otra soluci\u00f3n, pr\u00e1ctica  si las actualizaciones de la tabla de referencia son infrecuentes, es  tomar una  <code>ACCESS EXCLUSIVE</code>cierre de la tabla de referencia al actualizarla, de modo que ninguna  transacci\u00f3n simult\u00e1nea podr\u00eda estar examinando los valores de la antigua fila. O s\u00f3lo se podr\u00eda esperar a que todas las transacciones  simult\u00e1neas terminen despu\u00e9s de cometer una actualizaci\u00f3n de la tabla de referencia y antes de hacer cambios que se basan en la nueva situaci\u00f3n  de seguridad.</p> <p>Para m\u00e1s detalles, consulte la Pol\u00edtica de CREATE y ALTER TABLE.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/12.-Datos%20for%C3%A1neos/","title":"12.-Datos for\u00e1neos","text":"<p>PostgreSQL implementa porciones de la especificaci\u00f3n SQL/MED, lo que le permite  acceder a los datos que residen fuera de PostgreSQL usando consultas  regulares de SQL. Estos datos se denominan datos extranjeros. (Tene en cuenta que este uso no debe confundirse con las claves  extranjeras, que son un tipo de restricci\u00f3n dentro de la base de datos.)</p> <p>Se accede a los datos extranjeros con ayuda de un envoltorio de datos extranjero. Una envoltura de datos extranjera es una biblioteca que puede  comunicarse con una fuente de datos externa, ocultando los detalles de  la conexi\u00f3n a la fuente de datos y obteniendo datos de ellos. Hay  algunos envoltorios de datos extranjeros disponibles como  <code>contrib</code>m\u00f3dulos; v\u00e9ase el ap\u00e9ndice F. Otros tipos de envoltorios de datos extra\u00f1os se pueden encontrar como  productos de terceros. Si ninguno de los envoltorios de datos extra\u00f1os  existentes se adapta a sus necesidades, puede escribir el suyo propio;  ver Cap\u00edtulo 59.</p> <p>Para acceder a datos extra\u00f1os, necesita crear un objeto de servidor extranjero, que define c\u00f3mo conectarse a una fuente de datos externa en particular  de acuerdo con el conjunto de opciones utilizadas por su envoltorio de  datos extra\u00f1os de soporte. Entonces usted necesita crear una o m\u00e1s tablas extranjeras, que definen la estructura de los datos remotos. Una tabla extranjera se puede utilizar en consultas al igual que una tabla normal, pero una  mesa extranjera no tiene almacenamiento en el servidor PostgreSQL. Cada  vez que se utiliza, PostgreSQL pide al envoltorio de datos extra\u00f1os que obtenga datos de la fuente  externa, o que transmita datos a la fuente externa en caso de comandos  de actualizaci\u00f3n.</p> <p>El acceso a datos remotos puede requerir autenticaci\u00f3n a la fuente  de datos externa. Esta informaci\u00f3n puede ser proporcionada por una asignaci\u00f3n de usuarios, que puede proporcionar datos adicionales como nombres de usuario y contrase\u00f1as basados en el rol actual de PostgreSQL.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/13.-Otros%20objetos%20de%20la%20BD/","title":"13.-Otros objetos de la BD","text":"<p>Las tablas son los objetos centrales en una estructura de bases de  datos relacional, porque sostienen sus datos. Pero no son los \u00fanicos  objetos que existen en una base de datos. Muchos otros tipos de objetos  se pueden crear para hacer el uso y la gesti\u00f3n de los datos m\u00e1s  eficientes o convenientes. No se discuten en este cap\u00edtulo, pero les  damos una lista aqu\u00ed para que usted sea consciente de lo que es posible:</p> <ul> <li>Vistas</li> <li>Funciones, procedimientos y operadores</li> <li>Tipos de datos y dominios</li> <li>Desencante y reescrimina las reglas</li> </ul> <p>La informaci\u00f3n detallada sobre estos temas aparece en la parte V.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/14.-Seguimiento%20de%20la%20dependencia/","title":"14.-Seguimiento de la dependencia","text":"<p>Cuando crea estructuras de bases de datos complejas que involucran  muchas tablas con restricciones de claves extranjeras, vistas,  disparadores, funciones, etc. crea impl\u00edcitamente una red de  dependencias entre los objetos. Por ejemplo, una tabla con una  restricci\u00f3n de clave extranjera depende de la tabla que haga referencia.</p> <p>Para garantizar la integridad de toda la estructura de la base de datos, PostgreSQL se asegura de que no se pueden soltar objetos de los que a\u00fan dependen otros objetos.  Por ejemplo, intentar dejar de lado la tabla de productos que  consideramos en la Secci\u00f3n 5.4.5, con la tabla de pedidos dependiendo de ella, resultar\u00eda en un mensaje de error como este:</p> <pre><code>Productos DROP TABLE;\n\nERROR: no puede soltar los productos de la mesa porque otros objetos dependen de ella\nDETALLE: \u00f3rdenes de restricci\u00f3n.product.no.fkey en los pedidos de mesa depende de los productos de mesa\nHINT: Util\u00edcelo DROP ... CASCADE tambi\u00e9n para soltar los objetos dependientes.\n</code></pre> <p>El mensaje de error contiene una pista \u00fatil: si no desea molestar  en la eliminaci\u00f3n de todos los objetos dependientes individualmente,  puede ejecutar:</p> <pre><code>Productos DROP TABLE CASCADE;\n</code></pre> <p>y todos los objetos dependientes ser\u00e1n retirados, al igual que  cualquier objeto que dependa de ellos, recursivamente. En este caso, no  elimina la tabla de pedidos, s\u00f3lo elimina la restricci\u00f3n de la llave  extranjera. Se detiene ah\u00ed porque nada depende de la restricci\u00f3n de la  clave externa. (Si quieres comprobar qu\u00e9  <code>DROP ... CASCADE</code>har\u00e9, corre  <code>DROP</code>sin  <code>CASCADE</code>y leer el  <code>DETAIL</code>salidas.)</p> <p>Casi todos  <code>DROP</code>comandos en soporte PostgreSQL especificando <code>CASCADE</code>. Por supuesto, la naturaleza de las posibles dependencias var\u00eda con el tipo del objeto. Tambi\u00e9n puedes escribir  <code>RESTRICT</code>en vez de  <code>CASCADE</code>para obtener el comportamiento predeterminado, que es evitar la ca\u00edda de objetos de los que cualquier otro objeto depende.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/14.-Seguimiento%20de%20la%20dependencia/#nota","title":"Nota","text":"<p>De acuerdo con la norma SQL, especificando cualquiera de los dos  <code>RESTRICT</code>o o  <code>CASCADE</code>se requiere en un  <code>DROP</code>comando. Ning\u00fan sistema de base de datos realmente hace cumplir esa regla, pero si el comportamiento predeterminado es  <code>RESTRICT</code>o o  <code>CASCADE</code>var\u00eda de un sistema.</p> <p>Si a  <code>DROP</code>el comando enumera m\u00faltiples objetos,  <code>CASCADE</code>S\u00f3lo se requiere cuando hay dependencias fuera del grupo especificado. Por ejemplo, cuando se dice  <code>DROP TABLE tab1, tab2</code>la existencia de una referencia de clave extranjera  <code>tab1</code>de  <code>tab2</code>no significar\u00eda que  <code>CASCADE</code>es necesario para tener \u00e9xito.</p> <p>Para una funci\u00f3n o procedimiento definido por el usuario cuyo cuerpo se define como una cadena literal, PostgreSQL rastrea las dependencias asociadas con las propiedades externamente  visibles de la funci\u00f3n, como sus tipos de argumento y resultado, pero no dependencias que s\u00f3lo podr\u00edan conocerse examinando el cuerpo de la funci\u00f3n. Como ejemplo, considere esta situaci\u00f3n:</p> <pre><code>CREATE TYPE arco iris AS ENUM ('rojo', 'naranja', 'amarillo',\n                             'verde', 'azul', 'p\u00farpura');\n\nCREATE TABLE my-colors (arco iris de color, texto de nota);\n\nCREATE FUNCTION get-color-note (rainbow) RETURNS texto AS\n  'Ejecuta nota de mis colores D\u00f3nde color = $1'\n  LANGUAGE SQL;\n</code></pre> <p>(Vea la Secci\u00f3n 38.5 para una explicaci\u00f3n de las funciones en idioma SQL.) PostgreSQL s enterar\u00e1 que el  <code>get_color_note</code>funci\u00f3n depende de la  <code>rainbow</code>tipo: soltar el tipo obligar\u00eda a dejar caer la funci\u00f3n, porque su tipo de argumento ya no estar\u00eda definido. Pero PostgreSQL no considerar\u00e1  <code>get_color_note</code>depender de la  <code>my_colors</code>mesa, y por lo tanto no dejar\u00e1 caer la funci\u00f3n si la tabla se deja caer. Si  bien hay desventajas en este enfoque, tambi\u00e9n hay beneficios. La funci\u00f3n sigue siendo v\u00e1lida en cierto sentido si falta la tabla, aunque  ejecutarla causar\u00eda un error; crear una nueva tabla del mismo nombre  permitir\u00eda que la funci\u00f3n funcionara de nuevo.</p> <p>Por otro lado, para una funci\u00f3n o procedimiento en lenguaje SQL  cuyo cuerpo est\u00e1 escrito en estilo SQL-est\u00e1ndalo, el cuerpo se analiza  en el tiempo de definici\u00f3n de funci\u00f3n y todas las dependencias  reconocidas por el analizador se almacenan. As\u00ed, si escribimos la  funci\u00f3n de arriba como</p> <pre><code>CREATE FUNCTION get-color-note (rainbow) RETURNS texto\nBEGIN ATOMIC\n  Nota SELECT DESDE my-colors WHERE color = $1;\nEND;\n</code></pre> <p>entonces la dependencia de la funci\u00f3n de la  <code>my_colors</code>mesa ser\u00e1 conocida y aplicada por <code>DROP</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/04.-Restricciones/","title":"Index","text":"<p>Los tipos de datos son una forma de limitar el tipo de datos que se  pueden almacenar en una tabla. Para muchas aplicaciones, sin embargo, la restricci\u00f3n que proporcionan es demasiado grosera. Por ejemplo, una  columna que contenga un precio del producto probablemente s\u00f3lo deber\u00eda  aceptar valores positivos. Pero no hay tipo de dato est\u00e1ndar que acepte  s\u00f3lo n\u00fameros positivos. Otra cuesti\u00f3n es que es posible que desee  limitar los datos de la columna con respecto a otras columnas o filas.  Por ejemplo, en una tabla que contenga informaci\u00f3n del producto, debe  haber s\u00f3lo una fila para cada n\u00famero de producto.</p> <p>Para ello, SQL le permite definir restricciones en columnas y  tablas. Las restricciones le dan tanto control sobre los datos en tus  tablas como desees. Si un usuario intenta almacenar datos en una columna que violar\u00eda una restricci\u00f3n, se levanta un error. Esto se aplica  incluso si el valor proven\u00eda de la definici\u00f3n de valor por defecto.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/04.-Restricciones/01.-Comprobar%20restricciones/","title":"01.-Comprobar restricciones","text":"<p>Una restricci\u00f3n de control es el tipo de restricci\u00f3n m\u00e1s gen\u00e9rico. Le permite especificar que el valor de una determinada columna debe  satisfacer una expresi\u00f3n booleana (valor de la verdad). Por ejemplo,  para requerir precios positivos de los productos, se le podr\u00eda utilizar:</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no integer,\n    texto de nombre,\n    precio num\u00e9rico CHECK (precio 0)\n);\n</code></pre> <p>Como usted ve, la definici\u00f3n de restricci\u00f3n viene despu\u00e9s del  tipo de datos, al igual que las definiciones de valor predeterminado.  Los valores y limitaciones predeterminados se pueden enumerar en  cualquier orden. Una restricci\u00f3n de control consiste en la palabra clave  <code>CHECK</code>seguido de una expresi\u00f3n entre par\u00e9ntesis. La expresi\u00f3n de restricci\u00f3n de  control deber\u00eda implicar la columna as\u00ed limitada, de lo contrario la  restricci\u00f3n no tendr\u00eda demasiado sentido.</p> <p>Tambi\u00e9n puedes darle a la restricci\u00f3n un nombre separado. Esto  aclara los mensajes de error y le permite referirse a la restricci\u00f3n  cuando necesita cambiarlo. La sintaxis es:</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no integer,\n    texto de nombre,\n    precio num\u00e9rico CONSTRAINT positive-price CHECK (precio 0)\n);\n</code></pre> <p>As\u00ed que, para especificar una restricci\u00f3n nombrada, use la palabra clave  <code>CONSTRAINT</code>seguido de un identificador seguido de la definici\u00f3n de restricci\u00f3n. (Si no  especifica un nombre de restricci\u00f3n de esta manera, el sistema elige un  nombre para usted.)</p> <p>Una restricci\u00f3n de control tambi\u00e9n puede referirse a varias  columnas. Digamos que almacene un precio regular y un precio descontado, y quiere asegurarse de que el precio descontado es m\u00e1s bajo que el  precio regular:</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no integer,\n    texto de nombre,\n    precio num\u00e9rico CHECK (precio 0),\n    descontado. precio num\u00e9rico CHECK (descuento precio 0),\n    CHECK (precio - descontado.Precio)\n);\n</code></pre> <p>Las dos primeras limitaciones deber\u00edan parecer familiares. La  tercera utiliza una nueva sintaxis. No est\u00e1 conectado a una columna en  particular, en cambio aparece como un elemento separado en la lista de  columnas separadas por comas. Las definiciones de columna y estas  definiciones de restricciones pueden enumerarse en orden mixto.</p> <p>Decimos que las dos primeras limitaciones son limitaciones de  columna, mientras que la tercera es una restricci\u00f3n de tabla porque se  escribe separadamente de cualquier definici\u00f3n de una columna. Las  limitaciones de columna tambi\u00e9n pueden escribirse como restricciones de  tabla, mientras que lo contrario no es necesariamente posible, ya que se supone que una limitaci\u00f3n de columna se refiere \u00fanicamente a la columna a la que se adjunta. (PostgreSQL no hace cumplir esa regla, pero debe seguirla si desea que sus  definiciones de tabla funcionen con otros sistemas de bases de datos.)  El ejemplo anterior tambi\u00e9n podr\u00eda escribirse como:</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no integer,\n    texto de nombre,\n    letra de precio,\n    CHECK (precio 0),\n    descontado. Precio num\u00e9rico,\n    CHECK (descuento, precio 0),\n    CHECK (precio - descontado.Precio)\n);\n</code></pre> <p>o incluso:</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no integer,\n    texto de nombre,\n    precio num\u00e9rico CHECK (precio 0),\n    descontado. Precio num\u00e9rico,\n    CHECK (descuento, precio de descuento\n);\n</code></pre> <p>Es una cuesti\u00f3n de gusto.</p> <p>Los nombres pueden asignarse a las restricciones de la tabla de la misma manera que las limitaciones de las columnas:</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no integer,\n    texto de nombre,\n    letra de precio,\n    CHECK (precio 0),\n    descontado. Precio num\u00e9rico,\n    CHECK (descuento, precio 0),\n    CONSTRAINT valid-discount CHECK (precio - descontado precio)\n);\n</code></pre> <p>Cabe se\u00f1alar que se cumple una restricci\u00f3n de control si la  expresi\u00f3n de control eval\u00faa a la verdad o al valor nulo. Dado que la  mayor\u00eda de las expresiones evaluar\u00e1n al valor nulo si alg\u00fan operando es  nulo, no impedir\u00e1n los valores nulos en las columnas limitadas. Para  garantizar que una columna no contenga valores nulos, se puede utilizar  la restricci\u00f3n no nula descrita en la siguiente secci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/04.-Restricciones/01.-Comprobar%20restricciones/#nota","title":"Nota","text":"<p>PostgreSQL no admite  <code>CHECK</code>limitaciones que esta tabla de datos distintos de la nueva o actualizada fila que se est\u00e1 comprobar. Mientras que a  <code>CHECK</code>La restricci\u00f3n que viola esta regla puede parecer funcionar en pruebas  simples, no puede garantizar que la base de datos no llegue a un estado  en el que la condici\u00f3n de restricci\u00f3n sea falsa (debido a los cambios  posteriores de las otras filas involucradas). Esto causar\u00eda un versura  de la base de datos y restaurar el fracaso. La restauraci\u00f3n podr\u00eda  fallar incluso cuando el estado completo de la base de datos es  consistente con la restricci\u00f3n, debido a las filas que no se cargan en  un orden que satisfaga la restricci\u00f3n. Si es posible, utilizar <code>UNIQUE</code>, <code>EXCLUDE</code>, o  <code>FOREIGN KEY</code>limitaciones para expresar restricciones cruzadas y de mesa cruzada.</p> <p>Si lo que desea es un cheque de una sola vez contra otras filas en la inserci\u00f3n de filas, en lugar de una garant\u00eda de consistencia  mantenida continuamente, se puede utilizar un disparador personalizado para implementar eso. (Este enfoque evita el problema de volcado/restaurar porque pg.dump no reinstala los desencadenantes hasta despu\u00e9s de restaurar los datos,  de modo que la comprobaci\u00f3n no se aplicar\u00e1 durante un  verdor/restaurante.)</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/04.-Restricciones/01.-Comprobar%20restricciones/#nota_1","title":"Nota","text":"<p>PostgreSQL asume que  <code>CHECK</code>Las condiciones de las restricciones son inmutables, es decir, siempre  dar\u00e1n el mismo resultado para la misma fila de entradas. Esta suposici\u00f3n es lo que justifica examinar  <code>CHECK</code>las limitaciones s\u00f3lo cuando se insertan o actualizan las filas, y no en  otras ocasiones. (La advertencia anterior sobre no hacer referencia a  otros datos de la tabla es realmente un caso especial de esta  restricci\u00f3n.)</p> <p>Un ejemplo de una forma com\u00fan de romper esta suposici\u00f3n es hacer referencia a una funci\u00f3n definida por el usuario en un  <code>CHECK</code>expresi\u00f3n, y luego cambiar el comportamiento de esa funci\u00f3n. PostgreSQL no lo desautora, pero no se dar\u00e1 cuenta si hay filas en la mesa que ahora violan el  <code>CHECK</code>la restricci\u00f3n. Eso causar\u00eda un posterior vertez de la base de datos y  devuelve el fracaso. La forma recomendada de manejar tal cambio es la  bajar la restricci\u00f3n (usando <code>ALTER TABLE</code>), ajustar la definici\u00f3n de funci\u00f3n, y volver a adirar la restricci\u00f3n, re-comprob\u00e1ndola con todas las filas de la tabla.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/04.-Restricciones/02.-No-Null%20Constraints/","title":"02.-No-Null Constraints","text":"<p>Una restricci\u00f3n no nula simplemente especifica que una columna no debe asumir el valor nulo. Un ejemplo de sintaxis:</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no inte entero NOT NULL,\n    nombre texto NO NULL,\n    letra de precio\n);\n</code></pre> <p>Una restricci\u00f3n no-nula siempre est\u00e1 escrita como una restricci\u00f3n de columna. Una restricci\u00f3n no-null es funcionalmente equivalente a la  creaci\u00f3n de una restricci\u00f3n de control <code>CHECK (*</code>column_name<code>* IS NOT NULL)</code>, pero en PostgreSQL la creaci\u00f3n de una restricci\u00f3n expl\u00edcita no-nula es m\u00e1s eficiente. El  inconveniente es que no se pueden dar nombres expl\u00edcitos a las  restricciones no-nill creadas de esta manera.</p> <p>Por supuesto, una columna puede tener m\u00e1s de una restricci\u00f3n. S\u00f3lo escribe las limitaciones una tras otra:</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no inte entero NOT NULL,\n    nombre texto NO NULL,\n    NO num\u00e9rico NOT NULL CHECK (precio 0)\n);\n</code></pre> <p>La orden no importa. No determina necesariamente en qu\u00e9 orden se comprueban las limitaciones.</p> <p>El  <code>NOT NULL</code>la restricci\u00f3n tiene un inverso: el  <code>NULL</code>la restricci\u00f3n. Esto no significa que la columna deba ser nula, lo que  seguramente ser\u00eda in\u00fatil. En cambio, esto simplemente selecciona el  comportamiento predeterminado de que la columna podr\u00eda ser nula. El  <code>NULL</code>la restricci\u00f3n no est\u00e1 presente en la norma SQL y no debe utilizarse en aplicaciones port\u00e1tiles. (S\u00f3lo se a\u00f1adi\u00f3 a PostgreSQL para ser compatible con algunos otros sistemas de bases de datos.) A  algunos usuarios, sin embargo, les gusta porque hace que sea f\u00e1cil  activar la restricci\u00f3n en un archivo de script. Por ejemplo, podr\u00eda  empezar con:</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no integer NULL,\n    nombre texto NULL,\n    precio num\u00e9rico NULL\n);\n</code></pre> <p>y luego insertar el  <code>NOT</code>palabra clave donde se desee.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/04.-Restricciones/02.-No-Null%20Constraints/#tip","title":"Tip","text":"<p>En la mayor\u00eda de los dise\u00f1os de bases de datos la mayor\u00eda de las columnas deben marcarse no nulas.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/04.-Restricciones/03.-Restricciones%20%C3%BAnicas/","title":"03.-Restricciones \u00fanicas","text":"<p>Las restricciones \u00fanicas aseguran que los datos contenidos en una  columna, o un grupo de columnas, sean \u00fanicos entre todas las filas de la tabla. La sintaxis es:</p> <pre><code>CREATE Productos de TABLE (\n    product-no integer UNIQUE,\n    texto de nombre,\n    letra de precio\n);\n</code></pre> <p>cuando se escribe como restricci\u00f3n de columna, y:</p> <pre><code>CREATE Productos de TABLE (\n    product-no integer,\n    texto de nombre,\n    letra de precio,\n    UNIQUE (product-no)\n);\n</code></pre> <p>cuando se escribe como restricci\u00f3n de tabla.</p> <p>Para definir una restricci\u00f3n \u00fanica para un grupo de columnas,  escr\u00edbala como una restricci\u00f3n de tabla con los nombres de columnas  separados por comas:</p> <pre><code>CREATE TABLE ejemplo (\n    un ente entero,\n    b en el perro,\n    c integer,\n    UNIQUE (a, c)\n);\n</code></pre> <p>Esto especifica que la combinaci\u00f3n de valores en las columnas  indicadas es \u00fanica en toda la tabla, aunque cualquiera de las columnas  no necesita ser (y normalmente no es) \u00fanica.</p> <p>Usted puede asignar su propio nombre para una restricci\u00f3n \u00fanica, de la manera habitual:</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no inte entero CONSTRAINT must.be-different UNIQUE,\n    texto de nombre,\n    letra de precio\n);\n</code></pre> <p>Agregar una restricci\u00f3n \u00fanica crear\u00e1 autom\u00e1ticamente un \u00edndice de \u00e1rbol B \u00fanico en la columna o grupo de columnas listadas en la  restricci\u00f3n. Una restricci\u00f3n de singularidad que cubre s\u00f3lo algunas  filas no puede ser escrita como una restricci\u00f3n \u00fanica, pero es posible  hacer cumplir tal restricci\u00f3n creando un \u00edndice parcial \u00fanico.</p> <p>En general, se viola una restricci\u00f3n \u00fanica si hay m\u00e1s de una fila en la tabla donde los valores de todas las columnas incluidas en la  restricci\u00f3n son iguales. Por defecto, dos valores nulos no se consideran iguales en esta comparaci\u00f3n. Eso significa que incluso en presencia de  una restricci\u00f3n \u00fanica es posible almacenar filas duplicadas que  contienen un valor nulo en al menos una de las columnas limitadas. Este  comportamiento puede ser cambiado a\u00f1adiendo la cl\u00e1usula <code>NULLS NOT DISTINCT</code>, como</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no inte entero UNIQUE NOT DISTINCT,\n    texto de nombre,\n    letra de precio\n);\n</code></pre> <p>o o</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no integer,\n    texto de nombre,\n    letra de precio,\n    NULLS NOT DISTINCT (product-no)\n);\n</code></pre> <p>El comportamiento predeterminado se puede especificar expl\u00edcitamente usando <code>NULLS DISTINCT</code>. El tratamiento nulo por defecto en restricciones \u00fanicas est\u00e1 definido  de implementaci\u00f3n de acuerdo con la norma SQL, y otras implementaciones  tienen un comportamiento diferente. As\u00ed que ten cuidado al desarrollar  aplicaciones que est\u00e1n destinadas a ser port\u00e1tiles.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/04.-Restricciones/04.-Claves%20primarias/","title":"04.-Claves primarias","text":"<p>Una limitaci\u00f3n principal indica que una columna, o grupo de columnas, se puede utilizar como identificador \u00fanico para las filas en la tabla.  Esto requiere que los valores sean \u00fanicos y no nulos. Por lo tanto, las  siguientes dos definiciones de tabla aceptan los mismos datos:</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no inte entero UNIQUE NOT NULL,\n    texto de nombre,\n    letra de precio\n);\nCREATE Productos de TABLABLE (\n    product-no inte entero PRIMARY KEY,\n    texto de nombre,\n    letra de precio\n);\n</code></pre> <p>Las teclas primarias pueden abarcar m\u00e1s de una columna; la sintaxis es similar a las limitaciones \u00fanicas:</p> <pre><code>CREATE TABLE ejemplo (\n    un ente entero,\n    b en el perro,\n    c integer,\n    PRIMARY KEY (a, c)\n);\n</code></pre> <p>Agregar una clave primaria crear\u00e1 autom\u00e1ticamente un \u00edndice de  \u00e1rbol B \u00fanico en la columna o grupo de columnas listadas en la clave  principal, y obligar\u00e1 a marcar la columna (s) <code>NOT NULL</code>.</p> <p>Una tabla puede tener como m\u00e1ximo una clave primaria. (Puede  haber cualquier n\u00famero de restricciones \u00fanicas y no-nulas, que son  funcionalmente casi la misma cosa, pero s\u00f3lo una puede ser identificada  como la clave principal.) La teor\u00eda de la base de datos relacional dicta que cada tabla debe tener una clave primaria. Esta regla no es aplicada por PostgreSQL, pero por lo general es mejor seguirla.</p> <p>Las llaves primarias son \u00fatiles tanto para fines de documentaci\u00f3n como para aplicaciones de clientes. Por ejemplo, una aplicaci\u00f3n GUI que permite modificar los valores de fila probablemente necesita conocer la clave principal de una tabla para poder identificar filas de forma  \u00fanica. Tambi\u00e9n hay varias maneras en que el sistema de bases de datos  utiliza una clave primaria si se ha declarado; por ejemplo, la clave  principal define las (s) columnas de destino predeterminadas para las  claves extranjeras que hacen referencia a su tabla.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/04.-Restricciones/05.-Claves%20for%C3%A1neas/","title":"05.-Claves for\u00e1neas","text":"<p>Una restricci\u00f3n de clave externa especifica que los valores de una  columna (o un grupo de columnas) deben coincidir con los valores que  aparecen en alguna fila de otra tabla. Decimos que esto mantiene la integridad referencial entre dos cuadros relacionados.</p> <p>Digamos que ya tienes la tabla de productos que hemos usado varias veces ya:</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no inte entero PRIMARY KEY,\n    texto de nombre,\n    letra de precio\n);\n</code></pre> <p>Supongamos tambi\u00e9n que tienes una mesa almacenando pedidos de  esos productos. Queremos asegurarnos de que la tabla de pedidos s\u00f3lo  contiene pedidos de productos que realmente existen. As\u00ed que definimos  una restricci\u00f3n de clave externa en la tabla de pedidos que hace  referencia a la tabla de productos:</p> <pre><code>CREATE \u00f3rdenes de ac\u00e1rea (\n    ordenid ente entero PRIMARY KEY,\n    productos productos: product-no integer REFERENCES (product-no),\n    enteger de cantidad\n);\n</code></pre> <p>Ahora es imposible crear \u00f3rdenes con no-NULL  <code>product_no</code>entradas que no aparecen en la tabla de productos.</p> <p>Decimos que en esta situaci\u00f3n la tabla de pedidos es la tabla de referencias y el cuadro de productos es el cuadro de referencia. Del mismo modo, hay columnas de referencia y referencia.</p> <p>Tambi\u00e9n puede acortar el comando anterior para:</p> <pre><code>CREATE \u00f3rdenes de ac\u00e1rea (\n    ordenid ente entero PRIMARY KEY,\n    producto-no inte integer REFERENCIASS,\n    enteger de cantidad\n);\n</code></pre> <p>porque en ausencia de una lista de columnas se utiliza la clave  principal de la tabla referenciada como columna de referencia (s).</p> <p>Puede asignar su propio nombre para una restricci\u00f3n de clave extranjera, de la manera habitual.</p> <p>Una clave extranjera tambi\u00e9n puede limitar y hacer referencia a  un grupo de columnas. Como de costumbre, entonces necesita ser escrito  en forma de restricci\u00f3n de tabla. He aqu\u00ed un ejemplo de sintaxis  artima\u00f1a:</p> <pre><code>CREATE TABLE t1 (\n  un ente entero PRIMARY KEY,\n  b en el perro,\n  c integer,\n  FOREIGN KEY (b, c) REFERENCIAS other-table (c1, c2)\n);\n</code></pre> <p>Por supuesto, el n\u00famero y el tipo de las columnas limitadas deben coincidir con el n\u00famero y el tipo de las columnas referenciadas.</p> <p>A veces es \u00fatil que la otra tabla de una restricci\u00f3n de la llave extranjera sea la misma tabla; esto se llama una clave extranjera autorreferencial. Por ejemplo, si quieres que las filas de una mesa representen los nodos de una estructura de \u00e1rbol, podr\u00edas escribir</p> <pre><code>CREATE \u00e1rbol de aba,\n    nodeid entero PRIMARY KEY,\n    parentesco de REFERENCIAS en n\u00fameros enteros,\n    texto de nombre,\n    ...\n);\n</code></pre> <p>Un nodo de primer nivel tendr\u00eda NULL <code>parent_id</code>, mientras que no  <code>parent_id</code>las entradas se ver\u00edan limitadas a las filas v\u00e1lidas de referencia del cuadro.</p> <p>Una tabla puede tener m\u00e1s de una restricci\u00f3n de clave extranjera. Esto se utiliza para implementar relaciones de muchas a muchas entre  tablas. Digamos que tienes mesas sobre productos y pedidos, pero ahora  quieres permitir que un pedido contenga posiblemente muchos productos  (que la estructura anterior no permit\u00eda). Podr\u00eda utilizar esta  estructura de la tabla:</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no inte entero PRIMARY KEY,\n    texto de nombre,\n    letra de precio\n);\n\nCREATE \u00f3rdenes de ac\u00e1rea (\n    ordenid ente entero PRIMARY KEY,\n    env\u00edo. texto de direcci\u00f3n,\n    ...\n);\n\nCREATE TABLE order.items (\n    producto-no inte integer REFERENCIASS,\n    ordenid integer REFERENCIAS \u00f3rdenes,\n    en el dedo de la cantidad,\n    PRIMARY KEY (product-no, orderid)\n);\n</code></pre> <p>Observe que la clave primaria se solapa con las claves extranjeras en el \u00faltimo cuadro.</p> <p>Sabemos que las claves extranjeras desautoricen la creaci\u00f3n de  pedidos que no se relacionan con ning\u00fan producto. Pero qu\u00e9 pasa si un  producto se elimina despu\u00e9s de crear un pedido que lo hace referencia?  SQL te permite manejar eso tambi\u00e9n. Intuitivamente, tenemos algunas  opciones:</p> <ul> <li>Desautorizar la eliminaci\u00f3n de un producto referenciado</li> <li>Borrar las \u00f3rdenes tambi\u00e9n</li> <li>Algo m\u00e1s?</li> </ul> <p>Para ilustrar esto, apliquemos la siguiente pol\u00edtica sobre el  ejemplo de relaci\u00f3n de muchas a muchos de arriba: cuando alguien quiere  eliminar un producto que todav\u00eda se hace referencia por un pedido (v\u00eda <code>order_items</code>), lo desautoramos. Si alguien elimina una orden, los elementos del pedido tambi\u00e9n se retiran:</p> <pre><code>CREATE Productos de TABLABLE (\n    product-no inte entero PRIMARY KEY,\n    texto de nombre,\n    letra de precio\n);\n\nCREATE \u00f3rdenes de ac\u00e1rea (\n    ordenid ente entero PRIMARY KEY,\n    env\u00edo. texto de direcci\u00f3n,\n    ...\n);\n\nCREATE TABLE order.items (\n    productos product-no inte entero REFERENCIAS ON DELETE RESTRICT,\n    orden. integer REFERENCIAS \u00f3rdenes ON DELETE CASCADE,\n    en el dedo de la cantidad,\n    PRIMARY KEY (product-no, orderid)\n);\n</code></pre> <p>Restacantes y borrados en cascada son las dos opciones m\u00e1s comunes.  <code>RESTRICT</code>impide la supresi\u00f3n de una fila referenciada.  <code>NO ACTION</code>significa que si alguna fila de referencia todav\u00eda existe cuando la restricci\u00f3n  se comprueba, se levanta un error; este es el comportamiento  predeterminado si usted no especifica nada. (La diferencia esencial  entre estas dos opciones es que  <code>NO ACTION</code>permite aplazar el control hasta m\u00e1s tarde en la transacci\u00f3n, mientras que  <code>RESTRICT</code>no lo hace.)  <code>CASCADE</code>especifica que cuando se elimina una fila referenciada, se refiere a filas (s) que tambi\u00e9n debe ser borrada autom\u00e1ticamente. Hay otras dos opciones:  <code>SET NULL</code>y <code>SET DEFAULT</code>. Estos hacen que la columna de referencia (s) en la fila de referencia  se consplazase en nulls o sus valores por defecto, respectivamente,  cuando se elimine la fila referenciada. Tenga en cuenta que estos no le  eximen observar ninguna restricci\u00f3n. Por ejemplo, si una acci\u00f3n  especifica  <code>SET DEFAULT</code>pero el valor por defecto no satisfpondr\u00eda la restricci\u00f3n de clave extranjera, la operaci\u00f3n fracasar\u00e1.</p> <p>La elecci\u00f3n adecuada de  <code>ON DELETE</code>acci\u00f3n depende de qu\u00e9 tipos de objetos representan las tablas relacionadas.  Cuando la tabla de referencia representa algo que es un componente de lo que representa la tabla referenciada y no puede existir de forma  independiente, entonces  <code>CASCADE</code>podr\u00eda ser apropiado. Si las dos tablas representan objetos independientes, entonces  <code>RESTRICT</code>o o  <code>NO ACTION</code>es m\u00e1s apropiada; una aplicaci\u00f3n que realmente quiere borrar ambos objetos tendr\u00eda que ser expl\u00edcita sobre esto y ejecutar dos comandos de  eliminaci\u00f3n. En el ejemplo anterior, los elementos del pedido son parte  de un pedido, y es conveniente si se eliminan autom\u00e1ticamente si se  elimina un pedido. Pero los productos y pedidos son cosas diferentes, y  por lo tanto hacer una eliminaci\u00f3n de un producto autom\u00e1ticamente causa  la eliminaci\u00f3n de algunos art\u00edculos de pedido podr\u00eda considerarse  problem\u00e1tico. Las acciones  <code>SET NULL</code>o o  <code>SET DEFAULT</code>puede ser apropiado si una relaci\u00f3n de clase extranjera representa  informaci\u00f3n opcional. Por ejemplo, si la tabla de productos conten\u00eda una referencia a un gestor de producto, y la entrada del gestor de producto se elimina, entonces establecer el gestor de productos del producto  para que sea nulo o un valor predeterminado podr\u00eda ser \u00fatil.</p> <p>Las acciones  <code>SET NULL</code>y  <code>SET DEFAULT</code>puede tomar una lista de la columna para especificar qu\u00e9 columnas establecer. Normalmente, todas las columnas de la restricci\u00f3n de la clavos extra\u00f1os se establecen; establecer s\u00f3lo un subconjunto es \u00fatil en algunos casos  especiales. Considere el siguiente ejemplo:</p> <pre><code>Inquilinos de la tabla CREATE (\n    inteindio en el entero PRIMARY KEY\n);\n\nCREATE Usuarios de TABLABLE (\n    Inted integer REFERENCIAS Inquilinos DELETE CASCADE,\n    user.id integer NOT NULL,\n    PRIMARY KEY (tenant-id, user-id)\n);\n\nCREATE TABLE posts (\n    Inted integer REFERENCIAS Inquilinos DELETE CASCADE,\n    post-id integer NO NULL,\n    autorid integer,\n    PRIMARY KEY (tencid, post-id),\n    FOREIGN KEY (tenant-id, author-id) REFERENCES users ON DELETE SETE NULL (author-id)\n);\n</code></pre> <p>Sin la especificaci\u00f3n de la columna, la clave extranjera tambi\u00e9n establecer\u00eda la columna  <code>tenant_id</code>a null, pero esa columna todav\u00eda se requiere como parte de la clave principal.</p> <p>Aprol\u00f3gico a  <code>ON DELETE</code>tambi\u00e9n est\u00e1  <code>ON UPDATE</code>que se invoque cuando se cambia una columna referenciada (actualizada). Las posibles acciones son las mismas, excepto que las listas de columnas no pueden especificarse para  <code>SET NULL</code>y <code>SET DEFAULT</code>. En este caso,  <code>CASCADE</code>significa que los valores actualizados de las columnas de referencia deben ser copiados en las filas de referencia (s).</p> <p>Normalmente, una fila de referencia no tiene por qu\u00e9 satisfacer  la restricci\u00f3n de clave externa si alguna de sus columnas de referencia  es nula. Si  <code>MATCH FULL</code>se a\u00f1ade a la declaraci\u00f3n de clave extranjera, una fila de referencia  escapando a la restricci\u00f3n s\u00f3lo si todas sus columnas de referencia son  nulas (por lo que una mezcla de valores nulos y no nulos est\u00e1  garantizado para fallar una  <code>MATCH FULL</code>restricci\u00f3n). Si no quieres que las filas de referencia sean capaces de evitar  satisfacer la restricci\u00f3n de clave extranjera, declara la columna de  referencia(s) como <code>NOT NULL</code>.</p> <p>Una clave extranjera debe las columnas de referencia que son una  clave primaria o forman una restricci\u00f3n \u00fanica. Esto significa que las  columnas referenciadas siempre tienen un \u00edndice (la que subyace a la  clave principal o la limitaci\u00f3n \u00fanica); as\u00ed que comprobar si una fila de referencia tiene una coincidencia ser\u00e1 eficiente. Desde un  <code>DELETE</code>de una fila de la tabla de referencia o de un  <code>UPDATE</code>de una columna referenciada requerir\u00e1 un escaneo de la tabla de referencia para las filas que coinijan el valor antiguo, a menudo es una buena  idea indexar las columnas de referencia tambi\u00e9n. Debido a que esto no  siempre es necesario, y hay muchas opciones disponibles sobre c\u00f3mo  indexar, la declaraci\u00f3n de una restricci\u00f3n de clave extranjera no crea  autom\u00e1ticamente un \u00edndice en las columnas de referencia.</p> <p>M\u00e1s informaci\u00f3n sobre la actualizaci\u00f3n y eliminaci\u00f3n de los datos se encuentra en el cap\u00edtulo 6. Vea tambi\u00e9n la descripci\u00f3n de la sintaxis de restricci\u00f3n de claves en la documentaci\u00f3n de referencia para CREATE TABLE.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/04.-Restricciones/06.-Restricciones%20de%20exclusi%C3%B3n/","title":"06.-Restricciones de exclusi\u00f3n","text":"<p>Las restricciones de exclusi\u00f3n garantizan que si se comparan dos  filas en las columnas o expresiones especificadas utilizando los  operadores especificados, al menos una de estas comparaciones de  operadores devolver\u00e1 false o nula. La sintaxis es:</p> <pre><code>CREATE c\u00edrculos de ac\u00e1rea (\n    c c\u00edrculo,\n    EXCLUDE USING gist (c With &amp;&amp;)\n);\n</code></pre> <p>V\u00e9ase tambi\u00e9n  <code>CREATE TABLE ... CONSTRAINT ... EXCLUDE</code>para los detalles.</p> <p>A\u00f1adir una restricci\u00f3n de exclusi\u00f3n crear\u00e1 autom\u00e1ticamente un \u00edndice del tipo especificado en la declaraci\u00f3n de restricci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/06.-Tablas%20de%20modificaci%C3%B3n/","title":"Index","text":"<p>Cuando creas una tabla y te das cuenta de que cometiste un error, o  los requisitos de la aplicaci\u00f3n cambian, puedes dejar la tabla y crearla de nuevo. Pero esta no es una opci\u00f3n conveniente si la tabla ya est\u00e1  llena de datos, o si la tabla es referenciada por otros objetos de base  de datos (por ejemplo, una restricci\u00f3n de clave extranjera). Por lo  tanto PostgreSQL proporciona una familia de comandos para hacer modificaciones en las  tablas existentes. Tenga en cuenta que esto es conceptualmente distinto  de alterar los datos contenidos en la tabla: aqu\u00ed estamos interesados en alterar la definici\u00f3n, o estructura, de la tabla.</p> <p>Puedes:</p> <ul> <li>A\u00f1adir columnas</li> <li>Eliminar columnas</li> <li>A\u00f1\u00e1dase limitaciones</li> <li>Eliminar las restricciones</li> <li>Cambiar los valores por defecto</li> <li>Cambiar los tipos de datos de la columna</li> <li>Renoname de columnas</li> <li>Tablas de nombres</li> </ul> <p>Todas estas acciones se realizan utilizando el comando ALTER TABLE, cuya p\u00e1gina de referencia contiene detalles m\u00e1s all\u00e1 de los que se dan aqu\u00ed.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/06.-Tablas%20de%20modificaci%C3%B3n/01.-A%C3%B1adir%20una%20columna/","title":"01.-A\u00f1adir una columna","text":"<p>Para a\u00f1adir una columna, utilice un comando como:</p> <pre><code>ALTER Productos de la tabla ADD COLUMN texto de descripci\u00f3n;\n</code></pre> <p>La nueva columna se llena inicialmente con cualquier valor predeterminado que se d\u00e9 (nula si no especifica un  <code>DEFAULT</code>cl\u00e1usula).</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/06.-Tablas%20de%20modificaci%C3%B3n/01.-A%C3%B1adir%20una%20columna/#tip","title":"Tip","text":"<p>De PostgreSQL 11, a\u00f1adir una columna con un valor predeterminado constante ya no  significa que cada fila de la tabla necesita ser actualizada cuando el  <code>ALTER TABLE</code>la declaraci\u00f3n se ejecuta. En su lugar, el valor predeterminado se  devolver\u00e1 la pr\u00f3xima vez que se acceda a la fila, y se aplique cuando la tabla sea reescrita, haciendo la  <code>ALTER TABLE</code>muy r\u00e1pido incluso en mesas grandes.</p> <p>Sin embargo, si el valor por defecto es vol\u00e1til (por ejemplo, <code>clock_timestamp()</code>) cada fila deber\u00e1 actualizarse con el valor calculado en el momento  <code>ALTER TABLE</code>est\u00e1 ejecutado. Para evitar una operaci\u00f3n de actualizaci\u00f3n potencialmente  larga, especialmente si tiene la intenci\u00f3n de llenar la columna con  valores mayormente no predeterminados de todos modos, puede ser  preferible a\u00f1adir la columna sin defecto, insertar los valores correctos usando <code>UPDATE</code>, y luego a\u00f1adir cualquier defecto deseado como se describe a continuaci\u00f3n.</p> <p>Tambi\u00e9n puede definir restricciones en la columna al mismo tiempo, usando la sintaxis habitual:</p> <pre><code>ALTER TABLE productos ADD COLUMN description texto CHECK (descripci\u00f3n \"');\n</code></pre> <p>De hecho, todas las opciones que se pueden aplicar a una descripci\u00f3n de columna en  <code>CREATE TABLE</code>se puede usar aqu\u00ed. Tenga en cuenta, sin embargo, que el valor predeterminado debe satisfacer las limitaciones dadas, o  <code>ADD</code>fracasar\u00e1. Alternativamente, puede agregar restricciones m\u00e1s adelante (ver m\u00e1s  abajo) despu\u00e9s de haber rellenado la nueva columna correctamente.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/06.-Tablas%20de%20modificaci%C3%B3n/02.-Quitar%20una%20columna/","title":"02.-Quitar una columna","text":"<p>Para eliminar una columna, utilice un comando como:</p> <pre><code>ALTER TABLE productos DROP COLUMN Descripci\u00f3n;\n</code></pre> <p>Cualquier dato que haya en la columna desaparece. Tambi\u00e9n se  suelran las limitaciones de la tabla que implican la columna. Sin  embargo, si la columna se hace referencia por una restricci\u00f3n de clave  extranjera de otra tabla, PostgreSQL no dejar\u00e1 caer silenciosamente esa restricci\u00f3n. Puedes autorizar la entrega de todo lo que depende de la columna a\u00f1adiendo <code>CASCADE</code>:</p> <pre><code>ALTER Productos de TABL - Descripci\u00f3n DROP COLUMN CASCADE;\n</code></pre> <p>V\u00e9ase la secci\u00f3n 5.14 para una descripci\u00f3n del mecanismo general que se basa en esto.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/06.-Tablas%20de%20modificaci%C3%B3n/02.-Quitar%20una%20columna/#_1","title":"02.-Quitar una columna","text":""},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/06.-Tablas%20de%20modificaci%C3%B3n/03.-A%C3%B1adir%20una%20restricci%C3%B3n/","title":"03.-A\u00f1adir una restricci\u00f3n","text":"<p>Para a\u00f1adir una restricci\u00f3n, se utiliza la sintaxis de restricci\u00f3n de la tabla. Por ejemplo:</p> <pre><code>ALTER TABLE productos ADD CHECK (nombre \"');\nALTER TABLE productos ADD CONSTRAINT de alg\u00fan nombre UNIQUE (product-no);\nALTER TABLE productos ADD FOREIGN KEY (product.group.id) REFERENCIAS product-groups;\n</code></pre> <p>Para a\u00f1adir una restricci\u00f3n no nulo, que no puede ser escrita como restricci\u00f3n de tabla, utilice esta sintaxis:</p> <pre><code>ALTER TABLE productos ALTER COLUMN product. NULL;\n</code></pre> <p>La restricci\u00f3n se comprobar\u00e1 inmediatamente, por lo que los datos de la tabla deben satisfacer la restricci\u00f3n antes de que pueda ser  a\u00f1adido.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/06.-Tablas%20de%20modificaci%C3%B3n/04.-Quitar%20una%20restricci%C3%B3n/","title":"04.-Quitar una restricci\u00f3n","text":"<p>ara eliminar una restricci\u00f3n necesitas saber su nombre. Si le diste  un nombre, entonces eso es f\u00e1cil. De lo contrario, el sistema asign\u00f3 un  nombre generado, que usted necesita averiguar. El comando psql  <code>\\d *</code>tablename<code>*</code>puede ser \u00fatil aqu\u00ed; otras interfaces tambi\u00e9n pueden proporcionar una manera  de inspeccionar los detalles de la tabla. Entonces el comando es:</p> <pre><code>ALTER TABLE productos DROP CONSTRAINT de alg\u00fan nombre;\n</code></pre> <p>(Si usted est\u00e1 tratando con un nombre de restricci\u00f3n generado como <code>$2</code>, no olvides que tendr\u00e1s que cotarlo para convertirlo en un identificador v\u00e1lido.)</p> <p>Como con la ca\u00edda de una columna, usted necesita a\u00f1adir  <code>CASCADE</code>Si quieres dejar caer una restricci\u00f3n de la que algo m\u00e1s depende. Un  ejemplo es que una restricci\u00f3n de clave externa depende de una  restricci\u00f3n \u00fanica o primaria de la columna de referencia (s).</p> <p>Esto funciona igual para todos los tipos de restricci\u00f3n excepto  las restricciones no nulas. Deja caer un uso de restricci\u00f3n no nulo:</p> <pre><code>ALTER TABLE productos ALTER COLUMN product-no DROP NOT NULL;\n</code></pre> <p>(Recorde que las restricciones no-null no tienen nombres.)</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/06.-Tablas%20de%20modificaci%C3%B3n/05.-Cambiar%20el%20valor%20predeterminado%20de%20una%20columna/","title":"05.-Cambiar el valor predeterminado de una columna","text":"<p>Para establecer un nuevo defecto para una columna, utilice un comando como:</p> <pre><code>ALTER TABLEs Precio ALTER COLUMN SET DEFAULT 7.77;\n</code></pre> <p>Tenga en cuenta que esto no afecta a ninguna fila existente en la tabla, s\u00f3lo cambia el defecto para el futuro  <code>INSERT</code>comandos.</p> <p>Para eliminar cualquier valor predeterminado, utilice:</p> <pre><code>ALTER TABLE productos ALTER COLUMN precio DROP DEFAULT;\n</code></pre> <p>Esto es efectivamente lo mismo que establecer el incumplimiento a nulo. Como consecuencia, no es un error dejar caer un default donde uno no se hab\u00eda definido, porque el default es impl\u00edcitamente el valor  nulo.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/06.-Tablas%20de%20modificaci%C3%B3n/06.-Cambiar%20el%20tipo%20de%20datos%20de%20una%20columna/","title":"06.-Cambiar el tipo de datos de una columna","text":"<p>Para convertir una columna en un tipo de datos diferente, utilice un comando como:</p> <pre><code>ALTER Productos de TABel ALTER Precio COLUMN TYPE num\u00e9ricos (10,2);\n</code></pre> <p>Esto s\u00f3lo tendr\u00e1 \u00e9xito si cada entrada existente en la columna  puede ser convertida al nuevo tipo por un elenco impl\u00edcito. Si se  necesita una conversi\u00f3n m\u00e1s compleja, puede a\u00f1adir un  <code>USING</code>cl\u00e1usula que especifica c\u00f3mo calcular los nuevos valores de lo viejo.</p> <p>PostgreSQL intentar\u00e1 convertir el valor predeterminado de la columna (si lo hay)  en el nuevo tipo, as\u00ed como cualquier restricci\u00f3n que implique la  columna. Pero estas conversiones podr\u00edan fallar, o podr\u00edan producir  resultados sorprendentes. A menudo es mejor dejar caer cualquier  restricci\u00f3n en la columna antes de alterar su tipo, y luego agregar  restricciones adecuadamente modificadas despu\u00e9s.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/06.-Tablas%20de%20modificaci%C3%B3n/07.-Renombrando%20una%20columna/","title":"07.-Renombrando una columna","text":"<p>Para cambiar el nombre de una columna:</p> <pre><code>ALTER TABLE productos RENAME COLUMN product-no TO product-number;\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/06.-Tablas%20de%20modificaci%C3%B3n/08.-Renombrando%20una%20tabla/","title":"08.-Renombrando una tabla","text":"<p>Para cambiar el nombre de una tabla:</p> <pre><code>ALTER Productos de mesa RENAME A los art\u00edculos;\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/09.-Esquemas/","title":"Index","text":"<p>Un grupo de bases de datos PostgreSQL contiene una o m\u00e1s bases de datos nombradas. Los roles y algunos otros  tipos de objetos se comparten en todo el cl\u00faster. Una conexi\u00f3n cliente  al servidor s\u00f3lo puede acceder a los datos en una sola base de datos, la especificada en la solicitud de conexi\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/09.-Esquemas/#nota","title":"Nota","text":"<p>Los usuarios de un grupo no tienen necesariamente el privilegio  de acceder a cada base de datos del grupo. Compartir nombres de roles  significa que no puede haber diferentes roles nombrados, digamos,  <code>joe</code>en dos bases de datos en el mismo cl\u00faster; pero el sistema se puede configurar para permitir  <code>joe</code>acceso a s\u00f3lo algunas de las bases de datos.</p> <p>Una base de datos contiene una o m\u00e1s esquemas llamados, que a su vez contienen tablas. Los esquemas tambi\u00e9n contienen otros tipos de objetos mencionados, incluyendo tipos de datos,  funciones y operadores. El mismo objeto se puede utilizar en diferentes  esquemas sin conflicto; por ejemplo, ambos  <code>schema1</code>y  <code>myschema</code>puede contener tablas nombradas <code>mytable</code>. A diferencia de las bases de datos, las esquemas no se separan  r\u00edgidamente: un usuario puede acceder a objetos en cualquiera de los  esquemas de la base de datos a la que est\u00e1n conectados, si tienen  privilegios para hacerlo.</p> <p>Hay varias razones por las que uno podr\u00eda querer usar esquemas:</p> <ul> <li>Permitir que muchos usuarios usen una base de datos sin interferir entre s\u00ed.</li> <li>Organizar objetos de base de datos en grupos l\u00f3gicos para hacerlos m\u00e1s manejables.</li> <li>Las aplicaciones de terceros se pueden poner en esquemas separados para que no colisionen con los nombres de otros objetos.</li> </ul> <p>Los esquemas son an\u00e1logos a los directorios a nivel del sistema operativo, excepto que los esquemas no pueden ser anidados.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/09.-Esquemas/01.-Creaci%C3%B3n%20de%20un%20esquema/","title":"01.-Creaci\u00f3n de un esquema","text":"<p>Para crear un esquema, utilice el comando CREATE SCHEMA. Dale al esquema un nombre de tu elecci\u00f3n. Por ejemplo:</p> <pre><code>CREATE SCHEMA myschema;\n</code></pre> <p>Para crear o acceder objetos en un esquema, escriba un nombre calificado que consina el nombre del esquema y el nombre de la tabla separado por un punto:</p> <pre><code>schema.table\n</code></pre> <p>Esto funciona en cualquier lugar que se espera un nombre de  tabla, incluyendo los comandos de modificaci\u00f3n de tablas y los comandos  de acceso de datos discutidos en los cap\u00edtulos siguientes. (Para la  brevedad hablaremos s\u00f3lo de tablas, pero las mismas ideas se aplican a  otros tipos de objetos nombrados, como tipos y funciones.)</p> <p>En realidad, la sintaxis a\u00fan m\u00e1s general</p> <pre><code>database.schema.table\n</code></pre> <p>Puede utilizarse tambi\u00e9n, pero en la actualidad esto es s\u00f3lo para el cumplimiento pro forma de la norma SQL. Si escribes un nombre de  base de datos, debe ser lo mismo que la base de datos a la que est\u00e1s  conectado.</p> <p>As\u00ed que para crear una tabla en el nuevo esquema, use:</p> <pre><code>CREATE TABLE myschema.mytable (\n ...\n);\n</code></pre> <p>Para soltar un esquema si est\u00e1 vac\u00edo (todos los objetos en \u00e9l han sido lanzados), use:</p> <pre><code>DROP SCHEMA myschema;\n</code></pre> <p>Para soltar un esquema incluyendo todos los objetos contenidos, utilice:</p> <pre><code>DROP SCHEMA myschema CASCADE;\n</code></pre> <p>V\u00e9ase la secci\u00f3n 5.14 para una descripci\u00f3n del mecanismo general que se basa en esto.</p> <p>A menudo querr\u00e1 crear un esquema propiedad de otra persona (ya  que esta es una de las formas de restringir las actividades de sus  usuarios a espacios de nombres bien definidos). La sintaxis para eso es:</p> <pre><code>CREATE SCHEMA  schema_nameAUTORIZACION user_name;\n</code></pre> <p>Incluso puede omitir el nombre del esquema, en cuyo caso el nombre del esquema ser\u00e1 el mismo que el nombre de usuario. V\u00e9ase la secci\u00f3n 5.9.6 para que esto pueda ser \u00fatil.</p> <p>Nombres de esquema que comienzan con  <code>pg_</code>est\u00e1n reservados para fines del sistema y no pueden ser creados por los usuarios.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/09.-Esquemas/02.-El%20esquema%20p%C3%BAblico/","title":"02.-El esquema p\u00fablico","text":"<p>En las secciones anteriores creamos tablas sin especificar nombres de esquema. De forma predeterminada, dichas tablas (y otros objetos) se  ponen autom\u00e1ticamente en un esquema llamado \u201cpublic\u201d\"\u00fablico\". Cada nueva base de datos contiene tal esquema. As\u00ed pues, los siguientes son equivalentes:</p> <pre><code>CREATE TABLE productos (... );\n</code></pre> <p>y:</p> <pre><code>CREATE TABLE public.products (... );\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/09.-Esquemas/03.-El%20camino%20de%20b%C3%BAsqueda%20de%20esquemas/","title":"03.-El camino de b\u00fasqueda de esquemas","text":"<p>Los nombres calificados son tediosos de escribir, y a menudo es mejor no conectar un nombre de esquema en particular en aplicaciones de todos modos. Por lo tanto, los cuadros se refieren a menudo con nombres no calificados, que consisten en s\u00f3lo el nombre de la tabla. El sistema determina qu\u00e9 tabla se entiende por seguir una ruta de b\u00fasqueda, que es una lista de esquemas para mirar. La primera tabla de emparejado en el camino de b\u00fasqueda se toma como la que se busca. Si no hay  coincidencia en la ruta de b\u00fasqueda, se reporta un error, incluso si  existen nombres de tablas coincide en otros esquemas de la base de  datos.</p> <p>La capacidad de crear objetos de nombre similar en diferentes  esquemas complica la escritura de una consulta que hace referencia  precisamente a los mismos objetos cada vez. Tambi\u00e9n abre el potencial  para que los usuarios cambien el comportamiento de las consultas de  otros usuarios, maliciosamente o accidentalmente. Debido a la  prevalencia de nombres no calificados en las consultas y su uso en los  internos de PostgreSQL, a\u00f1adiendo un esquema a  <code>search_path</code>conf\u00eda efectivamente en que todos los usuarios tengan  <code>CREATE</code>privilegio en ese esquema. Cuando usted ejecuta una consulta ordinaria, un usuario malicioso capaz de crear objetos en un esquema de su ruta de b\u00fasqueda  puede tomar el control y ejecutar funciones SQL arbitrarias como si las  hubiera ejecutado.</p> <p>El primer esquema nombrado en el camino de b\u00fasqueda se llama el  esquema actual. Adem\u00e1s de ser el primer esquema buscado, es tambi\u00e9n el  esquema en el que se crear\u00e1n nuevas mesas si el  <code>CREATE TABLE</code>el comando no especifica un nombre de esquema.</p> <p>Para mostrar la ruta de b\u00fasqueda actual, utilice el siguiente comando:</p> <pre><code>SHOW search.path;\n</code></pre> <p>En la configuraci\u00f3n predeterminada esta devoluciones:</p> <pre><code>b\u00fasqueda.\n--------------\n \"$user\", p\u00fablico\n</code></pre> <p>El primer elemento especifica que se buscar\u00e1 un esquema con el  mismo nombre que el usuario actual. Si no existe tal esquema, la entrada es ignorada. El segundo elemento se refiere al esquema p\u00fablico que ya  hemos visto.</p> <p>El primer esquema en la ruta de b\u00fasqueda que existe es la  ubicaci\u00f3n predeterminada para crear nuevos objetos. Esa es la raz\u00f3n por  la que por defecto los objetos se crean en el esquema p\u00fablico. Cuando  los objetos se hacen referencia en cualquier otro contexto sin  calificaci\u00f3n de esquema (modificaci\u00f3n de tablas, modificaci\u00f3n de datos o comandos de consulta) la ruta de b\u00fasqueda se atraviesa hasta que se  encuentra un objeto que coincida. Por lo tanto, en la configuraci\u00f3n por  defecto, cualquier acceso sin reservas de nuevo s\u00f3lo puede referirse al  esquema p\u00fablico.</p> <p>Para poner nuestro nuevo esquema en el camino, usamos:</p> <pre><code>SET search.path TO myschema, public;\n</code></pre> <p>(Omitimos la  <code>$user</code>aqu\u00ed porque no tenemos necesidad inmediata de ello.) Y luego podemos acceder a la mesa sin calificaci\u00f3n de esquema:</p> <pre><code>DROP TABLE mytable;\n</code></pre> <p>Tambi\u00e9n, desde entonces  <code>myschema</code>es el primer elemento en la ruta, nuevos objetos se crear\u00edan por defecto en \u00e9l.</p> <p>Tambi\u00e9n podr\u00edamos haber escrito:</p> <pre><code>SET search.path TO myschema;\n</code></pre> <p>Entonces ya no tenemos acceso al esquema p\u00fablico sin calificaci\u00f3n expl\u00edcita. No hay nada especial en el esquema p\u00fablico excepto que  existe por defecto. Tambi\u00e9n se puede dejar caer.</p> <p>Vea tambi\u00e9n la Secci\u00f3n 9.26 para otras formas de manipular el camino de b\u00fasqueda de esquemas.</p> <p>La ruta de b\u00fasqueda funciona de la misma manera para nombres de  nombres de datos, nombres de funciones y nombres de operador que para  los nombres de tabla. El tipo de datos y los nombres de funci\u00f3n se  pueden calificar exactamente de la misma manera que los nombres de  tabla. Si usted necesita escribir un nombre de operador calificado en  una expresi\u00f3n, hay una disposici\u00f3n especial: usted debe escribir</p> <pre><code>OPERATOR(schema.operator)\n</code></pre> <p>Esto es necesario para evitar la ambiguedad sint\u00e1ctica. Un ejemplo es:</p> <pre><code>SELECT 3 OPEROCEr (pg-catalog.) 4;\n</code></pre> <p>En la pr\u00e1ctica, uno suele confiar en la ruta de b\u00fasqueda de los operadores, para no tener que escribir nada tan feo como eso.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/09.-Esquemas/04.-Esquemas%20y%20privilegios/","title":"04.-Esquemas y privilegios","text":"<p>Por defecto, los usuarios no pueden acceder a ning\u00fan objeto en  esquemas que no poseen. Para permitirlo, el due\u00f1o del esquema debe  conceder la  <code>USAGE</code>privilegio en el esquema. Por defecto, todo el mundo tiene ese privilegio en el esquema <code>public</code>. Para permitir a los usuarios hacer uso de los objetos en un esquema,  podr\u00edan ser denecesarios adicionales que podr\u00edan ser concedidos, seg\u00fan  corresponda para el objeto.</p> <p>Tambi\u00e9n se puede permitir a un usuario crear objetos en el esquema de otra persona. Para permitirlo, el  <code>CREATE</code>El privilegio en el esquema necesita ser concedido. En bases de datos actualizadas de PostgreSQL 14 o anterior, todo el mundo tiene ese privilegio en el esquema <code>public</code>. Algunos patrones de uso requieren revocar ese privilegio:</p> <pre><code>REVOKE CREATE EN SCHEMA p\u00fablico de PUBLIC;\n</code></pre> <p>(El primer p\u00fablico es el esquema, el segundo \"\u00fael p\u00fablico\" significa \"todo usuario\". En el primer sentido es un identificador, en el segundo  sentido es una palabra clave, de ah\u00ed la diferente capitalizaci\u00f3n;  recordar las directrices de la Secci\u00f3n 4.1.1.)</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/09.-Esquemas/05.-El%20esquema%20de%20cat%C3%A1logo%20del%20sistema/","title":"05.-El esquema de cat\u00e1logo del sistema","text":"<p>Adem\u00e1s de  <code>public</code>y esquemas creado por el usuario, cada base de datos contiene un  <code>pg_catalog</code>esquema, que contiene las tablas del sistema y todos los tipos de datos incorporados, funciones y operadores.  <code>pg_catalog</code>siempre es parte efectiva de la ruta de b\u00fasqueda. Si no se nombra  expl\u00edcitamente en el camino, entonces es impl\u00edcitamente buscado antes de buscar las esquemas del camino. Esto asegura que los nombres  incorporados siempre ser\u00e1n encontrados. Sin embargo, puedes colocar  expl\u00edcitamente  <code>pg_catalog</code>al final de su ruta de b\u00fasqueda si prefiere que los nombres definidos por el usuario se anunen en los nombres incorporados.</p> <p>Dado que los nombres de la tabla del sistema comienzan con <code>pg_</code>, lo mejor es evitar tales nombres para asegurarse de que no sufrir\u00e1 un  conflicto si alguna versi\u00f3n futura define una tabla de sistemas nombrada igual que su tabla. (Con la ruta de b\u00fasqueda predeterminada, una  referencia no calificada a su nombre de la tabla se resolver\u00eda como la  tabla del sistema en su lugar.) Las tablas del sistema seguir\u00e1n la  convenci\u00f3n de tener nombres a partir de <code>pg_</code>, para que no entren en conflicto con nombres de la mesa de usuario no calificados siempre y cuando los usuarios eviten la  <code>pg_</code>Prefijo.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/09.-Esquemas/06.-Patrones%20de%20uso/","title":"06.-Patrones de uso","text":"<p>os esquemas se pueden utilizar para organizar sus datos de muchas maneras. Un patr\u00f3n de uso de esquema seguro evita que los usuarios no confiables cambien el comportamiento de las  consultas de otros usuarios. Cuando una base de datos no utiliza un  patr\u00f3n de uso de esquema seguro, los usuarios que deseen consultar de  forma segura esa base de datos tomar\u00edan medidas de protecci\u00f3n al  principio de cada sesi\u00f3n. En concreto, comenzar\u00edan cada sesi\u00f3n fijando  <code>search_path</code>a la cadena vac\u00eda o la eliminaci\u00f3n de esquemas que son escritos por no-superusuarios de <code>search_path</code>. Hay algunos patrones de uso f\u00e1cilmente compatibles con la configuraci\u00f3n predeterminada:</p> <ul> <li>Limita a los usuarios comunes a esquemas privados de  usuario. Para implementar este patr\u00f3n, primero aseg\u00farese de que ninguna  esquema tiene p\u00fablico  <code>CREATE</code>privilegios. Luego, para cada usuario que necesite crear objetos no temporales, cree un esquema con el mismo nombre que ese usuario, por ejemplo <code>CREATE SCHEMA alice AUTHORIZATION alice</code>. (Recuerde que la ruta de b\u00fasqueda predeterminada comienza con <code>$user</code>, que se resuelve al nombre de usuario. Por lo tanto, si cada usuario  tiene un esquema separado, accede a sus propios esquemas por defecto.)  Este patr\u00f3n es un patr\u00f3n de uso de esquema seguro a menos que un usuario desconfiado sea el propietario de la base de datos o se le haya  concedido  <code>ADMIN OPTION</code>en un papel relevante, en cuyo caso no existe un patr\u00f3n seguro de uso de esquemas.</li> </ul> <p>En PostgreSQL 15 y posterior, la configuraci\u00f3n predeterminada soporta este patr\u00f3n de  uso. En versiones anteriores, o cuando se utiliza una base de datos que  ha sido actualizada de una versi\u00f3n anterior, tendr\u00e1 que eliminar al  p\u00fablico  <code>CREATE</code>privilegio del  <code>public</code>esquema (escuado <code>REVOKE CREATE ON SCHEMA public FROM PUBLIC</code>). Entonces considera la posibilidad de auditar la  <code>public</code>esquema de objetos llamados como objetos en esquema <code>pg_catalog</code>.</p> <ul> <li> <p>Retire el esquema p\u00fablico de la ruta de b\u00fasqueda predeterminada, modificando  <code>postgresql.conf</code>o mediante la expedici\u00f3n <code>ALTER ROLE ALL SET search_path = \"$user\"</code>. Entonces, otorga privilegios para crear en el esquema p\u00fablico. S\u00f3lo los nombres calificados elegir\u00e1n objetos de esquema p\u00fablicos. Aunque las  referencias de tablas calificadas est\u00e1n bien, las llamadas a funciones  en el esquema p\u00fablico ser\u00e1n inseguras o poco confiables. Si crea funciones o extensiones en el esquema p\u00fablico, utilice el  primer patr\u00f3n en su lugar. De lo contrario, al igual que el primer  patr\u00f3n, esto es seguro a menos que un usuario desconfiado sea el  propietario de la base de datos o se le haya concedido  <code>ADMIN OPTION</code>en un papel relevante.</p> </li> <li> <p>Mantenga la ruta de b\u00fasqueda predeterminada y conceda  privilegios para crear en el esquema p\u00fablico. Todos los usuarios acceden impl\u00edcitamente al esquema p\u00fablico. Esto simula la situaci\u00f3n en la que  las esquemas no est\u00e1n disponibles en absoluto, dando una transici\u00f3n  suave del mundo no consciente del software. Sin embargo, esto nunca es  un patr\u00f3n seguro. Es aceptable s\u00f3lo cuando la base de datos tiene un  solo usuario o unos pocos usuarios de confianza mutua. En bases de datos actualizadas de PostgreSQL 14 o anteriores, esto es el valor predeterminado.</p> </li> </ul> <p>Para cualquier patr\u00f3n, para instalar aplicaciones compartidas  (tableros para ser utilizados por todos, funciones adicionales  proporcionadas por terceros, etc.), ponerlas en esquemas separados.  Recuerde conceder privilegios adecuados para permitir que los otros  usuarios accedan a ellos. Los usuarios pueden referirse a estos objetos  adicionales calebando los nombres con un nombre de esquema, o pueden  poner los esquemas adicionales en su ruta de b\u00fasqueda, como ellos  elijan.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/09.-Esquemas/07.-Portabilidad/","title":"07.-Portabilidad","text":"<p>En el est\u00e1ndar SQL, la noci\u00f3n de objetos en el mismo esquema que son  propiedad de diferentes usuarios no existe. Adem\u00e1s, algunas  implementaciones no le permiten crear esquemas que tienen un nombre  diferente al de su propietario. De hecho, los conceptos de esquema y  usuario son casi equivalentes en un sistema de base de datos que  implementa s\u00f3lo el soporte b\u00e1sico de esquema especificado en la norma.  Por lo tanto, muchos usuarios consideran que los nombres calificados  consisten realmente en <code>*</code>user_name<code>*.*</code>table_name<code>*</code>. As\u00ed se comportar\u00e1 PostgreSQL si crea un esquema por usuario para cada usuario.</p> <p>Adem\u00e1s, no hay un concepto de  <code>public</code>esquema en el est\u00e1ndar SQL. Para la m\u00e1xima conformidad con el est\u00e1ndar, no debe utilizar el  <code>public</code>esquema.</p> <p>Por supuesto, algunos sistemas de bases de datos SQL podr\u00edan no  implementar esquemas en absoluto, o proporcionar soporte de espacio de  nombres permitiendo (posiblemente limitado) acceso a base de datos. Si  necesita trabajar con esos sistemas, entonces la portabilidad m\u00e1xima se  lograr\u00eda por no usar esquemas en absoluto.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/10.-Herencia/","title":"Index","text":"<p>PostgreSQL implementa la herencia de tabla, que puede ser una herramienta \u00fatil  para los dise\u00f1adores de bases de datos. (SQL:1999 y m\u00e1s tarde definir  una caracter\u00edstica de herencia de tipo, que difiere en muchos aspectos  de las caracter\u00edsticas descritas aqu\u00ed.)</p> <p>Empecemos por un ejemplo: supongamos que estamos tratando de  construir un modelo de datos para las ciudades. Cada estado tiene muchas ciudades, pero s\u00f3lo una capital. Queremos poder recuperar r\u00e1pidamente  la capital para cualquier estado en particular. Esto se puede hacer  creando dos mesas, una para las capitales de los estados y otra para las ciudades que no son capitales. Sin embargo, qu\u00e9 pasa cuando queremos  pedir datos sobre una ciudad, independientemente de si es una capital o  no? La caracter\u00edstica de herencia puede ayudar a resolver este problema. Definimos el  <code>capitals</code>mesa para que herede de <code>cities</code>:</p> <pre><code>CREATE TABLE ciudades (C\u00e1dCR)\n    texto de nombre,\n    flotar poblaci\u00f3n,\n    elevaci\u00f3n en los pies - en los pies\n);\n\nCapitales de la TABLA (C\u00e1dCR)\n    estado char (2)\n) INHERITS (ciudades);\n</code></pre> <p>En este caso, el  <code>capitals</code>la tabla hereda todas las columnas de su tabla matriz, <code>cities</code>. Las capitales del Estado tambi\u00e9n tienen una columna adicional, <code>state</code>, eso muestra su estado.</p> <p>En PostgreSQL, una tabla puede heredar de cero o m\u00e1s otras tablas, y una consulta  puede hacer referencia a todas las filas de una tabla o a todas las  filas de una tabla m\u00e1s todas sus tablas descendientes. Este \u00faltimo  comportamiento es el predeterminado. Por ejemplo, la siguiente consulta  encuentra los nombres de todas las ciudades, incluidas las capitales de  los estados, que se encuentran en una elevaci\u00f3n de m\u00e1s de 500 pies:</p> <pre><code>Nombre SELECT, elevaci\u00f3n\n    De las ciudades\n    La elevaci\u00f3n de D\u00f3nde sectura 500;\n</code></pre> <p>Dados los datos de la muestra del tutorial PostgreSQL (ver Secci\u00f3n 2.1), esto devuelve:</p> <pre><code>nombre de la elevaci\u00f3n\n---------------------\n Las Vegas 2174\n Mariposa - 1953\n Madison 845\n</code></pre> <p>Por otro lado, la siguiente consulta encuentra todas las ciudades  que no son capitales de estado y est\u00e1n situadas en una elevaci\u00f3n de m\u00e1s  de 500 pies:</p> <pre><code>Nombre SELECT, elevaci\u00f3n\n    De SOLO las ciudades\n    La elevaci\u00f3n de D\u00f3nde sectura 500;\n\n   nombre de la elevaci\u00f3n\n---------------------\n Las Vegas 2174\n Mariposa - 1953\n</code></pre> <p>Aqu\u00ed el  <code>ONLY</code>palabra clave indica que la consulta debe aplicarse s\u00f3lo a <code>cities</code>, y no ninguna tabla a continuaci\u00f3n  <code>cities</code>en la jerarqu\u00eda de herencias. Muchas de las \u00f3rdenes que ya hemos discutido. <code>SELECT</code>,  <code>UPDATE</code>y  <code>DELETE</code>- apoyo de la  <code>ONLY</code>Palabra clave.</p> <p>Tambi\u00e9n puede escribir el nombre de la tabla con un rastro  <code>*</code>especificar expl\u00edcitamente que se incluyen las tablas descendientes:</p> <pre><code>Nombre SELECT, elevaci\u00f3n\n    De las ciudades*\n    La elevaci\u00f3n de D\u00f3nde sectura 500;\n</code></pre> <p>Escrito  <code>*</code>no es necesario, ya que este comportamiento es siempre el defecto. Sin  embargo, esta sintaxis sigue siendo compatible para la compatibilidad  con versiones m\u00e1s antiguas donde el default podr\u00eda ser cambiado.</p> <p>En algunos casos podr\u00eda desear saber de qu\u00e9 tabla se origin\u00f3 una fila en particular. Hay una columna del sistema llamada  <code>tableoid</code>en cada tabla que pueda indicarle el cuadro de origen:</p> <pre><code>SELECT c.tableoid, c.name, c.elevation\nDe las ciudades c\nDONDE c.elevation no 500;\n</code></pre> <p>que devuelve:</p> <pre><code>tableoide . . . . . . . .\n-----------------------------------------\n   139793 . Las Vegas . 2174\n   139793 . Mariposa . 1953\n   139798 - Madison 845\n</code></pre> <p>(Si intentas reproducir este ejemplo, probablemente obtendr\u00e1s diferentes OID num\u00e9ricos.) Haciendo unirse con  <code>pg_class</code>puede ver los nombres de tabla reales:</p> <pre><code>SELECT p.relname, c.name, c.elevation\nDe las ciudades c, pg.class p\nDONDE c.elevation - 500 AND c.tableoid = p.oid;\n</code></pre> <p>que devuelve:</p> <pre><code>renombre de nombre, elevaci\u00f3n de nombre\n-----------------------------------------\n ciudades de Las Vegas\n ciudades de Mariposa - 1953\n capitales de Madison 845\n</code></pre> <p>Otra forma de obtener el mismo efecto es utilizar el  <code>regclass</code>tipo alias, que imprimir\u00e1 la tabla OID simb\u00f3licamente:</p> <pre><code>SELECT c.tableoid::regclass, c.name, c.elevation\nDe las ciudades c\nDONDE c.elevation no 500;\n</code></pre> <p>La herencia no propaga autom\u00e1ticamente los datos de  <code>INSERT</code>o o  <code>COPY</code>comando a otras tablas en la jerarqu\u00eda de herencias. En nuestro ejemplo, los siguientes  <code>INSERT</code>La declaraci\u00f3n fracasar\u00e1:</p> <pre><code>INSERT INTO ciudades (nombre, poblaci\u00f3n, elevaci\u00f3n, estado)\nVALUES ('Albany', NULL, NULL, 'NY');\n</code></pre> <p>Podr\u00edamos esperar que los datos de alguna manera se enruten a la  <code>capitals</code>mesa, pero esto no sucede:  <code>INSERT</code>siempre se inserta exactamente en la tabla especificada. En algunos casos es  posible reorientar la inserci\u00f3n mediante una norma (v\u00e9ase el cap\u00edtulo 41). Sin embargo, eso no ayuda para el caso anterior porque  <code>cities</code>mesa no contiene la columna <code>state</code>, y por lo tanto el comando ser\u00e1 rechazado antes de que la regla pueda ser aplicada.</p> <p>Todas las restricciones de control y las restricciones no nulos en  una tabla de padres son autom\u00e1ticamente heredadas por sus hijos, a menos que se especifique expl\u00edcitamente lo contrario con  <code>NO INHERIT</code>cl\u00e1usulas. Otros tipos de limitaciones (restricciones \u00fanicas, de clave primaria y de clave externa) no se heredan.</p> <p>Una tabla puede heredar de m\u00e1s de una tabla de padres, en cuyo caso tiene la uni\u00f3n de las columnas definidas por las tablas matrices. A  estas se a\u00f1aden las columnas declaradas en la definici\u00f3n de la tabla de  ni\u00f1os. Si el mismo nombre de la columna aparece en varias tablas de  padres, o tanto en una tabla de padres como en la definici\u00f3n del ni\u00f1o,  entonces estas columnas se fusionan para que s\u00f3lo haya una de esas columnas en la tabla del ni\u00f1o. Para  fusionarse, las columnas deben tener los mismos tipos de datos, de lo  contrario se plantea un error. Las restricciones de control hereditaria y las limitaciones no-nulas se fusionan de una manera similar. As\u00ed, por  ejemplo, una columna fusionada no se marcar\u00e1 nill si alguna de las  definiciones de columna de las que procede est\u00e1 marcada no en mosquida.  Las restricciones de cheques se fusionan si tienen el mismo nombre, y la fusi\u00f3n fallar\u00e1 si sus condiciones son diferentes.</p> <p>La herencia de tabla se establece t\u00edpicamente cuando se crea la tabla de ni\u00f1os, utilizando la  <code>INHERITS</code>cl\u00e1usula de la  <code>CREATE TABLE</code>declaraci\u00f3n. Alternativamente, una tabla que ya est\u00e1 definida de una manera  compatible puede tener una nueva relaci\u00f3n madre a\u00f1adiendo, utilizando la  <code>INHERIT</code>variante de <code>ALTER TABLE</code>. Para ello, la nueva tabla de ni\u00f1os ya debe incluir columnas con los  mismos nombres y tipos que las columnas del padre. Tambi\u00e9n debe incluir  restricciones de control con los mismos nombres y establecer expresiones de control que las del padre. Del mismo modo, un v\u00ednculo sucesorial se  puede eliminar de un ni\u00f1o utilizando el  <code>NO INHERIT</code>variante de <code>ALTER TABLE</code>. A\u00f1adiendo y eliminando din\u00e1micamente enlaces de herencia como este  puede ser \u00fatil cuando la relaci\u00f3n de herencia se est\u00e1 utilizando para la partici\u00f3n de la tabla (ver Secci\u00f3n 5.11).</p> <p>Una forma conveniente de crear una tabla compatible que m\u00e1s tarde se har\u00e1 un nuevo hijo es utilizar el  <code>LIKE</code>cl\u00e1usula en <code>CREATE TABLE</code>. Esto crea una nueva tabla con las mismas columnas que la tabla de fuentes. Si hay alguno  <code>CHECK</code>las limitaciones definidas en el cuadro de fuentes,  <code>INCLUDING CONSTRAINTS</code>opci\u00f3n a  <code>LIKE</code>debe especificarse, ya que el nuevo hijo debe tener limitaciones que coinijan al padre para ser considerado compatible.</p> <p>Una mesa de padres no puede ser deprimida mientras alguno de sus  hijos permanezca. Tampoco se pueden retirar o alterar las limitaciones  de las tablas infantiles si se heredan de las tablas de padres. Si desea quitar una mesa y todos sus descendientes, una manera f\u00e1cil es dejar la mesa madre con el  <code>CASCADE</code>Opci\u00f3n (v\u00e9ase la secci\u00f3n 5.14).</p> <p><code>ALTER TABLE</code>propagar\u00e1 cualquier cambio en las definiciones de datos de columnas y comprobar\u00e1  las restricciones a la jerarqu\u00eda de herencias. Una vez m\u00e1s, la ca\u00edda de  columnas de las que dependen de otras tablas s\u00f3lo es posible cuando se  utiliza el  <code>CASCADE</code>opci\u00f3n.  <code>ALTER TABLE</code>sigue las mismas reglas para la fusi\u00f3n y rechazo de columnas duplicadas que se aplican durante <code>CREATE TABLE</code>.</p> <p>Las consultas heredan realizan controles de permiso de acceso s\u00f3lo en la mesa madre. As\u00ed, por ejemplo, la concesi\u00f3n  <code>UPDATE</code>permiso en el  <code>cities</code>tabla implica permiso para actualizar filas en el  <code>capitals</code>la mesa, cuando se accede a ella <code>cities</code>. Esto preserva la apariencia de que los datos est\u00e1n (tambi\u00e9n) en la tabla de padres. Pero el  <code>capitals</code>La tabla no pod\u00eda actualizarse directamente sin una subvenci\u00f3n adicional.  De manera similar, las pol\u00edticas de seguridad de la fila de los padres  (v\u00e9ase la Secci\u00f3n 5.8) se aplican a las filas procedentes de las mesas infantiles durante una  consulta heredada. Las pol\u00edticas de una tabla de ni\u00f1os, en su caso, se  aplican s\u00f3lo cuando es la tabla expl\u00edcitamente nombrada en la consulta; y en ese caso, se ignoran las pol\u00edticas adjuntas a sus padres.</p> <p>Las tablas extranjeras (v\u00e9ase la secci\u00f3n 5.12) tambi\u00e9n pueden ser parte de jerarqu\u00edas de herencia, ya sea como tablas  de padres o hijos, tal como pueden ser las tablas regulares. Si una mesa extranjera forma parte de una jerarqu\u00eda de herencias, entonces ninguna  operaci\u00f3n que no est\u00e9 respaldada por la mesa extranjera tampoco se apoya en toda la jerarqu\u00eda.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/10.-Herencia/01.-Advertencias/","title":"01.-Advertencias","text":"<p>Tenga en cuenta que no todos los comandos SQL son capaces de trabajar en jerarqu\u00edas de herencia. Comandos que se utilizan para la consulta de datos, la modificaci\u00f3n de datos o la modificaci\u00f3n de esquemas (por  ejemplo, <code>SELECT</code>, <code>UPDATE</code>, <code>DELETE</code>, la mayor\u00eda de las variantes de <code>ALTER TABLE</code>, pero no  <code>INSERT</code>o o <code>ALTER TABLE ... RENAME</code>) normalmente por defecto para incluir las tablas de ni\u00f1os y apoyar la  <code>ONLY</code>notaci\u00f3n para excluirlos. Comandos que hacen mantenimiento y sinton\u00eda de la base de datos (por ejemplo, <code>REINDEX</code>, <code>VACUUM</code>) t\u00edpicamente s\u00f3lo trabaja en mesas individuales, f\u00edsicas y no apoya la  relesi\u00f3n de las jerarqu\u00edas de herencia. El comportamiento respectivo de  cada comando individual est\u00e1 documentado en su p\u00e1gina de referencia (comandos SQL).</p> <p>Una limitaci\u00f3n seria de la caracter\u00edstica hereditaral es que los  \u00edndices (incluidas las limitaciones singulares) y las limitaciones de  clave externa s\u00f3lo se aplican a cuadros individuales, no a sus hijos de  herencia. Esto es cierto tanto en la referencia como en los aspectos  referenciados de una restricci\u00f3n de clave extranjera. As\u00ed, en el ejemplo anterior:</p> <ul> <li>Si declaramos <code>cities</code>. <code>name</code>para ser  <code>UNIQUE</code>a <code>PRIMARY KEY</code>, esto no detendr\u00eda la  <code>capitals</code>mesa de tener filas con nombres que duplican filas en <code>cities</code>. Y esas filas duplicadas aparecer\u00edan por defecto en las consultas de <code>cities</code>. De hecho, por defecto  <code>capitals</code>no tendr\u00eda ninguna restricci\u00f3n \u00fanica en absoluto, y por lo tanto podr\u00eda  contener m\u00faltiples filas con el mismo nombre. Usted podr\u00eda a\u00f1adir una  restricci\u00f3n \u00fanica a <code>capitals</code>, pero esto no impedir\u00eda la duplicaci\u00f3n en comparaci\u00f3n con <code>cities</code>.</li> <li>Del mismo modo, si precis\u00e1ramos que <code>cities</code>.  <code>name``REFERENCES</code>alguna otra tabla, esta restricci\u00f3n no se propagar\u00eda autom\u00e1ticamente a <code>capitals</code>. En este caso se podr\u00eda trabajar a su alrededor a\u00f1adiendo manualmente el mismo  <code>REFERENCES</code>restricci\u00f3n a <code>capitals</code>.</li> <li>Especificando que la columna de otra tabla  <code>REFERENCES cities(name)</code>permitir\u00eda que la otra tabla contuviera nombres de ciudades, pero no nombres de  capital. No hay una buena soluci\u00f3n para este caso.</li> </ul> <p>Algunas funcionalidades no implementadas para las jerarqu\u00edas de  herencia se implementan para la partici\u00f3n declarativa. Se necesita un  cuidado considerable para decidir si la partici\u00f3n con herencia heredada  es \u00fatil para su aplicaci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/11.-Particionado%20de%20tablas/","title":"Index","text":"<p>PostgreSQL soporta la partici\u00f3n b\u00e1sica de la tabla. Esta secci\u00f3n describe por qu\u00e9 y c\u00f3mo implementar la partici\u00f3n como parte del dise\u00f1o de su base de  datos.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/11.-Particionado%20de%20tablas/01.-Vista%20General/","title":"01.-Vista General","text":"<p>La partici\u00f3n se refiere a dividir lo que l\u00f3gicamente es una mesa  grande en piezas f\u00edsicas m\u00e1s peque\u00f1as. La partici\u00f3n puede proporcionar  varios beneficios:</p> <ul> <li>El rendimiento de la consulta se puede mejorar  dram\u00e1ticamente en ciertas situaciones, particularmente cuando la mayor\u00eda de las filas fuertemente accedidas de la tabla est\u00e1n en una sola  partici\u00f3n o un peque\u00f1o n\u00famero de particiones. Particionar efectivamente  sustituye a los niveles superiores de los \u00edndices de los \u00e1rboles, lo que hace m\u00e1s probable que las partes muy utilizadas de los \u00edndices encaen  en la memoria.</li> <li>Cuando las consultas o actualizaciones acceden a un gran  porcentaje de una sola partici\u00f3n, el rendimiento se puede mejorar  mediante el uso de un escaneo secuencial de esa partici\u00f3n en lugar de  usar un \u00edndice, que requerir\u00eda lecturas de acceso aleatorio dispersas  por toda la tabla.</li> <li>Cargas a granel y eliminaciones se pueden lograr agregando o eliminando particiones, si el patr\u00f3n de uso se cuenta en el dise\u00f1o de  partici\u00f3n. Dej\u00e1ndose una partici\u00f3n individual usando <code>DROP TABLE</code>, o haciendo <code>ALTER TABLE DETACH PARTITION</code>, es mucho m\u00e1s r\u00e1pido que una operaci\u00f3n a granel. Estos comandos tambi\u00e9n evitan por completo el  <code>VACUUM</code>sobre la cabeza causada por un volumen <code>DELETE</code>.</li> <li>Los datos pocas usados pueden ser migrados a medios de almacenamiento m\u00e1s baratos y lentos.</li> </ul> <p>Normalmente, estos beneficios s\u00f3lo valdr\u00e1n la pena cuando una  tabla ser\u00eda muy grande. El punto exacto en el que una tabla se  beneficiar\u00e1 de la partici\u00f3n depende de la aplicaci\u00f3n, aunque una regla  general es que el tama\u00f1o de la tabla debe exceder la memoria f\u00edsica del  servidor de base de datos.</p> <p>PostgreSQL ofrece soporte integrado para las siguientes formas de partici\u00f3n:</p> <ul> <li>Partici\u00f3n del rango</li> </ul> <p>\u200b          La tabla se divide en rangos de . definido por una columna de tecla o conjunto de columnas, sin superposici\u00f3n  entre los rangos de valores asignados a diferentes particiones. Por  ejemplo, uno podr\u00eda dividirse por rangos de fecha, o por rangos de  identificadores para objetos comerciales particulares. Los l\u00edmites de  cada rango se entienden como inclusivos en el extremo inferior y  exclusivo en el extremo superior. Por ejemplo, si el rango de una  partici\u00f3n es de  <code>1</code>a <code>10</code>, y el siguiente rango es de  <code>10</code>a <code>20</code>, entonces valor  <code>10</code>pertenece a la segunda partici\u00f3n no la primera.        </p> <ul> <li>Lista Partici\u00f3n de la Lista</li> </ul> <p>\u200b          La tabla se divide por listado expl\u00edcitamente qu\u00e9 valor de clave (s) aparecen en cada partici\u00f3n.        </p> <ul> <li>Hash Partitioning</li> </ul> <p>\u200b          La tabla se partita especificando un m\u00f3dulo y un resto para cada partici\u00f3n. Cada partici\u00f3n sostur\u00e1 las filas para las cuales el  valor de hash de la clave de partici\u00f3n dividido por el m\u00f3dulo  especificado producir\u00e1 el resto especificado.        </p> <p>Si su aplicaci\u00f3n necesita utilizar otras formas de partici\u00f3n no enumeradas anteriormente, m\u00e9todos alternativos como herencia y  <code>UNION ALL</code>Las vistas se pueden utilizar en su lugar. Estos m\u00e9todos ofrecen  flexibilidad, pero no tienen algunos de los beneficios de la partici\u00f3n  declarativa incorporada.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/11.-Particionado%20de%20tablas/04.-Partici%C3%B3n%20de%20poda/","title":"04.-Partici\u00f3n de poda","text":"<p>La poda de partici\u00f3n es una t\u00e9cnica de optimizaci\u00f3n de consultas que mejora el rendimiento de las tablas de partici\u00f3n declarativamente. Por ejemplo:</p> <pre><code>SET enable-partition-pruning = on; -- el valor predeterminado\nSELECT count(*) DESDE medici\u00f3n DONDE logdate .= FECHA '2008-01-01';\n</code></pre> <p>Sin poda de partici\u00f3n, la consulta anterior escanear\u00eda cada una de las particiones de la  <code>measurement</code>mesa. Con la poda de partici\u00f3n activada, el planificador examinar\u00e1 la  definici\u00f3n de cada partici\u00f3n y demostrar\u00e1 que la partici\u00f3n no necesita  ser escaneada porque no pudo contener ninguna fila que se haya reunido  con la consulta de la consulta  <code>WHERE</code>cl\u00e1usula. Cuando el planificador puede probar esto, excluye (prunes) la partici\u00f3n del plan de consulta.</p> <p>Mediante el uso del comando EXPLAIN y el par\u00e1metro de configuraci\u00f3n de la partpartici\u00f3n, es posible mostrar la diferencia entre un plan para el que se han  podado particiones y para la que no tienen. Un plan t\u00edpico  des-optimizado para este tipo de configuraci\u00f3n de tabla es:</p> <pre><code>SET enable-partition-pruning = off;\nConteo EXPLAIN SELECT(*) DESDE Medici\u00f3n DONDE logdate .= FECHA '2008-01-01';\n                                    QUERY PLAN\n--------------------------------------------------------------------------------------------------------------\n Agregado (costo=188.76..188.77 filas=1 anchura=8)\n   - Aprobado (costo=0,00,181,05 hileras=3085 anchura=0)\n         ---Sq Scan on measurement-y2006m02 (costo=0.00,0,.33.12 filas=617 width=0)\n               Filtrar: (logdate .= '2008-01-01':date)\n         - Seq Scan en medida-y2006m03 (costo=0.00,.33.12 hileras=617 anchura=0)\n               Filtrar: (logdate .= '2008-01-01':date)\n...\n         ---- Seq Scan en medida-y2007m11 (costo=0.00,03,33,12 filas=617 ancho=0)\n               Filtrar: (logdate .= '2008-01-01':date)\n         --- Seq Scan en medida-y2007m12 (costo=0,00,.33.12 filas=617 anchura=0)\n               Filtrar: (logdate .= '2008-01-01':date)\n         ---- Seq Scan en la medida-y2008m01 (costo=0.00,.33.12 hileras=617 ancho=0)\n               Filtrar: (logdate .= '2008-01-01':date)\n</code></pre> <p>Algunas o todas las particiones pueden utilizar escaneos de  \u00edndice en lugar de escaneos secuenciales de mesa completa, pero el punto aqu\u00ed es que no hay necesidad de escanear las particiones m\u00e1s antiguas  para responder a esta consulta. Cuando habilitamos la poda de partici\u00f3n, conseguimos un plan significativamente m\u00e1s barato que entregar\u00e1 la  misma respuesta:</p> <pre><code>SET enable.partition-pruning = on;\nConteo EXPLAIN SELECT(*) DESDE Medici\u00f3n DONDE logdate .= FECHA '2008-01-01';\n                                    QUERY PLAN\n--------------------------------------------------------------------------------------------------------------\n Agregado (costo=37.75..37.76 hileras de ancho=8)\n   ---- Seq Scan en la medida-y2008m01 (costo=0.00,.33.12 hileras=617 ancho=0)\n         Filtrar: (logdate .= '2008-01-01':date)\n</code></pre> <p>Tenga en cuenta que la poda de partici\u00f3n es impulsada s\u00f3lo por  las restricciones definidas impl\u00edcitamente por las teclas de partici\u00f3n,  no por la presencia de \u00edndices. Por lo tanto, no es necesario definir  \u00edndices en las columnas clave. Si un \u00edndice necesita ser creado para una partici\u00f3n dada depende de si usted espera que las consultas que  escanean la partici\u00f3n generalmente escanear\u00e1 una gran parte de la  partici\u00f3n o s\u00f3lo una peque\u00f1a parte. Un \u00edndice ser\u00e1 \u00fatil en este \u00faltimo  caso, pero no en el primero.</p> <p>La partici\u00f3n de poda se puede realizar no s\u00f3lo durante la  planificaci\u00f3n de una consulta dada, sino tambi\u00e9n durante su ejecuci\u00f3n.  Esto es \u00fatil ya que puede permitir que se poden m\u00e1s particiones cuando  las cl\u00e1usulas contienen expresiones cuyos valores no se conocen en el  tiempo de planificaci\u00f3n de consultas, por ejemplo, par\u00e1metros definidos  en un  <code>PREPARE</code>declaraci\u00f3n, utilizando un valor obtenido de una subquer\u00eda, o usando un valor  parametizado en el lado interno de un bucle anidado se une. La poda de  partici\u00f3n durante la ejecuci\u00f3n se puede realizar en cualquiera de los  siguientes momentos:</p> <ul> <li>Durante la inicializaci\u00f3n del plan de consulta. La  partici\u00f3n de la poda se puede realizar aqu\u00ed para los valores de  par\u00e1metros que se conocen durante la fase inicializaci\u00f3n de la  ejecuci\u00f3n. Las particiones que se poden durante esta etapa no aparecer\u00e1n en la consulta  <code>EXPLAIN</code>o o <code>EXPLAIN ANALYZE</code>. Es posible determinar el n\u00famero de tabiques que fueron removidas durante esta fase mediante la observaci\u00f3n de la Subplans Removedpropiedad de los subplanes retirados en la  <code>EXPLAIN</code>salida.</li> <li>Durante la ejecuci\u00f3n real del plan de consulta. La  partici\u00f3n de poda tambi\u00e9n se puede realizar aqu\u00ed para eliminar las  particiones utilizando valores que s\u00f3lo se conocen durante la ejecuci\u00f3n  de consultas reales. Esto incluye valores de subcoquer\u00edas y valores de  par\u00e1metros de tiempo de ejecuci\u00f3n como los de lazo anidado parametrado  se une. Dado que el valor de estos par\u00e1metros puede cambiar muchas veces durante la ejecuci\u00f3n de la consulta, la poda de partici\u00f3n se realiza  cada vez que uno de los par\u00e1metros de ejecuci\u00f3n que se utiliza por los  cambios de poda de partici\u00f3n. Determinar si las particiones fueron  podadas durante esta fase requiere una inspecci\u00f3n cuidadosa de la  <code>loops</code>propiedad en el  <code>EXPLAIN ANALYZE</code>salida. Los subplanes correspondientes a diferentes particiones pueden tener  diferentes valores para ello dependiendo de cu\u00e1ntas veces cada uno de  ellos fue podado durante la ejecuci\u00f3n. Algunos pueden ser mostrados como  <code>(never executed)</code>si eran podados cada vez.</li> </ul> <p>La poda de partici\u00f3n se puede desactivar mediante la configuraci\u00f3n de la partici\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/11.-Particionado%20de%20tablas/05.-Partici%C3%B3n%20y%20restricci%C3%B3n%20de%20la%20exclusi%C3%B3n/","title":"05.-Partici\u00f3n y restricci\u00f3n de la exclusi\u00f3n","text":"<p>La exclusi\u00f3n de restricci\u00f3n es una t\u00e9cnica de optimizaci\u00f3n de consultas similar a la poda de  partici\u00f3n. Si bien se utiliza principalmente para la partici\u00f3n  implementada utilizando el m\u00e9todo de herencia heredado, se puede  utilizar para otros fines, incluso con partici\u00f3n declarativa.</p> <p>La exclusi\u00f3n de restricci\u00f3n funciona de una manera muy similar a la poda de la partici\u00f3n, excepto que utiliza la de cada tabla  <code>CHECK</code>restricciones que le dan su nombre, mientras que la poda de partici\u00f3n utiliza los  l\u00edmites de partici\u00f3n de la tabla, que existen s\u00f3lo en el caso de la  partici\u00f3n declarativa. Otra diferencia es que la exclusi\u00f3n de  restricci\u00f3n s\u00f3lo se aplica en el tiempo del plan; no hay ning\u00fan intento  de eliminar las particiones en el momento de la ejecuci\u00f3n.</p> <p>El hecho de que la exclusi\u00f3n de restricci\u00f3n utiliza  <code>CHECK</code>restricciones, lo que hace que sea lento en comparaci\u00f3n con la poda de la partici\u00f3n, a veces se pueden utilizar como una ventaja: porque las restricciones se  pueden definir incluso en tablas de partici\u00f3n declarativamente, adem\u00e1s  de sus l\u00edmites internos de la partici\u00f3n, la exclusi\u00f3n de restricciones  puede ser capaz de eliminaci\u00f3n adicional del plan de consulta.</p> <p>La fijaci\u00f3n por defecto (y recomendada) de la restricci\u00f3n. <code>on</code>ni <code>off</code>, pero un ajuste intermedio llamado <code>partition</code>, lo que hace que la t\u00e9cnica se aplique \u00fanicamente a las consultas que  probablemente est\u00e9n trabajando en tablas divididas en herencia. El  <code>on</code>el establecimiento hace que el planificador examine  <code>CHECK</code>limitaciones en todas las consultas, incluso simples que es poco probable que se beneficien.</p> <p>Las siguientes advertencias se aplican a la exclusi\u00f3n de las restricciones:</p> <ul> <li>La exclusi\u00f3n de restricci\u00f3n s\u00f3lo se aplica durante la  planificaci\u00f3n de la consulta, a diferencia de la poda de partici\u00f3n, que  tambi\u00e9n se puede aplicar durante la ejecuci\u00f3n de la consulta.</li> <li>La exclusi\u00f3n descarriada s\u00f3lo funciona cuando la consulta  <code>WHERE</code>la cl\u00e1usula contiene constantes (o par\u00e1metros suministrados externamente). Por ejemplo, una comparaci\u00f3n con una funci\u00f3n no inmutable, tales como  <code>CURRENT_TIMESTAMP</code>no se puede optimizar, ya que el planificador no puede saber en qu\u00e9 tabla  infantil el valor de la funci\u00f3n podr\u00eda caer en el tiempo de ejecuci\u00f3n.</li> <li>Mantenga las restricciones de partici\u00f3n simples, de lo  contrario el planificador puede no ser capaz de probar que las tablas  infantiles podr\u00edan no necesitar ser visitadas. Util\u00edce condiciones de  igualdad simples para la partici\u00f3n de listas, o pruebas de rango simples para la partici\u00f3n de rango, como se ilustra en los ejemplos anteriores. Una buena regla general es que las restricciones de partici\u00f3n deben  contener s\u00f3lo comparaciones de la columna de partici\u00f3n (s) a las  constantes utilizando operadores indexables de B-tree, porque s\u00f3lo se  permiten columnas indexables B-tree en la tecla de partici\u00f3n.</li> <li>Todas las limitaciones de todos los hijos de la mesa matriz se examinan durante la exclusi\u00f3n de las restricciones, por lo que es  probable que un gran n\u00famero de ni\u00f1os aumente considerablemente el tiempo de planificaci\u00f3n de consultas. As\u00ed que la partici\u00f3n basada en la  herencia heredada funcionar\u00e1 bien con hasta tal vez cien mesas  infantiles; no trates de usar muchos miles de ni\u00f1os.</li> </ul>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/11.-Particionado%20de%20tablas/06.-Buenas%20pr%C3%A1cticas%20para%20la%20partici%C3%B3n%20declarativa/","title":"06.-Buenas pr\u00e1cticas para la partici\u00f3n declarativa","text":"<p>La elecci\u00f3n de c\u00f3mo dividir una tabla debe hacerse cuidadosamente, ya que el rendimiento de la planificaci\u00f3n de consultas y la ejecuci\u00f3n  puede verse afectado negativamente por el mal dise\u00f1o.</p> <p>Una de las decisiones de dise\u00f1o m\u00e1s cr\u00edticas ser\u00e1 la columna o  columnas con las que se dividen sus datos. A menudo la mejor opci\u00f3n ser\u00e1 la partici\u00f3n por la columna o conjunto de columnas que m\u00e1s com\u00fanmente  aparecen en  <code>WHERE</code>cl\u00e1usulas de consultas que se ejecutan en la tabla dividida.  <code>WHERE</code>cl\u00e1usulas que sean compatibles con las restricciones de l\u00edmites de partici\u00f3n se  pueden utilizar para podar particiones innecesarias. Sin embargo, puede  ser obligado a tomar otras decisiones por los requisitos para la  <code>PRIMARY KEY</code>a  <code>UNIQUE</code>la restricci\u00f3n. La eliminaci\u00f3n de datos no deseados tambi\u00e9n es un factor a considerar al planificar su estrategia de partici\u00f3n. Toda una partici\u00f3n se puede separar bastante r\u00e1pidamente, por lo que puede ser beneficioso dise\u00f1ar la estrategia de partici\u00f3n de tal manera que todos los datos  que se eliminen a la vez se encuentran en una sola partici\u00f3n.</p> <p>Elegir el n\u00famero objetivo de particiones en las que la tabla debe dividirse tambi\u00e9n es una decisi\u00f3n cr\u00edtica a tomar. No tener suficientes particiones puede significar que los \u00edndices sigan siendo demasiado  grandes y que la localidad de datos siga siendo pobre, lo que podr\u00eda  resultar en bajos ratios de \u00e9xito en cach\u00e9. Sin embargo, dividir la  tabla en demasiadas particiones tambi\u00e9n puede causar problemas.  Demasiadas particiones pueden significar tiempos de planificaci\u00f3n de  consultas m\u00e1s largos y un mayor consumo de memoria durante la  planificaci\u00f3n y ejecuci\u00f3n de consultas, como se describe m\u00e1s adelante.  Al elegir c\u00f3mo dividir su tabla, tambi\u00e9n es importante considerar qu\u00e9  cambios pueden ocurrir en el futuro. Por ejemplo, si usted elige tener  una partici\u00f3n por cliente y actualmente tiene un peque\u00f1o n\u00famero de  grandes clientes, considere las implicaciones si en varios a\u00f1os se  encuentra con un gran n\u00famero de peque\u00f1os clientes. En este caso, puede  ser mejor elegir la partici\u00f3n por  <code>HASH</code>y elegir un n\u00famero razonable de particiones en lugar de tratar de particionar por  <code>LIST</code>y esperando que el n\u00famero de clientes no aumente m\u00e1s all\u00e1 de lo que es pr\u00e1ctico para particionar los datos.</p> <p>La sub-partici\u00f3n puede ser \u00fatil para dividir a\u00fan m\u00e1s las  particiones que se espera que se multitilmente se generalemen que otras  particiones. Otra opci\u00f3n es usar partici\u00f3n de rango con m\u00faltiples  columnas en la tecla de partici\u00f3n. Cualquiera de estos puede conducir  f\u00e1cilmente a un n\u00famero excesivo de particiones, por lo que la  restricci\u00f3n es aconsejable.</p> <p>Es importante considerar la parte superior de la partici\u00f3n  durante la planificaci\u00f3n y ejecuci\u00f3n de consultas. El planificador de  consultas es generalmente capaz de manejar jerarqu\u00edas de partici\u00f3n con  hasta unos pocos miles de particiones bastante bien, siempre que las  consultas t\u00edpicas permitan al planificador de consultas podar todo menos un peque\u00f1o n\u00famero de particiones. Los tiempos de planificaci\u00f3n se hacen m\u00e1s largos y el consumo de memoria se hace m\u00e1s alto cuando quedan m\u00e1s  particiones despu\u00e9s de que el planificador realiza la poda de  particiones. Otra raz\u00f3n para preocuparse por tener un gran n\u00famero de  particiones es que el consumo de memoria del servidor puede crecer  significativamente con el tiempo, especialmente si muchas sesiones tocan un gran n\u00famero de particiones. Esto se debe a que cada partici\u00f3n  requiere que sus metadatos se carguen en la memoria local de cada sesi\u00f3n que lo toca.</p> <p>Con las cargas de trabajo tipo de almac\u00e9n de datos, puede tener sentido utilizar un mayor n\u00famero de tabiques que con un  OLTPcarga de trabajo de tipo. En general, en los almacenes de datos, el tiempo de planificaci\u00f3n de la consulta es menos preocupante, ya que la mayor  parte del tiempo de procesamiento se pasa durante la ejecuci\u00f3n de  consultas. Con cualquiera de estos dos tipos de carga de trabajo, es  importante tomar las decisiones correctas antes de tiempo, ya que la  repartici\u00f3n de grandes cantidades de datos puede ser dolorosamente  lenta. Las simulaciones de la carga de trabajo prevista suelen ser  beneficiosas para optimizar la estrategia de partici\u00f3n. Nunca asuma que  m\u00e1s particiones son mejores que menos particiones, ni viceversa.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/11.-Particionado%20de%20tablas/02.-Partici%C3%B3n%20declarativa/","title":"Index","text":"<p>PostgreSQL le permite declarar que una tabla se divide en particiones. La tabla que se divide se conoce como una tabla dividida. La declaraci\u00f3n incluye el m\u00e9todo de partici\u00f3n como se describe anteriormente, m\u00e1s una lista de columnas o expresiones para ser usadas como la clave de partici\u00f3n.</p> <p>La mesa dividida en s\u00ed es una virtualtabla virtual que no tiene almacenamiento propio. En su lugar, el almacenamiento pertenece a las particiones, que son tablas ordinarias asociadas con la tabla dividida. Cada partici\u00f3n almacena un subconjunto de los datos definido por sus . Todas las filas insertadas en una tabla dividida se enrutar\u00e1n a la  apropiada de las particiones en funci\u00f3n de los valores de las columnas  de la tecla de partici\u00f3n (s). Actualizaci\u00f3n de la tecla de partici\u00f3n de  una fila har\u00e1 que se muede en una partici\u00f3n diferente si ya no satisface los l\u00edmites de partici\u00f3n de su partici\u00f3n original.</p> <p>Las particiones pueden definirse a s\u00ed mismas como tablas divididas, lo que resulta en sub-partici\u00f3n. Aunque todas las particiones deben tener las mismas columnas que su  padre dividido, las particiones pueden tener sus propios \u00edndices,  restricciones y valores por defecto, distintos de los de otras  particiones. Ver CREATE TABLE para m\u00e1s detalles sobre la creaci\u00f3n de tablas y particiones divididas.</p> <p>No es posible convertir una mesa regular en una tabla dividida o  viceversa. Sin embargo, es posible a\u00f1adir una tabla regular o  particionar existente como una partici\u00f3n de una tabla dividida, o  eliminar una partici\u00f3n de una tabla dividida convirti\u00e9ndola en una mesa  independiente; esto puede simplificar y acelerar muchos procesos de  mantenimiento. Ver ALTER TABLE para obtener m\u00e1s informaci\u00f3n sobre el  <code>ATTACH PARTITION</code>y  <code>DETACH PARTITION</code>subcomandos.</p> <p>Las particiones tambi\u00e9n pueden ser tablas extranjeras, aunque se necesita un cuidado considerable porque entonces es  responsabilidad del usuario que el contenido de la tabla exterior  satisfaga la regla de partici\u00f3n. Tambi\u00e9n hay otras restricciones. Vea CREATE FOREIGN TABLE para m\u00e1s informaci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/11.-Particionado%20de%20tablas/02.-Partici%C3%B3n%20declarativa/01.-Ejemplo/","title":"01.-Ejemplo","text":"<p>Supongamos que estamos construyendo una base de datos para una gran  compa\u00f1\u00eda de helados. La compa\u00f1\u00eda mide las temperaturas m\u00e1ximas cada d\u00eda, as\u00ed como las ventas de helados en cada regi\u00f3n. Conceptualmente,  queremos una mesa como:</p> <pre><code>CREATE TABLE medici\u00f3n (\n    ciudad-id int no null,\n    fecha de registro no nula,\n    de pico en el int,\n    unidadesales int\n);\n</code></pre> <p>Sabemos que la mayor\u00eda de las consultas acceder\u00e1n a los datos  de la semana pasada, mes o trimestre, ya que el uso principal de esta  tabla ser\u00e1 preparar informes en l\u00ednea para la gesti\u00f3n. Para reducir la  cantidad de datos antiguos que necesita ser almacenado, decidimos  conservar s\u00f3lo los datos m\u00e1s recientes de 3 a\u00f1os. Al principio de cada  mes eliminaremos los datos del mes m\u00e1s antiguo. En esta situaci\u00f3n  podemos utilizar particiones para ayudarnos a cumplir con todos nuestros diferentes requisitos para la tabla de mediciones.</p> <p>Para utilizar la partici\u00f3n declarativa en este caso, utilice los siguientes pasos:</p> <ol> <li>Crear la  <code>measurement</code>tabla como tabla dividida especificando el  <code>PARTITION BY</code>cl\u00e1usula, que incluye el m\u00e9todo de partici\u00f3n ( <code>RANGE</code>en este caso) y la lista de columnas para usar como la clave de partici\u00f3n.</li> </ol> <p><code>CREATE TABLE medici\u00f3n (        ciudad-id int no null,        fecha de registro no nula,        de pico en el int,        unidadesales int    ) PARTITION BY RANGE (fecha de sesi\u00f3n);</code></p> <ol> <li>Crea particiones. La definici\u00f3n de cada partici\u00f3n debe  especificar los l\u00edmites que corresponden al m\u00e9todo de partici\u00f3n y la  clave de partici\u00f3n del padre. Tenga en cuenta que especificar los  l\u00edmites tales que los valores de la nueva partici\u00f3n se superpondr\u00edan con los de una o m\u00e1s particiones existentes causar\u00e1 un error.</li> </ol> <p>Las particiones as\u00ed creadas son en todos los sentidos mesas de PostgreSQL normales (o, posiblemente, mesas extranjeras). Es posible especificar  un espacio de mesa y par\u00e1metros de almacenamiento para cada partici\u00f3n  por separado.</p> <p>Para nuestro ejemplo, cada partici\u00f3n debe tener un mes de datos, para que coinja con el requisito de borrar los datos de un mes a la vez. As\u00ed que los comandos podr\u00edan parecer:</p> <p>```    CREATE TABLE measurementy2006m02 PARTITION OF Measurement        PARA VALORS FROM ('2006-02-01') A ('2006-03-01');</p> <p>CREATE TABLE measurement.y2006m03 PARTITION OF Measurement        PARA VALORS FROM ('2006-03-01') A ('2006-04-01');</p> <p>...    CREATE TABLE measurement.y2007m11 PARTITION OF Measurement        PARA VALORS DE ('2007-11-01') A ('2007-12-01');</p> <p>CREATE TABLE measurement.y2007m12 PARTITION OF measurement        PARA VALORS DESDE ('2007-12-01') A ('2008-01-01')        Espacio de TABLESPACE de r\u00e1pida.</p> <p>CREATE TABLE measurementy2008m01 PARTITION OF Measurement        PARA VALORS DES ('2008-01-01') A ('2008-02-01')        CON (paralelos-trabaceros = 4)        Espacio de TABLESPACE de r\u00e1pida.    ```</p> <p>(Recorde que las particiones adyacentes pueden compartir  un valor encuade, ya que los l\u00edmites superiores de rango se tratan como  l\u00edmites exclusivos.)</p> <p>Si desea implementar la sub-partici\u00f3n, especifique de nuevo el  <code>PARTITION BY</code>cl\u00e1usula en los comandos utilizados para crear particiones individuales, por ejemplo:</p> <p><code>CREATE TABLE measurementy2006m02 PARTITION OF Measurement        PARA VALORS DESDE ('2006-02-01') A ('2006-03-01')        PARTICION POR RANGE (pico de humo);</code></p> <p>Despu\u00e9s de crear particiones de <code>measurement_y2006m02</code>, cualquier dato insertado en  <code>measurement</code>que est\u00e1 mapeado a  <code>measurement_y2006m02</code>(o datos que se insertan directamente en <code>measurement_y2006m02</code>, que est\u00e1 permitido siempre que su restricci\u00f3n de partici\u00f3n se  satisfaga) se redirlar\u00e1 a\u00fan m\u00e1s a una de sus particiones en funci\u00f3n de  la  <code>peaktemp</code>columnas. La clave de partici\u00f3n especificada puede solaparse con la clave de  partici\u00f3n del padre, aunque se debe tener cuidado cuando se especifican  los l\u00edmites de una subpartici\u00f3n de tal manera que el conjunto de datos  que acepta constituye un subconjunto de lo que los propios l\u00edmites de la partici\u00f3n permiten; el sistema no intenta comprobar si ese es realmente el caso.</p> <p>Insertar datos en la tabla matriz que no mapear\u00e1 una de  las particiones existentes causar\u00e1 un error; se debe a\u00f1adir una  partici\u00f3n apropiada manualmente.</p> <p>No es necesario crear manualmente restricciones de tabla  que describan las condiciones del l\u00edmite de partici\u00f3n para las  particiones. Tales limitaciones se crear\u00e1n autom\u00e1ticamente.</p> <ol> <li>Cree un \u00edndice en la columna clave (s), as\u00ed como  cualquier otro \u00edndice que desee, en la tabla dividida. (El \u00edndice clave  no es estrictamente necesario, pero en la mayor\u00eda de los escenarios es  \u00fatil.) Esto crea autom\u00e1ticamente un \u00edndice de coincidencia en cada  partici\u00f3n, y cualquier partici\u00f3n que cree o adita m\u00e1s tarde tambi\u00e9n  tendr\u00e1 tal \u00edndice. Un \u00edndice o restricci\u00f3n \u00fanica declarada en una tabla  dividida es virtual de la misma manera que la tabla dividida es: los datos reales est\u00e1n en los \u00edndices de ni\u00f1os en las tablas de particiones individuales.</li> </ol> <p><code>CREATE INDEX ON medici\u00f3n (fecha de blog);</code></p> <ol> <li>Aseg\u00farese de que el par\u00e1metro de configuraci\u00f3n de la partici\u00f3n no se deshabilite en <code>postgresql.conf</code>. Si lo es, las consultas no se optimizar\u00e1n como se desee.</li> </ol> <p>En el ejemplo anterior estar\u00edamos creando una nueva partici\u00f3n  cada mes, por lo que podr\u00eda ser aconsejable escribir un script que  genere el DDL requerido autom\u00e1ticamente.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/11.-Particionado%20de%20tablas/02.-Partici%C3%B3n%20declarativa/02.-Mantenimiento%20de%20particiones/","title":"02.-Mantenimiento de particiones","text":"<p>Normalmente el conjunto de particiones establecido cuando la  definici\u00f3n inicial de la tabla no est\u00e1 destinado a permanecer est\u00e1tico.  Es com\u00fan querer eliminar las particiones que sostienen datos antiguos y  agregar peri\u00f3dicamente nuevas particiones para nuevos datos. Una de las  ventajas m\u00e1s importantes de la partici\u00f3n es precisamente que permite que esta tarea por lo dem\u00e1s dolorosa se ejecute casi instant\u00e1neamente  manipulando la estructura de partici\u00f3n, en lugar de mover f\u00edsicamente  grandes cantidades de datos alrededor.</p> <p>La opci\u00f3n m\u00e1s simple para eliminar los datos antiguos es soltar la partici\u00f3n que ya no es necesaria:</p> <pre><code>DROP TABLE measurement-y2006m02;\n</code></pre> <p>Esto puede borrar muy r\u00e1pidamente millones de discos porque no  tiene que borrar individualmente cada registro. Tenga en cuenta, sin  embargo, que el comando anterior requiere tomar una  <code>ACCESS EXCLUSIVE</code>cierres en la mesa de padres.</p> <p>Otra opci\u00f3n que a menudo es preferible es eliminar la partici\u00f3n de la tabla dividida, pero mantener el acceso a ella como una tabla en  su propio derecho. Esto tiene dos formas:</p> <pre><code>ALTER TABLE measurement DETACH PARTITION measurement.y2006m02;\nALTER TABLE measurement DETACH PARTITION measurement-y2006m02 CONCURRENTLY;\n</code></pre> <p>Estos permiten realizar nuevas operaciones en los datos antes  de que se eliminen. Por ejemplo, este es a menudo un momento \u00fatil para  hacer una retroalici\u00f3n de los datos utilizando <code>COPY</code>, pg.dump, o herramientas similares. Tambi\u00e9n podr\u00eda ser un momento \u00fatil para  agregar datos en formatos m\u00e1s peque\u00f1os, realizar otras manipulaciones de datos o ejecutar informes. La primera forma del comando requiere un  <code>ACCESS EXCLUSIVE</code>cierres en la mesa de padres. A\u00f1adir el  <code>CONCURRENTLY</code>El calificante como en la segunda forma permite que la operaci\u00f3n desprendida requiera solamente  <code>SHARE UPDATE EXCLUSIVE</code>cerrar la mesa de los padres, pero vea  <code>ALTER TABLE ... DETACH PARTITION</code>para m\u00e1s detalles sobre las restricciones.</p> <p>Del mismo modo podemos a\u00f1adir una nueva partici\u00f3n para manejar  nuevos datos. Podemos crear una partici\u00f3n vac\u00eda en la tabla dividida  justo cuando se crearon las particiones originales arriba:</p> <pre><code>CREATE TABLE measurementy2008m02 PARTITION OF Measurement\n    PARA VALORS DES ('2008-02-01') A ('2008-03-01')\n    Espacio de TABLESPACE de r\u00e1pida.\n</code></pre> <p>Como alternativa, a veces es m\u00e1s conveniente crear la nueva  tabla fuera de la estructura de partici\u00f3n, y adjuntarla como una  partici\u00f3n m\u00e1s tarde. Esto permite cargar, comprobar y transformar nuevos datos antes de que aparezca en la tabla dividida. Adem\u00e1s, la  <code>ATTACH PARTITION</code>operaci\u00f3n requiere solamente  <code>SHARE UPDATE EXCLUSIVE</code>cerramiento en la mesa dividida, en contraposici\u00f3n a la  <code>ACCESS EXCLUSIVE</code>cerramiento que es requerido por <code>CREATE TABLE ... PARTITION OF</code>, por lo que es m\u00e1s amigable a las operaciones simult\u00e1neas en la tabla dividida. El  <code>CREATE TABLE ... LIKE</code>opci\u00f3n es \u00fatil para evitar repetirtediosamente la definici\u00f3n de la tabla de padres:</p> <pre><code>CREATE TABLE measurement.y2008m02\n  (Dimenci\u00f3n de la medida INCLUIDO DEFAULTOS INCLUIDO CONSTRAINTS)\n  Espacio de TABLESPACE de r\u00e1pida.\n\nALTER TABLE measurement.y2008m02 ADD CONSTRAINT y2008m02\n   CHECK (fecha de registro -= FECHA '2008-02-01' Y logdate , FECHA '2008-03-01' );\n\nMedici\u00f3n de copia de la copia R: . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n-- posiblemente alg\u00fan otro trabajo de preparaci\u00f3n de datos\n\nALTER Medici\u00f3n de mesa ATTACH PARTITION measurement.y2008m02\n    PARA VALORS DES ('2008-02-01') A ('2008-03-01' );\n</code></pre> <p>Antes de correr el  <code>ATTACH PARTITION</code>comando, se recomienda crear un  <code>CHECK</code>restricci\u00f3n en la tabla a adjuntar que coinfrace la restricci\u00f3n de partici\u00f3n  esperada, como se ilustra anteriormente. De esta manera, el sistema ser\u00e1 capaz de saltarse el escaneo que de otra manera se necesita para  validar la restricci\u00f3n impl\u00edcita de partici\u00f3n. Sin el  <code>CHECK</code>restricci\u00f3n, la tabla se escanear\u00e1 para validar la restricci\u00f3n de la partici\u00f3n mientras sostiene un  <code>ACCESS EXCLUSIVE</code>cerrando esa partici\u00f3n. Se recomienda dejar caer el ahora-redundante  <code>CHECK</code>restricci\u00f3n despu\u00e9s de la  <code>ATTACH PARTITION</code>est\u00e1 completo. Si la mesa que se adjunta es en s\u00ed misma una tabla dividida,  entonces cada una de sus subparticiones ser\u00e1 cerrada y escaneada  recursivamente hasta que sea un adecuado  <code>CHECK</code>se encuentra la restricci\u00f3n o se alcanzan las particiones de la hoja.</p> <p>Del mismo modo, si la tabla dividida tiene un  <code>DEFAULT</code>partici\u00f3n, se recomienda crear un  <code>CHECK</code>restricci\u00f3n que excluye la restricci\u00f3n de la partici\u00f3n a-a-at-attached. Si esto no se hace entonces el  <code>DEFAULT</code>La partici\u00f3n se escanear\u00e1 para verificar que no contiene registros que  deban estar ubicados en la partici\u00f3n que se adjunta. Esta operaci\u00f3n se  realizar\u00e1 mientras se mantiene un  <code>ACCESS EXCLUSIVE</code>candado en el  <code>DEFAULT</code>partici\u00f3n. Si el  <code>DEFAULT</code>La partici\u00f3n es en s\u00ed misma una tabla dividida, entonces cada una de sus  particiones se comprobar\u00e1 recursivamente de la misma manera que la tabla se adjunta, como se mencion\u00f3 anteriormente.</p> <p>Como se ha explicado anteriormente, es posible crear \u00edndices en tablas divididas para que se apliquen autom\u00e1ticamente a toda la  jerarqu\u00eda. Esto es muy conveniente, ya que no s\u00f3lo las particiones  existentes se indexar\u00e1n, sino tambi\u00e9n cualquier partici\u00f3n que se cree en el futuro lo har\u00e1. Una limitaci\u00f3n es que no es posible utilizar el  <code>CONCURRENTLY</code>calificador al crear un \u00edndice dividido de este tipo. Para evitar largos tiempos de cerramiento, es posible utilizar  <code>CREATE INDEX ON ONLY</code>la tabla dividida; dicho \u00edndice est\u00e1 marcado inv\u00e1lido, y las particiones  no obtienen el \u00edndice aplicado autom\u00e1ticamente. Los \u00edndices en  particiones se pueden crear individualmente utilizando <code>CONCURRENTLY</code>, y luego conectado al \u00edndice en el padre utilizando <code>ALTER INDEX .. ATTACH PARTITION</code>. Una vez que los \u00edndices para todas las particiones se unen al \u00edndice  padre, el \u00edndice padre se marca v\u00e1lido autom\u00e1ticamente. Ejemplo:</p> <pre><code>CREATE INDEX measurement.usls.idx SOL SOL \"parada (unitsales);\n\nCREATE INDEX measurement.usls-200602-idx\n    EN medici\u00f3ny2006m02 (unitsales);\nALTER INDEX measurement.usls.idx\n    ATTACH PARTITION measurement.usls-200602-idx;\n...\n</code></pre> <p>Esta t\u00e9cnica se puede utilizar con  <code>UNIQUE</code>y  <code>PRIMARY KEY</code>restricciones tambi\u00e9n; los \u00edndices se crean impl\u00edcitamente cuando se crea la restricci\u00f3n. Ejemplo:</p> <pre><code>ALTER TABLE SOLA DE medici\u00f3n ADD UNIQUE (city-id, logdate);\n\nALTER TABLE measurement.y2006m02 ADD UNIQUE (city-id, logdate);\nALTER INDEX measurement.city.id.id.logdate.key\n    ATTACH PARTITION measurement.y2006m02-city.id.logdate-key;\n...\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/11.-Particionado%20de%20tablas/02.-Partici%C3%B3n%20declarativa/03.-Limitaciones/","title":"03.-Limitaciones","text":"<p>Las siguientes limitaciones se aplican a las tablas divididas:</p> <ul> <li>Para crear una restricci\u00f3n de clave \u00fanica o primaria en  una tabla dividida, las teclas de partici\u00f3n no deben incluir ninguna  expresi\u00f3n o llamadas de funci\u00f3n y las columnas de la restricci\u00f3n deben  incluir todas las columnas de la tecla de partici\u00f3n. Esta limitaci\u00f3n  existe porque los \u00edndices individuales que componen la restricci\u00f3n s\u00f3lo  pueden imponer directamente la singularidad dentro de sus propias  particiones; por lo tanto, la propia estructura de partici\u00f3n debe  garantizar que no hay duplicados en diferentes particiones.</li> <li>No hay manera de crear una restricci\u00f3n de exclusi\u00f3n que  abarque toda la tabla dividida. S\u00f3lo es posible poner tal restricci\u00f3n en cada partici\u00f3n de hoja individualmente. Una vez m\u00e1s, esta limitaci\u00f3n se debe a no poder hacer cumplir las restricciones de participaci\u00f3n  cruzada.</li> <li><code>BEFORE ROW</code>desencadenantes en  <code>INSERT</code>no puede cambiar qu\u00e9 partici\u00f3n es el destino final para una nueva fila.</li> <li>Mezclando relaciones temporales y permanentes en el mismo \u00e1rbol de tabiques no est\u00e1 permitido. Por lo tanto, si la tabla dividida es permanente, tambi\u00e9n deben ser sus particiones y de la misma manera  si la tabla particionado es temporal. Cuando se utilizan relaciones  temporales, todos los miembros del tabique tienen que ser de la misma  sesi\u00f3n.</li> </ul> <p>Las particiones individuales est\u00e1n vinculadas a su tabla  dividida usando herencia tras bastidores. Sin embargo, no es posible  utilizar todas las caracter\u00edsticas gen\u00e9ricas de la herencia con tablas  de partici\u00f3n declarativamente o sus particiones, como se discute a  continuaci\u00f3n. En particular, una partici\u00f3n no puede tener otros padres  que no sean la tabla dividida de que es una partici\u00f3n, ni una tabla  puede heredar tanto de una tabla dividida y una tabla regular. Eso  significa tablas divididas y sus particiones nunca comparten una  jerarqu\u00eda de herencia con tablas regulares.</p> <p>Dado que una jerarqu\u00eda de particiones que consiste en la tabla  dividida y sus particiones sigue siendo una jerarqu\u00eda de herencia,  <code>tableoid</code>y todas las normas normales de herencia se aplican seg\u00fan se describe en la secci\u00f3n 5.10, con algunas excepciones:</p> <ul> <li>Las particiones no pueden tener columnas que no est\u00e1n  presentes en el padre. No es posible especificar columnas al crear  particiones con <code>CREATE TABLE</code>, no es posible a\u00f1adir columnas a las particiones despu\u00e9s de los hechos utilizando <code>ALTER TABLE</code>. Las tablas se pueden a\u00f1adir como una partici\u00f3n con  <code>ALTER TABLE ... ATTACH PARTITION</code>s\u00f3lo si sus columnas coinciden exactamente con el padre.</li> <li>Ambos  <code>CHECK</code>y  <code>NOT NULL</code>Las restricciones de una tabla dividida son siempre heredadas por todas sus particiones.  <code>CHECK</code>limitaciones marcadas  <code>NO INHERIT</code>no se permite crear en tablas divididas. No puedes dejar caer un  <code>NOT NULL</code>restricci\u00f3n en la columna de una partici\u00f3n si la misma restricci\u00f3n est\u00e1 presente en la tabla de padres.</li> <li>Usando  <code>ONLY</code>para a\u00f1adir o soltar una restricci\u00f3n en s\u00f3lo la tabla dividida se soporta  mientras no haya particiones. Una vez que las particiones existen,  usando  <code>ONLY</code>resultar\u00e1 en un error. En cambio, las restricciones en las particiones en s\u00ed  mismas se pueden agregar y (si no est\u00e1n presentes en la tabla de padres) ca\u00eddas.</li> <li>Como una tabla dividida no tiene ning\u00fan dato en s\u00ed, los intentos de uso   <code>TRUNCATE``ONLY</code>en una tabla dividida siempre devolvi\u00f3 un error.</li> </ul>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/11.-Particionado%20de%20tablas/03.-Partici%C3%B3n%20del%20uso%20de%20la%20herencia/","title":"Index","text":"<p>Si bien la partici\u00f3n declarativa incorporada es adecuada para casos  de uso m\u00e1s com\u00fan, hay algunas circunstancias en las que un enfoque m\u00e1s  flexible puede ser \u00fatil. La partici\u00f3n se puede implementar utilizando la herencia de la tabla, lo que permite varias caracter\u00edsticas no  soportadas por particiones declarativas, tales como:</p> <ul> <li>Para la partici\u00f3n declarativa, las particiones deben tener exactamente el  mismo conjunto de columnas que la tabla dividida, mientras que con la  herencia de la tabla, las tablas de hijos pueden tener columnas  adicionales no presentes en el padre.</li> <li>La herencia de tabla permite la herencia m\u00faltiple.</li> <li>La partici\u00f3n declarativa s\u00f3lo admite rango, lista y partici\u00f3n de hach  fuertes, mientras que la herencia de tabla permite dividir los datos de  una manera que el usuario es elija. (Nota, sin embargo, que si la  exclusi\u00f3n de las restricciones no puede podar las tablas de ni\u00f1os con  eficacia, el desempe\u00f1o de las consultas podr\u00eda ser deficiente.)</li> </ul>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/11.-Particionado%20de%20tablas/03.-Partici%C3%B3n%20del%20uso%20de%20la%20herencia/01.-Ejemplo/","title":"01.-Ejemplo","text":"<p>Este ejemplo construye una estructura de partici\u00f3n equivalente al ejemplo de partici\u00f3n declarativa de arriba. Util: Util:</p> <ol> <li>Cree la roottabla de ra\u00edz, de la cual todas las tablas del ni\u00f1o - heredar\u00e1n. Esta tabla no contendr\u00e1 datos. No defina ninguna restricci\u00f3n de control en esta tabla, a menos que tenga la intenci\u00f3n de que se  apliquen por igual a todas las tablas de ni\u00f1os. Tampoco tiene sentido  definir ning\u00fan \u00edndice o restricciones \u00fanicas en \u00e9l. Para nuestro  ejemplo, la tabla de ra\u00edz es la  <code>measurement</code>cuadro definido originalmente:</li> </ol> <p><code>CREATE TABLE medici\u00f3n (        ciudad-id int no null,        fecha de registro no nula,        de pico en el int,        unidadesales int    );</code></p> <ol> <li>Crea varias childtablas de ni\u00f1os que cada hereda de la tabla ra\u00edz. Normalmente, estas tablas no a\u00f1aden  ninguna columna al conjunto heredado de la ra\u00edz. Al igual que con la  partici\u00f3n declarativa, estas tablas son en todos los sentidos mesas de PostgreSQL normales (o tablas extranjeras).</li> </ol> <p><code>CREATE TABLE measurement-y2006m02 () INHERITS (medici\u00f3n);    CREATE TABLE measurement-y2006m03 () INHERITS (medici\u00f3n);    ...    CREATE TABLE measurement.y2007m11 () INHERITS (medici\u00f3n);    CREATE TABLE measurement.y2007m12 () INHERITS (medici\u00f3n);    CREATE TABLE measurement.y2008m01 () INHERITS (medici\u00f3n);</code></p> <ol> <li>A\u00f1ade restricciones de la tabla no superbate a las tablas infantiles para definir los valores clave permitidos en cada uno.</li> </ol> <p>Ejemplos t\u00edpicos ser\u00edan:</p> <p><code>CHECK ( x = 1)    CHECK (cons\u00f3n IN ( 'Oxfordshire', 'Buckinghamshire', 'Warwickshire'))    CHECK ( outletID -= 100 Y outletID - 200)</code></p> <p>Asegurar que las limitaciones garanticen que no hay  superposici\u00f3n entre los valores clave permitidos en diferentes cuadros  infantiles. Un error com\u00fan es establecer limitaciones de alcance como:</p> <p><code>CHECK ( outletID BETWEEN 100 Y 200 )    CHECK ( outletID BETWEEN 200 Y 300 )</code></p> <p>Esto est\u00e1 mal ya que no est\u00e1 claro en qu\u00e9 cuadro infantil pertenece el valor clave 200. En cambio, los rangos deben definirse en  este estilo:</p> <p>```    CREATE TABLE measurement.y2006m02 (        CHECK (fecha de registro -= FECHA '2006-02-01' Y logdate . FECHA '2006-03-01' )    ) INHERITS (medici\u00f3n);</p> <p>CREATE TABLE measurement-y2006m03 (        CHECK (fecha de registro -= FECHA '2006-03-01' Y logdate . FECHA '2006-04-01' )    ) INHERITS (medici\u00f3n);</p> <p>...    CREATE TABLE measurement.y2007m11 (        CHECK (fecha de registro -= FECHA \"2007-11-01\" Y logdate . FECHA '2007-12-01' )    ) INHERITS (medici\u00f3n);</p> <p>CREATE TABLE measurement-y2007m12 (        CHECK (fecha de registro -= FECHA '2007-12-01' Y logdate . FECHA '2008-01-01' )    ) INHERITS (medici\u00f3n);</p> <p>CREATE TABLE measurement.y2008m01 (        CHECK (fecha de registro -= FECHA '2008-01-01' Y logdate , FECHA '2008-02-01' )    ) INHERITS (medici\u00f3n);    ```</p> <ol> <li>Para cada tabla infantil, cree un \u00edndice en las columnas clave (s), as\u00ed como cualquier otro \u00edndice que pueda desear.</li> </ol> <p><code>CREATE INDEX measurement.y2006m02-logdate ON measurement-y2006m02 (logdate);    CREATE INDEX measurement-y2006m03-logdate ON measurement-y2006m03 (logdate);    CREATE INDEX measurement-y2007m11-logdate ON measurement-y2007m11 (logdate);    CREATE INDEX measurement-y2007m12-logdate ON measurement-y2007m12 (logdate);    CREATE INDEX measurement-y2008m01-logdate ON .y2008m01 (logdate);</code></p> <ol> <li>Queremos que nuestra aplicaci\u00f3n pueda decir  <code>INSERT INTO measurement ...</code>y que los datos sean rediriidos a la tabla infantil apropiada. Podemos  arreglar eso adjuntando una funci\u00f3n desencadenante adecuada a la tabla  ra\u00edz. Si los datos se a\u00f1aden s\u00f3lo al \u00faltimo ni\u00f1o, podemos utilizar una  funci\u00f3n desencadenante muy simple:</li> </ol> <p><code>CREATE O REPLACE FUNCTION measurement.insert-trigger()    RETURNS TRIGGER AS $$    BEGIN        INSERT INTO measurement-y2008m01 VALUES (NEW.*);        NULL RETURN;    END;    $$    LANGUAGE plpgsql;</code></p> <p>Despu\u00e9s de crear la funci\u00f3n, creamos un disparador que llama la funci\u00f3n desencadenante:</p> <p><code>CREATE TRIGGER inserto.measurement-trigger        ANTES de la medici\u00f3n de INSERT        PARA EACH ROW EXECUTE FUNCTION measurement.insert-trigger ();</code></p> <p>Debemos redefinir la funci\u00f3n desencadenante cada mes para que siempre se inserte en la actual mesa infantil. Sin embargo, la  definici\u00f3n de activaci\u00f3n no necesita ser actualizada.</p> <p>Es posible que deseemos insertar datos y hacer que el  servidor localice autom\u00e1ticamente la mesa del ni\u00f1o en la que se debe  a\u00f1adir la fila. Podr\u00edamos hacerlo con una funci\u00f3n de activaci\u00f3n m\u00e1s  compleja, por ejemplo:</p> <p><code>CREATE O REPLACE FUNCTION measurement.insert-trigger()    RETURNS TRIGGER AS $$    BEGIN        IF ( NEW.logdate .= FECHA '2006-02-01' Y             NEW.logdate . FECHA '2006-03-01' ) THEN            INSERT INTO measurement-y2006m02 VALUES (NEW.*);        ELSIF ( NEW.logdate -= FECHA '2006-03-01' Y                NEW.logdate . FECHA '2006-04-01' ) THEN            INSERT INTO measurement-y2006m03 VALUES (NEW.*);        ...        ELSIF ( NEW.logdate .= FECHA '2008-01-01' Y                NEW.logdate . FECHA '2008-02-01' ) THEN            INSERT INTO measurement-y2008m01 VALUES (NEW.*);        ELSE            EXCEPTION 'Feada fuera de alcance.  Arregla la funci\u00f3n medida.insert.trigger() ';;        END IF;        NULL RETURN;    END;    $$    LANGUAGE plpgsql;</code></p> <p>La definici\u00f3n desencadenante es la misma que antes. Tenga en cuenta que cada uno  <code>IF</code>prueba debe coincidir exactamente con la  <code>CHECK</code>restricci\u00f3n para su mesa de ni\u00f1os.</p> <p>Si bien esta funci\u00f3n es m\u00e1s compleja que el caso de un  solo mes, no necesita actualizarse con tanta frecuencia, ya que las  sucursales se pueden agregar antes de ser necesarias.</p> <p>### Nota</p> <p>En la pr\u00e1ctica, podr\u00eda ser mejor comprobar el ni\u00f1o m\u00e1s  nuevo primero, si la mayor\u00eda de las inserciones van a ese ni\u00f1o. Para la  simplicidad, hemos mostrado las pruebas del gatillo en el mismo orden  que en otras partes de este ejemplo.</p> <p>Un enfoque diferente para rediriir las inserciones a la  mesa infantil apropiada es establecer reglas, en lugar de un disparador, en la tabla ra\u00edz. Por ejemplo:</p> <p><code>CREATE RULE measurement.insert-y2006m02 AS    EN INSERT A la medici\u00f3n WHERE        (fecha de registro:= FECHA '2006-02-01' Y logdate . FECHA '2006-03-01' )    DO INSTEAD        INSERT INTO measurement-y2006m02 VALUES (NEW.*);    ...    CREATE RULE measurement.insert-y2008m01 AS    EN INSERT A la medici\u00f3n WHERE        ( logdate .= FECHA '2008-01-01' Y logdate . FECHA '2008-02-01' )    DO INSTEAD        INSERT INTO measurement-y2008m01 VALUES (NEW.*);</code></p> <p>Una regla tiene significativamente m\u00e1s gastos generales  que un disparador, pero los gastos generales se pagan una vez por  consulta en lugar de una vez por fila, por lo que este m\u00e9todo podr\u00eda ser ventajoso para situaciones de inserci\u00f3n a granel. En la mayor\u00eda de los  casos, sin embargo, el m\u00e9todo de activaci\u00f3n ofrecer\u00e1 un mejor  rendimiento.</p> <p>Tenga en cuenta que  <code>COPY</code>ignora las reglas. Si quieres usar  <code>COPY</code>para insertar datos, tendr\u00e1s que copiar en la tabla correcta del ni\u00f1o en lugar de directamente en la ra\u00edz.  <code>COPY</code>hace disparadores de fuego, por lo que puede usarlo normalmente si se utiliza el enfoque desencadenante.</p> <p>Otra desventaja del enfoque de reglas es que no hay una  manera simple de forzar un error si el conjunto de reglas no cubre la  fecha de inserci\u00f3n; los datos ir\u00e1n silenciosamente en la tabla ra\u00edz en  su lugar.</p> <ol> <li>Aseg\u00farese de que el par\u00e1metro de configuraci\u00f3n de la conexclusi\u00f3n de restricci\u00f3n no se deshabilita en <code>postgresql.conf</code>; de lo contrario, se puede acceder a las mesas infantiles innecesariamente.</li> </ol> <p>Como podemos ver, una compleja jerarqu\u00eda de tablas podr\u00eda  requerir una cantidad sustancial de DDL. En el ejemplo anterior  estar\u00edamos creando una nueva mesa infantil cada mes, por lo que podr\u00eda  ser prudente escribir un script que genere el DDL requerido  autom\u00e1ticamente.</p>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/11.-Particionado%20de%20tablas/03.-Partici%C3%B3n%20del%20uso%20de%20la%20herencia/02.-Mantenimiento%20de%20la%20particiones%20con%20herencia/","title":"02.-Mantenimiento de la particiones con herencia","text":"<p>Para eliminar los datos antiguos r\u00e1pidamente, simplemente suelta la tabla de ni\u00f1os que ya no es necesaria:</p> <pre><code>DROP TABLE measurement-y2006m02;\n</code></pre> <p>Eliminar la tabla de ni\u00f1os de la tabla de jerarqu\u00eda de herencias pero conservar el acceso a ella como tabla por derecho propio:</p> <pre><code>Medici\u00f3n de ALTER TABLE .y2006m02 NO INHERIT;\n</code></pre> <p>Para a\u00f1adir una nueva tabla de ni\u00f1os para manejar nuevos datos, cree una mesa de ni\u00f1os vac\u00edas tal como se crearon los ni\u00f1os originales  arriba:</p> <pre><code>CREATE TABLE measurement.y2008m02 (\n    CHECK (fecha de registro -= FECHA '2008-02-01' Y logdate . FECHA '2008-03-01' )\n) INHERITS (medici\u00f3n);\n</code></pre> <p>Alternativamente, uno puede querer crear y poblar la nueva mesa infantil antes de a\u00f1adirla a la jerarqu\u00eda de la tabla. Esto podr\u00eda  permitir cargar, comprobar y transformar los datos antes de hacerse  visibles en las consultas de la tabla de padres.</p> <pre><code>CREATE TABLE measurement.y2008m02\n  (Menci\u00f3n de medici\u00f3n de la CAINLUDING DEFAULTOS INCLUYOS CONSTRAINTOS);\nALTER TABLE measurement.y2008m02 ADD CONSTRAINT y2008m02\n   CHECK (fecha de registro -= FECHA '2008-02-01' Y logdate , FECHA '2008-03-01' );\nMedici\u00f3n de copia de la copia R: . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n-- posiblemente alg\u00fan otro trabajo de preparaci\u00f3n de datos\nMedici\u00f3n ALTER TABLE-y2008m02 INHERIT;\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/02.-Definici%C3%B3n%20de%20Datos/11.-Particionado%20de%20tablas/03.-Partici%C3%B3n%20del%20uso%20de%20la%20herencia/03.-Advertencias/","title":"03.-Advertencias","text":"<p>Las siguientes advertencias se aplican a la partici\u00f3n implementando la herencia:</p> <ul> <li> <p>No hay manera autom\u00e1tica de verificar que todo el  <code>CHECK</code>las limitaciones son mutuamente excluyentes. Es m\u00e1s seguro crear c\u00f3digo que genere tablas infantiles y crea y/o modifique objetos asociados que  escribir cada uno a mano.</p> </li> <li> <p>Los \u00edndices y las restricciones de claves extranjeras se  aplican a las tablas \u00fanicas y no a sus hijos de herencia, de ah\u00ed que  tienen algunas advertencias de las que tener en cuenta.</p> </li> <li> <p>Los esquemas mostrados aqu\u00ed asumen que los valores de la  columna clave de una fila (s) nunca cambian, o al menos no cambian lo  suficiente para requerir que se mude a otra partici\u00f3n. An  <code>UPDATE</code>que los intentos de hacer eso fracasar\u00e1n debido a la  <code>CHECK</code>limitaciones. Si usted necesita manejar tales casos, puede poner los activadores de  actualizaci\u00f3n adecuados en las tablas de ni\u00f1os, pero hace que la gesti\u00f3n de la estructura sea mucho m\u00e1s complicada.</p> </li> <li> <p>Si est\u00e1 usando manual  <code>VACUUM</code>o o  <code>ANALYZE</code>comandos, no olvides que necesitas ejecutarlos en cada mesa infantil individualmente. Un comando como:</p> </li> </ul> <p><code>medici\u00f3n ANALYZE;</code></p> <p>s\u00f3lo procesar\u00e1 la tabla ra\u00edz.</p> <ul> <li> <p><code>INSERT</code>declaraciones con  <code>ON CONFLICT</code>Es poco probable que las cl\u00e1usulas funcionen como se esperaba, como  <code>ON CONFLICT</code>las medidas s\u00f3lo se adoptan en caso de violaciones singulares de la  relaci\u00f3n de objetivos especificados, no de sus relaciones con los ni\u00f1os.</p> </li> <li> <p>Se necesitar\u00e1n desencajes o reglas para encaminar filas a la mesa de ni\u00f1os deseada, a menos que la aplicaci\u00f3n sea expl\u00edcitamente  consciente del esquema de partici\u00f3n. Los desenlaces pueden ser  complicados de escribir, y ser\u00e1n mucho m\u00e1s lentos que el enrutado tuple  realizado internamente por la partici\u00f3n declarativa.</p> </li> </ul>"},{"location":"02.-El%20lenguaje%20SQL/03.-Manipulaci%C3%B3n%20de%20Datos/","title":"Index","text":"<p>En el cap\u00edtulo anterior se discuti\u00f3 c\u00f3mo crear tablas y otras  estructuras para mantener sus datos. Ahora es el momento de llenar las  tablas con datos. Este cap\u00edtulo abarca c\u00f3mo insertar, actualizar y  eliminar los datos de la tabla. El cap\u00edtulo despu\u00e9s de esto finalmente  explicar\u00e1 c\u00f3mo extraer sus datos perdidos desde hace mucho tiempo de la  base de datos.</p>"},{"location":"02.-El%20lenguaje%20SQL/03.-Manipulaci%C3%B3n%20de%20Datos/01.-Inserci%C3%B3n%20de%20Datos/","title":"01.-Inserci\u00f3n de Datos","text":"<p>When a table is created, it contains no data. The first thing to do  before a database can be of much use is to insert data. Data is inserted one row at a time. You can also insert more than one row in a single  command, but it is not possible to insert something that is not a  complete row. Even if you know only some column values, a complete row  must be created.</p> <p>To create a new row, use the INSERT command. The command requires the table name and column values. For example, consider the products table from Chapter 5:</p> <pre><code>CREATE TABLE products (\n    product_no integer,\n    name text,\n    price numeric\n);\n</code></pre> <p>An example command to insert a row would be:</p> <pre><code>INSERT INTO products VALUES (1, 'Cheese', 9.99);\n</code></pre> <p>The data values are listed in the order in which the columns appear in the table, separated by commas. Usually, the data values will be  literals (constants), but scalar expressions are also allowed.</p> <p>The above syntax has the drawback that you need to know the order  of the columns in the table. To avoid this you can also list the columns explicitly. For example, both of the following commands have the same  effect as the one above:</p> <pre><code>INSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', 9.99);\nINSERT INTO products (name, price, product_no) VALUES ('Cheese', 9.99, 1);\n</code></pre> <p>Many users consider it good practice to always list the column names.</p> <p>If you don't have values for all the columns, you can omit some of  them. In that case, the columns will be filled with their default  values. For example:</p> <pre><code>INSERT INTO products (product_no, name) VALUES (1, 'Cheese');\nINSERT INTO products VALUES (1, 'Cheese');\n</code></pre> <p>The second form is a PostgreSQL extension. It fills the columns from the left with as many values as are given, and the rest will be defaulted.</p> <p>For clarity, you can also request default values explicitly, for individual columns or for the entire row:</p> <pre><code>INSERT INTO products (product_no, name, price) VALUES (1, 'Cheese', DEFAULT);\nINSERT INTO products DEFAULT VALUES;\n</code></pre> <p>You can insert multiple rows in a single command:</p> <pre><code>INSERT INTO products (product_no, name, price) VALUES\n    (1, 'Cheese', 9.99),\n    (2, 'Bread', 1.99),\n    (3, 'Milk', 2.99);\n</code></pre> <p>It is also possible to insert the result of a query (which might be no rows, one row, or many rows):</p> <pre><code>INSERT INTO products (product_no, name, price)\n  SELECT product_no, name, price FROM new_products\n    WHERE release_date = 'today';\n</code></pre> <p>This provides the full power of the SQL query mechanism (Chapter 7) for computing the rows to be inserted.</p>"},{"location":"02.-El%20lenguaje%20SQL/03.-Manipulaci%C3%B3n%20de%20Datos/01.-Inserci%C3%B3n%20de%20Datos/#tip","title":"Tip","text":"<p>When inserting a lot of data at the same time, consider using the COPY command. It is not as flexible as the INSERT command, but is more efficient. Refer to Section 14.4 for more information on improving bulk loading performance.</p>"},{"location":"02.-El%20lenguaje%20SQL/03.-Manipulaci%C3%B3n%20de%20Datos/02.-Actualizaci%C3%B3n%20de%20Datos/","title":"02.-Actualizaci\u00f3n de Datos","text":"<p>La modificaci\u00f3n de los datos que ya se encuentra en la base de datos  se conoce como actualizaci\u00f3n. Puede actualizar las filas individuales,  todas las filas en una tabla, o un subconjunto de todas las filas. Cada  columna se puede actualizar por separado; las otras columnas no se ven  afectadas.</p> <p>Para actualizar las filas existentes, utilice el comando UPDATE. Esto requiere tres piezas de informaci\u00f3n:</p> <ol> <li>El nombre de la tabla y la columna a actualizar</li> <li>El nuevo valor de la columna</li> <li>Qu\u00e9 filas para actualizar</li> </ol> <p>Recordad del Cap\u00edtulo 5 que SQL no proporciona, en general, un identificador \u00fanico para las  filas. Por lo tanto, no siempre es posible especificar directamente qu\u00e9  fila actualizar. En su lugar, especifica qu\u00e9 condiciones debe cumplir  una fila para ser actualizada. S\u00f3lo si tienes una clave primaria en la  tabla (independiente de si lo declaraste o no) puedes abordar de manera  fiable las filas individuales eligiendo una condici\u00f3n que coinja con la  clave principal. Las herramientas de acceso a la base de datos gr\u00e1ficas  se basan en este hecho para permitirle actualizar las filas  individualmente.</p> <p>Por ejemplo, este comando actualiza todos los productos que tienen un precio de 5 para tener un precio de 10:</p> <pre><code>Productos ACTUALIZAR precio SET = 10 precio de DONDE = 5;\n</code></pre> <p>Esto podr\u00eda causar que se actualicen cero, una o muchas filas. No  es un error intentar una actualizaci\u00f3n que no cointe con ninguna fila.</p> <p>Veamos ese comando en detalle. La primera es la palabra clave  <code>UPDATE</code>seguido por el nombre de la tabla. Como de costumbre, el nombre de la mesa  puede ser calificado de esquema, de lo contrario se mira hacia arriba en el camino. La siguiente es la palabra clave  <code>SET</code>seguido por el nombre de la columna, un signo igual y el nuevo valor de la  columna. El nuevo valor de la columna puede ser cualquier expresi\u00f3n  escalar, no s\u00f3lo una constante. Por ejemplo, si desea aumentar el precio de todos los productos en un 10% podr\u00eda utilizar:</p> <pre><code>Productos ACTA precio SET = precio * 1.10;\n</code></pre> <p>Como se ve, la expresi\u00f3n para el nuevo valor puede referirse al valor existente en la fila. Tambi\u00e9n dejamos fuera el  <code>WHERE</code>cl\u00e1usula. Si se omite, significa que todas las filas de la tabla se actualizan.  Si est\u00e1 presente, s\u00f3lo esas filas que coinciden con el  <code>WHERE</code>las condiciones se actualizan. Tenga en cuenta que los iguales en el signo  <code>SET</code>la cl\u00e1usula es una asignaci\u00f3n mientras que la de la  <code>WHERE</code>la cl\u00e1usula es una comparaci\u00f3n, pero esto no crea ninguna ambiguedad. Por supuesto, el  <code>WHERE</code>las condiciones no tienen que ser una prueba de igualdad. Muchos otros operadores est\u00e1n disponibles (v\u00e9ase el cap\u00edtulo 9). Pero la expresi\u00f3n necesita evaluar a un resultado booleano.</p> <p>Puede actualizar m\u00e1s de una columna en un  <code>UPDATE</code>comando mediante la lista de m\u00e1s de una asignaci\u00f3n en el  <code>SET</code>cl\u00e1usula. Por ejemplo:</p> <pre><code>Actualizaci\u00f3n de la mesa suiza a = 5, b = 3, c = 1 DONE a 0;\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/03.-Manipulaci%C3%B3n%20de%20Datos/03.-Supresi%C3%B3n%20de%20Datos/","title":"03.-Supresi\u00f3n de Datos","text":"<p>So far we have explained how to add data to tables and how to change  data. What remains is to discuss how to remove data that is no longer  needed. Just as adding data is only possible in whole rows, you can only remove entire rows from a table. In the previous section we explained  that SQL does not provide a way to directly address individual rows.  Therefore, removing rows can only be done by specifying conditions that  the rows to be removed have to match. If you have a primary key in the  table then you can specify the exact row. But you can also remove groups of rows matching a condition, or you can remove all rows in the table  at once.</p> <p>You use the DELETE command to remove rows; the syntax is very similar to the UPDATE command. For instance, to remove all rows from the products table that have a price of 10, use:</p> <pre><code>DELETE FROM products WHERE price = 10;\n</code></pre> <p>If you simply write:</p> <pre><code>DELETE FROM products;\n</code></pre> <p>then all rows in the table will be deleted! Caveat programmer.</p>"},{"location":"02.-El%20lenguaje%20SQL/03.-Manipulaci%C3%B3n%20de%20Datos/04.-Devoluci%C3%B3n%20de%20Datos%20de%20filas%20modificadas/","title":"04.-Devoluci\u00f3n de Datos de filas modificadas","text":"<p>A veces es \u00fatil obtener datos de filas modificadas mientras est\u00e1n siendo manipuladas. El <code>INSERT</code>, <code>UPDATE</code>, y  <code>DELETE</code>comandos todos tienen una opci\u00f3n  <code>RETURNING</code>Cl\u00e1usula que apoya esto. Utilizaci\u00f3n de  <code>RETURNING</code>evita realizar una consulta adicional de base de datos para recopilar los  datos, y es especialmente valioso cuando de lo contrario ser\u00eda dif\u00edcil  identificar las filas modificadas de forma fiable.</p> <p>El contenido permitido de una  <code>RETURNING</code>la cl\u00e1usula es la misma que una  <code>SELECT</code>lista de salida de comandos (ver Secci\u00f3n 7.3). Puede contener nombres de columnas de la tabla de destino del comando, o expresiones de valor usando esas columnas. Una abreviatura com\u00fan es <code>RETURNING *</code>, que selecciona todas las columnas de la tabla de destino en orden.</p> <p>En un <code>INSERT</code>, los datos de que dispone  <code>RETURNING</code>es la fila tal y como se insert\u00f3. Esto no es tan \u00fatil en inserciones  triviales, ya que s\u00f3lo se repetir\u00edan los datos proporcionados por el  cliente. Pero puede ser muy \u00fatil cuando se basa en valores por defecto  calculados. Por ejemplo, cuando se utiliza un  <code>serial</code>columna para proporcionar identificadores \u00fanicos,  <code>RETURNING</code>puede devolver el DNI asignado a una nueva fila:</p> <pre><code>CREATE TABLE users (primero texto, texto de apellido, id de la clave primaria serie);\n\nUsuarios de INSERT INTO (nombre, apellido) VALUES ('Joe', 'Cool') RETURNING id;\n</code></pre> <p>El  <code>RETURNING</code>la cl\u00e1usula tambi\u00e9n es muy \u00fatil con <code>INSERT ... SELECT</code>.</p> <p>En un <code>UPDATE</code>, los datos de que dispone  <code>RETURNING</code>es el nuevo contenido de la fila modificada. Por ejemplo:</p> <pre><code>Productos ACTUALIZADO Precio SET = precio * 1.10\n  Donde precio .= 99,99\n  RETURNING nombre, precio AS new-price;\n</code></pre> <p>En un <code>DELETE</code>, los datos de que dispone  <code>RETURNING</code>es el contenido de la fila eliminada. Por ejemplo:</p> <pre><code>DELETE DE los productos\n  D\u00f3nde se tesenaje = 'hoy'\n  RETURNING *;\n</code></pre> <p>Si hay desencadenantes (cap\u00edtulo 39) en el cuadro objetivo, los datos de que dispone  <code>RETURNING</code>es la fila modificada por los desencadenantes. Por lo tanto, inspeccionar  columnas calculadas por disparadores es otro caso de uso com\u00fan para <code>RETURNING</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/","title":"Index","text":"<p>Los cap\u00edtulos anteriores explicaban c\u00f3mo crear tablas, c\u00f3mo llenarlos de datos y c\u00f3mo manipular esos datos. Ahora finalmente discutimos c\u00f3mo  recuperar los datos de la base de datos.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/01.-Vista%20general/","title":"01.-Vista general","text":"<p>El proceso de recuperaci\u00f3n o el comando para recuperar datos de una base queryde datos se llama consulta. En SQL el  <code>SELECT</code>el comando se utiliza para especificar consultas. La sintaxis general de la  <code>SELECT</code>el mando es</p> <pre><code>[WITH with_queries] SELECT  select_listDe los DE  table_expression[sort_specification]\n</code></pre> <p>Las secciones siguientes describen los detalles de la lista  seleccionada, la expresi\u00f3n de la tabla y la especificaci\u00f3n de orden.  <code>WITH</code>Las consultas se tratan por \u00faltima vez ya que son una caracter\u00edstica avanzada.</p> <p>Un tipo simple de consulta tiene la forma:</p> <pre><code>SELECT * DESDE tabla1;\n</code></pre> <p>Asumiendo que hay una mesa llamada <code>table1</code>, este comando recuperar\u00eda todas las filas y todas las columnas definidas por el usuario de <code>table1</code>. (El m\u00e9todo de recuperaci\u00f3n depende de la aplicaci\u00f3n del cliente. Por ejemplo, el programa psql mostrar\u00e1 una tabla de arte ASCII en la pantalla, mientras que las  bibliotecas de clientes ofrecer\u00e1n funciones para extraer valores  individuales del resultado de la consulta.) La especificaci\u00f3n de lista  seleccionada  <code>*</code>significa todas las columnas que la expresi\u00f3n de la tabla proporciona. Una lista  de selecci\u00f3n tambi\u00e9n puede seleccionar un subconjunto de las columnas  disponibles o hacer c\u00e1lculos usando las columnas. Por ejemplo, si  <code>table1</code>tiene columnas nombradas <code>a</code>, <code>b</code>, y  <code>c</code>(y tal vez otros) usted puede hacer la siguiente consulta:</p> <pre><code>SELECT a, b . c DESDE tabla1;\n</code></pre> <p>(asumiendo que  <code>b</code>y  <code>c</code>son de un tipo de datos num\u00e9ricos). V\u00e9ase la secci\u00f3n 7.3 para m\u00e1s detalles.</p> <p><code>FROM table1</code>es una simple especie de expresi\u00f3n de la tabla: s\u00f3lo se lee una tabla. En  general, las expresiones de tabla pueden ser construcciones complejas de mesas de base, uniones y subculenciones. Pero tambi\u00e9n puedes omitir la  expresi\u00f3n de la tabla por completo y usar el  <code>SELECT</code>comando como calculadora:</p> <pre><code>SELECT 3 * 4;\n</code></pre> <p>Esto es m\u00e1s \u00fatil si las expresiones de la lista de selecci\u00f3n  devuelven resultados variables. Por ejemplo, podr\u00edas llamar a una  funci\u00f3n de esta manera:</p> <pre><code>SELECT aleatorio ();\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/04.-Combinando%20consultas%20%28UNION%2C%20INTERSECT%2C%20EXCEPT%29/","title":"04.-Combinando consultas (UNION, INTERSECT, EXCEPT)","text":"<p>Los resultados de dos consultas se pueden combinar mediante el  sindicato de operaciones establecidas, intersecci\u00f3n y diferencia. La  sintaxis es</p> <pre><code> query1UNION [ALL] \n query2query1INTERSECT [Tols] \n query2query1EXCEPT [Tols] query2\n</code></pre> <p>d\u00f3nde  <code>query1</code>y  <code>query2</code>son consultas que pueden utilizar cualquiera de las caracter\u00edsticas discutidas hasta este punto.</p> <p><code>UNION</code>Aplaca efectivamente el resultado de  <code>query2</code>el resultado de  <code>query1</code>(aunque no hay garant\u00eda de que este sea el orden en el que las filas son  realmente devueltas). Adem\u00e1s, elimina las filas duplicadas de su  resultado, de la misma manera que <code>DISTINCT</code>A menos que  <code>UNION ALL</code>se usa.</p> <p><code>INTERSECT</code>devuelve todas las filas que est\u00e1n en el resultado de  <code>query1</code>y en el resultado de <code>query2</code>. Duplican filas son eliminadas a menos  <code>INTERSECT ALL</code>se usa.</p> <p><code>EXCEPT</code>devuelve todas las filas que est\u00e1n en el resultado de  <code>query1</code>pero no en el resultado de <code>query2</code>. (Esto a veces se llama la diferencia entre dos consultas.) Una vez m\u00e1s, se eliminan los duplicados a menos  <code>EXCEPT ALL</code>se usa.</p> <p>Para calcular la uni\u00f3n, intersecci\u00f3n o diferencia de dos consultas, las dos consultas deben ser compatibles con la uni\u00f3n, lo que significa que devuelven el mismo n\u00famero de columnas y las  columnas correspondientes tienen tipos de datos compatibles, como se  describe en la secci\u00f3n 10.5.</p> <p>Las operaciones de conjunto se pueden combinar, por ejemplo</p> <pre><code> query1UNION  query2EXCEPTO query3\n</code></pre> <p>que es equivalente a</p> <pre><code>( query1UNION query2EXCEPT query3\n</code></pre> <p>Como se muestra aqu\u00ed, puede utilizar par\u00e9ntesis para controlar el orden de evaluaci\u00f3n. Sin par\u00e9ntesis,  <code>UNION</code>y  <code>EXCEPT</code>asociar izquierda a derecha, pero  <code>INTERSECT</code>se une m\u00e1s estrechamente que esos dos operadores. As\u00ed pues</p> <pre><code> query1UNION  query2INTERSECT query3\n</code></pre> <p>los medios</p> <pre><code> query1UNIONes ( query2INTERSECT query3)\n</code></pre> <p>Tambi\u00e9n puede rodear a un individuo  <code>query</code>con par\u00e9ntesis. Esto es importante si el  <code>query</code>debe utilizar cualquiera de las cl\u00e1usulas discutidas en las secciones siguientes, tales como <code>LIMIT</code>. Sin par\u00e9ntesis, obtendr\u00e1s un error de sintaxis, o de lo contrario la  cl\u00e1usula se entender\u00e1 como aplicable a la salida de la operaci\u00f3n  establecida en lugar de una de sus entradas. Por ejemplo,</p> <pre><code>SELECT a FROM b UNION SELECT x FROM y LIMIT 10\n</code></pre> <p>es aceptado, pero significa</p> <pre><code>(SELECT a FROM b UNION SELECT x FROM y) LIMIT 10\n</code></pre> <p>no</p> <pre><code>SELECT a FROM b UNION (SELECT x FROM y LIMIT 10)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/05.-Ordenando%20filas%20%28ORDER%20BY%29/","title":"05.-Ordenando filas (ORDER BY)","text":"<p>Despu\u00e9s de que una consulta haya producido una tabla de salida  (despu\u00e9s de que la lista selecta ha sido procesada) opcionalmente se  puede ordenar. Si no se elige la clasificaci\u00f3n, las filas ser\u00e1n  devueltas en un orden no especificado. El orden real en ese caso  depender\u00e1 del escaneo y de los tipos de plan de unirse y el orden en el  disco, pero no debe confiarse en \u00e9l. Un pedido de salida en particular  s\u00f3lo se puede garantizar si se elige expl\u00edcitamente el paso.</p> <p>El  <code>ORDER BY</code>cl\u00e1usula especifica la orden de tipo:</p> <pre><code>SELECT \n    select_listDe los recursos \n    table_expressionORDEN POR  sort_expression1[ASC - DESC] [NULLS - PRIMERO \" LAST\"\n             [,  sort_expression2[ASC - DESC] [NULLS . FIRST .\n</code></pre> <p>Las expresiones de tipo (s) pueden ser cualquier expresi\u00f3n que sea  v\u00e1lida en la lista de selecci\u00f3n de la consulta. Un ejemplo es:</p> <pre><code>SELECT a, b DESDE tabla 1 ORDEN POR un . b, c;\n</code></pre> <p>Cuando se especifica m\u00e1s de una expresi\u00f3n, los valores posteriores  se utilizan para ordenar filas que son iguales de acuerdo a los valores  anteriores. Cada expresi\u00f3n puede ser seguida por un  <code>ASC</code>o o  <code>DESC</code>palabra clave para establecer la direcci\u00f3n de clasificaci\u00f3n para ascender o descender.  <code>ASC</code>orden es el incumplimiento. El orden ascendente pone los valores m\u00e1s peque\u00f1os en primer lugar, donde se \u201csmaller\u201ddefine en t\u00e9rminos de la  <code>&lt;</code>operador. Del mismo modo, el orden descendente se determina con la  <code>&gt;</code>operador. [6]</p> <p>El  <code>NULLS FIRST</code>y  <code>NULLS LAST</code>Las opciones se pueden utilizar para determinar si los nulos aparecen antes o despu\u00e9s de valores no nulos en el ordenamiento. Por defecto, los  valores nulos clasifican como si fuera m\u00e1s grande que cualquier valor no nulo; es decir,  <code>NULLS FIRST</code>es el defecto de  <code>DESC</code>orden, y  <code>NULLS LAST</code>de otra manera.</p> <p>Tenga en cuenta que las opciones de pedido se consideran independientemente para cada columna de tipo. Por ejemplo  <code>ORDER BY x, y DESC</code>los medios <code>ORDER BY x ASC, y DESC</code>, que no es lo mismo que <code>ORDER BY x DESC, y DESC</code>.</p> <p>A  <code>sort_expression</code>tambi\u00e9n puede ser la etiqueta de la columna o el n\u00famero de una columna de salida, como en:</p> <pre><code>SELECT a . b AS sum, c DESDE tabla 1 ORDEN BY sum;\nSELECT a, max(b) DESDE tabla1 GRUPO POR una ORDEN POR 1;\n</code></pre> <p>los cuales se clasifican por la primera columna de salida. Tenga en cuenta que un nombre de columna de salida tiene que estar solo, es  decir, no se puede utilizar en una expresi\u00f3n, por ejemplo, esto no es correcto:</p> <pre><code>SELECT a . b AS sum, c DESDE tabla 1 ORDEN BY sum c; -- incorrecto\n</code></pre> <p>Esta restricci\u00f3n se hace para reducir la ambiguedad. Todav\u00eda hay ambiguedad si un  <code>ORDER BY</code>El elemento es un nombre simple que podr\u00eda coincidir con un nombre de  columna de salida o una columna de la expresi\u00f3n de la tabla. La columna  de salida se utiliza en estos casos. Esto s\u00f3lo causar\u00eda confusi\u00f3n si  usted utiliza  <code>AS</code>para cambiar el nombre de una columna de salida para que coinja con el nombre de otra columna de tabla.</p> <p><code>ORDER BY</code>puede aplicarse al resultado de una <code>UNION</code>, <code>INTERSECT</code>, o  <code>EXCEPT</code>combinaci\u00f3n, pero en este caso s\u00f3lo se permite ordenar por nombres o n\u00fameros de columna de salida, no por expresiones.</p> <p>[6] En realidad, PostgreSQL utiliza la clase de operador de \u00e1rbol B predeterminada para el tipo de datos de la expresi\u00f3n para determinar la orden de clasificaci\u00f3n para  <code>ASC</code>y <code>DESC</code>. Contablemente, se crear\u00e1n tipos de datos para que la  <code>&lt;</code>y  <code>&gt;</code>Los operadores corresponden a este orden de clasificaci\u00f3n, pero el  dise\u00f1ador de un tipo de datos definido por el usuario podr\u00eda optar por  hacer algo diferente.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/06.-LIMIT%20y%20OFFSET/","title":"06.-LIMIT y OFFSET","text":"<p><code>LIMIT</code>y  <code>OFFSET</code>Permite recuperar s\u00f3lo una parte de las filas que son generadas por el resto de la consulta:</p> <pre><code>SELECT \n    select_listDe los recursos \n    table_expression[ ORDEN por... ]\n    [ LIMIT  numberLLes (a todos) [ OFFSET  number]\n</code></pre> <p>Si se da un conteo de l\u00edmites, no m\u00e1s que eso se devolver\u00e1n muchas  filas (pero posiblemente menos, si la propia consulta produce menos  filas).  <code>LIMIT ALL</code>es lo mismo que omitir el  <code>LIMIT</code>cl\u00e1usula, al igual que  <code>LIMIT</code>con un argumento de NULL.</p> <p><code>OFFSET</code>dice que saltar muchas filas antes de empezar a volver filas.  <code>OFFSET 0</code>es lo mismo que omitir el  <code>OFFSET</code>cl\u00e1usula, al igual que  <code>OFFSET</code>con un argumento de NULL.</p> <p>Si ambos  <code>OFFSET</code>y  <code>LIMIT</code>Aparece, entonces  <code>OFFSET</code>hileras se saltan antes de empezar a contar el  <code>LIMIT</code>filas que se devuelven.</p> <p>Cuando se usa <code>LIMIT</code>, es importante utilizar un  <code>ORDER BY</code>cl\u00e1usula que limita las filas de resultados en un orden \u00fanico. De lo contrario  obtendr\u00e1s un subconjunto impredecible de las filas de la consulta. Puede que est\u00e9s pidiendo el d\u00e9cimo a trav\u00e9s de las vig\u00e9sis filas, pero d\u00e9cimo a veinte en qu\u00e9 orden? El pedido es desconocido, a menos que  especifique <code>ORDER BY</code>.</p> <p>El optimizador de la consulta toma  <code>LIMIT</code>en cuenta al generar planes de consulta, por lo que es muy probable que  consiga planes diferentes (deleccionar diferentes pedidos de fila)  dependiendo de lo que den para  <code>LIMIT</code>y <code>OFFSET</code>. As\u00ed, utilizando diferentes <code>LIMIT</code>/ <code>OFFSET</code>valores para seleccionar diferentes subconjuntos de un resultado de consulta dar\u00e1 resultados inconsistentes a menos que haga cumplir un orden de resultados predecible con <code>ORDER BY</code>. Esto no es un error; es una consecuencia inherente del hecho de que SQL no promete entregar los resultados de una consulta en cualquier orden  particular a menos  <code>ORDER BY</code>se utiliza para restringir la orden.</p> <p>Las filas saltadas por un  <code>OFFSET</code>la cl\u00e1usula todav\u00eda tiene que ser calculada dentro del servidor; por lo tanto, una  <code>OFFSET</code>podr\u00eda ser ineficiente.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/07.-Listas%20VALUES/","title":"07.-Listas VALUES","text":"<p><code>VALUES</code>proporciona una manera de generar una mesa constante que se puede utilizar en una consulta sin tener que crear y pueblar una mesa en disco. La sintaxis es</p> <pre><code>VALUES (  expression[, ...] ) [, ...]\n</code></pre> <p>Cada lista entre par\u00e9ntesis genera una fila en la tabla. Todas las  listas deben tener el mismo n\u00famero de elementos (es decir, el n\u00famero de  columnas en el cuadro), y las entradas correspondientes en cada lista  deben tener tipos de datos compatibles. El tipo de datos real asignado a cada columna del resultado se determina utilizando las mismas reglas  que para  <code>UNION</code>(v\u00e9ase la secci\u00f3n 10.5).</p> <p>Por ejemplo:</p> <pre><code>VALUES (1, 'uno'), (2, 'dos'), (3, 'tres');\n</code></pre> <p>devolver\u00e1 una tabla de dos columnas y tres filas. Es efectivamente equivalente a:</p> <pre><code>SELECT 1 AS column1, \"una\" columna AS2\nUNION TODOS\nSELECT 2, 'dos'\nUNION TODOS\nSELECT 3, 'tres';\n</code></pre> <p>Por defecto, PostgreSQL asigna los nombres <code>column1</code>, <code>column2</code>, etc. a las columnas de un  <code>VALUES</code>mesa. Los nombres de la columna no est\u00e1n especificados por el est\u00e1ndar SQL y  diferentes sistemas de base de datos lo hacen de manera diferente, por  lo que por lo general es mejor anular los nombres predeterminados con  una lista de alias de tabla, como esta:</p> <pre><code>* DESDE (VALUES (1, 'uno'), (2, 'dos'), (3, 'tres')) AS t (num,letter);\n num - Carta\n------------\n   1o uno\n   2 y dos\n   3 - Tres\n(3 filas)\n</code></pre> <p>Sint\u00e1cticamente,  <code>VALUES</code>seguido de listas de expresiones se trata como equivalente a:</p> <pre><code>SELECT  select_listDe los DE table_expression\n</code></pre> <p>y puede aparecer en cualquier lugar a  <code>SELECT</code>- Puede. Por ejemplo, puedes usarlo como parte de un <code>UNION</code>, o unir un  <code>sort_specification</code>(<code>ORDER BY</code>, <code>LIMIT</code>, y/o <code>OFFSET</code>) a ella.  <code>VALUES</code>se utiliza m\u00e1s com\u00fanmente como la fuente de datos en un  <code>INSERT</code>comando, y a continuaci\u00f3n m\u00e1s com\u00fanmente como una subcoquer\u00eda.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/02.-Expresiones%20de%20tablas/","title":"Index","text":"<p>Una expresi\u00f3n de la tabla calcula una mesa. La expresi\u00f3n de la tabla contiene un  <code>FROM</code>cl\u00e1usula que se sigue opcionalmente <code>WHERE</code>, <code>GROUP BY</code>, y  <code>HAVING</code>cl\u00e1usulas. Las expresiones de la mesa trivial simplemente se refieren a una tabla  en el disco, una llamada tabla base, pero las expresiones m\u00e1s complejas  se pueden utilizar para modificar o combinar tablas de base de varias  maneras.</p> <p>La opcional <code>WHERE</code>, <code>GROUP BY</code>, y  <code>HAVING</code>cl\u00e1usulas de la expresi\u00f3n de la tabla especifican una cartera de sucesivas  transformaciones realizadas sobre la mesa derivada en el  <code>FROM</code>cl\u00e1usula. Todas estas transformaciones producen una tabla virtual que proporciona las filas que se pasan a la lista selecta para calcular las filas de  salida de la consulta.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/02.-Expresiones%20de%20tablas/02.-La%20Cl%C3%A1usula%20WHERE/","title":"02.-La Cl\u00e1usula WHERE","text":"<p>La sintaxis de la  <code>WHERE</code>la cl\u00e1usula es</p> <pre><code>D\u00f3nde search_condition\n</code></pre> <p>d\u00f3nde  <code>search_condition</code>es cualquier expresi\u00f3n de valor (v\u00e9ase la secci\u00f3n 4.2) que devuelve un valor de tipo <code>boolean</code>.</p> <p>Despu\u00e9s de la tramitaci\u00f3n de la  <code>FROM</code>cl\u00e1usula se hace, cada fila de la tabla virtual derivada se comprueba con la  condici\u00f3n de b\u00fasqueda. Si el resultado de la condici\u00f3n es cierto, la  fila se mantiene en la tabla de salida, de lo contrario (es decir, si el resultado es falso o nulo) se descarta. La condici\u00f3n de b\u00fasqueda  t\u00edpicamente hace referencia a al menos una columna de la tabla generada  en el  <code>FROM</code>cl\u00e1usula; esto no es necesario, pero de lo contrario  <code>WHERE</code>cl\u00e1usula ser\u00e1 bastante in\u00fatil.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/02.-Expresiones%20de%20tablas/02.-La%20Cl%C3%A1usula%20WHERE/#nota","title":"Nota","text":"<p>La condici\u00f3n de uni\u00f3n de una uni\u00f3n interior se puede escribir en la  <code>WHERE</code>cl\u00e1usula o en la  <code>JOIN</code>cl\u00e1usula. Por ejemplo, estas expresiones de tabla son equivalentes:</p> <pre><code>DESDE a, b A.id = b.id Y b.val 5\n</code></pre> <p>y:</p> <pre><code>DESDE un INNER JOIN b ON (a.id = b.id) DONDE b.val 5\n</code></pre> <p>o tal vez incluso:</p> <pre><code>DESDE un \u00fanete a B.val de NATURAL\n</code></pre> <p>Cu\u00e1l de estos que usas es principalmente una cuesti\u00f3n de estilo. El  <code>JOIN</code>sintaxis en el  <code>FROM</code>La cl\u00e1usula probablemente no sea tan port\u00e1til a otros sistemas de gesti\u00f3n  de bases de datos SQL, aunque est\u00e9 en el est\u00e1ndar SQL. Para las uniones  exteriores no hay elecci\u00f3n: deben hacerse en el  <code>FROM</code>cl\u00e1usula. El  <code>ON</code>o o  <code>USING</code>cl\u00e1usula de una afiliaci\u00f3n exterior no es equivalente a una  <code>WHERE</code>condici\u00f3n, porque resulta en la adici\u00f3n de filas (para filas de entrada  inigualables) as\u00ed como la eliminaci\u00f3n de las filas en el resultado  final.</p> <p>Aqu\u00ed est\u00e1n algunos ejemplos de  <code>WHERE</code>cl\u00e1usulas:</p> <pre><code>SELECT ... DESDE fdt DONDE c1 5\n\nSELECT ... DES fdt WHERE c1 IN (1, 2, 3)\n\nSELECT ... DES fdt WHERE c1 IN (SELECT c1 FROM t2)\n\nSELECT ... DESDE fdt WHERE c1 IN (SELECT c3 DESDE t2 WHERE c2 = fdt.c1 10)\n\nSELECT ... DESDE fdt WHERE c1 BETWEEN (SELECT c3 DESDE t2 WHERE c2 = fdt.c1 10) Y 100\n\nSELECT ... DESDE fdt WHERE EXISTS (SELECT c1 DESDE t2 DOHERE c2 - fdt.c1)\n</code></pre> <p><code>fdt</code>es la tabla derivada en el  <code>FROM</code>cl\u00e1usula. Filas que no cumplen con la condici\u00f3n de b\u00fasqueda de la  <code>WHERE</code>la cl\u00e1usula se eliminan de <code>fdt</code>. Observe el uso de subcr\u00edbanos como expresiones de valor. Al igual que  cualquier otra consulta, las subcoquer\u00edas pueden emplear complejas  expresiones de mesa. Observe tambi\u00e9n c\u00f3mo  <code>fdt</code>se hace referencia en las subcoquer\u00edas. Calificaci\u00f3n  <code>c1</code>como  <code>fdt.c1</code>s\u00f3lo es necesario si  <code>c1</code>es tambi\u00e9n el nombre de una columna en la tabla de entrada derivada de la  subchaquer\u00eda. Pero calificar el nombre de la columna a\u00f1ade claridad  incluso cuando no es necesario. Este ejemplo muestra c\u00f3mo el alcance de  la columna de la denominaci\u00f3n de una consulta externa se extiende en sus consultas internas.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/02.-Expresiones%20de%20tablas/03.-Las%20cl%C3%A1usulas%20GROUP%20BY%20%20y%20HAVING/","title":"03.-Las cl\u00e1usulas GROUP BY  y HAVING","text":"<p>Despu\u00e9s de pasar el  <code>WHERE</code>filtro, la tabla de entrada derivada podr\u00eda estar sujeta a agrupamiento, utilizando la  <code>GROUP BY</code>cl\u00e1usula, y eliminaci\u00f3n de las filas de grupo utilizando la  <code>HAVING</code>cl\u00e1usula.</p> <pre><code>SELECT \n    select_listDESDE ...\n    [AQUI ...]\n    GRUPO BY  grouping_column_reference[, grouping_column_reference] ] ] ...\n</code></pre> <p>El  <code>GROUP BY</code>la cl\u00e1usula se utiliza para agrupar esas filas en un cuadro que tienen los mismos valores en todas las columnas enumeradas. El orden en que se  enumeran las columnas no importa. El efecto es combinar cada conjunto de filas con valores comunes en una fila de grupo que representa todas las filas del grupo. Esto se hace para eliminar la redundancia en los  agregados de salida y/o computaci\u00f3n que se aplican a estos grupos. Por  ejemplo:</p> <pre><code> =&gt;SELECT * FROM test1;x y\n------\n a 3\n c 2\n b 5\n a 1\n(4 filas) \n\n\n =&gt;SELECT x FROM test1 GROUP BY x;x\n- ----\n a\n b\n c\n(3 filas)\n</code></pre> <p>En la segunda consulta, no podr\u00edamos haber escrito <code>SELECT * FROM test1 GROUP BY x</code>, porque no hay un valor \u00fanico para la columna  <code>y</code>que podr\u00eda estar asociado a cada grupo. Las columnas agrupadas pueden ser  referenciadas en la lista de selecci\u00f3n, ya que tienen un valor \u00fanico en  cada grupo.</p> <p>En general, si se agrupa una tabla, columnas que no se enumeran en  <code>GROUP BY</code>no se puede hacer referencia excepto en las expresiones agregadas. Un ejemplo con expresiones agregadas es:</p> <pre><code> =&gt;SELECT x, sum(y) FROM test1 GROUP BY x;x Suma\n--------\n a 4\n b 5\n c 2\n(3 filas)\n</code></pre> <p>Aqu\u00ed.  <code>sum</code>es una funci\u00f3n agregada que calcula un solo valor sobre todo el grupo. Puede encontrarse m\u00e1s informaci\u00f3n sobre las funciones agregadas disponibles en .</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/02.-Expresiones%20de%20tablas/03.-Las%20cl%C3%A1usulas%20GROUP%20BY%20%20y%20HAVING/#tip","title":"Tip","text":"<p>Agrupaci\u00f3n sin expresiones agregadas calcula efectivamente el  conjunto de valores distintos en una columna. Esto tambi\u00e9n se puede  lograr utilizando la  <code>DISTINCT</code>cl\u00e1usula (v\u00e9ase la secci\u00f3n 7.3.3).</p> <p>He aqu\u00ed otro ejemplo: calcula las ventas totales de cada producto (en lugar de las ventas totales de todos los productos):</p> <pre><code>SELECT product.id, p.name, (ssum(s.units) * p.price) Ventas de AS\n    DESDE los productos de LEFT JOIN ventas s USING (product-id)\n    GRUPO BY product-id, p.name, p.price;\n</code></pre> <p>En este ejemplo, las columnas <code>product_id</code>, <code>p.name</code>, y  <code>p.price</code>debe estar en el  <code>GROUP BY</code>cl\u00e1usula ya que se hacen referencia en la lista de selecci\u00f3n de consulta (pero ver m\u00e1s abajo). La columna  <code>s.units</code>no tiene que estar en el  <code>GROUP BY</code>lista, ya que s\u00f3lo se utiliza en una expresi\u00f3n agregada (<code>sum(...)</code>), que representa las ventas de un producto. Para cada producto, la  consulta devuelve una fila de resumen sobre todas las ventas del  producto.</p> <p>Si se configura la tabla de productos para que, digamos,  <code>product_id</code>es la clave principal, entonces ser\u00eda suficiente para agruparse por  <code>product_id</code>en el ejemplo anterior, dado que el nombre y el precio depender\u00edan funcionalmente del ID del producto, por lo que no habr\u00eda ambiguedad sobre qu\u00e9 nombre y precio volver para cada grupo de identificaci\u00f3n de productos.</p> <p>En estricto SQL,  <code>GROUP BY</code>s\u00f3lo puede agruparse por columnas de la tabla de fuentes, pero PostgreSQL extiende esto para permitir tambi\u00e9n  <code>GROUP BY</code>a agrupar por columnas en la lista de selecci\u00f3n. Tambi\u00e9n se permite la  agrupaci\u00f3n por expresiones de valor en lugar de nombres de columna  simples.</p> <p>Si una tabla se ha agrupado usando <code>GROUP BY</code>, pero s\u00f3lo ciertos grupos son de inter\u00e9s, la  <code>HAVING</code>cl\u00e1usula se puede usar, como un  <code>WHERE</code>cl\u00e1usula, eliminar a los grupos del resultado. La sintaxis es:</p> <pre><code>SELECT  select_listDESDE ... [AQUI ...] GRUPO BY ... VISTO boolean_expression\n</code></pre> <p>Expresiones en el  <code>HAVING</code>cl\u00e1usula puede referirse tanto a las expresiones agrupadas como a expresiones no agrupadas (que necesariamente implican una funci\u00f3n agregada).</p> <p>Ejemplo:</p> <pre><code> =&gt;SELECT x, sum(y) FROM test1 GROUP BY x HAVING sum(y) &gt; 3;x Suma\n--------\n a 4\n b 5\n(2 filas) \n\n\n =&gt;SELECT x, sum(y) FROM test1 GROUP BY x HAVING x &lt; 'c';x Suma\n--------\n a 4\n b 5\n(2 filas)\n</code></pre> <p>Una vez m\u00e1s, un ejemplo m\u00e1s realista:</p> <pre><code>SELECT product.id, p.name, (ssum(s.units) * (p.price - p.cost)) Ganar como resultado\n    DESDE los productos de LEFT JOIN ventas s USING (product-id)\n    D\u00f3nde s.date . CURRENT-DATE - INTERVALO '4 semanas'\n    GRUPO BY product-id, p.name, p.price, p.costo\n    HAVING sum(p.price * s.units) 5000;\n</code></pre> <p>En el ejemplo anterior, el  <code>WHERE</code>la cl\u00e1usula es seleccionar las filas por una columna que no est\u00e1 agrupada  (la expresi\u00f3n es s\u00f3lo verdadera para las ventas durante las \u00faltimas  cuatro semanas), mientras que la  <code>HAVING</code>la cl\u00e1usula restringe la producci\u00f3n a los grupos con ventas brutas totales superiores a 5000. Tenga en cuenta que las expresiones agregadas no  necesariamente necesitan ser las mismas en todas las partes de la  consulta.</p> <p>Si una consulta contiene llamadas de funci\u00f3n agregadas, pero no  <code>GROUP BY</code>cl\u00e1usula, la agrupaci\u00f3n todav\u00eda se produce: el resultado es una sola fila de  grupo (o tal vez no hay filas en absoluto, si la fila \u00fanica es entonces  eliminada por <code>HAVING</code>). Lo mismo ocurre si contiene un  <code>HAVING</code>cl\u00e1usula, incluso sin ninguna llamada de funci\u00f3n agregada o  <code>GROUP BY</code>cl\u00e1usula.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/02.-Expresiones%20de%20tablas/04.-GROUPING%20SETS%2C%20CUBE%20%20y%20ROLLUP/","title":"04.-GROUPING SETS, CUBE  y ROLLUP","text":"<p>Las operaciones de agrupaci\u00f3n m\u00e1s complejas que las descritas anteriormente son posibles utilizando el concepto de conjuntos de agrupaci\u00f3n. Los datos seleccionados por la  <code>FROM</code>y  <code>WHERE</code>cl\u00e1usulas se agrupan por separado por cada conjunto de agrupaci\u00f3n especificada,  agregados calculados para cada grupo, al igual que para simples  <code>GROUP BY</code>cl\u00e1usulas, y luego los resultados devolvieron. Por ejemplo:</p> <pre><code> =&gt;SELECT * FROM items_sold;la marca - tama\u00f1o de ventas\n----------------------\n Foo L 10\n Foo M 20\n Bar - M 15\n Bar L L 5\n(4 filas) \n\n\n =&gt;SELECT brand, size, sum(sales) FROM items_sold GROUP BY GROUPING SETS ((brand), (size), ());la marca - tama\u00f1o de la suma\n-------------------\n Foo 30\n Bara 20\n       L 15\n       M 35\n       - 50\n(5 filas)\n</code></pre> <p>Cada sublist de  <code>GROUPING SETS</code>puede especificar cero o m\u00e1s columnas o expresiones y se interpreta de la misma manera que si estuviera directamente en el  <code>GROUP BY</code>cl\u00e1usula. Un conjunto de agrupaci\u00f3n vac\u00eda significa que todas las filas se  agregan a un solo grupo (que es de salida incluso si no hab\u00eda filas de  entrada presentes), como se describe anteriormente para el caso de  funciones agregadas sin  <code>GROUP BY</code>cl\u00e1usula.</p> <p>Las referencias a las columnas o expresiones de agrupaci\u00f3n se  sustituyen por valores nulos en filas de resultados para grupos de  agrupaci\u00f3n en los que no aparecen esas columnas. Para distinguir de qu\u00e9  agrupaci\u00f3n de una fila de salida en particular se debieron, v\u00e9ase Cuadro 9.63.</p> <p>Se prev\u00e9 una notaci\u00f3n de abreviatura para especificar dos tipos comunes de conjunto de agrupaci\u00f3n. Cl\u00e1usula de la forma</p> <pre><code>ROLLUP ( e1, e2, e3, ... )\n</code></pre> <p>representa la lista dada de las expresiones y todos los prefijos  de la lista, incluida la lista vac\u00eda; por lo tanto, es equivalente a</p> <pre><code>SSETS de GRUPOS (\n    ( e1, e2, e3, ... ),\n    ...\n    ( e1,  e2),\n    (  e1),\n    ()\n)\n</code></pre> <p>Esto se utiliza com\u00fanmente para el an\u00e1lisis de datos jer\u00e1rquicos; por ejemplo, el salario total por departamento, divisi\u00f3n y total de  toda la empresa.</p> <p>Cl\u00e1usula de la forma</p> <pre><code>CUBE ( e1, e2, ... )\n</code></pre> <p>representa la lista dada y todos sus posibles subconjuntos (es decir, el conjunto de energ\u00eda). As\u00ed pues</p> <pre><code>CUBE (a, b, c)\n</code></pre> <p>es equivalente a</p> <pre><code>SSETS de GRUPOS (\n    (a, b, c),\n    (a, b),\n    (a, c),\n    (a ),\n    b, c),\n    b ),\n    c),\n    ()\n)\n</code></pre> <p>Los elementos individuales de una  <code>CUBE</code>o o  <code>ROLLUP</code>la cl\u00e1usula puede ser expresiones individuales, o sublists de elementos  entre par\u00e9ntesis. En este \u00faltimo caso, las sublistas se tratan como  unidades individuales con el fin de generar los conjuntos de agrupaci\u00f3n  individuales. Por ejemplo:</p> <pre><code>CUBE (a, b), c, d)\n</code></pre> <p>es equivalente a</p> <pre><code>SSETS de GRUPOS (\n    (a, b, c, d),\n    (a, b),\n    c, d),\n    ()\n)\n</code></pre> <p>y</p> <pre><code>ROLLUP (a, b, c), d)\n</code></pre> <p>es equivalente a</p> <pre><code>SSETS de GRUPOS (\n    (a, b, c, d),\n    (a, b, c),\n    (a ),\n    ()\n)\n</code></pre> <p>El  <code>CUBE</code>y  <code>ROLLUP</code>las construcciones se pueden utilizar directamente en el  <code>GROUP BY</code>cl\u00e1usula, o anidado dentro de un  <code>GROUPING SETS</code>cl\u00e1usula. Si uno  <code>GROUPING SETS</code>cl\u00e1usula est\u00e1 anidada dentro de otra, el efecto es el mismo que si todos los  elementos de la cl\u00e1usula interior hubieran sido escritos directamente en la cl\u00e1usula exterior.</p> <p>Si varios elementos de agrupamiento se especifican en una sola  <code>GROUP BY</code>cl\u00e1usula, entonces la lista final de conjuntos de agrupaci\u00f3n es el producto cruzado de los art\u00edculos individuales. Por ejemplo:</p> <pre><code>GRUPO BY a, CUBE (b, c), GRUPOS SETS (d), e))\n</code></pre> <p>es equivalente a</p> <pre><code>GRUPO DE GRUPO DE GRUPOS DE GRUPOS (\n    a, b, c), d, (a, b, c, e),\n    a, b, d), (a, b, e),\n    a, c), (a, c, e),\n    a) d), a, e)\n)\n</code></pre> <p>Al especificar m\u00faltiples elementos de agrupamiento, el conjunto final de  conjuntos de agrupamiento podr\u00eda contener duplicados. Por ejemplo:</p> <pre><code>GRUPO POR ROLLUP (a, b), ROLLUP (a, c)\n</code></pre> <p>es equivalente a</p> <pre><code>GRUPO DE GRUPO DE GRUPOS DE GRUPOS (\n    (a, b, c),\n    a, b),\n    a, b),\n    a, c),\n    a),\n    a),\n    a, c),\n    a),\n    ()\n)\n</code></pre> <p>Si estos duplicados son indeseables, se pueden qui eliminar usando el  <code>DISTINCT</code>cl\u00e1usula directamente sobre la <code>GROUP BY</code>. Por lo tanto:</p> <pre><code>GRUPO POR DISTINCT ROLLUP (a, b), ROLLUP (a, c)\n</code></pre> <p>es equivalente a</p> <pre><code>GRUPO DE GRUPO DE GRUPOS DE GRUPOS (\n    (a, b, c),\n    a, b),\n    a, c),\n    a),\n    ()\n)\n</code></pre> <p>Esto no es lo mismo que usar  <code>SELECT DISTINCT</code>porque las filas de salida todav\u00eda pueden contener duplicados. Si alguna de  las columnas no agrupadas contiene NULL, ser\u00e1 indistinguible del NULL  utilizado cuando esa misma columna est\u00e9 agrupada.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/02.-Expresiones%20de%20tablas/04.-GROUPING%20SETS%2C%20CUBE%20%20y%20ROLLUP/#nota","title":"Nota","text":"<p>La construcci\u00f3n  <code>(a, b)</code>normalmente se reconoce en las expresiones como un constructor de filas. Dentro de la  <code>GROUP BY</code>cl\u00e1usula, esto no se aplica en los niveles m\u00e1s altos de las expresiones, y  <code>(a, b)</code>se analiza como una lista de expresiones como se describe anteriormente. Si por alguna raz\u00f3n necesitas un constructor de filas en una expresi\u00f3n de agrupaci\u00f3n, usa <code>ROW(a, b)</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/02.-Expresiones%20de%20tablas/05.-Procesamiento%20de%20la%20funci%C3%B3n%20de%20la%20ventana/","title":"05.-Procesamiento de la funci\u00f3n de la ventana","text":"<p>Si la consulta contiene funciones de ventana (ver secci\u00f3n 3.5, secci\u00f3n 9.22 y secci\u00f3n 4.2.8), estas funciones se eval\u00faan despu\u00e9s de cualquier agrupaci\u00f3n, agregaci\u00f3n y  <code>HAVING</code>El filtrado se realiza. Es decir, si la consulta utiliza alg\u00fan agregado, <code>GROUP BY</code>, o <code>HAVING</code>, entonces las filas vistas por las funciones de la ventana son las filas de grupo en lugar de las filas de mesa originales de <code>FROM</code>/<code>WHERE</code>.</p> <p>Cuando se utilizan m\u00faltiples funciones de ventana, todas las  funciones de la ventana tienen equivalente sint\u00e1cticamente equivalente  <code>PARTITION BY</code>y  <code>ORDER BY</code>Las cl\u00e1usulas en sus definiciones de ventanas est\u00e1n garantizadas para ser  evaluadas en un solo pase sobre los datos. Por lo tanto ver\u00e1n el mismo  orden de orden, incluso si el  <code>ORDER BY</code>no determina de manera \u00fanica un ordenamiento. Sin embargo, no se dan garant\u00edas sobre la evaluaci\u00f3n de funciones que tienen  <code>PARTITION BY</code>o o  <code>ORDER BY</code>especificaciones. (En tales casos se requiere un paso de tipo t\u00edpicamente entre los pases de las evaluaciones de la funci\u00f3n de la ventana, y el tipo no est\u00e1  garantizado para preservar el orden de las filas que su  <code>ORDER BY</code>ve como equivalente.)</p> <p>Actualmente, las funciones de la ventana siempre requieren datos  pre-sorte, por lo que la salida de consulta se ordenar\u00e1 de acuerdo con  una u otra de las funciones de la ventana' <code>PARTITION BY</code>/ <code>ORDER BY</code>cl\u00e1usulas. Sin embargo, no se recomienda confiar en esto. Util\u00edcese un nivel superior expl\u00edcito  <code>ORDER BY</code>cl\u00e1usula si quieres estar seguro de que los resultados se clasifican de una manera particular.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/02.-Expresiones%20de%20tablas/01.-La%20cl%C3%A1usula%20FROM/","title":"Index","text":"<p>El  <code>FROM</code>la cl\u00e1usula deriva un cuadro de uno o m\u00e1s cuadros que figuran en una lista de referencia de la tabla separada por comas.</p> <pre><code>De los DE  table_reference[,  table_reference[, ...]]\n</code></pre> <p>Una referencia de tabla puede ser un nombre de tabla  (posiblemente calificado de esquema), o una tabla derivada, como una  subcoquer\u00eda, a  <code>JOIN</code>construir, o combinaciones complejas de estos. Si se enumera m\u00e1s de una referencia de cuadro en la  <code>FROM</code>cl\u00e1usula, las tablas se entrenan (es decir, se forma el producto cartesiano de sus filas; v\u00e9ase m\u00e1s abajo). El resultado de la  <code>FROM</code>lista es una tabla virtual intermedia que puede estar sujeta a transformaciones por la <code>WHERE</code>, <code>GROUP BY</code>, y  <code>HAVING</code>cl\u00e1usulas y es finalmente el resultado de la expresi\u00f3n general de la tabla.</p> <p>Cuando una tabla de referencia nombra una tabla que es la madre  de una jerarqu\u00eda de herencia de tabla, la referencia de la tabla produce filas no s\u00f3lo de esa tabla sino de todas sus tablas descendientes, a  menos que la palabra clave  <code>ONLY</code>precede al nombre de la tabla. Sin embargo, la referencia produce s\u00f3lo las  columnas que aparecen en la tabla nombrada, se ignoran las columnas  a\u00f1adientes en subtables.</p> <p>En vez de escribir  <code>ONLY</code>antes del nombre de la mesa, puede escribir  <code>*</code>despu\u00e9s del nombre de la tabla para especificar expl\u00edcitamente que se incluyen  las tablas descendientes. Ya no hay ninguna raz\u00f3n real para usar esta  sintaxis, porque buscar tablas de descendientes es ahora siempre el  comportamiento predeterminado. Sin embargo, se apoya para la  compatibilidad con versiones m\u00e1s antiguas.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/02.-Expresiones%20de%20tablas/01.-La%20cl%C3%A1usula%20FROM/01.-Uni%C3%B3n%20de%20tablas/","title":"01.-Uni\u00f3n de tablas","text":"<p>Una tabla unida es una tabla derivada de otras dos tablas (reales o  derivadas) de acuerdo con las reglas del tipo de uni\u00f3n particular. Las  enseres internas, exteriores y cruzadas est\u00e1n disponibles. La sintaxis  general de una tabla unida es</p> <pre><code>   T1join_typeT2[  join_condition]\n</code></pre> <p>Las se unen de todo tipo pueden encadenarse, o anidadar: o ambos  <code>T1</code>y  <code>T2</code>se puede unir mesas. Par\u00e9ntesis se pueden utilizar alrededor  <code>JOIN</code>cl\u00e1usulas para controlar el orden de uni\u00f3n. En ausencia de par\u00e9ntesis,  <code>JOIN</code>cl\u00e1usulas anidan izquierda a derecha.</p> <p>Unirse a los tipos</p> <ul> <li>Cross se une  </li> </ul> <p>\u200b            <code>*</code>T1<code>*CROSS JOIN *</code>T2<code>*</code>            Por cada posible combinaci\u00f3n de filas de  <code>T1</code>y  <code>T2</code>(es decir, un producto cartesiano), la tabla unida contendr\u00e1 una fila que consiste en todas las columnas en  <code>T1</code>seguido por todas las columnas en <code>T2</code>. Si las tablas tienen filas N y M respectivamente, la tabla unida tendr\u00e1 N * M filas.             <code>FROM *</code>T1<code>* CROSS JOIN *</code>T2<code>*</code>es equivalente a  <code>FROM *</code>T1<code>* INNER JOIN *</code>T2<code>* ON TRUE</code>(ver m\u00e1s abajo). Tambi\u00e9n es equivalente a <code>FROM *</code>T1<code>*, *</code>T2<code>*</code>.                          Nota              Esta \u00faltima equivalencia no se mantiene exactamente cuando aparecen m\u00e1s de dos cuadros, porque  <code>JOIN</code>se une m\u00e1s firmemente que coma. Por ejemplo  <code>FROM *</code>T1<code>* CROSS JOIN *</code>T2<code>* INNER JOIN *</code>T3<code>* ON *</code>condition<code>*</code>no es lo mismo que  <code>FROM *</code>T1<code>*, *</code>T2<code>* INNER JOIN *</code>T3<code>* ON *</code>condition<code>*</code>porque el  <code>condition</code>puede hacer referencia  <code>T1</code>en el primer caso, pero no en el segundo.                      </p> <ul> <li>Se une a los calificados  </li> </ul> <p>\u200b            <code>*</code>T1<code>*- [INNER]* \" LEFT\" Right FULL [OUTER] \u00fanete  *</code>T2<code>*En el  *</code>boolean_expression<code>**</code>T1<code>*- [INNER]* \" LEFT\" Right FULL [OUTER] \u00fanete  *</code>T2<code>*USING (  *</code>join column list<code>*) *</code>T1<code>*NATURAL - [INNER] - LEFT - RIGHT - FULL - [OUTER] . . . . . . . . . . . . . . . . . . . . . . . .  *</code>T2<code>*</code>            Las palabras  <code>INNER</code>y  <code>OUTER</code>son opcionales en todas sus formas.  <code>INNER</code>es el impago; <code>LEFT</code>, <code>RIGHT</code>, y  <code>FULL</code>implicar una uni\u00f3n exterior.            La condici\u00f3n de uni\u00f3n se especifica en la  <code>ON</code>o o  <code>USING</code>cl\u00e1usula, o impl\u00edcitamente por la palabra <code>NATURAL</code>. La condici\u00f3n de uni\u00f3n determina qu\u00e9 filas de las dos tablas de fuentes se consideran a la combinaci\u00f3n, como se explica en detalle a continuaci\u00f3n.            Los posibles tipos de uni\u00f3n cualificada son:                                          <code>INNER JOIN</code>                                  Para cada fila R1 de T1, la tabla unida tiene una fila para cada fila en T2 que satisface la condici\u00f3n de uni\u00f3n con R1.                                <code>LEFT OUTER JOIN</code>                                    Primero, se realiza una uni\u00f3n interior. Entonces,  para cada fila en T1 que no satisface la condici\u00f3n de uni\u00f3n con ninguna  fila en T2, se a\u00f1ade una fila a unida con valores nulos en columnas de  T2. As\u00ed, la tabla unida siempre tiene al menos una fila por cada fila en T1.                                <code>RIGHT OUTER JOIN</code>                                    Primero, se realiza una uni\u00f3n interior. Entonces,  para cada fila en T2 que no satisface la condici\u00f3n de uni\u00f3n con ninguna  fila en T1, se a\u00f1ade una fila unida con valores nulos en columnas de T1. Este es el contrario de una uni\u00f3n izquierda: la tabla de resultados  siempre tendr\u00e1 una fila para cada fila en T2.                                <code>FULL OUTER JOIN</code>                                  Primero, se realiza una uni\u00f3n interior. Entonces,  para cada fila en T1 que no satisface la condici\u00f3n de uni\u00f3n con ninguna  fila en T2, se a\u00f1ade una fila a unida con valores nulos en columnas de  T2. Adem\u00e1s, para cada fila de T2 que no satisface la condici\u00f3n de uni\u00f3n  con ninguna fila en T1, se a\u00f1ade una fila unida con valores nulos en las columnas de T1.                                                      El  <code>ON</code>cl\u00e1usula es el tipo m\u00e1s general de condici\u00f3n de uni\u00f3n: toma una expresi\u00f3n de  valor booleano del mismo tipo que se utiliza en un  <code>WHERE</code>cl\u00e1usula. Un par de filas de  <code>T1</code>y  <code>T2</code>coincidencia si el  <code>ON</code>la expresi\u00f3n se eval\u00faa a la verdad.            El  <code>USING</code>cl\u00e1usula es una abreviatura que le permite aprovechar la situaci\u00f3n espec\u00edfica en la que ambos lados de la uni\u00f3n utilizan el mismo nombre para la columna de uni\u00f3n (s). Toma una lista separada por comas de los nombres de  columna compartida y forma una condici\u00f3n de uni\u00f3n que incluye una  comparaci\u00f3n de igualdad para cada uno. Por ejemplo, uni\u00e9ndose  <code>T1</code>y  <code>T2</code>con  <code>USING (a, b)</code>produce la condici\u00f3n de uni\u00f3n <code>ON *</code>T1<code>*.a = *</code>T2<code>*.a AND *</code>T1<code>*.b = *</code>T2<code>*.b</code>.            Adem\u00e1s, la producci\u00f3n de  <code>JOIN USING</code>suprime columnas redundantes: no hay necesidad de imprimir ambas columnas  emparejados, ya que deben tener valores iguales. Mientras que  <code>JOIN ON</code>produce todas las columnas de  <code>T1</code>seguido por todas las columnas de <code>T2</code>,  <code>JOIN USING</code>produce una columna de salida para cada uno de los pares de columnas listados  (en el orden listado), seguido de las columnas restantes de <code>T1</code>, seguido de las columnas restantes de <code>T2</code>.              Por \u00faltimo,  <code>NATURAL</code>es una forma abreviada de <code>USING</code>: forma a  <code>USING</code>lista que consiste en todos los nombres de columna que aparecen en ambas tablas de entrada. Al igual que con <code>USING</code>, estas columnas aparecen una sola vez en la tabla de salida. Si no hay nombres comunes de columnas,  <code>NATURAL JOIN</code>se comporta como <code>JOIN ... ON TRUE</code>, produciendo una uni\u00f3n de un producto cruzado.                          Nota               <code>USING</code>est\u00e1 razonablemente a salvo de los cambios de columna en las relaciones  unidas, ya que s\u00f3lo las columnas enumeradas se combinan.  <code>NATURAL</code>es considerablemente m\u00e1s arriesgada, ya que cualquier cambio de esquema en cualquiera de las dos relaciones que haga que un nuevo nombre de  columna coincide con la presencia har\u00e1 que el join combine esa nueva  columna tambi\u00e9n.                      </p> <p>Para juntar esto, asuma que tenemos mesas <code>t1</code>:</p> <pre><code>num ..no\n----------\n   1 A\n   2 b\n   3 c\n</code></pre> <p>y <code>t2</code>:</p> <pre><code>valor\n-----------\n   1 xxx\n   3 - Yyyy\n   5 zzz\n</code></pre> <p>entonces obtenemos los siguientes resultados para los diversos \u00fanete:</p> <pre><code> =&gt;SELECT * FROM t1 CROSS JOIN t2;de ano. de valor\n---------------------------\n   1 xxx\n   1 a 3 yyy\n   1 a 5 zzz\n   2 xxx\n   2 a.\n   2 a.\n   3o c 1 xxx\n   3 c 3 yyyy\n   3o c 5 zzz\n(9 filas) \n\n\n =&gt;SELECT * FROM t1 INNER JOIN t2 ON t1.num = t2.num;de ano. de valor\n---------------------------\n   1 xxx\n   3 c 3 yyyy\n(2 filas) \n\n\n =&gt;SELECT * FROM t1 INNER JOIN t2 USING (num);n\u00famero de valor\n--------------------\n   1 xxx\n   3 c, yyyy\n(2 filas) \n\n\n =&gt;SELECT * FROM t1 NATURAL INNER JOIN t2;n\u00famero de valor\n--------------------\n   1 xxx\n   3 c, yyyy\n(2 filas) \n\n\n =&gt;SELECT * FROM t1 LEFT JOIN t2 ON t1.num = t2.num;de ano. de valor\n---------------------------\n   1 xxx\n   2 B\n   3 c 3 yyyy\n(3 filas) \n\n\n =&gt;SELECT * FROM t1 LEFT JOIN t2 USING (num);n\u00famero de valor\n--------------------\n   1 xxx\n   2 a b\n   3 c, yyyy\n(3 filas) \n\n\n =&gt;SELECT * FROM t1 RIGHT JOIN t2 ON t1.num = t2.num;de ano. de valor\n---------------------------\n   1 xxx\n   3 c 3 yyyy\n     5 zzz\n(3 filas) \n\n\n =&gt;SELECT * FROM t1 FULL JOIN t2 ON t1.num = t2.num;de ano. de valor\n---------------------------\n   1 xxx\n   2 B\n   3 c 3 yyyy\n     5 zzz\n(4 filas)\n</code></pre> <p>La condici\u00f3n de uni\u00f3n especificada con  <code>ON</code>tambi\u00e9n puede contener condiciones que no se relacionan directamente con la  uni\u00f3n. Esto puede resultar \u00fatil para algunas consultas, pero necesita  ser pensado cuidadosamente. Por ejemplo:</p> <pre><code> =&gt;SELECT * FROM t1 LEFT JOIN t2 ON t1.num = t2.num AND t2.value = 'xxx';de ano. de valor\n---------------------------\n   1 xxx\n   2 B\n   3o c\n(3 filas)\n</code></pre> <p>Nota que la colocaci\u00f3n de la restricci\u00f3n en la  <code>WHERE</code>la cl\u00e1usula produce un resultado diferente:</p> <pre><code> =&gt;SELECT * FROM t1 LEFT JOIN t2 ON t1.num = t2.num WHERE t2.value = 'xxx';de ano. de valor\n---------------------------\n   1 xxx\n(1 fila)\n</code></pre> <p>Esto se debe a que una restricci\u00f3n se coloca en la  <code>ON</code>la cl\u00e1usula se tramita antes de la adhesi\u00f3n, mientras que una restricci\u00f3n se coloca en la  <code>WHERE</code>la cl\u00e1usula se tramita despu\u00e9s de la adhesi\u00f3n. Eso no importa con las uniones internas, pero importa mucho con las uniones externas.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/02.-Expresiones%20de%20tablas/01.-La%20cl%C3%A1usula%20FROM/02.-Tablas%20y%20alias%20de%20columnas/","title":"02.-Tablas y alias de columnas","text":"<p>Se puede dar un nombre temporal a tablas y complejas referencias de  tablas para ser utilizadas para referencias a la tabla derivada en el  resto de la consulta. Esto se llama alias de mesa.</p> <p>Para crear un alias de tabla, escriba</p> <pre><code>De los DE  table_referenceAS alias\n</code></pre> <p>o o</p> <pre><code>De los DE  table_referencealias\n</code></pre> <p>El  <code>AS</code>La palabra clave es ruido opcional.  <code>alias</code>puede ser cualquier identificador.</p> <p>Una aplicaci\u00f3n t\u00edpica de alias de tabla es asignar  identificadores cortos a los nombres de tabla largas para mantener las  cl\u00e1usulas de uni\u00f3n legibles. Por ejemplo:</p> <pre><code>SELECT * DESDE algunos.verylong.table.name s JOIN another.fairly-long.name a ON s.id = a.num;\n</code></pre> <p>El alias se convierte en el nuevo nombre de la referencia de la tabla en lo que se refiere a la consulta actual, no se permite  referirse a la tabla por el nombre original en otra parte de la  consulta. Por lo tanto, esto no es v\u00e1lido:</p> <pre><code>SELECT * DESDE my-table COMERE M\u00ed-table.a.a 5; -- incorrecto\n</code></pre> <p>Los alias de la tabla son principalmente para la conveniencia  notariacional, pero es necesario utilizarlos cuando se une una mesa a s\u00ed misma, por ejemplo:</p> <pre><code>SELECT * FROM people AS mother JOIN people AS child ON mother.id = child.mother-id;\n</code></pre> <p>Las par\u00e9ntheses se utilizan para resolver ambiguedades. En el siguiente ejemplo, la primera declaraci\u00f3n asigna el alias  <code>b</code>a la segunda instancia de <code>my_table</code>, pero la segunda declaraci\u00f3n asigna el alias al resultado de la uni\u00f3n:</p> <pre><code>SELECT * DESDE my-table como una CROSS JOIN my-table AS b ...\nSELECT * DESDE (my-table AS a CROSS JOIN my-table) AS b ...\n</code></pre> <p>Otra forma de alias de tabla da nombres temporales a las columnas de la tabla, as\u00ed como a la propia tabla:</p> <pre><code>De los DE  table_reference[AS]  alias(  column1[,  column2[, ...]] )\n</code></pre> <p>Si se especifican menos alias de columna que la tabla real  tiene columnas, las columnas restantes no se renombran. Esta sintaxis es especialmente \u00fatil para auto-coinchas o subcosechas.</p> <p>Cuando se aplica un alias a la salida de un  <code>JOIN</code>cl\u00e1usula, el alias esconde el nombre original (s) dentro de la <code>JOIN</code>. Por ejemplo:</p> <pre><code>SELECT a.* DESDE my-table AS a JOIN your.table AS b ON ...\n</code></pre> <p>es SQL v\u00e1lido, pero:</p> <pre><code>SELECT a.* DESDE (mi\u00e1til como unirte a tu tabla como...) AS c\n</code></pre> <p>no es v\u00e1lido; el alias de la tabla  <code>a</code>no es visible fuera del alias <code>c</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/02.-Expresiones%20de%20tablas/01.-La%20cl%C3%A1usula%20FROM/03.-Subclases/","title":"03.-Subclases","text":"<p>Los subconexestos que especifiquen una tabla derivada deben estar  encerrados entre par\u00e9ntesis. Se les puede asignar un nombre de ejemplo  de cuadro, y de manera opcional los nombres de alias de la columna (como en la secci\u00f3n 7.2.1.2). Por ejemplo:</p> <pre><code>DESDE (SELECT * FROM table1) Como alias.\n</code></pre> <p>Este ejemplo es equivalente a <code>FROM table1 AS alias_name</code>. Casos m\u00e1s interesantes, que no pueden reducirse a una uni\u00f3n simple, surgen cuando la subcroner\u00eda implica agrupar o agregaci\u00f3n.</p> <p>Una subcoquea tambi\u00e9n puede ser una  <code>VALUES</code>lista:</p> <pre><code>DES (VALUES ('anne', 'smith'), ('bob', 'jones'), ('joe', 'blow')\n     Nombres AS(primero, \u00faltimo)\n</code></pre> <p>Una vez m\u00e1s, un alias de mesa es opcional. Asignar nombres de alias a las columnas de la  <code>VALUES</code>lista es opcional, pero es una buena pr\u00e1ctica. Para m\u00e1s informaci\u00f3n, v\u00e9ase la secci\u00f3n 7.7.</p> <p>De acuerdo con la norma SQL, se debe suministrar un nombre de alias de cuadro para una subcoche. PostgreSQL permite  <code>AS</code>y el alias a omitir, pero escribir uno es una buena pr\u00e1ctica en el c\u00f3digo SQL que podr\u00eda ser portado a otro sistema.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/02.-Expresiones%20de%20tablas/01.-La%20cl%C3%A1usula%20FROM/04.-Funciones%20de%20Tabla/","title":"04.-Funciones de Tabla","text":"<p>Las funciones de la tabla son funciones que producen un conjunto de  filas, compuestas por tipos de datos de base (tipos escalares) o tipos  de datos compuestos (hileras de mesa). Se utilizan como una mesa, vista o sutilci\u00f3n en el  <code>FROM</code>cl\u00e1usula de una consulta. Columnas devueltas por las funciones de la tabla se pueden incluir en <code>SELECT</code>, <code>JOIN</code>, o  <code>WHERE</code>cl\u00e1usulas de la misma manera que las columnas de una tabla, vista o sutilci\u00f3n.</p> <p>Las funciones de la tabla tambi\u00e9n pueden combinarse utilizando la  <code>ROWS FROM</code>sintaxis, con los resultados devueltos en columnas paralelas; el n\u00famero de filas  de resultados en este caso es el del mayor resultado de la funci\u00f3n, con  resultados m\u00e1s peque\u00f1os acolchados con valores nulos para igualar.</p> <pre><code> function_call[WITH ORDINALITY] [[AS]  table_alias[ column_alias[, ... ])]]]\nROWS DESDE(  function_call[, ... ]) [WITH ORDINALITY] [[AS]  table_alias[ column_alias[, ... ])]]]\n</code></pre> <p>Si el  <code>WITH ORDINALITY</code>se especifica una columna adicional de tipo  <code>bigint</code>se a\u00f1adir\u00e1 a las columnas de resultados de la funci\u00f3n. Esta columna numera las filas del resultado de la funci\u00f3n establecido, a partir de 1. (Esta es una generalizaci\u00f3n de la sintaxis est\u00e1ndar SQL para <code>UNNEST ... WITH ORDINALITY</code>.) Por defecto, la columna ordinal se llama <code>ordinality</code>, pero un nombre de columna diferente se puede asignar a ella utilizando un  <code>AS</code>cl\u00e1usula.</p> <p>La funci\u00f3n de mesa especial  <code>UNNEST</code>podr\u00e1 llamarse con cualquier n\u00famero de par\u00e1metros de array, y devuelve un n\u00famero correspondiente de columnas, como si  <code>UNNEST</code>(Secci\u00f3n 9.19) se hab\u00eda llamado a cada par\u00e1metro por separado y se hab\u00eda combinado utilizando la  <code>ROWS FROM</code>Construye.</p> <pre><code>UNNEST (CNEST)  array_expression[, ... ]) [WITH ORDINALITY] [[AS]  table_alias[ column_alias[, ... ])]]]\n</code></pre> <p>Si no  <code>table_alias</code>se especifica, el nombre de la funci\u00f3n se utiliza como nombre de la tabla; en el caso de un  <code>ROWS FROM()</code>Construye, se usa el nombre de la primera funci\u00f3n.</p> <p>Si no se suministran los alias de la columna, entonces para una funci\u00f3n que devuelve un tipo de datos de base, el nombre de la columna  es tambi\u00e9n el mismo que el nombre de la funci\u00f3n. Para una funci\u00f3n  devolviendo un tipo compuesto, las columnas de resultados reciben los  nombres de los atributos individuales del tipo.</p> <p>Algunos ejemplos:</p> <pre><code>CREATE TABLE foo (fooide int, foosubid int, texto de apellido);\n\nCREATE FUNCTION getfoo(int) RETURNS SETOF foo AS $$\n    SELECT * FROM foo WHERE fooid = $1;\n$$ LANGUAGE SQL;\n\nSELECT * DESDE getfoo(1) AS t1;\n\nSELECT * DESDE Foo\n    Donde foosubid IN (\n                        SELECT foosubid\n                        DES DE getfoo(foo.fooid) z\n                        D\u00f3nde z.fooid = fooide\n                      );\n\nCREATE VIEW vw-getfoo AS SELECT * DESDE getfoo(1);\n\nSELECT * DESDE vw-getfoo;\n</code></pre> <p>En algunos casos es \u00fatil definir funciones de tabla que puedan  devolver diferentes conjuntos de columnas dependiendo de c\u00f3mo se  invoquen. Para apoyar esto, la funci\u00f3n de la tabla puede ser declarada  como devolviendo el pseudotipo  <code>record</code>sin no  <code>OUT</code>par\u00e1metros. Cuando tal funci\u00f3n se utiliza en una consulta, la estructura de la fila esperada debe ser especificada en la propia consulta, para que el  sistema pueda saber c\u00f3mo analizar y planificar la consulta. Esta  sintaxis parece:</p> <pre><code> function_call[AS]  alias( column_definition[, ... ])\n function_callAS [alias] ( column_definition[, ... ])\nROWS DESDE( ...  function_callAS ( column_definition[, ... ]) [, ... ])\n</code></pre> <p>Cuando no se utiliza el  <code>ROWS FROM()</code>sintaxis, el  <code>column_definition</code>lista sustituye a la lista de alias de la columna que de otro modo podr\u00eda adjuntarse a la  <code>FROM</code>\u00edtem; los nombres en las definiciones de la columna sirven como alias de columna. Cuando se usa el  <code>ROWS FROM()</code>sintaxis, a  <code>column_definition</code>lista puede adjuntarse a cada funci\u00f3n miembro por separado; o si s\u00f3lo hay una funci\u00f3n de miembro y no  <code>WITH ORDINALITY</code>cl\u00e1usula, a  <code>column_definition</code>lista puede escribirse en lugar de una lista de alias de columna. <code>ROWS FROM()</code>.</p> <p>Considere este ejemplo:</p> <pre><code>SELECT *\n    DESDE dblink('dbname=mydb', 'SELECT proname, prosrc FROM pg-proc')\n      AS t1(no de nombre, texto prosrc)\n    LOHERE proname LIKE 'bytea%';\n</code></pre> <p>La funci\u00f3n dblink (parte del m\u00f3dulo dblink) ejecuta una consulta remota. Se declara que vuelve  <code>record</code>ya que podr\u00eda ser utilizado para cualquier tipo de consulta. El conjunto  de columnas real debe especificarse en la consulta de llamada para que  el analizador sepa, por ejemplo, qu\u00e9  <code>*</code>Deber\u00eda expandirse.</p> <p>Este ejemplo utiliza <code>ROWS FROM</code>:</p> <pre><code>SELECT *\nDe ROWS DESDE\n    (\n        json.to.recordset('['A\":b:\"foo\"-\"a\":\"100\",b\":\"bar\"]')\n            AS (un INTEGER, b TEXT),\n        generaseries (1, 3)\n    ) AS x (p, q, s)\nORDEN POR p;\n\n  p q . s\n--------------\n  40 \"n\u00fafo\" 1\n 100 bar 2\n     3\n</code></pre> <p>Se une a dos funciones en un solo  <code>FROM</code>Objetivo.  <code>json_to_recordset()</code>se instruir\u00e1 a devolver dos columnas, la primera  <code>integer</code>y la segunda <code>text</code>. El resultado de  <code>generate_series()</code>se usa directamente. El  <code>ORDER BY</code>cl\u00e1usula ordena los valores de la columna como n\u00fameros enteros.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/02.-Expresiones%20de%20tablas/01.-La%20cl%C3%A1usula%20FROM/05.-%20La%20subclase%20LATERAL/","title":"05.- La subclase LATERAL","text":"<p>Subcomisiones apareciendo en  <code>FROM</code>puede ir precedido de la palabra clave <code>LATERAL</code>. Esto les permite las columnas de referencia proporcionadas por los  <code>FROM</code>art\u00edculos. (Sin embargo <code>LATERAL</code>, cada subquery se eval\u00faa de forma independiente y por lo tanto no puede cotegar ning\u00fan otro  <code>FROM</code>Tema.)</p> <p>Funciones de mesa que aparecen en  <code>FROM</code>tambi\u00e9n puede ir precedido de la palabra clave <code>LATERAL</code>, pero para funciones la palabra clave es opcional; los argumentos de la  funci\u00f3n pueden contener referencias a columnas proporcionadas por los  <code>FROM</code>art\u00edculos en cualquier caso.</p> <p>A  <code>LATERAL</code>elemento puede aparecer en el nivel superior en el  <code>FROM</code>lista, o dentro de un  <code>JOIN</code>\u00c1rbol. En este \u00faltimo caso tambi\u00e9n puede referirse a cualquier art\u00edculo que est\u00e9 en la parte izquierda de un  <code>JOIN</code>que est\u00e1 en el lado derecho.</p> <p>Cuando a  <code>FROM</code>El art\u00edculo contiene  <code>LATERAL</code>las referencias cruzadas, la evaluaci\u00f3n procede de la siguiente manera: para cada fila de la  <code>FROM</code>elemento que proporciona la columna (s) repartidas, o conjunto de filas de m\u00faltiples  <code>FROM</code>\u00edtems que proporcionan las columnas, el  <code>LATERAL</code>elemento se eval\u00faa usando los valores de la fila o fila de las columnas. Las  filas resultantes se unen como de costumbre con las filas de las que  fueron calculados. Esto se repite para cada fila o conjunto de filas de  la tabla fuente de la columna (s).</p> <p>Un ejemplo trivial de  <code>LATERAL</code>es</p> <pre><code>SELECT * DESDE, LATERAL (SELECT * FROM bar WHERE bar.id = foo.bar-id) ss;\n</code></pre> <p>Esto no es especialmente \u00fatil ya que tiene exactamente el mismo resultado que el m\u00e1s convencional</p> <pre><code>SELECT * FROM foo, bar WHERE bar.id = foo.bar-id;\n</code></pre> <p><code>LATERAL</code>es principalmente \u00fatil cuando la columna de referencia cruzada es  necesaria para la computaci\u00f3n de las filas para ser unido. Una  aplicaci\u00f3n com\u00fan est\u00e1 proporcionando un valor argumental para una  funci\u00f3n de desechaci\u00f3n de set. Por ejemplo, suponiendo que  <code>vertices(polygon)</code>Devuelve el conjunto de v\u00e9rtices de un pol\u00edgono, podr\u00edamos identificar v\u00e9rtices  cercanos de pol\u00edgonos almacenados en una mesa con:</p> <pre><code>SELECT p1.id, p2.id, v1, v2\nDe pol\u00edgonos p1, pol\u00edgonos p2,\n     V\u00e9rtices LATERAL(p1.poly) v1,\n     V\u00e9rtices LATERAL(p2.poly) v2\nDO ADEM\u00c1 (v1 - v2) 10 Y p1.id = p2.id;\n</code></pre> <p>Esta consulta tambi\u00e9n podr\u00eda ser escrita</p> <pre><code>SELECT p1.id, p2.id, v1, v2\nDe pol\u00edgonos p1 CROSS JOIN V\u00e9rtices LATERALES(p1.poly) v1.\n     pol\u00edgones p2 CROSS JOIN V\u00e9rtices LATERALES(p2.poly) v2\nDO ADEM\u00c1 (v1 - v2) 10 Y p1.id = p2.id;\n</code></pre> <p>o en varias otras formulaciones equivalentes. (Como ya se ha mencionado,  <code>LATERAL</code>La palabra clave es innecesaria en este ejemplo, pero la usamos para mayor claridad.)</p> <p>A menudo es particularmente \u00fatil para  <code>LEFT JOIN</code>a a  <code>LATERAL</code>subquery, para que las filas de fuentes aparezcan en el resultado incluso si el  <code>LATERAL</code>la subconexsi\u00f3n no les produce filas. Por ejemplo, si  <code>get_product_names()</code>Devuelve los nombres de los productos fabricados por un fabricante, pero algunos fabricantes de nuestra tabla no producen actualmente productos,  podr\u00edamos averiguar cu\u00e1les son as\u00ed:</p> <pre><code>SELECT m.name\nDe los fabricantes m LEFT JOIN LATERAL get-product.names(m.id) pname ON true\nDONDE pname IS NULL;\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/03.-%20Selecci%C3%B3n%20de%20listas/","title":"Index","text":"<p>Como se muestra en la secci\u00f3n anterior, la expresi\u00f3n de la tabla en el  <code>SELECT</code>El comando construye una tabla virtual intermedia posiblemente combinando  tablas, vistas, eliminando filas, agrupando, etc. Esta tabla se pasa  finalmente al procesamiento por la lista de selecci\u00f3n. La lista selecta determina qu\u00e9 columnas de la tabla intermedia son realmente salida.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/03.-%20Selecci%C3%B3n%20de%20listas/01.-Art%C3%ADculos%20de%20la%20lista/","title":"01.-Art\u00edculos de la lista","text":"<p>El tipo m\u00e1s simple de lista select es  <code>*</code>que emite todas las columnas que produce la expresi\u00f3n de la tabla. De lo contrario, una lista selecta es una lista de expresiones de valor separada por comas (tal como se define en ). Por ejemplo, podr\u00eda ser una lista de nombres de columnas:</p> <pre><code>SELECT a, b, c DESDE ...\n</code></pre> <p>Nombres de las columnas <code>a</code>, <code>b</code>, y  <code>c</code>son los nombres reales de las columnas de cuadros referenciados en el  <code>FROM</code>cl\u00e1usula, o los alias que se les han dado, tal como se explica en la secci\u00f3n 7.2.1.2. El espacio de nombre disponible en la lista de selecci\u00f3n es el mismo que en el  <code>WHERE</code>cl\u00e1usula, a menos que se utilice la agrupaci\u00f3n, en cuyo caso es la misma que en el  <code>HAVING</code>cl\u00e1usula.</p> <p>Si m\u00e1s de una tabla tiene una columna del mismo nombre, tambi\u00e9n se debe dar el nombre de la tabla, como en:</p> <pre><code>SELECT tbl1.a, tbl2.a, tbl1.b DESDE ...\n</code></pre> <p>Cuando se trabaja con varias tablas, tambi\u00e9n puede ser \u00fatil pedir todas las columnas de una tabla en particular:</p> <pre><code>SELECT tbl1.*, tbl2.a DESDE ...\n</code></pre> <p>Ver secci\u00f3n 8.16.5 para m\u00e1s informaci\u00f3n sobre la  <code>table_name</code><code>.*</code>notaci\u00f3n.</p> <p>Si se utiliza una expresi\u00f3n de valor arbitrario en la lista  selecta, conceptualmente a\u00f1ade una nueva columna virtual a la tabla  devuelta. La expresi\u00f3n del valor se eval\u00faa una vez para cada fila de  resultados, con los valores de la fila sustituidos por cualquier  referencia de columna. Pero las expresiones en la lista selecta no  tienen que hacer referencia a ninguna columna en la expresi\u00f3n de la  tabla de la  <code>FROM</code>por ejemplo, pueden ser expresiones aritm\u00e9ticas constantes.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/03.-%20Selecci%C3%B3n%20de%20listas/02.-Etiquetas%20de%20columnas/","title":"02.-Etiquetas de columnas","text":"<p>Las entradas en la lista de selecci\u00f3n pueden ser asignadas nombres  para su posterior procesamiento, tales como para su uso en un  <code>ORDER BY</code>cl\u00e1usula o para la visualizaci\u00f3n por la aplicaci\u00f3n del cliente. Por ejemplo:</p> <pre><code>SELECT a AS valor, b . c AS sum DESDE ...\n</code></pre> <p>Si no se especifica el nombre de la columna de salida utilizando <code>AS</code>, el sistema asigna un nombre de columna por defecto. Para simples  referencias de columna, este es el nombre de la columna referenciada.  Para las llamadas de la funci\u00f3n, este es el nombre de la funci\u00f3n. Para  expresiones complejas, el sistema generar\u00e1 un nombre gen\u00e9rico.</p> <p>El  <code>AS</code>palabra clave es generalmente opcional, pero en algunos casos donde el nombre  de la columna deseada coincide con una palabra clave de PostgreSQL, debe escribir  <code>AS</code>o doble cotizaci\u00f3n el nombre de la columna para evitar la ambiguedad. (Ap\u00e9gnito C muestra qu\u00e9 palabras clave requieren  <code>AS</code>para ser utilizado como una etiqueta de columna.) Por ejemplo,  <code>FROM</code>es una palabra clave, por lo que esto no funciona:</p> <pre><code>SELECT a from, b . c AS sum DESDE ...\n</code></pre> <p>pero cualquiera de estos lo hacen:</p> <pre><code>SELECT a AS de, b . c AS sum DESDE ...\nSELECT a \"from\", b . c AS sum DESDE ...\n</code></pre> <p>Para mayor seguridad contra posibles adiciones de palabras clave futuras, se recomienda que siempre escriba  <code>AS</code>o doble cita el nombre de la columna de salida.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/03.-%20Selecci%C3%B3n%20de%20listas/02.-Etiquetas%20de%20columnas/#nota","title":"Nota","text":"<p>El nombre de las columnas de salida aqu\u00ed es diferente de la  <code>FROM</code>cl\u00e1usula (v\u00e9ase la secci\u00f3n 7.2.1.2). Es posible cambiar el nombre de la misma columna dos veces, pero el  nombre asignado en la lista selecta es el que se transmitir\u00e1.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/03.-%20Selecci%C3%B3n%20de%20listas/03.-DISTINCT/","title":"03.-DISTINCT","text":"<p>Despu\u00e9s de procesar la lista de selecci\u00f3n, la tabla de resultados  puede estar sujeta opcionalmente a la eliminaci\u00f3n de filas duplicadas.  El  <code>DISTINCT</code>palabra clave se escribe directamente despu\u00e9s  <code>SELECT</code>para especificar esto:</p> <pre><code>SELECT DISTINCT  select_list...\n</code></pre> <p>(En lugar de  <code>DISTINCT</code>la palabra clave  <code>ALL</code>se puede utilizar para especificar el comportamiento predeterminado de retener todas las filas.)</p> <p>Obviamente, se consideran distintas dos filas si difieren en al  menos un valor de columna. Los valores nudos se consideran iguales en  esta comparaci\u00f3n.</p> <p>Alternativamente, una expresi\u00f3n arbitraria puede determinar qu\u00e9 filas deben considerarse distintas:</p> <pre><code>SELECT DISTINCT ON ( expression[,  expression...])  select_list...\n</code></pre> <p>Aqu\u00ed.  <code>expression</code>es una expresi\u00f3n de valor arbitraria que se eval\u00faa para todas las filas.  Un conjunto de filas para las que todas las expresiones son iguales se  consideran duplicados, y s\u00f3lo la primera fila del conjunto se mantiene  en la salida. Tenga en cuenta que la primera fila de un conjunto es impredecible a menos que la consulta se soordene en  suficientes columnas para garantizar un orden \u00fanico de las filas que  llegan al  <code>DISTINCT</code>filtro. ( <code>DISTINCT ON</code>el tratamiento se produce despu\u00e9s de  <code>ORDER BY</code>ordenar.)</p> <p>El  <code>DISTINCT ON</code>la cl\u00e1usula no es parte del est\u00e1ndar SQL y a veces se considera mal estilo debido a la naturaleza potencialmente indeterminada de sus resultados.  Con un uso juicioso de  <code>GROUP BY</code>y subcoquer\u00edas en <code>FROM</code>, este constructo se puede evitar, pero a menudo es la alternativa m\u00e1s conveniente.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/08.-Consultas%20WITH%20%28Expresiones%20de%20tablas%20comunes%29/","title":"Index","text":"<p><code>WITH</code>proporciona una manera de escribir declaraciones auxiliares para su uso en una  consulta m\u00e1s grande. Estas declaraciones, que a menudo se denominan  expresiones comunes de la Tabla o CTEs, se puede pensar en definir tablas temporales que existen s\u00f3lo para una consulta. Cada declaraci\u00f3n auxiliar en un  <code>WITH</code>cl\u00e1usula puede ser una <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, o <code>DELETE</code>; y el  <code>WITH</code>la propia cl\u00e1usula se adjunta a una declaraci\u00f3n primaria que puede ser una <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, o <code>MERGE</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/08.-Consultas%20WITH%20%28Expresiones%20de%20tablas%20comunes%29/01.-SELECT%20en%20WITH/","title":"01.-SELECT en WITH","text":"<p>El valor b\u00e1sico de  <code>SELECT</code>en  <code>WITH</code>es descompuestos complicados en partes m\u00e1s simples. Un ejemplo es:</p> <pre><code>Con regionalsales AS (\n    SELECT regi\u00f3n, SUM(amonta) AS total-venta\n    De pedidos\n    GRUPO Por regi\u00f3n\n), las regiones de arriba como AS (\n    Regi\u00f3n SELECT\n    De las ventas regionales\n    DONDE total-salesales - (SELECT SUM(total-sales)/10 DESDE regional-sales)\n)\nSELECT,\n       producto,\n       SUM(cuantidad) AS product-units,\n       SUM(amonta) AS product-sales\nDe pedidos\nDonde regi\u00f3n en IN (\u00c1rcuaci\u00f3n SELECT de las principales regiones)\nGRUPO BY regi\u00f3n, producto;\n</code></pre> <p>que muestra las ventas por producto total en total s\u00f3lo en las principales regiones de ventas. El  <code>WITH</code>cl\u00e1usula define dos declaraciones auxiliares nombradas  <code>regional_sales</code>y <code>top_regions</code>, en el que la producci\u00f3n de  <code>regional_sales</code>se utiliza en  <code>top_regions</code>y la salida de  <code>top_regions</code>se utiliza en la primaria  <code>SELECT</code>la consulta. Este ejemplo podr\u00eda haber sido escrito sin <code>WITH</code>, pero habr\u00edamos necesitado dos niveles de sub-nidos<code>SELECT</code>s. Es un poco m\u00e1s f\u00e1cil seguir por aqu\u00ed.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/08.-Consultas%20WITH%20%28Expresiones%20de%20tablas%20comunes%29/03.-Materializaci%C3%B3n%20com%C3%BAn%20de%20la%20expresi%C3%B3n%20de%20tabla/","title":"03.-Materializaci\u00f3n com\u00fan de la expresi\u00f3n de tabla","text":"<p>Una propiedad \u00fatil de  <code>WITH</code>la consulta es que normalmente se eval\u00faan s\u00f3lo una vez por ejecuci\u00f3n de la consulta de los padres, incluso si son referidos m\u00e1s de una vez por la  consulta o hermano de los padres  <code>WITH</code>las preguntas. As\u00ed, los c\u00e1lculos costosos que se necesitan en m\u00faltiples lugares se pueden colocar dentro de un  <code>WITH</code>consulta para evitar el trabajo redundante. Otra posible aplicaci\u00f3n es prevenir  m\u00faltiples evaluaciones no deseadas de las funciones con efectos  secundarios. Sin embargo, la otra cara de esta moneda es que el  optimizador no es capaz de empujar las restricciones de la consulta de  la matriz hacia abajo en un  <code>WITH</code>consulta, ya que eso podr\u00eda afectar todos los usos de la  <code>WITH</code>la salida de la consulta cuando debe afectar s\u00f3lo a una. La referencia multiplicada  <code>WITH</code>La consulta ser\u00e1 evaluada como est\u00e1 escrita, sin supresi\u00f3n de filas que la consulta de los padres podr\u00eda descartar despu\u00e9s. (Pero, como se  mencion\u00f3 anteriormente, la evaluaci\u00f3n podr\u00eda detenerse temprano si las  referencias a la consulta exigen s\u00f3lo un n\u00famero limitado de filas.)</p> <p>Sin embargo, si a  <code>WITH</code>la consulta es no recursiva y sin efectos secundarios (es decir, es un  <code>SELECT</code>sin funciones vol\u00e1tiles) entonces se puede plegar en la consulta de la  madre, permitiendo la optimizaci\u00f3n conjunta de los dos niveles de  consulta. Por defecto, esto sucede si la consulta de padres hace  referencia a la  <code>WITH</code>consulta s\u00f3lo una vez, pero no si hace referencia a la  <code>WITH</code>m\u00e1s de una vez. Puede anular esa decisi\u00f3n especificando  <code>MATERIALIZED</code>para forzar el c\u00e1lculo separado de la  <code>WITH</code>consulta, o especificando  <code>NOT MATERIALIZED</code>obligarlo a fusionarse en la consulta de los padres. Esta \u00faltima elecci\u00f3n se arriesga a calcular la duplicaci\u00f3n de la  <code>WITH</code>consulta, pero todav\u00eda puede dar un ahorro neto si cada uso de la  <code>WITH</code>consultar necesita s\u00f3lo una peque\u00f1a parte de la  <code>WITH</code>la salida completa de la consulta.</p> <p>Un simple ejemplo de estas reglas es</p> <pre><code>Con w AS (\n    SELECT * DESDE Pel\u00e1ct...\n)\nSELECT * DESDE la clave de la tecla = 123;\n</code></pre> <p>Esto  <code>WITH</code>la consulta se doblar\u00e1, produciendo el mismo plan de ejecuci\u00f3n que</p> <pre><code>SELECT * DESDE la llave de Big-table DOHERE = 123;\n</code></pre> <p>En particular, si hay un \u00edndice en <code>key</code>, probablemente se usar\u00e1 para conseguir s\u00f3lo las filas teniendo <code>key = 123</code>. Por otro lado, en</p> <pre><code>Con w AS (\n    SELECT * DESDE Pel\u00e1ctrico\n)\nSELECT * DESDE W AS w1 JOIN wW2 ONW1.key = w2.ref\nDONDE w2.key = 123;\n</code></pre> <p>el  <code>WITH</code>la consulta se materializar\u00e1, produciendo una copia temporal de  <code>big_table</code>que luego se une a s\u00ed mismo sin el beneficio de ning\u00fan \u00edndice. Esta  consulta se ejecutar\u00e1 de manera mucho m\u00e1s eficiente si se escribe como</p> <pre><code>CON w NO MATERIAECADO (\n    SELECT * DESDE Pel\u00e1ctrico\n)\nSELECT * DESDE W AS w1 JOIN wW2 ONW1.key = w2.ref\nDONDE w2.key = 123;\n</code></pre> <p>para que las restricciones de la consulta de padres puedan aplicarse directamente a los escaneos de <code>big_table</code>.</p> <p>Un ejemplo en el que  <code>NOT MATERIALIZED</code>podr\u00eda ser indeseable</p> <pre><code>Con w AS (\n    SELECT tecla, muy barato-funci\u00f3n(val) como f DESDE algunos.\n)\nSELECT * DESDE W AS w1 JOIN w2 ON w1.f = w2.f;\n</code></pre> <p>Aqu\u00ed, la materializaci\u00f3n de la  <code>WITH</code>consulta asegura que  <code>very_expensive_function</code>se eval\u00faa una vez por fila de mesa, no dos.</p> <p>Los ejemplos anteriores s\u00f3lo muestran  <code>WITH</code>que se utiliza con <code>SELECT</code>, pero se puede apear de la misma manera a <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, o <code>MERGE</code>. En cada caso proporciona efectivamente tablas temporales que pueden ser referidas en el comando principal.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/08.-Consultas%20WITH%20%28Expresiones%20de%20tablas%20comunes%29/03.-Materializaci%C3%B3n%20com%C3%BAn%20de%20la%20expresi%C3%B3n%20de%20tabla/#_1","title":"03.-Materializaci\u00f3n com\u00fan de la expresi\u00f3n de tabla","text":""},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/08.-Consultas%20WITH%20%28Expresiones%20de%20tablas%20comunes%29/04.-Declaraciones%20de%20Data-Modifying%20en%20WITH/","title":"04.-Declaraciones de Data-Modifying en WITH","text":"<p>Puede utilizar la mayor\u00eda de las declaraciones que modifican los datos (<code>INSERT</code>, <code>UPDATE</code>, o <code>DELETE</code>, pero no <code>MERGE</code>) en <code>WITH</code>. Esto le permite realizar varias operaciones diferentes en la misma consulta. Un ejemplo es:</p> <pre><code>Con movido AS (\n    DELETE DE los productos\n    D\u00f3nde\n        \"fecha\" = \"2010-10-01\" Y\n        \"fecha\" . \"2010-11-01\"\n    RETURNING *\n)\nINSERT INTO products.log\nSELECT * DESDE movido.\n</code></pre> <p>Esta consulta efectivamente mueve filas de  <code>products</code>a <code>products_log</code>. El  <code>DELETE</code>en  <code>WITH</code>borra las filas especificadas de <code>products</code>, devolviendo su contenido mediante su  <code>RETURNING</code>cl\u00e1usula; y luego la consulta primaria lee esa salida e la inserta en <code>products_log</code>.</p> <p>Un buen punto del ejemplo anterior es que la  <code>WITH</code>cl\u00e1usula se adjunta a la <code>INSERT</code>, no el sub- <code>SELECT</code>dentro de la <code>INSERT</code>. Esto es necesario porque las declaraciones que modifican los datos s\u00f3lo se permiten en  <code>WITH</code>cl\u00e1usulas que se adjuntan a la declaraci\u00f3n de alto nivel. Sin embargo, normal  <code>WITH</code>se aplican las normas de visibilidad, por lo que es posible remitirse a la  <code>WITH</code>salida de la declaraci\u00f3n del sub-<code>SELECT</code>.</p> <p>Declaraciones de modificaci\u00f3n de datos en  <code>WITH</code>Habitualmente tener  <code>RETURNING</code>cl\u00e1usulas (v\u00e9ase la secci\u00f3n 6.4), como se muestra en el ejemplo anterior. Es la salida de la  <code>RETURNING</code>cl\u00e1usula, no el cuadro objetivo de la declaraci\u00f3n modificadora de datos, que forma  el cuadro temporal al que se puede hacer referencia el resto de la  consulta. Si una declaraci\u00f3n que modifica los datos se:  <code>WITH</code>carece de a  <code>RETURNING</code>cl\u00e1usula, entonces no forma una tabla temporal y no puede ser referida en el  resto de la consulta. Sin embargo, esa declaraci\u00f3n se ejecutar\u00e1. Un  ejemplo no particularmente \u00fatil es:</p> <pre><code>CON T AS (\n    DELETE DESDE Foo\n)\nDELETE DE la barra;\n</code></pre> <p>Este ejemplo eliminar\u00eda todas las filas de las tablas  <code>foo</code>y <code>bar</code>. El n\u00famero de filas afectadas reportadas al cliente solo incluir\u00eda las filas retiradas de <code>bar</code>.</p> <p>No se permiten autorreferencias recursivas en declaraciones que  modifican datos. En algunos casos es posible trabajar en torno a esta  limitaci\u00f3n haciendo referencia a la salida de un <code>WITH</code>, por ejemplo:</p> <pre><code>CON RECURSIVO included.parts (subparte, parte) AS (\n    SELECT subpart, parte DESDE las partes DONDE parte = 'nuestro producto'\n  UNION TODOS\n    SELECT p.--part, p.part\n    Departa pr incluidos, partes p\n    DODE p.part = pr.sub-part\n)\nDELETE DE las partes\n  Donde parte EN (Parte SELECT DESDE las partes incluidas);\n</code></pre> <p>Esta consulta eliminar\u00eda todas las subpartes directas e indirectas de un producto.</p> <p>Declaraciones de modificaci\u00f3n de datos en  <code>WITH</code>se ejecutan exactamente una vez, y siempre hasta completar,  independientemente de si la consulta primaria lee todo (o de hecho  cualquiera) de su producci\u00f3n. Observe que esto es diferente de la regla  para  <code>SELECT</code>en <code>WITH</code>: como se indica en la secci\u00f3n anterior, ejecuci\u00f3n de una  <code>SELECT</code>se lleva s\u00f3lo hasta donde la consulta primaria exige su producci\u00f3n.</p> <p>Las subsexposiciones en  <code>WITH</code>se ejecutan simult\u00e1neamente entre s\u00ed y con la consulta principal. Por lo  tanto, al utilizar declaraciones que modifiquen los datos en <code>WITH</code>, el orden en que las actualizaciones especificadas realmente suceden es  impredecible. Todas las declaraciones se ejecutan con la misma instant\u00e1nea (v\u00e9ase el cap\u00edtulo 13, por lo que no pueden ver los efectos de los dem\u00e1s en las tablas de destino. Esto alivia los  efectos de la imprevisibilidad del orden real de las actualizaciones de  fila, y significa que  <code>RETURNING</code>los datos son la \u00fanica manera de comunicar los cambios entre diferentes  <code>WITH</code>sub-declaraciones y la consulta principal. Un ejemplo de esto es que en</p> <pre><code>CON T AS (\n    Productos ACTA Precio SET = precio * 1.05\n    RETURNING *\n)\nSELECT * FROM products;\n</code></pre> <p>el exterior  <code>SELECT</code>devolv\u00eda los precios originales antes de la acci\u00f3n de la <code>UPDATE</code>, mientras que en</p> <pre><code>CON T AS (\n    Productos ACTA Precio SET = precio * 1.05\n    RETURNING *\n)\nSELECT * DESDE t;\n</code></pre> <p>el exterior  <code>SELECT</code>devolv\u00eda los datos actualizados.</p> <p>Tratar de actualizar la misma fila dos veces en una sola  declaraci\u00f3n no es compatible. S\u00f3lo una de las modificaciones tiene  lugar, pero no es f\u00e1cil (y a veces no es posible) predecir de manera  fiable cu\u00e1l. Esto tambi\u00e9n se aplica a la eliminaci\u00f3n de una fila que ya  estaba actualizada en la misma declaraci\u00f3n: s\u00f3lo se realiza la  actualizaci\u00f3n. Por lo tanto, generalmente debe evitar tratar de  modificar una sola fila dos veces en una sola declaraci\u00f3n. En  particular, evitar la escritura  <code>WITH</code>sub-declaraciones que podr\u00edan afectar las mismas filas cambiadas por la declaraci\u00f3n  principal o un subestador hermano. Los efectos de tal declaraci\u00f3n no  ser\u00e1n predecibles.</p> <p>En la actualidad, cualquier cuadro utilizado como objetivo de una declaraci\u00f3n que modifica los datos en  <code>WITH</code>no debe tener una regla condicional, ni una  <code>ALSO</code>Regla, ni un  <code>INSTEAD</code>Regla que se expande a m\u00faltiples declaraciones.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/08.-Consultas%20WITH%20%28Expresiones%20de%20tablas%20comunes%29/02.-Consultas%20recursivas/01.-Orden%20de%20b%C3%BAsqueda/","title":"01.-Orden de b\u00fasqueda","text":"<p>Al computar un \u00e1rbol que atraviesa con una consulta recursiva, es  posible que desee pedir los resultados en el primer orden de primera o  amplitud de primera. Esto se puede hacer computando una columna de  pedido junto con las otras columnas de datos y usando eso para ordenar  los resultados al final. Tenga en cuenta que esto no controla realmente  en qu\u00e9 orden la evaluaci\u00f3n de la consulta visita las filas; eso es como  siempre en la implementaci\u00f3n de SQL-dependiente de la implementaci\u00f3n.  Este enfoque s\u00f3lo proporciona una manera conveniente de ordenar los  resultados despu\u00e9s.</p> <p>Para crear un primer orden de profundidad, calculamos para cada resultado fila una serie de filas que hemos visitado hasta ahora. Por  ejemplo, considere la siguiente consulta que busca una tabla  <code>tree</code>usando a  <code>link</code>esfera:</p> <pre><code>CON RECURSIVE search.tree(id, link, data) AS (\n    SELECT t.id, t.link, t.data\n    De \u00e1rbol t\n  UNION TODOS\n    SELECT t.id, t.link, t.data\n    DESDE del \u00e1rbol t, search.tree st\n    DOHERE t.id = st.link\n)\nSELECT * DESDE search-tree;\n</code></pre> <p>Para agregar la informaci\u00f3n de orden de profundidad primero, puede escribir esto:</p> <pre><code>CON RECURSIVE search.tree(id, link, data, path) AS (\n    SELECT t.id, t.link, t.data, ARRAY[t.id]\n    Del \u00e1rbol t\n  UNION TODOS\n    SELECT t.id, t.link, t.data, path . t.id\n    DESDE del \u00e1rbol t, search.tree st\n    DOHERE t.id = st.link\n)\nSELECT * DESDE search.-Orbol. ORDEN POR ruta ;\n</code></pre> <p>En el caso general, cuando m\u00e1s de un campo necesite ser  utilizado para identificar una fila, utilice una serie de filas. Por  ejemplo, si necesit\u00e1ramos rastrear campos  <code>f1</code>y <code>f2</code>:</p> <pre><code>CON RECURSIVE search.tree(id, link, data, path) AS (\n    SELECT t.id, t.link, t.data, ARRAY[ROW(t.f1, t.f2)]\n    Del \u00e1rbol t\n  UNION TODOS\n    SELECT t.id, t.link, t.data, path - ROW(t.f1, t.f2)\n    DESDE del \u00e1rbol t, search.tree st\n    DOHERE t.id = st.link\n)\nSELECT * DESDE search.-Orbol. ORDEN POR ruta ;\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/08.-Consultas%20WITH%20%28Expresiones%20de%20tablas%20comunes%29/02.-Consultas%20recursivas/01.-Orden%20de%20b%C3%BAsqueda/#tip","title":"Tip","text":"<p>Omita el  <code>ROW()</code>sintaxis en el caso com\u00fan en el que s\u00f3lo hay que rastrear un campo. Esto permite que se utilice una matriz simple en lugar de una matriz de tipo  compuesto, ganando eficiencia.</p> <p>Para crear un orden de primera amplitud, puede a\u00f1adir una columna que rastree la profundidad de la b\u00fasqueda, por ejemplo:</p> <pre><code>CON RECURSIVE search.tree(id, link, data, depth) AS (\n    SELECT t.id, t.link, t.data, 0\n    Del \u00e1rbol t\n  UNION TODOS\n    SELECT t.id, t.link, t.data, profundidad 1\n    DESDE del \u00e1rbol t, search.tree st\n    DOHERE t.id = st.link\n)\nSELECT * DESDE search-tree ORDER BY depth ;\n</code></pre> <p>Para obtener un tipo estable, agregue las columnas de datos como columnas secundarias de clasificaci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/08.-Consultas%20WITH%20%28Expresiones%20de%20tablas%20comunes%29/02.-Consultas%20recursivas/01.-Orden%20de%20b%C3%BAsqueda/#tip_1","title":"Tip","text":"<p>El algoritmo de evaluaci\u00f3n de la consulta recursiva produce  su salida en orden de b\u00fasqueda de primera. Sin embargo, este es un  detalle de implementaci\u00f3n y tal vez no est\u00e9 bien confiar en \u00e9l. El orden de las filas dentro de cada nivel es ciertamente indefinido, por lo que alg\u00fan pedido expl\u00edcito podr\u00eda ser deseado en cualquier caso.</p> <p>Hay una sintaxis incorporada para calcular una columna de profundidad o amplitud de primer orden. Por ejemplo:</p> <pre><code>CON RECURSIVE search.tree(id, link, data) AS (\n    SELECT t.id, t.link, t.data\n    De \u00e1rbol t\n  UNION TODOS\n    SELECT t.id, t.link, t.data\n    DESDE del \u00e1rbol t, search.tree st\n    DOHERE t.id = st.link\n) BUSCAR DEPTH PRIMERO POR id SET ordercol\nSELECT * DESDE search.-Or. ORDER POR ordercol;\n\nCON RECURSIVE search.tree(id, link, data) AS (\n    SELECT t.id, t.link, t.data\n    De \u00e1rbol t\n  UNION TODOS\n    SELECT t.id, t.link, t.data\n    DESDE del \u00e1rbol t, search.tree st\n    DOHERE t.id = st.link\n) BUSCA BREADTH FIRST BY id SET ordercol\nSELECT * DESDE search.-Or. ORDER POR ordercol;\n</code></pre> <p>Esta sintaxis se expande internamente a algo similar a los formularios escritos a mano anteriores. El  <code>SEARCH</code>cl\u00e1usula especifica si se desea la primera b\u00fasqueda de profundidad o amplitud,  la lista de columnas a seguir para ordenar y un nombre de columna que  contendr\u00e1 los datos de resultado que se pueden utilizar para la  clasificaci\u00f3n. Esa columna se a\u00f1adir\u00e1 impl\u00edcitamente a las filas de  salida del CTE.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/08.-Consultas%20WITH%20%28Expresiones%20de%20tablas%20comunes%29/02.-Consultas%20recursivas/01.-SELECT%20en%20WITH/","title":"01.-SELECT en WITH","text":"<p>El valor b\u00e1sico de  <code>SELECT</code>en  <code>WITH</code>es descompuestos complicados en partes m\u00e1s simples. Un ejemplo es:</p> <pre><code>Con regionalsales AS (\n    SELECT regi\u00f3n, SUM(amonta) AS total-venta\n    De pedidos\n    GRUPO Por regi\u00f3n\n), las regiones de arriba como AS (\n    Regi\u00f3n SELECT\n    De las ventas regionales\n    DONDE total-salesales - (SELECT SUM(total-sales)/10 DESDE regional-sales)\n)\nSELECT,\n       producto,\n       SUM(cuantidad) AS product-units,\n       SUM(amonta) AS product-sales\nDe pedidos\nDonde regi\u00f3n en IN (\u00c1rcuaci\u00f3n SELECT de las principales regiones)\nGRUPO BY regi\u00f3n, producto;\n</code></pre> <p>que muestra las ventas por producto total en total s\u00f3lo en las principales regiones de ventas. El  <code>WITH</code>cl\u00e1usula define dos declaraciones auxiliares nombradas  <code>regional_sales</code>y <code>top_regions</code>, en el que la producci\u00f3n de  <code>regional_sales</code>se utiliza en  <code>top_regions</code>y la salida de  <code>top_regions</code>se utiliza en la primaria  <code>SELECT</code>la consulta. Este ejemplo podr\u00eda haber sido escrito sin <code>WITH</code>, pero habr\u00edamos necesitado dos niveles de sub-nidos<code>SELECT</code>s. Es un poco m\u00e1s f\u00e1cil seguir por aqu\u00ed.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/08.-Consultas%20WITH%20%28Expresiones%20de%20tablas%20comunes%29/02.-Consultas%20recursivas/02.-Detecci%C3%B3n%20de%20ciclos/","title":"02.-Detecci\u00f3n de ciclos","text":"<p>Cuando se trabaja con consultas recursivas es importante estar seguro de que la parte recursiva de la consulta eventualmente no devolver\u00e1  ning\u00fan tuples, o de lo contrario la consulta se enlacer\u00e1  indefinidamente. A veces, usando  <code>UNION</code>en vez de  <code>UNION ALL</code>puede lograr esto desechando filas que duplican las filas de salida  anteriores. Sin embargo, a menudo un ciclo no implica filas de salida  que se duplican completamente: puede ser necesario comprobar s\u00f3lo uno o  unos pocos campos para ver si se ha alcanzado el mismo punto antes. El  m\u00e9todo est\u00e1ndar para manejar tales situaciones es calcular una serie de  valores ya visitados. Por ejemplo, considere de nuevo la siguiente  consulta que busca una tabla  <code>graph</code>usando a  <code>link</code>esfera:</p> <pre><code>CON RECURSIVE search.graph.graph (id, link, data, depth) AS (\n    SELECT g.id, g.link, g.data, 0\n    Del gr\u00e1fico g\n  UNION TODOS\n    SELECT g.id, g.link, g.data, sg.depth\n    De la gr\u00e1fica g, search.graph sg\n    D\u00f3nde g.id = sg.link\n)\nSELECT * DESDE search.graph;\n</code></pre> <p>Esta consulta se encelar\u00e1 si el  <code>link</code>las relaciones contienen ciclos. Porque requerimos una depthsalida de profundidad, simplemente cambiando  <code>UNION ALL</code>a  <code>UNION</code>no eliminar\u00eda el bucle. En su lugar, tenemos que reconocer si hemos vuelto a llegar a la misma fila siguiendo un camino particular de los  v\u00ednculos. A\u00f1adimos dos columnas  <code>is_cycle</code>y  <code>path</code>a la consulta propensa a la lazo:</p> <pre><code>CON RECURSIVE search.graph. (id, link, data, depth, isacycle, path) AS (\n    SELECT g.id, g.link, g.data, 0,\n      false,\n      ARRAY[g.id]\n    Del gr\u00e1fico g\n  UNION TODOS\n    SELECT g.id, g.link, g.data, sg.depth . 1\n      g.id = CUALQUIER (camino),\n      ruta g.id\n    De la gr\u00e1fica g, search.graph sg\n    D\u00f3nde g.id = sg.link Y NO es.cycle\n)\nSELECT * DESDE search.graph;\n</code></pre> <p>Aparte de evitar ciclos, el valor de la matriz es a menudo \u00fatil por derecho propio, ya que representa el camino de la v\u00eda \"-- tomado para llegar a cualquier fila en particular.</p> <p>En el caso general, cuando m\u00e1s de un campo necesita ser  controlado para reconocer un ciclo, utilice una serie de filas. Por  ejemplo, si necesit\u00e1ramos comparar campos  <code>f1</code>y <code>f2</code>:</p> <pre><code>CON RECURSIVE search.graph. (id, link, data, depth, isacycle, path) AS (\n    SELECT g.id, g.link, g.data, 0,\n      false,\n      ARRAY[ROW(g.f1, g.f2)]\n    Del gr\u00e1fico g\n  UNION TODOS\n    SELECT g.id, g.link, g.data, sg.depth . 1\n      ROW(g.f1, g.f2) = CUALQUIER (en lo sucesivo,\n      ruta ROW(g.f1, g.f2)\n    De la gr\u00e1fica g, search.graph sg\n    D\u00f3nde g.id = sg.link Y NO es.cycle\n)\nSELECT * DESDE search.graph;\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/08.-Consultas%20WITH%20%28Expresiones%20de%20tablas%20comunes%29/02.-Consultas%20recursivas/02.-Detecci%C3%B3n%20de%20ciclos/#tip","title":"Tip","text":"<p>Omita el  <code>ROW()</code>sintaxis en el caso com\u00fan en el que s\u00f3lo hay que comprobar un campo para  reconocer un ciclo. Esto permite que se utilice una matriz simple en  lugar de una matriz de tipo compuesto, ganando eficiencia.</p> <p>Hay una sintaxis incorporada para simplificar la detecci\u00f3n del ciclo. La consulta anterior tambi\u00e9n se puede escribir as\u00ed:</p> <pre><code>CON RECURSIVE search.graph.graph (id, link, data, depth) AS (\n    SELECT g.id, g.link, g.data, 1\n    Del gr\u00e1fico g\n  UNION TODOS\n    SELECT g.id, g.link, g.data, sg.depth\n    De la gr\u00e1fica g, search.graph sg\n    D\u00f3nde g.id = sg.link\n) CYCLE id SET is-cycle USING ruta\nSELECT * DESDE search.graph;\n</code></pre> <p>y ser\u00e1 reescrito internamente a la forma anterior. El  <code>CYCLE</code>cl\u00e1usula especifica primero la lista de columnas para rastrear para la detecci\u00f3n de ciclo, luego un nombre de columna que mostrar\u00e1 si se ha detectado un ciclo, y finalmente el nombre de otra columna que rastrear\u00e1 la ruta.  Las columnas de ciclo y carril se a\u00f1adir\u00e1n impl\u00edcitamente a las filas de salida del CTE.</p>"},{"location":"02.-El%20lenguaje%20SQL/04.-Consultas/08.-Consultas%20WITH%20%28Expresiones%20de%20tablas%20comunes%29/02.-Consultas%20recursivas/02.-Detecci%C3%B3n%20de%20ciclos/#tip_1","title":"Tip","text":"<p>La columna de carril bici se calcula de la misma manera que  la columna de orden de profundidad se muestra en la secci\u00f3n anterior.  Una consulta puede tener ambas cosas.  <code>SEARCH</code>y a  <code>CYCLE</code>cl\u00e1usula, pero una especificaci\u00f3n de b\u00fasqueda de primera profundidad y una  especificaci\u00f3n de detecci\u00f3n de ciclo crear\u00eda c\u00e1lculos redundantes, por  lo que es m\u00e1s eficiente s\u00f3lo utilizar el  <code>CYCLE</code>cl\u00e1usula y orden por la columna de ruta. Si se quiere el orden de primera, entonces especificando ambos  <code>SEARCH</code>y  <code>CYCLE</code>puede ser \u00fatil.</p> <p>Un truco \u00fatil para probar las consultas cuando no est\u00e1 seguro de si podr\u00edan bucle es colocar un  <code>LIMIT</code>en la consulta de los padres. Por ejemplo, esta consulta bucle para siempre sin la <code>LIMIT</code>:</p> <pre><code>CON RECURSIVA t(n) AS (\n    SELECT 1\n  UNION TODOS\n    SELECT no1 DESDE T\n)\nSELECT n DESDE t LIMIT 100 ;\n</code></pre> <p>Esto funciona porque la implementaci\u00f3n de PostgreSQL eval\u00faa s\u00f3lo tantas filas de un  <code>WITH</code>consulta como la consulta de los padres. No se recomienda usar este truco en la  producci\u00f3n, porque otros sistemas podr\u00edan funcionar de manera diferente. Adem\u00e1s, por lo general no funcionar\u00e1 si haces la consulta externa  ordena los resultados de la consulta recursiva o se une a algunos otros  tipos de tabla, porque en tales casos la consulta externa generalmente  trata de buscar todo el  <code>WITH</code>la salida de la consulta de todos modos.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/","title":"Index","text":"<p>PostgreSQL tiene un rico conjunto de tipos de datos nativos disponibles para los usuarios. Los usuarios pueden a\u00f1adir nuevos tipos a PostgreSQL usando el comando CREATE TYPE.</p> <p>En el cuadro 8.1 se indican todos los tipos de datos incorporados. La mayor\u00eda de los nombres alternativos que aparecen en la Aliasescolumna de  son los nombres utilizados internamente por  por razones hist\u00f3ricas. Adem\u00e1s, algunos tipos de uso interno o deprecaci\u00f3n est\u00e1n disponibles, pero no se enumeran aqu\u00ed.</p> <p>Cuadro 8.1. Tipos de datos</p> Nombre Alisas Descripci\u00f3n <code>bigint</code> <code>int8</code> Firieron ocho bytes enteros <code>bigserial</code> <code>serial8</code> autoincrementado ocho bytes enteros <code>bit [ (*</code>n<code>*) ]</code> cuerda de bit de longitud fija <code>bit varying [ (*</code>n<code>*) ]</code> <code>varbit [ (*</code>n<code>*) ]</code> cadena de bits de longitud variable <code>boolean</code> <code>bool</code> Booleano l\u00f3gico (verdad/falso) <code>box</code> caja rectangular en un plano <code>bytea</code> datos binarios (byte array-arreg\u00f3n de byte) <code>character [ (*</code>n<code>*) ]</code> <code>char [ (*</code>n<code>*) ]</code> cadena de caracteres de longitud fija <code>character varying [ (*</code>n<code>*) ]</code> <code>varchar [ (*</code>n<code>*) ]</code> cadena de caracteres de longitud variable <code>cidr</code> Direcci\u00f3n de red IPv4 o IPv6 <code>circle</code> c\u00edrculo en un avi\u00f3n <code>date</code> fecha natural (a\u00f1o, mes, d\u00eda) <code>double precision</code> <code>float8</code> N\u00famero de punto flotante de doble precisi\u00f3n (8 bytes) <code>inet</code> IPv4 o IPv6 direcci\u00f3n de host <code>integer</code> <code>int</code>, <code>int4</code> Firieron a cuatro bytes enteros <code>interval [ *</code>fields<code>* ] [ (*</code>p<code>*) ]</code> lapso de tiempo <code>json</code> datos JSON textual <code>jsonb</code> Datos binarios de JSON, descompuestos <code>line</code> L\u00ednea infinita en un avi\u00f3n <code>lseg</code> segmento de l\u00ednea en un avi\u00f3n <code>macaddr</code> Direcci\u00f3n MAC (Media Access Control) <code>macaddr8</code> Direcci\u00f3n MAC (Media Access Control) (formato EUI-64) <code>money</code> monto de la moneda <code>numeric [ (*</code>p<code>*, *</code>s<code>*) ]</code> <code>decimal [ (*</code>p<code>*, *</code>s<code>*) ]</code> n\u00fameros exacto de precisi\u00f3n seleccionable <code>path</code> ruta geom\u00e9trica en un plano <code>pg_lsn</code> N\u00famero de secuenciaci\u00f3n de registro <code>pg_snapshot</code> instant\u00e1nea de identificaci\u00f3n de transacci\u00f3n a nivel de usuario <code>point</code> punto geom\u00e9trico en un avi\u00f3n <code>polygon</code> V\u00eda geom\u00e9trica cerrada en un avi\u00f3n <code>real</code> <code>float4</code> N\u00famero de punto flotante de precisi\u00f3n de una sola precisi\u00f3n (4 bytes) <code>smallint</code> <code>int2</code> Firman dos bytes enteros <code>smallserial</code> <code>serial2</code> autoincrementando el n\u00famero entero de dos bytes <code>serial</code> <code>serial4</code> autoincrementa cuatro bytes en el integer <code>text</code> cadena de caracteres de longitud variable <code>time [ (*</code>p<code>*) ] [ without time zone ]</code> hora del d\u00eda (sin zona horaria) <code>time [ (*</code>p<code>*) ] with time zone</code> <code>timetz</code> hora del d\u00eda, incluida la zona horaria <code>timestamp [ (*</code>p<code>*) ] [ without time zone ]</code> fecha y hora (sin zona horaria) <code>timestamp [ (*</code>p<code>*) ] with time zone</code> <code>timestamptz</code> fecha y hora, incluida la zona horaria <code>tsquery</code> consulta de b\u00fasqueda de texto <code>tsvector</code> documento de b\u00fasqueda de texto <code>txid_snapshot</code> instant\u00e1nea de identificaci\u00f3n de identificaci\u00f3n de transacci\u00f3n a nivel de usuario (depretada; ver <code>pg_snapshot</code>) <code>uuid</code> identificador \u00fanico universal <code>xml</code> Datos XML"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/#compatibilidad","title":"Compatibilidad","text":"<p>Los siguientes tipos (o ortletes de ellos) se especifican por SQL: <code>bigint</code>, <code>bit</code>, <code>bit varying</code>, <code>boolean</code>, <code>char</code>, <code>character varying</code>, <code>character</code>, <code>varchar</code>, <code>date</code>, <code>double precision</code>, <code>integer</code>, <code>interval</code>, <code>numeric</code>, <code>decimal</code>, <code>real</code>, <code>smallint</code>,  <code>time</code>(con o sin hunidad temporal),  <code>timestamp</code>(con o sin hunidad temporal), <code>xml</code>.</p> <p>Cada tipo de datos tiene una representaci\u00f3n externa determinada por sus funciones de entrada y salida. Muchos de los tipos incorporados  tienen formatos externos obvios. Sin embargo, varios tipos son  exclusivos de PostgreSQL, como rutas geom\u00e9tricas, o tienen varios formatos posibles, como los  tipos de fecha y hora. Algunas de las funciones de entrada y salida no  son invertibles, es decir, el resultado de una funci\u00f3n de salida podr\u00eda  perder precisi\u00f3n en comparaci\u00f3n con la entrada original.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/02.-Tipos%20monetarios/","title":"02.-Tipos monetarios","text":"<p>El  <code>money</code>Tipo almacena una cantidad monetaria con una precisi\u00f3n fraccionada fija; v\u00e9ase el cuadro 8.3. La precisi\u00f3n fraccionada est\u00e1 determinada por la configuraci\u00f3n lc-monetaria de la base de datos. El rango mostrado en la tabla supone que hay dos  d\u00edgitos fraccionados. La entrada se acepta en una variedad de formatos,  incluyendo n\u00fameros enteros y literales de puntos flotantes, as\u00ed como el  formato t\u00edpico de la moneda, como <code>'$1,000.00'</code>. La producci\u00f3n generalmente se encuentra en esta \u00faltima forma, pero depende de la localidad.</p> <p>Cuadro 8.3. Tipos monetarios</p> Nombre Tama\u00f1o de almacenamiento Descripci\u00f3n Rango <code>money</code> 8 bytes monto de la moneda -92233720368557758.08 a .9233720368547788.07 <p>Dado que la salida de este tipo de datos es sensible a la localidad, podr\u00eda no funcionar para cargar  <code>money</code>datos en una base de datos que tiene una configuraci\u00f3n diferente de <code>lc_monetary</code>. Para evitar problemas, antes de restaurar un verguete en una nueva base de datos aseg\u00farese de que  <code>lc_monetary</code>tiene el mismo o equivalente valor que en la base de datos que se verti\u00f3.</p> <p>Valores de la <code>numeric</code>, <code>int</code>, y  <code>bigint</code>Tipos de datos se pueden lanzar a <code>money</code>. Conversi\u00f3n de la  <code>real</code>y  <code>double precision</code>Los tipos de datos se pueden hacer casting a  <code>numeric</code>en primer lugar, por ejemplo:</p> <pre><code>SELECT '12.34'::float8:numeric::dinero;\n</code></pre> <p>Sin embargo, esto no es recomendable. Los n\u00fameros de puntos  flotantes no deben utilizarse para manejar el dinero debido al potencial de errores de redondeo.</p> <p>A  <code>money</code>valor se puede echar a  <code>numeric</code>sin p\u00e9rdida de precisi\u00f3n. La conversi\u00f3n a otros tipos podr\u00eda potencialmente perder precisi\u00f3n, y tambi\u00e9n debe hacerse en dos etapas:</p> <pre><code>SELECT '52093.89'::money::numeric::float8;\n</code></pre> <p>Divisi\u00f3n de una  <code>money</code>valor por un valor entero se realiza con truncamiento de la parte fraccionada hacia cero. Para obtener un resultado redondeado, dividir por un valor  de punto flotante, o echar el  <code>money</code>valor a  <code>numeric</code>antes de dividir y volver a  <code>money</code>despu\u00e9s. (Esta \u00faltima es preferible para evitar arriesgar la p\u00e9rdida de precisi\u00f3n.) Cuando a  <code>money</code>el valor se divide por otro  <code>money</code>el resultado es  <code>double precision</code>(es decir, un n\u00famero puro, no dinero); las unidades monetarias se cancelan unas a otras en la divisi\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/03.-Tipos%20car%C3%A1cter/","title":"03.-Tipos car\u00e1cter","text":"<p>Cuadro 8.4. Tipos de caracteres</p> Nombre Descripci\u00f3n <code>character varying(*</code>n<code>*)</code>, <code>varchar(*</code>n<code>*)</code> longitud variable con l\u00edmite <code>character(*</code>n<code>*)</code>, <code>char(*</code>n<code>*)</code>, <code>bpchar(*</code>n<code>*)</code> acolchada en blanco de longitud fija <code>text</code> de longitud ilimitada variable variable <p>La Tabla 8.4 muestra los tipos de caracteres de uso general disponibles en PostgreSQL.</p> <p>SQLdefine dos tipos de car\u00e1cter primario:  <code>character varying(*</code>n<code>*)</code>y <code>character(*</code>n<code>*)</code>, d\u00f3nde  <code>n</code>es un entero positivo. Ambos tipos pueden almacenar cuerdas hasta  <code>n</code>caracteres (no bytes) de longitud. Un intento de almacenar una cadena m\u00e1s larga en una columna de este tipo resultar\u00e1 en un error, a menos que los  caracteres sobrantes sean todos espacios, en cuyo caso la cadena se  truncar\u00e1 a la longitud m\u00e1xima. (Esta excepci\u00f3n algo extra\u00f1a es requerida por el  SQLest\u00e1ndar.) Sin embargo, si uno emite expl\u00edcitamente un valor a  <code>character varying(*</code>n<code>*)</code>o o <code>character(*</code>n<code>*)</code>, entonces un valor excesivo se truncar\u00e1 a  <code>n</code>caracteres sin levantar un error. (Esto tambi\u00e9n es requerido por el  SQLest\u00e1ndar.) Si la cadena que se va a almacenar es m\u00e1s corta que la longitud declarada, los valores de tipo  <code>character</code>ser\u00e1n acolchados por espacio; valores de tipo  <code>character varying</code>simplemente almacenar\u00e1 la cuerda m\u00e1s corta.</p> <p>Adem\u00e1s, PostgreSQL proporciona la  <code>text</code>tipo, que almacena cuerdas de cualquier longitud. Aunque el  <code>text</code>tipo no est\u00e1 en el  SQLest\u00e1ndar, varios otros sistemas de gesti\u00f3n de bases de datos SQL tambi\u00e9n lo tienen.  <code>text</code>es PostgreSQLPostgreSQL's tipo de datos de cadena nativa, en que la mayor\u00eda de las funciones  incorporadas que operan encadenadas se declaran para tomar o devolver  <code>text</code>no <code>character varying</code>. Con muchos fines,  <code>character varying</code>act\u00faa como si fuera un dominio <code>text</code>.</p> <p>El nombre tipo  <code>varchar</code>es un alias para <code>character varying</code>, mientras que  <code>char</code>y  <code>bpchar</code>son alias para <code>character</code>. El  <code>varchar</code>y  <code>char</code>los alias se definen en la  SQLest\u00e1ndar, pero  <code>bpchar</code>es una extensi\u00f3n de PostgreSQL.</p> <p>Si se especifica, la longitud  <code>n</code>deber\u00e1 ser superior a cero y no superar los 10485760.  <code>character</code>sin especificador de longitud es equivalente a <code>character(1)</code>. Si  <code>character varying</code>se utiliza sin especificador de longitud, el tipo acepta cadenas de cualquier tama\u00f1o.</p> <p>Valores de tipo  <code>character</code>est\u00e1n f\u00edsicamente acolchados con espacios al ancho especificado <code>n</code>, y se almacenan y muestran de esa manera. Sin embargo, los espacios de  seguimiento se tratan como sem\u00e1nticamente insignificantes y se ignoran  al comparar dos valores de tipo <code>character</code>. En las recopilaciones donde el espacio blanco es significativo, este  comportamiento puede producir resultados inesperados; por ejemplo  <code>SELECT 'a '::CHAR(2) collate \"C\" &lt; E'a\\n'::CHAR(2)</code>devuelve verdad, aunque  <code>C</code>Locale considerar\u00eda un espacio para ser mayor que una nueva l\u00ednea. Se retiran los espacios de rastreo al convertir un  <code>character</code>valor a uno de los otros tipos de cuerda. Tenga en cuenta que los espacios de trailing son sem\u00e1nticamente significativos en  <code>character varying</code>y  <code>text</code>valores, y cuando se utiliza la coincidencia de patrones, es decir  <code>LIKE</code>y expresiones regulares.</p> <p>Los caracteres que se pueden almacenar en cualquiera de estos tipos de datos est\u00e1n determinados por el conjunto de caracteres de la base de datos, que se selecciona cuando se crea la base de datos.  Independientemente del conjunto de caracteres espec\u00edfico, el car\u00e1cter  con c\u00f3digo cero (a veces llamado NUL) no puede ser almacenado. Para m\u00e1s  informaci\u00f3n, v\u00e9ase la secci\u00f3n 24.3.</p> <p>El requisito de almacenamiento para una cadena corta (hasta 126  bytes) es 1 byte m\u00e1s la cadena real, que incluye el acolchado espacial  en el caso de <code>character</code>. Las cuerdas m\u00e1s largas tienen 4 bytes de sobrecarga en lugar de 1. Las  cadenas largas son comprimidas por el sistema autom\u00e1ticamente, por lo  que el requisito f\u00edsico en el disco podr\u00eda ser menor. Los valores muy  largos tambi\u00e9n se almacenan en tablas de fondo para que no interfieran  con el r\u00e1pido acceso a valores de columna m\u00e1s cortos. En cualquier caso, la cadena de caracteres m\u00e1s larga posible que se puede almacenar es de  aproximadamente 1 GB. (El valor m\u00e1ximo que se permitir\u00e1  <code>n</code>en la declaraci\u00f3n de tipo de datos es menor que eso. No ser\u00eda \u00fatil cambiar esto porque con el car\u00e1cter multibyte codificaciones el n\u00famero de  caracteres y bytes puede ser muy diferente. Si desea almacenar cadenas  largas sin l\u00edmite superior espec\u00edfico, utilice  <code>text</code>o o  <code>character varying</code>sin un especificador de longitud, en lugar de hacer un l\u00edmite de longitud arbitrario.)</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/03.-Tipos%20car%C3%A1cter/#tip","title":"Tip","text":"<p>No hay diferencia de rendimiento entre estos tres tipos, aparte  del aumento del espacio de almacenamiento cuando se utiliza el tipo  acolchado encote, y unos pocos ciclos de CPU adicionales para comprobar  la longitud al almacenar en una columna de longitud con restricciones.  Mientras que  <code>character(*</code>n<code>*)</code>tiene ventajas de rendimiento en algunos otros sistemas de bases de datos, no hay tal ventaja en PostgreSQL ; de hecho  <code>character(*</code>n<code>*)</code>suele ser el m\u00e1s lento de los tres debido a sus costes de almacenamiento adicionales. En la mayor\u00eda de las situaciones  <code>text</code>o o  <code>character varying</code>Deber\u00eda usarse en su lugar.</p> <p>Consulte la Secci\u00f3n 4.1.2.1 para obtener informaci\u00f3n sobre la sintaxis de los literales de cadenas, y al cap\u00edtulo 9 para obtener informaci\u00f3n sobre los operadores y funciones disponibles.</p> <p>Ejemplo 8.1. Usando los Tipos de Car\u00e1cter</p> <pre><code>CREATE TABLE test1 (un car\u00e1cter ((4));\nINSERT INTO prueba 1 VALUES (ok');\nSELECT a, char-longlength(a) DESDE prueba1; -- (1)\n\n\n\n  a   | char_length\n------+-------------\n ok   |           2\nCREATE TABLE test2 (b varchar(5);\nINSERT INTO test2 VALUES (ok');\nINSERT INTO test2 VALUES ('buen');\nINSERT INTO test2 VALUES ('democitos de mucho tiempo');\n\nERROR:  value too long for type character varying(5)INSERT INTO test2 VALUES ('democrquot;:varchar (:varchar (5)); -- truncamiento expl\u00edcito\nSELECT b, char-longlength(b) DESDE la prueba2;\n\n   b   | char_length\n-------+-------------\n ok    |           2\n good  |           5\n too l |           5\n</code></pre> (1) El  <code>char_length</code>en la secci\u00f3n 9.4. <p>Hay otros dos tipos de caracteres de longitud fija en PostgreSQL, que se muestran en la Tabla 8.5. Estos no est\u00e1n destinados al uso de uso de uso general, s\u00f3lo para su uso en los cat\u00e1logos de sistemas internos. El  <code>name</code>El tipo se utiliza para almacenar identificadores. Su longitud se define  actualmente como 64 bytes (63 caracteres utilizables m\u00e1s terminador)  pero debe ser referenciado usando la constante  <code>NAMEDATALEN</code>en  <code>C</code>c\u00f3digo fuente. La longitud se establece en el momento de compilaci\u00f3n (y por lo tanto es ajustable para usos especiales); la longitud m\u00e1xima  predeterminada podr\u00eda cambiar en una versi\u00f3n futura. El tipo  <code>\"char\"</code>(nota las citas) es diferente de  <code>char(1)</code>en el que s\u00f3lo utiliza un byte de almacenamiento, y por lo tanto puede  almacenar s\u00f3lo un solo car\u00e1cter ASCII. Se utiliza en los cat\u00e1logos del  sistema como tipo de enumeraci\u00f3n simplic\u00e1stica.</p> <p>Cuadro 8.5. Tipos especiales de caracteres</p> Nombre Tama\u00f1o de almacenamiento Descripci\u00f3n <code>\"char\"</code> 1 byte Tipo interno monostero <code>name</code> 64 bytes tipo interno para los nombres de objetos"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/06.-Tipo%20booleano/","title":"06.-Tipo booleano","text":"<p>PostgreSQL proporciona el est\u00e1ndar  SQLtipo <code>boolean</code>; v\u00e9ase el cuadro 8.19. El  <code>boolean</code>El tipo puede tener varios estados: \" true\", falso, y un tercer estado, desconocidounknown, que est\u00e1 representado por la  SQLValor nulo.</p> <p>Cuadro 8.19. Tipo de datos booleano</p> Nombre Tama\u00f1o de almacenamiento Descripci\u00f3n <code>boolean</code> 1 byte estado de verdad o falsedad <p>Las constantes booleanas pueden ser representadas en consultas SQL por las palabras clave SQL <code>TRUE</code>, <code>FALSE</code>, y <code>NULL</code>.</p> <p>La funci\u00f3n de entrada de tipo de datos  <code>boolean</code>acepta estas representaciones de cuerdas para el \u201ctrue\u201destado verdadero:</p> <code>true</code> <code>yes</code> <code>on</code> <code>1</code> <p>y estas representaciones para el \u201cfalse\u201destado falso:</p> <code>false</code> <code>no</code> <code>off</code> <code>0</code> <p>Tambi\u00e9n se aceptan prefijos \u00fanicos de estas cuerdas, por ejemplo  <code>t</code>o o <code>n</code>. El espacio blanco l\u00edder o rastro se ignora, y el caso no importa.</p> <p>La funci\u00f3n de salida de tipo de datos  <code>boolean</code>siempre emite tampoco  <code>t</code>o o <code>f</code>, como se muestra en el ejemplo 8,2.</p> <p>Ejemplo 8.2. Usando el  <code>boolean</code>Tipo</p> <pre><code>CREATE TABLE test1 (un booleano, texto b);\nINSERT INTO test 1 VALUE (TRUE, 'sic est');\nINSERT INTO test 1 VALUES (FALSE, \"non est\";\nSELECT * DESDE la prueba1;\n a\n------------\n t . sic est\n f no est\n\nSELECT * DESDE la prueba1 A;\n a\n------------\n t . sic est\n</code></pre> <p>Las palabras clave  <code>TRUE</code>y  <code>FALSE</code>son los preferidos (SQL- m\u00e9todo para escribir constantes booleanas en consultas SQL. Pero  tambi\u00e9n puede utilizar las representaciones de cadena siguiendo la  sintaxis descalte gen\u00e9rica-literal constante descrita en la Secci\u00f3n 4.1.2.7, por ejemplo <code>'yes'::boolean</code>.</p> <p>Tenga en cuenta que el analizador entiende autom\u00e1ticamente que  <code>TRUE</code>y  <code>FALSE</code>son de tipo <code>boolean</code>, pero esto no es as\u00ed para  <code>NULL</code>porque eso puede tener cualquier tipo. As\u00ed que en algunos contextos podr\u00edas tener que lanzar  <code>NULL</code>a  <code>boolean</code>expl\u00edcitamente, por ejemplo <code>NULL::boolean</code>. Por el contrario, el elenco se puede omitir de un valor booleano  literal en contextos donde el analizador puede deducir que el literal  debe ser de tipo <code>boolean</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/10.-Tipo%20cadena%20de%20bits/","title":"10.-Tipo cadena de bits","text":"<p>Las cuerdas de bits son cuerdas de 1 y 0. Se pueden utilizar para  almacenar o visualizar m\u00e1scaras de bits. Hay dos tipos de bits SQL:  <code>bit(*</code>n<code>*)</code>y <code>bit varying(*</code>n<code>*)</code>, d\u00f3nde  <code>n</code>es un entero positivo.</p> <p><code>bit</code>datos de tipo deben coincidir con la longitud  <code>n</code>Exactamente; es un error intentar almacenar cuerdas de bits m\u00e1s cortas o m\u00e1s largas.  <code>bit varying</code>datos es de longitud variable hasta la longitud m\u00e1xima <code>n</code>; se rechazar\u00e1n cadenas m\u00e1s largas. Escrito  <code>bit</code>sin una longitud es equivalente a <code>bit(1)</code>, mientras que  <code>bit varying</code>sin una especificaci\u00f3n de longitud significa longitud ilimitada.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/10.-Tipo%20cadena%20de%20bits/#nota","title":"Nota","text":"<p>Si uno expl\u00edcitamente emite un valor de cuerda de bits a <code>bit(*</code>n<code>*)</code>, ser\u00e1 truncado o cero-agregado en el derecho a ser exactamente  <code>n</code>bits, sin levantar un error. Del mismo modo, si uno expl\u00edcitamente arroja un valor de cuerda de bits a <code>bit varying(*</code>n<code>*)</code>, se trunque a la derecha si es m\u00e1s que  <code>n</code>pedazos.</p> <p>Consulte la secci\u00f3n 4.1.2.5 para obtener informaci\u00f3n sobre la sintaxis de las constantes de cadena  de bits. Se dispone de operadores \u00e1pices y funciones de manipulaci\u00f3n de  cuerdas; v\u00e9ase la secci\u00f3n 9.6.</p> <p>Ejemplo 8.3. Uso de los tipos de cuerda</p> <pre><code>Prueba de TABC (un BIT(3), b BIT VARYING (5);\nINSERT INTO prueba VALUES (B'101', B'00');\nINSERT INTO prueba VALUES (B'10', B'101');\n\n\nERROR:  bit string length 2 does not match type bit(3)\nINSERT INTO prueba VALUES (B'10'::bit3), B'101');\nSELECT * DESDE la prueba;\n\n  a  |  b\n-----+-----\n 101 | 00\n 100 | 101\n</code></pre> <p>Un valor de cadena de bits requiere 1 byte para cada grupo de 8  bits, m\u00e1s 5 u 8 bytes por encima dependiendo de la longitud de la cadena (pero los valores largos pueden ser comprimidos o movidos fuera de l\u00ednea, como se explica en  para cadenas de caracteres).</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/12.-Tipo%20UUID/","title":"12.-Tipo UUID","text":"<p>El tipo de datos  <code>uuid</code>tiendas Universally Unique Identifiers (UUID) seg\u00fan se definen en RFC 4122, ISO/IEC 9834-8:2005, y normas relacionadas. (Algunos sistemas se  refieren a este tipo de datos como un identificador globalmente \u00fanico, o GUID, en su lugar.) Este identificador es una cantidad de 128 bits que es  generada por un algoritmo elegido para hacer muy improbable que el mismo identificador sea generado por cualquier otra persona en el universo  conocido usando el mismo algoritmo. Por lo tanto, para los sistemas  distribuidos, estos identificadores proporcionan una garant\u00eda de mejor  singularidad que los generadores de secuencia, que s\u00f3lo son \u00fanicos  dentro de una sola base de datos.</p> <p>Un UUID se escribe como una secuencia de d\u00edgitos hexadecimales de  min\u00fasculas, en varios grupos separados por guiones, espec\u00edficamente un  grupo de 8 d\u00edgitos seguidos por tres grupos de 4 d\u00edgitos seguidos de un  grupo de 12 d\u00edgitos, para un total de 32 d\u00edgitos que representan los 128 bits. Un ejemplo de un UUID en esta forma est\u00e1ndar es:</p> <pre><code>a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11\n</code></pre> <p>PostgreSQL tambi\u00e9n acepta las siguientes formas alternativas para la entrada: uso  de d\u00edgitos de may\u00fasculas, el formato est\u00e1ndar rodeado de aparatoses,  omitiendo algunos o todos los guiones, a\u00f1adiendo un gui\u00f3n despu\u00e9s de  cualquier grupo de cuatro d\u00edgitos. Ejemplos son:</p> <pre><code>A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11\nA0eebc99-9c0b-4ef8-bb6d6d9bd380a11\na0eebc999c0b4ef8d6d6d6bd380a11\na0ee-bc99-9c0b-4ef8-bb6d-6bb9-bd38-0a11\nA0eebc99-9c0b4ef8-bb6d6bb9-bd380a11.\n</code></pre> <p>La salida siempre est\u00e1 en la forma est\u00e1ndar.</p> <p>Consulte la Secci\u00f3n 9.14 para c\u00f3mo generar un UUID en PostgreSQL.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/18.-Tipos%20Dominio/","title":"18.-Tipos Dominio","text":"<p>Un dominio es un tipo de datos definido por el usuario que se basa en otro tipo subyacente. Opcionalmente, puede tener restricciones que restringen sus valores  v\u00e1lidos a un subconjunto de lo que el tipo subyacente permitir\u00eda. De lo  contrario, se comporta como el tipo subyacente, por ejemplo, cualquier  operador o funci\u00f3n que pueda aplicarse al tipo subyacente funcionar\u00e1 en  el tipo de dominio. El tipo subyacente puede ser cualquier tipo de base  incorporado o definido por el usuario, tipo enum, tipo de matriz, tipo  compuesto, tipo de rango, u otro dominio.</p> <p>Por ejemplo, podr\u00edamos crear un dominio sobre los enteros que acepta s\u00f3lo enteros positivos:</p> <pre><code>CREATE DOMAIN posanta AS integer CHECK (VALOR 0);\nCREATE TABLE mytable (id posinado);\nINSERT INTO mytable VALUES (1); -- funciona\nINSERT INTO mytable VALUES(-1); -- falla\n</code></pre> <p>Cuando un operador o funci\u00f3n del tipo subyacente se aplica a un  valor de dominio, el dominio se desprende autom\u00e1ticamente al tipo  subyacente. As\u00ed, por ejemplo, el resultado de  <code>mytable.id - 1</code>se considera de tipo  <code>integer</code>no <code>posint</code>. Podr\u00edamos escribir.  <code>(mytable.id - 1)::posint</code>para arrojar el resultado de vuelta a <code>posint</code>, causando que las restricciones del dominio sean re-combate. En este  caso, eso dar\u00eda lugar a un error si la expresi\u00f3n se hubiera aplicado a  una  <code>id</code>valor de 1. Asignar un valor del tipo subyacente a un campo o variable del  tipo de dominio est\u00e1 permitido sin escribir un elenco expl\u00edcito, pero  las restricciones del dominio se comprobar\u00e1n.</p> <p>Para m\u00e1s informaci\u00f3n, consulte CREATE DOMAIN.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/19.-Tipos%20de%20Identificador%20de%20Objetos/","title":"19.-Tipos de Identificador de Objetos","text":"<p>Los identificadores de objetos (OIDs) son utilizados internamente por PostgreSQL como claves primarias para varias tablas del sistema. Tipo  <code>oid</code>representa un identificador de objeto. Tambi\u00e9n hay varios tipos de alias para <code>oid</code>, cada uno de ellos nombrado <code>reg*</code>something<code>*</code>. El cuadro 8.26 muestra una visi\u00f3n general.</p> <p>El  <code>oid</code>El  tipo se aplica actualmente como un entero de cuatro bytes no firmado.  Por lo tanto, no es lo suficientemente grande como para proporcionar una singularidad en toda la base de datos en grandes bases de datos, o  incluso en grandes tablas individuales.</p> <p>El  <code>oid</code>El  tipo en s\u00ed tiene pocas operaciones m\u00e1s all\u00e1 de la comparaci\u00f3n. Se puede  lanzar al entero, sin embargo, y luego manipulado usando los operadores  enteros est\u00e1ndar. (C\u00f3melo con la posible confusi\u00f3n firmada contra sin  firmar si hace esto.)</p> <p>Los tipos de alias OID no tienen operaciones propias excepto para  las rutinas de entradas y salidas especializadas. Estas rutinas son  capaces de aceptar y mostrar nombres simb\u00f3licos para los objetos del  sistema, en lugar del valor num\u00e9rico en bruto que tipo  <code>oid</code>lo usar\u00eda. Los tipos de alias permiten una mirada simplificada de los  valores de OID para objetos. Por ejemplo, para examinar la  <code>pg_attribute</code>filas relacionadas con una mesa <code>mytable</code>, se podr\u00eda escribir:</p> <pre><code>SELECT * DESDE pg.attribute WHERE attrelid = 'mitable'::regclass;\n</code></pre> <p>en lugar de:</p> <pre><code>SELECT * DESDE pg.attribute\n  LOHERE attrelid = (SELECT oid FROM pg-class WHERE renombre = 'mitable');\n</code></pre> <p>Aunque eso no se ve tan mal por s\u00ed solo, todav\u00eda est\u00e1 demasiado  simplificado. Una subseleccionada mucho m\u00e1s complicada ser\u00eda necesaria  para seleccionar el OID correcto si hay varias tablas nombradas  <code>mytable</code>en diferentes esquemas. El  <code>regclass</code>el convertidor de entrada maneja el mirado de la tabla de acuerdo con la  configuraci\u00f3n de la ruta del esquema, y por lo tanto hace lo correcto autom\u00e1ticamente. Del mismo modo, lanzando un OID de mesa para  <code>regclass</code>es \u00fatil para la exhibici\u00f3n simb\u00f3lica de un OID num\u00e9rico.</p> <p>Cuadro 8.26. Tipos de identificaci\u00f3n de objetos</p> Nombre Referencias Descripci\u00f3n Ejemplo de valor <code>oid</code> cualquier Identificador de objeto num\u00e9rico <code>564182</code> <code>regclass</code> <code>pg_class</code> nombre de relaci\u00f3n <code>pg_type</code> <code>regcollation</code> <code>pg_collation</code> Nombre de la collation <code>\"POSIX\"</code> <code>regconfig</code> <code>pg_ts_config</code> Configuraci\u00f3n de b\u00fasqueda de texto <code>english</code> <code>regdictionary</code> <code>pg_ts_dict</code> diccionario de b\u00fasqueda de texto <code>simple</code> <code>regnamespace</code> <code>pg_namespace</code> nombre del nombre <code>pg_catalog</code> <code>regoper</code> <code>pg_operator</code> Nombre del operador <code>+</code> <code>regoperator</code> <code>pg_operator</code> operador con tipos de argumento <code>*(integer,integer)</code>o o <code>regproc</code> <code>pg_proc</code> nombre de la funci\u00f3n <code>sum</code> <code>regprocedure</code> <code>pg_proc</code> funci\u00f3n con tipos de argumento <code>sum(int4)</code> <code>regrole</code> <code>pg_authid</code> Nombre de rol <code>smithee</code> <code>regtype</code> <code>pg_type</code> Nombre tipo de datos <code>integer</code> <p>Todos los tipos de alias OID para objetos que se agrupan por el  espacio de nombres aceptan nombres calificados por esquema, y mostrar\u00e1n  nombres calificados de esquema en la salida si el objeto no se  encontrar\u00eda en la ruta de b\u00fasqueda actual sin estar calificado. Por  ejemplo,  <code>myschema.mytable</code>es una aportaci\u00f3n aceptable para  <code>regclass</code>(si existe tal tabla). Ese valor podr\u00eda ser la producci\u00f3n como <code>myschema.mytable</code>, o solo <code>mytable</code>, dependiendo de la ruta de b\u00fasqueda actual. El  <code>regproc</code>y  <code>regoper</code>Los tipos de alias s\u00f3lo aceptar\u00e1n nombres de entrada que sean \u00fanicos (no  sobrecargados), por lo que son de uso limitado; para la mayor\u00eda de los  usos  <code>regprocedure</code>o o  <code>regoperator</code>son m\u00e1s apropiados. Para <code>regoperator</code>, los operadores norios se identifican por escrito  <code>NONE</code>para el operando en desuso.</p> <p>Las funciones de entrada para estos tipos permiten el espacio en  blanco entre fichas, y doblar\u00e1n las letras may\u00fasculas a la min\u00fascula,  excepto dentro de comillas dobles; esto se hace para hacer que las  reglas de sintaxis similares a la forma en que los nombres de objetos  est\u00e1n escritos en SQL. Por el contrario, las funciones de salida usar\u00e1n  comillas dobles si es necesario para hacer que la salida sea un  identificador SQL v\u00e1lido. Por ejemplo, el OID de una funci\u00f3n nombrada  <code>Foo</code>(con may\u00fascula <code>F</code>) adoptar dos argumentos enteros podr\u00eda introducirse como <code>' \"Foo\" ( int, integer ) '::regprocedure</code>. La salida se ver\u00eda como <code>\"Foo\"(integer,integer)</code>. Tanto el nombre de la funci\u00f3n como los nombres de tipo argumental tambi\u00e9n podr\u00edan estar calificados como esquemas.</p> <p>Muchas funciones de PostgreSQL integradas aceptan el OID de una tabla, u otro tipo de objeto de base de datos, y para la conveniencia se declaran como tomas  <code>regclass</code>(o el tipo de alias OID apropiado). Esto significa que no tienes que  buscar el OID del objeto a mano, pero puedes simplemente introducir su  nombre como una cadena literal. Por ejemplo, el  <code>nextval(regclass)</code>funci\u00f3n toma la OID de una secuencia, para que pudieras llamarla as\u00ed:</p> <pre><code>nextval('foo') opera en secuencia \nfoonextval('FOO') igual que arriba\nel siguienteval ('Foo') opera en secuencia \nFoonextval('myschema.foo') opera en \nmyschema.foosiguienteval(''myschema.\"foo') igual que arriba\nnextval('foo') busca la ruta de b\u00fasqueda foo\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/19.-Tipos%20de%20Identificador%20de%20Objetos/#nota","title":"Nota","text":"<p>Cuando escribes el argumento de tal funci\u00f3n como una cadena literal no adornada, se convierte en una constante de tipo  <code>regclass</code>(o el tipo apropiado). Puesto que esto es realmente s\u00f3lo un OID, rastrear\u00e1 el objeto originalmente identificado a pesar de renombrar m\u00e1s tarde,  reasignaci\u00f3n de esquemas, etc. Este early bindingcomportamiento de encuadernaci\u00f3n temprana es generalmente deseable para referencias de objetos en las columnas  por defectos y vistas. Pero a veces es posible que desee la uni\u00f3n tard\u00eda donde la referencia del objeto se resuelve en el tiempo de ejecuci\u00f3n.  Para tener un comportamiento de uni\u00f3n tard\u00eda, forzar la constante para  ser almacenada como un  <code>text</code>constante en lugar de <code>regclass</code>:</p> <pre><code>siguiente ('foo':texto)       fooes mirado en el tiempo de ejecuci\u00f3n\n</code></pre> <p>El  <code>to_regclass()</code>funci\u00f3n y sus hermanos tambi\u00e9n se pueden utilizar para realizar buses de ejecuci\u00f3n. V\u00e9ase el cuadro 9.72.</p> <p>Otro ejemplo pr\u00e1ctico de uso de  <code>regclass</code>es buscar el OID de una tabla listada en el  <code>information_schema</code>vistas, que no suministran tales OID directamente. Uno podr\u00eda, por ejemplo, desear llamar a la  <code>pg_relation_size()</code>funci\u00f3n, que requiere la tabla OID. Teniendo en cuenta las normas anteriores, la forma correcta de hacerlo es</p> <pre><code>SELECT tabla-schema, table-name,\n       pg.relation.size(quote.ident ((table-schema) \". -\n                         cit.ident ((name-name))::regclass)\nDe informaci\u00f3n.schema.tables\nD\u00f3nde...\n</code></pre> <p>El  <code>quote_ident()</code>funci\u00f3n se encargar\u00e1 de la doble cita de los identificadores cuando sea necesario. El aparentemente m\u00e1s f\u00e1cil</p> <pre><code>SELECT pg.relation.size (table-name)\nDe informaci\u00f3n.schema.tables\nD\u00f3nde...\n</code></pre> <p>no es recomendable, porque fallar\u00e1 para mesas que est\u00e1n fuera de su ruta de b\u00fasqueda o tienen nombres que requieren citas.</p> <p>Una propiedad adicional de la mayor\u00eda de los tipos de alias OID es  la creaci\u00f3n de dependencias. Si una constante de uno de estos tipos  aparece en una expresi\u00f3n almacenada (como una columna por defecto de  expresi\u00f3n o vista), crea una dependencia del objeto referenciado. Por  ejemplo, si una columna tiene una expresi\u00f3n por defecto <code>nextval('my_seq'::regclass)</code>, PostgreSQL entiende que la expresi\u00f3n predeterminada depende de la secuencia <code>my_seq</code>, por lo tanto el sistema no dejar\u00e1 que la secuencia se cae sin primero eliminar la expresi\u00f3n por defecto. La alternativa de  <code>nextval('my_seq'::text)</code>no crea una dependencia. ( <code>regrole</code>es una excepci\u00f3n a esta propiedad. Los constantes de este tipo no est\u00e1n permitidos en expresiones almacenadas.)</p> <p>Otro tipo de identificador utilizado por el sistema es <code>xid</code>, o identificador de transacci\u00f3n (a abreviado xact). Este es el tipo de datos de las columnas del sistema  <code>xmin</code>y <code>xmax</code>. Los identificadores de transacci\u00f3n son cantidades de 32 bits. En algunos contextos, una variante de 64 bits  <code>xid8</code>se usa. A diferencia de  <code>xid</code>valores,  <code>xid8</code>los valores aumentan estrictamente mon\u00f3t\u00e9ricamente y no pueden ser  reutilizados en la vida \u00fatil de un grupo de bases de datos. V\u00e9ase la secci\u00f3n 74.1 para m\u00e1s detalles.</p> <p>Un tercer tipo de identificador utilizado por el sistema es <code>cid</code>, o identificador de comandos. Este es el tipo de datos de las columnas del sistema  <code>cmin</code>y <code>cmax</code>. Los identificadores de comando tambi\u00e9n son cantidades de 32 bits.</p> <p>Un tipo de identificador final utilizado por el sistema es <code>tid</code>, o identificador de tuple (identificador de la fila). Este es el tipo de datos de la columna del sistema <code>ctid</code>. Una tuple ID es un par (n\u00famero de bloque, \u00edndice de tuple dentro del  bloque) que identifica la ubicaci\u00f3n f\u00edsica de la fila dentro de su  tabla.</p> <p>(Las columnas del sistema se explican m\u00e1s en la secci\u00f3n 5.5.)</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/20.-Tipo%20pg_lsn/","title":"20.-Tipo pg_lsn","text":"<p>El  <code>pg_lsn</code>El  tipo de datos se puede utilizar para almacenar los datos de LSN (Log  Sequence Number) que es un puntero a una ubicaci\u00f3n en la WAL. Este tipo  es una representaci\u00f3n de  <code>XLogRecPtr</code>y un tipo de sistema interno de PostgreSQL.</p> <p>Internamente, un LSN es un n\u00famero entero de 64 bits, que representa una posici\u00f3n de byte en la secuencia de registro de escritura-ahead. Se imprime como dos n\u00fameros hexadecimales de hasta 8 d\u00edgitos cada uno,  separados por un corte; por ejemplo, <code>16/B374D848</code>. El  <code>pg_lsn</code>tipo admite los operadores de comparaci\u00f3n est\u00e1ndar, como  <code>=</code>y <code>&gt;</code>. Dos LSN se pueden restar usando el  <code>-</code>operador; el resultado es el n\u00famero de bytes que separan esos lugares de registro de entradas de escrito. Tambi\u00e9n el n\u00famero de bytes se puede a\u00f1adir y  restar de LSN usando el  <code>+(pg_lsn,numeric)</code>y  <code>-(pg_lsn,numeric)</code>los operadores, respectivamente. Tenga en cuenta que el LSN calculado debe estar en el rango de  <code>pg_lsn</code>tipo, es decir, entre  <code>0/0</code>y <code>FFFFFFFF/FFFFFFFF</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/21.-Pseudo%20tipos/","title":"21.-Pseudo tipos","text":""},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/21.-Pseudo%20tipos/#821-pseudo-types","title":"8.21. Pseudo-Types","text":"<p>El sistema de tipo PostgreSQL contiene una serie de entradas especiales que se llaman colectivamente pseudotipos. Un pseudotipo no se puede utilizar como un tipo de datos de columna,  pero se puede utilizar para declarar el argumento o el tipo de resultado de una funci\u00f3n. Cada uno de los pseudotipos disponibles es \u00fatil en  situaciones en las que el comportamiento de una funci\u00f3n no se  corresponde simplemente a tomar o devolver un valor de un espec\u00edfico  SQLTipo de datos. En el cuadro  se enumeran los pseudotipos existentes.</p> <p>Cuadro 8.27. Pseudo-Types</p> Nombre Descripci\u00f3n <code>any</code> Indica que una funci\u00f3n acepta cualquier tipo de datos de entrada. <code>anyelement</code> Indica que una funci\u00f3n acepta cualquier tipo de dato (ver secci\u00f3n 38.2.5). <code>anyarray</code> Indica que una funci\u00f3n acepta cualquier tipo de datos de matriz (ver Secci\u00f3n 38.2.5). <code>anynonarray</code> Indica que una funci\u00f3n acepta cualquier tipo de datos no de rayos (ver secci\u00f3n 38.2.5). <code>anyenum</code> Indica que una funci\u00f3n acepta cualquier tipo de dato enum (ver Secci\u00f3n 38.2.5 y Secci\u00f3n 8.7). <code>anyrange</code> Indica que una funci\u00f3n acepta cualquier tipo de datos de rango (ver secci\u00f3n 38.2.5 y Secci\u00f3n 8.17). <code>anymultirange</code> Indica que una funci\u00f3n acepta cualquier tipo de datos multiranqui (v\u00e9ase la secci\u00f3n 38.2.5 y la secci\u00f3n 8.17). <code>anycompatible</code> Indica que una funci\u00f3n acepta cualquier tipo de dato,  con la promoci\u00f3n autom\u00e1tica de m\u00faltiples argumentos a un tipo de datos  com\u00fan (ver secci\u00f3n 38.2.5). <code>anycompatiblearray</code> Indica que una funci\u00f3n acepta cualquier tipo de datos de matriz, con la promoci\u00f3n autom\u00e1tica de m\u00faltiples argumentos a un tipo  de datos com\u00fan (ver Secci\u00f3n 38.2.5). <code>anycompatiblenonarray</code> Indica que una funci\u00f3n acepta cualquier tipo de datos  no-array, con la promoci\u00f3n autom\u00e1tica de m\u00faltiples argumentos a un tipo  de datos com\u00fan (ver Secci\u00f3n 38.2.5). <code>anycompatiblerange</code> Indica que una funci\u00f3n acepta cualquier tipo de datos de rango, con promoci\u00f3n autom\u00e1tica de m\u00faltiples argumentos a un tipo de  datos com\u00fan (ver Secci\u00f3n 38.2.5 y Secci\u00f3n 8.17). <code>anycompatiblemultirange</code> Indica que una funci\u00f3n acepta cualquier tipo de datos multirango, con la promoci\u00f3n autom\u00e1tica de m\u00faltiples argumentos a un tipo de datos com\u00fan (ver  y 17). <code>cstring</code> Indica que una funci\u00f3n acepta o devuelve una cadena Cterminada nula. <code>internal</code> Indica que una funci\u00f3n acepta o devuelve un tipo de datos interno-servidor. <code>language_handler</code> Declaran a retornador de llamadas de idioma procesal que regresar\u00e1 <code>language_handler</code>. <code>fdw_handler</code> Declaran de regreso de un envoltorio de datos extranjeros <code>fdw_handler</code>. <code>table_am_handler</code> Se declara que un manejador de m\u00e9todos de acceso de mesa se declara devuelve <code>table_am_handler</code>. <code>index_am_handler</code> Declaran de retorno un m\u00e9todo de acceso \u00edndice <code>index_am_handler</code>. <code>tsm_handler</code> Se declara la devoluci\u00f3n de un manejador de m\u00e9todos de tablas <code>tsm_handler</code>. <code>record</code> Identifica una funci\u00f3n que toma o devuelve un tipo de fila no especificado. <code>trigger</code> Se declara la funci\u00f3n desencadenante para volver <code>trigger.</code> <code>event_trigger</code> Se declara la funci\u00f3n de desencadenante de un evento para regresar <code>event_trigger.</code> <code>pg_ddl_command</code> Identifica una representaci\u00f3n de comandos DDL que est\u00e1 disponible para disparar los eventos. <code>void</code> Indica que una funci\u00f3n no devuelve ning\u00fan valor. <code>unknown</code> Identifica un tipo a\u00fan no resuelto, por ejemplo, de una cuerda sin decorar literalmente. <p>Funciones codificadas en C (ya sea incorporada o cargada  din\u00e1micamente) pueden ser declaradas para aceptar o devolver cualquiera  de estos pseudotipos. Corresponde al autor de la funci\u00f3n asegurarse de  que la funci\u00f3n se comportar\u00e1 de forma segura cuando se usa un pseudotipo como tipo de argumento.</p> <p>Funciones codificadas en lenguajes procedicioncos pueden utilizar  pseudotipos s\u00f3lo seg\u00fan lo permitido por sus lenguajes de implementaci\u00f3n. En la actualidad, la mayor\u00eda de los idiomas de procedimiento proh\u00edben  el uso de un pseudotipo como tipo de argumento, y permiten \u00fanicamente  <code>void</code>y  <code>record</code>como resultado de tipo (m\u00e1s  <code>trigger</code>o o  <code>event_trigger</code>cuando la funci\u00f3n se utiliza como desencadenante o desencadenante de eventos). Algunos tambi\u00e9n soportan funciones polim\u00f3rficas utilizando los  pseudotipos polim\u00f3rficos, que se muestran arriba y se discuten en  detalle en la Secci\u00f3n 38.2.5.</p> <p>El  <code>internal</code>se utiliza pseudo-tipo para declarar funciones que s\u00f3lo se entienden para  ser llamadas internamente por el sistema de bases de datos, y no por  invocaci\u00f3n directa en un  SQLla consulta. Si una funci\u00f3n tiene al menos una <code>internal</code>- argumento de tipo entonces no se puede llamar desde SQL. Para preservar el tipo de seguridad de esta restricci\u00f3n es importante  seguir esta regla de codificaci\u00f3n: no cree ninguna funci\u00f3n que se  declare devuelta  <code>internal</code>a menos que tenga al menos uno  <code>internal</code>argumento.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/01.-Tipos%20Num%C3%A9ricos/","title":"Index","text":"<p>Los tipos num\u00e9ricos consisten en n\u00fameros de dos, cuatro y ocho bytes, n\u00fameros de punto flotante de cuatro y ocho bytes, y decimales de  precisi\u00f3n seleccionable. En la tabla 8.2 se enumeran los tipos disponibles.</p> <p>Cuadro 8.2. Tipos num\u00e9ricos</p> Nombre Tama\u00f1o de almacenamiento Descripci\u00f3n Rango <code>smallint</code> 2 bytes ense\u00f1ado de gama peque\u00f1a -32768 a 32767 <code>integer</code> 4 bytes elecci\u00f3n t\u00edpica para el entero -2147483648 a . . . . . . . . . . . <code>bigint</code> 8 bytes entero de gran alcance -9223373686854775808 a .923372036854775707 <code>decimal</code> variable variable Precisi\u00f3n especificada por el usuario, exacta hasta 131072 d\u00edgitos antes del punto decimal; hasta 16383 d\u00edgitos despu\u00e9s del punto decimal <code>numeric</code> variable variable Precisi\u00f3n especificada por el usuario, exacta hasta 131072 d\u00edgitos antes del punto decimal; hasta 16383 d\u00edgitos despu\u00e9s del punto decimal <code>real</code> 4 bytes de precisi\u00f3n variable, inexacta 6 d\u00edgitos decimales precisi\u00f3n <code>double precision</code> 8 bytes de precisi\u00f3n variable, inexacta 15 d\u00edgitos decimales precisi\u00f3n <code>smallserial</code> 2 bytes peque\u00f1o autoincrementing entero 1 a 32767 <code>serial</code> 4 bytes ente entero de autoincremento 1 a 2147483647 <code>bigserial</code> 8 bytes gran autoincremento entero 1 a 9223372036854775807 <p>La sintaxis de constantes para los tipos num\u00e9ricos se describe en la Secci\u00f3n 4.1.2. Los tipos num\u00e9ricos tienen un conjunto completo de operadores y funciones de aritm\u00e9tica correspondientes. Consulte el cap\u00edtulo 9 para m\u00e1s informaci\u00f3n. En las siguientes secciones se describen los tipos en detalle.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/01.-Tipos%20Num%C3%A9ricos/#_1","title":"Index","text":""},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/01.-Tipos%20Num%C3%A9ricos/01.-Tipos%20enteros/","title":"01.-Tipos enteros","text":"<p>Los tipos <code>smallint</code>, <code>integer</code>, y  <code>bigint</code>almacenar n\u00fameros enteros, es decir, n\u00fameros sin componentes fraccionados, de  varios rangos. Los intentos de almacenar valores fuera del rango  permitido resultar\u00e1n en un error.</p> <p>El tipo  <code>integer</code>es la opci\u00f3n com\u00fan, ya que ofrece el mejor equilibrio entre rango, tama\u00f1o de almacenamiento y rendimiento. El  <code>smallint</code>El tipo se utiliza generalmente s\u00f3lo si el espacio en disco es de primera calidad. El  <code>bigint</code>tipo est\u00e1 dise\u00f1ado para ser utilizado cuando la gama de la  <code>integer</code>tipo es insuficiente.</p> <p>SQLs\u00f3lo especifica los tipos enteros  <code>integer</code>(o <code>int</code>), <code>smallint</code>, y <code>bigint</code>. Los nombres de tipo <code>int2</code>, <code>int4</code>, y  <code>int8</code>son extensiones, que tambi\u00e9n son utilizadas por otros  SQLSistemas de bases de datos.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/01.-Tipos%20Num%C3%A9ricos/02.-N%C3%BAmeros%20de%20precisi%C3%B3n%20arbitraria/","title":"02.-N\u00fameros de precisi\u00f3n arbitraria","text":"<p>El tipo  <code>numeric</code>puede almacenar n\u00fameros con un gran n\u00famero de d\u00edgitos. Se recomienda  especialmente para almacenar las cantidades monetarias y otras  cantidades en las que se requiera exactitud. C\u00e1lculos con  <code>numeric</code>valores producen resultados exactos cuando sea posible, por ejemplo, adici\u00f3n,  resta, multiplicaci\u00f3n. Sin embargo, los c\u00e1lculos de  <code>numeric</code>los valores son muy lentos en comparaci\u00f3n con los tipos enteros, o con los  tipos de puntos flotantes descritos en la siguiente secci\u00f3n.</p> <p>A continuaci\u00f3n se utilizan los siguientes t\u00e9rminos: La precisi\u00f3n de una  <code>numeric</code>es el conteo total de d\u00edgitos significativos en todo el n\u00famero, es decir,  el n\u00famero de d\u00edgitos a ambos lados del punto decimal. La escala de un  <code>numeric</code>es el conteo de d\u00edgitos decimales en la parte fraccionada, a la derecha  del punto decimal. As\u00ed que el n\u00famero 23.5141 tiene una precisi\u00f3n de 6 y  una escala de 4. Los enteros pueden considerarse que tienen una escala  de cero.</p> <p>Tanto la m\u00e1xima precisi\u00f3n como la escala m\u00e1xima de una  <code>numeric</code>la columna se puede configurar. Declarar una columna de tipo  <code>numeric</code>utilizar la sintaxis:</p> <pre><code>NUMERIC (precision, scale)\n</code></pre> <p>La precisi\u00f3n debe ser positiva, mientras que la escala puede ser positiva o negativa (ver m\u00e1s abajo). Alternativamente:</p> <pre><code>NUMERIC (precision)\n</code></pre> <p>seleccione una escala de 0. Especificaci\u00f3n:</p> <pre><code>NUMERIC\n</code></pre> <p>sin ninguna precisi\u00f3n o escala crea una unconstrained numericcolumna num\u00e9rica sin restricciones en la que se pueden almacenar valores num\u00e9ricos de cualquier longitud,  hasta los l\u00edmites de implementaci\u00f3n. Una columna de este tipo no  coacitar\u00e1 los valores de entrada a ninguna escala particular, mientras  que  <code>numeric</code>las columnas con una escala declarada coaccionado los valores de entrada a esa escala. (El  SQLLa norma requiere una escala por defecto de 0, es decir, la coerci\u00f3n a la  precisi\u00f3n entera. Encontramos esto un poco in\u00fatil. Si te preocupa la  portabilidad, siempre especifica la precisi\u00f3n y la escala  expl\u00edcitamente.)</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/01.-Tipos%20Num%C3%A9ricos/02.-N%C3%BAmeros%20de%20precisi%C3%B3n%20arbitraria/#nota","title":"Nota","text":"<p>La m\u00e1xima precisi\u00f3n que se puede especificar expl\u00edcitamente en un  <code>numeric</code>la declaraci\u00f3n es de 1000. Un desconstrasado  <code>numeric</code>la columna est\u00e1 sujeta a los l\u00edmites descritos en el cuadro 8.2.</p> <p>Si la escala de un valor a almacenar es mayor que la escala  declarada de la columna, el sistema redondear\u00e1 el valor al n\u00famero  especificado de d\u00edgitos fraccionados. Entonces, si el n\u00famero de d\u00edgitos a la izquierda del punto decimal excede la precisi\u00f3n declarada menos la  escala declarada, se levanta un error. Por ejemplo, una columna  declarada como</p> <pre><code>NUMERIC (3, 1)\n</code></pre> <p>redondear\u00e1 los valores a 1 decimal y puede almacenar valores entre -99.9 y 99.9, inclusive.</p> <p>Comenzando en PostgreSQL 15, se permite declarar un  <code>numeric</code>columna con una escala negativa. Entonces los valores se redondear\u00e1n a la  izquierda del punto decimal. La precisi\u00f3n sigue representando el n\u00famero  m\u00e1ximo de d\u00edgitos no redondeados. As\u00ed, una columna declarada como</p> <pre><code>NUMERIC(2, -3)\n</code></pre> <p>redondear\u00e1 los valores al m\u00e1s cercano mil y puede almacenar  valores entre -99000 y 99000, inclusive. Tambi\u00e9n se permite declarar una escala m\u00e1s grande que la precisi\u00f3n declarada. Tal columna s\u00f3lo puede  contener valores fraccionados, y requiere el n\u00famero de d\u00edgitos cero  justo a la derecha del punto decimal para ser al menos la escala  declarada menos la precisi\u00f3n declarada. Por ejemplo, una columna  declarada como</p> <pre><code>NUMERIC(3, 5)\n</code></pre> <p>redondear\u00e1 los valores a 5 decimales y puede almacenar valores entre -0.00999 y 0.00999, inclusive.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/01.-Tipos%20Num%C3%A9ricos/02.-N%C3%BAmeros%20de%20precisi%C3%B3n%20arbitraria/#nota_1","title":"Nota","text":"<p>PostgreSQL permite la escala en un  <code>numeric</code>declaraci\u00f3n de tipo a cualquier valor en el rango -1000 a 1000. Sin embargo, la  SQLla norma requiere que la escala est\u00e9 en el rango 0 a <code>precision</code>. El uso de escalas fuera de ese rango puede no ser port\u00e1til a otros sistemas de bases de datos.</p> <p>Los valores num\u00e9ricos se almacenan f\u00edsicamente sin ning\u00fan tipo de cero de pista o de rastro adicional. As\u00ed, la precisi\u00f3n declarada y la  escala de una columna son m\u00e1ximos, no asignaciones fijas. (En este  sentido, el  <code>numeric</code>El tipo es m\u00e1s parecido a  <code>varchar(*</code>n<code>*)</code>que a <code>char(*</code>n<code>*)</code>.) El requisito de almacenamiento real es de dos bytes para cada grupo de  cuatro d\u00edgitos decimales, m\u00e1s tres a ocho bytes por encima.</p> <p>Adem\u00e1s de los valores num\u00e9ricos ordinarios, el  <code>numeric</code>tipo tiene varios valores especiales:</p> <pre><code>  `Infinity`\n  `-Infinity`\n  `NaN`\n</code></pre> <p>Estos se adaptan de la norma IEEE 754, y representan el infinito negativo, y el no-un n\u00famero, respectivamente. Al escribir estos valores como constantes en un comando SQL, debe poner citas a su alrededor, por ejemplo <code>UPDATE table SET x = '-Infinity'</code>. Al introducir, estas cuerdas se reconocen de manera insensible a los casos. Los valores infinitos pueden ser delescritos  <code>inf</code>y <code>-inf</code>.</p> <p>Los valores infinitos se comportan seg\u00fan las expectativas matem\u00e1ticas. Por ejemplo,  <code>Infinity</code>Adem\u00e1s de cualquier valor finito es igual <code>Infinity</code>, al igual que  <code>Infinity</code>m\u00e1s <code>Infinity</code>; pero  <code>Infinity</code>menos  <code>Infinity</code>rendimientos  <code>NaN</code>(no un n\u00famero), porque no tiene una interpretaci\u00f3n bien definida. Tenga en  cuenta que un infinito s\u00f3lo se puede almacenar en un  <code>numeric</code>columna, porque no con raz\u00f3n supera cualquier l\u00edmite de precisi\u00f3n finito.</p> <p>El  <code>NaN</code>(no un n\u00famero) se utiliza para representar resultados de c\u00e1lculo indefinidos. En general, cualquier operaci\u00f3n con un  <code>NaN</code>entrada produce otro <code>NaN</code>. La \u00fanica excepci\u00f3n es cuando las otras entradas de la operaci\u00f3n son tales que se obtendr\u00eda la misma salida si la  <code>NaN</code>deb\u00edan ser reemplazados por cualquier valor num\u00e9rico finito o infinito; entonces, ese valor de salida se utiliza para  <code>NaN</code>Tambi\u00e9n. (Un ejemplo de este principio es que  <code>NaN</code>elevado a los cero rendimientos de potencia uno.)</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/01.-Tipos%20Num%C3%A9ricos/02.-N%C3%BAmeros%20de%20precisi%C3%B3n%20arbitraria/#nota_2","title":"Nota","text":"<p>En la mayor\u00eda de las implementaciones del not-a-numberconcepto de no un n\u00famero,  <code>NaN</code>no se considera igual a cualquier otro valor num\u00e9rico (incluyendo <code>NaN</code>). Con el fin de permitir  <code>numeric</code>valores a ordenar y utilizar en \u00edndices basados en \u00e1rboles, golosos PostgreSQL  <code>NaN</code>valores iguales y superiores a todos los no <code>NaN</code>valores.</p> <p>Los tipos  <code>decimal</code>y  <code>numeric</code>son equivalentes. Ambos tipos son parte de la  SQLest\u00e1ndar.</p> <p>Cuando redondean los valores, el  <code>numeric</code>tipo rondas aleja de cero, mientras que (en la mayor\u00eda de las m\u00e1quinas) el  <code>real</code>y  <code>double precision</code>tipos de lazos redondo a la cantidad uniforme m\u00e1s cercana. Por ejemplo:</p> <pre><code>SELECT x,\n  round(x::numeric) AS num-round,\n  round(x::double precision) AS dbl-round\nDESDE Generaseries (-3.5, 3.5, 1) como x;\n  x \"Ano\" de la vuelta\n-------------------------------\n -3.5 - -4 -4 -4\n -2,5 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n -1,5 -2 -2\n -0.5 -0\n  0,5 1 1 0\n  1.5 2 x 2\n  2.5 3 2\n  3.5 - 4 4\n(8 filas)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/01.-Tipos%20Num%C3%A9ricos/03.-Tipos%20en%20punto%20flotante/","title":"03.-Tipos en punto flotante","text":"<p>Los tipos de datos  <code>real</code>y  <code>double precision</code>son tipos num\u00e9ricos de inexacto de precisi\u00f3n variable. En todas las  plataformas actualmente soportadas, estos tipos son implementaciones de  IEEEEst\u00e1ndar 754 para Arithmetic Binary Floating-Point (\u00facleo y doble precisi\u00f3n,  respectivamente), en la medida en que el procesador subyacente, el  sistema operativo y el compilador lo soportan.</p> <p>Inexact significa que algunos valores no se pueden convertir  exactamente al formato interno y se almacenan como aproximaciones, de  modo que almacenar y recuperar un valor podr\u00eda mostrar ligeras  discrepancias. Gestionar estos errores y c\u00f3mo se propagan a trav\u00e9s de  los c\u00e1lculos es el tema de toda una rama de matem\u00e1ticas y ciencias de la computaci\u00f3n y no se discutir\u00e1 aqu\u00ed, excepto por los siguientes puntos:</p> <ul> <li>Si necesita almacenamiento exacto y c\u00e1lculos (como para los importes monetarios), utilice el  <code>numeric</code>tipo en lugar de eso.</li> <li>Si quieres hacer c\u00e1lculos complicados con este tipo para  cualquier cosa importante, especialmente si conf\u00edas en cierto  comportamiento en los casos l\u00edmite (infinidad, flujo), debes evaluar la  implementaci\u00f3n cuidadosamente.</li> <li>Comparar dos valores de punto flotante para la igualdad podr\u00eda no funcionar siempre como se esperaba.</li> </ul> <p>En todas las plataformas actualmente apoyadas, la  <code>real</code>El tipo tiene un rango de alrededor de 1E-37 a 1E-37 con una precisi\u00f3n de al menos 6 d\u00edgitos decimales. El  <code>double precision</code>El tipo tiene un rango de alrededor de 1E-307 a 1E-308 con una precisi\u00f3n  de al menos 15 d\u00edgitos. Los valores que son demasiado grandes o  demasiado peque\u00f1os causar\u00e1n un error. El redondeo podr\u00eda tener lugar si  la precisi\u00f3n de un n\u00famero de entrada es demasiado alta. Los n\u00fameros  demasiado cercanos a cero que no son representables como distintos de  cero causar\u00e1n un error de flujo inferior.</p> <p>Por defecto, los valores de puntos flotantes son de salida en  forma de texto en su representaci\u00f3n decimal precisa m\u00e1s corta; el valor  decimal producido est\u00e1 m\u00e1s cerca del verdadero valor binario almacenado  que de cualquier otro valor que representable en la misma precisi\u00f3n  binaria. (Sin embargo, el valor de salida actualmente nunca est\u00e1 exactamente a medio camino entre dos valores representables, con el fin de evitar  un error generalizado donde las rutinas de entrada no respetan  adecuadamente la regla de vuelta a-nearest-even.) Este valor se  utilizar\u00e1 como m\u00e1ximo 17 d\u00edgitos decimales significativos para  <code>float8</code>valores, y como m\u00e1ximo 9 d\u00edgitos para  <code>float4</code>valores.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/01.-Tipos%20Num%C3%A9ricos/03.-Tipos%20en%20punto%20flotante/#nota","title":"Nota","text":"<p>Este formato de salida m\u00e1s corto-preciso es mucho m\u00e1s r\u00e1pido de generar que el formato redondeado hist\u00f3rico.</p> <p>Para la compatibilidad con la salida generada por versiones anteriores de PostgreSQL, y para permitir la reducci\u00f3n de la precisi\u00f3n de salida, el par\u00e1metro extra-float-digits se puede utilizar para seleccionar la salida decimal redondeada en su  lugar. La configuraci\u00f3n de un valor de 0 restaura el valor anterior de  redondear el valor a 6 (para <code>float4</code>) o 15 (para <code>float8</code>) d\u00edgitos decimales significativos. Establecer un valor negativo reduce  a\u00fan m\u00e1s el n\u00famero de d\u00edgitos; por ejemplo -2 rondar\u00eda la salida a 4 o 13 d\u00edgitos respectivamente.</p> <p>Cualquier valor de extra-float-digits mayor que 0 seleccione el formato m\u00e1s corto-preciso.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/01.-Tipos%20Num%C3%A9ricos/03.-Tipos%20en%20punto%20flotante/#nota_1","title":"Nota","text":"<p>Hist\u00f3ricamente, las aplicaciones que quer\u00edan valores precisos han tenido que establecer extraflotedigits a 3 para obtenerlos. Para la m\u00e1xima compatibilidad entre versiones, deben seguir haci\u00e9ndolo.</p> <p>Adem\u00e1s de los valores num\u00e9ricos ordinarios, los tipos de puntos flotantes tienen varios valores especiales:</p> <pre><code>  `Infinity`\n  `-Infinity`\n  `NaN`\n</code></pre> <p>Estos representan los valores especiales IEEE 754 - infinito, - infinito negativo, y - no-un-n\u00famero--, respectivamente. Al escribir estos valores como constantes en un comando SQL, debe poner citas a su alrededor, por ejemplo <code>UPDATE table SET x = '-Infinity'</code>. Al introducir, estas cuerdas se reconocen de manera insensible a los casos. Los valores infinitos pueden ser delescritos  <code>inf</code>y <code>-inf</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/01.-Tipos%20Num%C3%A9ricos/03.-Tipos%20en%20punto%20flotante/#nota_2","title":"Nota","text":"<p>IEEE 754 especifica que  <code>NaN</code>no debe compararse igual a cualquier otro valor de punto flotante (incluida la <code>NaN</code>). Con el fin de permitir que los valores de puntos flotantes sean ordenados y utilizados en \u00edndices arb\u00f3ricos, PostgreSQL trata  <code>NaN</code>valores iguales y superiores a todos los no <code>NaN</code>valores.</p> <p>PostgreSQL tambi\u00e9n admite las notaciones est\u00e1ndar de SQL  <code>float</code>y  <code>float(*</code>p<code>*)</code>para la especificaci\u00f3n de tipos num\u00e9ricos inexactos. Aqu\u00ed,  <code>p</code>especifica la precisi\u00f3n m\u00ednima aceptable en d\u00edgitos binarios. PostgreSQL acepta  <code>float(1)</code>a  <code>float(24)</code>como la selecci\u00f3n de  <code>real</code>tipo, mientras que  <code>float(25)</code>a  <code>float(53)</code>seleccione <code>double precision</code>. Valores de  <code>p</code>fuera del rango permitido dibuja un error.  <code>float</code>sin precisi\u00f3n especificada se entender\u00e1 por medio <code>double precision</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/01.-Tipos%20Num%C3%A9ricos/04.-Tipos%20de%20serie/","title":"04.-Tipos de serie","text":""},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/01.-Tipos%20Num%C3%A9ricos/04.-Tipos%20de%20serie/#nota","title":"Nota","text":"<p>Esta secci\u00f3n describe una manera espec\u00edfica de PostgreSQL para  crear una columna de autoincremento. Otra forma es utilizar la funci\u00f3n  de columna de identidad est\u00e1ndar SQL, descrita en CREATE TABLE.</p> <p>Los tipos de datos <code>smallserial</code>,  <code>serial</code>y  <code>bigserial</code>no son tipos verdaderos, sino simplemente una comodidad notatoria para crear columnas de identificadores \u00fanicas (similar a la  <code>AUTO_INCREMENT</code>propiedad apoyada por algunas otras bases de datos). En la aplicaci\u00f3n actual, especificando:</p> <pre><code>CREATE TABLE  tablename(\n     colnameSERIAL\n);\n</code></pre> <p>es equivalente a especificar:</p> <pre><code>CREATE SEQUENCE tablename-colnameEl n\u00famero entero de AS;\nCREATE TABLE  tablename(\n     colnameINICIA NO NULL DEFAULT nextval('tablename-colnameSeq')\n);\nALTER SEQUENCE tablename-colnameSeq OWNED BY tablename.colname;\n</code></pre> <p>As\u00ed, hemos creado una columna en el entero y dispuesto que sus  valores predeterminados sean asignados a partir de un generador de  secuencias. A  <code>NOT NULL</code>se aplica la restricci\u00f3n para garantizar que no se pueda insertar un valor nulo. (En la mayor\u00eda de los casos tambi\u00e9n querr\u00edas adjuntar un  <code>UNIQUE</code>o o  <code>PRIMARY KEY</code>restricci\u00f3n para evitar que los valores duplicados se inserten por accidente, pero  esto no es autom\u00e1tico.) Por \u00faltimo, la secuencia se marca como propiedad de la columna, de modo que se dejar\u00e1 caer si la columna o tabla se deja caer.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/01.-Tipos%20Num%C3%A9ricos/04.-Tipos%20de%20serie/#nota_1","title":"Nota","text":"<p>Porque <code>smallserial</code>,  <code>serial</code>y  <code>bigserial</code>se implementan usando secuencias, puede haber \"agujeros\" o huecos en la  secuencia de valores que aparece en la columna, incluso si nunca se  eliminan filas. Un valor asignado a partir de la secuencia todav\u00eda se  \"utiliza\" incluso si una fila que contiene ese valor nunca se inserta  con \u00e9xito en la columna de la tabla. Esto puede suceder, por ejemplo, si la transacci\u00f3n de inserci\u00f3n se hace retroceder. Ver  <code>nextval()</code>en la secci\u00f3n 9.17 para m\u00e1s detalles.</p> <p>Para insertar el siguiente valor de la secuencia en el  <code>serial</code>columna, especifique que el  <code>serial</code>se debe asignar a la columna su valor predeterminado. Esto se puede hacer, ya sea excluyendo la columna de la lista de columnas en el  <code>INSERT</code>declaraci\u00f3n, o mediante el uso de la  <code>DEFAULT</code>palabra clave.</p> <p>Los nombres de tipo  <code>serial</code>y  <code>serial4</code>son equivalentes: ambas crean  <code>integer</code>columnas. Los nombres de tipo  <code>bigserial</code>y  <code>serial8</code>trabajar de la misma manera, excepto que crean un  <code>bigint</code>columnas.  <code>bigserial</code>se debe usar si anticipa el uso de m\u00e1s de 2 31 identificadores a lo largo de la vida \u00fatil de la tabla. Los nombres de tipo  <code>smallserial</code>y  <code>serial2</code>tambi\u00e9n trabajar de la misma manera, excepto que crean una  <code>smallint</code>columnas.</p> <p>La secuencia creada para un  <code>serial</code>la columna se deja caer autom\u00e1ticamente cuando se deja caer la columna de  la propiedad. Puede soltar la secuencia sin soltar la columna, pero esto forzar\u00e1 la eliminaci\u00f3n de la columna por defecto de expresi\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/04.-Tipos%20de%20datos%20binarios/","title":"Index","text":"<p>El  <code>bytea</code>tipo de datos permite el almacenamiento de cadenas binarias; v\u00e9ase Tabla 8.6.</p> <p>Cuadro 8.6. Tipos de datos binarios</p> Nombre Tama\u00f1o de almacenamiento Descripci\u00f3n <code>bytea</code> 1 o 4 bytes m\u00e1s la cadena binaria real cuerda binaria de longitud variable <p>Una cuerda binaria es una secuencia de octets (o bytes). Las  cuerdas binarias se distinguen de las cuerdas de car\u00e1cter de dos  maneras. En primer lugar, las cadenas binarias permiten espec\u00edficamente  almacenar octets de valor cero y otros non-printableoctets no imprimibles (generalmente, octets fuera del rango decimal 32 a 126). Las cadenas de caracteres desautoran los octets cero, y tambi\u00e9n desautoran cualquier  otro octeto y secuencias de valores octetos que no sean v\u00e1lidos de  acuerdo con la codificaci\u00f3n de conjunto de caracteres seleccionada de la base de datos. En segundo lugar, las operaciones en las cadenas  binarias procesan los bytes reales, mientras que el procesamiento de  cadenas de caracteres depende de la configuraci\u00f3n local. En resumen, las cadenas binarias son apropiadas para almacenar los datos que el  programador considera como \"bytes brutos\", mientras que las cadenas de caracteres son apropiadas para almacenar texto.</p> <p>El  <code>bytea</code>type soporta dos formatos para la entrada y salida: hexformato hex y formato PostgreSQL 's hist\u00f3rico- escape. Ambos son siempre aceptados en las aportaciones. El formato de salida depende del par\u00e1metro de configuraci\u00f3n bytea-output ; el valor predeterminado es hex. (Ten en cuenta que el formato hex se introdujo en PostgreSQL 9.0; versiones anteriores y algunas herramientas no lo entienden.)</p> <p>El  SQLest\u00e1ndar define un tipo de cadena binario diferente, llamado  <code>BLOB</code>o o <code>BINARY LARGE OBJECT</code>. El formato de entrada es diferente de <code>bytea</code>, pero las funciones y los operadores proporcionados son en su mayor\u00eda los mismos.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/04.-Tipos%20de%20datos%20binarios/01.-Formato%20byteaHex/","title":"01.-Formato byteaHex","text":"<p>El hexformato hex codifica los datos binarios como 2 d\u00edgitos hexadecimales per byte, el mordisto  m\u00e1s significativo primero. Toda la cuerda es precedida por la secuencia  <code>\\x</code>(para  distinguirlo del formato de escape). En algunos contextos, es posible  que deba escaparse la reacci\u00f3n inicial duplicando (ver secci\u00f3n 4.1.2.1). Para la entrada, los d\u00edgitos hexadecimales pueden ser de la caja  superior o inferior, y el espacio en blanco se permite entre pares de  d\u00edgitos (pero no dentro de un par de d\u00edgitos ni en el inicio  <code>\\x</code>secuencia). El formato hex es compatible con una amplia gama de aplicaciones y  protocolos externos, y tiende a ser m\u00e1s r\u00e1pido de convertir que el  formato de escape, por lo que se prefiere su uso.</p> <p>Ejemplo:</p> <pre><code>SET bytea-output = 'hex';\n\nSELECT '-xDEADBEEF'::bytea;\n   bytea\n-----------\n .xdeadbeef\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/04.-Tipos%20de%20datos%20binarios/02.-Formato%20byteaEscapar/","title":"02.-Formato byteaEscapar","text":"<p>El escapeformato de escape es el formato tradicional PostgreSQL para el  <code>bytea</code>tipo. Toma el enfoque de representar una cadena binaria como una secuencia de caracteres ASCII, al tiempo que convierte esos bytes que no pueden ser  representados como un car\u00e1cter ASCII en secuencias especiales de escape. Si, desde el punto de vista de la aplicaci\u00f3n, representando bytes como  caracteres tiene sentido, entonces esta representaci\u00f3n puede ser  conveniente. Pero en la pr\u00e1ctica suele ser confuso porque borroe la  distinci\u00f3n entre cuerdas binarias y cuerdas de personajes, y tambi\u00e9n el  mecanismo de escape particular que se eligi\u00f3 es algo dif\u00edcil de manejar. Por lo tanto, este formato probablemente deber\u00eda evitarse para la  mayor\u00eda de las nuevas aplicaciones.</p> <p>Al entrar  <code>bytea</code>valores en formato de escape, octets de ciertos valores deben ser escapados, mientras que todos los valores de octeto se pueden escapar. En general, para escapar de un octeto, convertirlo en su valor octal de tres d\u00edgitos y precedi\u00e9ndolo por una reacci\u00f3n. La reacci\u00f3n en  s\u00ed (otet decimal valor 92) puede ser representada alternativamente por  dobles contradblas. La Tabla 8.7 muestra los caracteres que deben escapar, y da las secuencias de escape alternativas cuando procede.</p> <p>Cuadro 8.7.  <code>bytea</code>Octuets fugados literales</p> Valor Octet decimal Descripci\u00f3n Representaci\u00f3n de entrada fugada Ejemplo Representaci\u00f3n de Hex 0 cero octet <code>'\\000'</code> <code>'\\000'::bytea</code> <code>\\x00</code> 39 Cita \u00fanica <code>''''</code>o o <code>''''::bytea</code> <code>\\x27</code> 92 recortar <code>'\\\\'</code>o o <code>'\\\\'::bytea</code> <code>\\x5c</code> 0 a 31 y 127 a 255 - octets <code>'\\*</code>xxx'<code>*</code>(valor octallo) <code>'\\001'::bytea</code> <code>\\x01</code> <p>El requisito de escapar de los octets no imprimibles var\u00eda dependiendo de los ajustes de la localidad. En algunos casos puedes salirte con la tuya dej\u00e1ndolos sin fuga.</p> <p>La raz\u00f3n por la que las citas simples deben ser duplicadas, como se muestra en la Tabla 8.7, es que esto es cierto para cualquier cadena literal en un comando SQL.  El analizador gen\u00e9rico de cuerda-literal consume las \u00fanicas cotizaciones m\u00e1s externas y reduce cualquier par de comillas individuales a un  car\u00e1cter de datos. Qu\u00e9 diablos  <code>bytea</code>la funci\u00f3n de entrada ve es s\u00f3lo una sola cotizaci\u00f3n, que trata como un car\u00e1cter de datos simple. Sin embargo, la  <code>bytea</code>funci\u00f3n de entrada trata las revolver las barras como especiales, y los otros comportamientos mostrados en la Tabla 8.7 se implementan por esa funci\u00f3n.</p> <p>En algunos contextos, las barras de espalda deben duplicarse en  comparaci\u00f3n con lo que se muestra anteriormente, porque el analizador  gen\u00e9rico de cuerda-literal tambi\u00e9n reducir\u00e1 los pares de barras de  espalda a un car\u00e1cter de datos; v\u00e9ase la Secci\u00f3n 4.1.2.1.</p> <p><code>Bytea</code>octets son de salida en  <code>hex</code>format por defecto. Si cambias bytea-output a <code>escape</code>Los non-printableoctets no imprimibles se convierten en su valor octal equivalente de tres d\u00edgitos y precedidos por una reacci\u00f3n de espalda. La mayor\u00eda de los octets  son salidas por su representaci\u00f3n est\u00e1ndar en el conjunto de caracteres del cliente, por ejemplo:</p> <pre><code>SET bytea-output = 'espajar';\n\nSELECT 'abc 153-154-155 -052-151-1124\"::bytea;\n     bytea\n----------------\n abc klm *251T\n</code></pre> <p>El octeto con el valor decimal 92 (retrocedo) se duplica en la salida. Los detalles se encuentran en la Tabla 8.8.</p> <p>Cuadro 8.8.  <code>bytea</code>Salida de los Octets fugados</p> Valor Octet decimal Descripci\u00f3n Representaci\u00f3n de salida fugada Ejemplo Resultado de la producci\u00f3n 92 recortar <code>\\\\</code> <code>'\\134'::bytea</code> <code>\\\\</code> 0 a 31 y 127 a 255 - octets <code>\\*</code>xxx<code>*</code>(valor octallo) <code>'\\001'::bytea</code> <code>\\001</code> 32 a 126 - octets representaci\u00f3n de la serie de caracteres de cliente <code>'\\176'::bytea</code> <code>~</code> <p>Dependiendo de la parte delantera de PostgreSQL que utilice, es posible que tenga trabajo adicional que hacer en t\u00e9rminos de fuga y descabida  <code>bytea</code>cuerdas. Por ejemplo, tambi\u00e9n podr\u00eda tener que escapar de los feeds de la l\u00ednea y las devoluciones de vascar si su interfaz se traduce autom\u00e1ticamente.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/05.-Tipos%20Fecha-Hora/","title":"Index","text":"<p>PostgreSQL soporta el conjunto completo de  SQLlos tipos de fecha y hora, que se muestran en la Tabla 8.9. Las operaciones disponibles en estos tipos de datos se describen en la secci\u00f3n 9.9. Las fechas se cuentan seg\u00fan el calendario gregoriano, incluso en a\u00f1os antes de que se introdujo ese calendario (ver Secci\u00f3n B.6 para m\u00e1s informaci\u00f3n).</p> <p>Cuadro 8.9. Tipos de fecha/tiempo</p> Nombre Tama\u00f1o de almacenamiento Descripci\u00f3n Bajo valor Alto valor Resoluci\u00f3n <code>timestamp [ (*</code>p<code>*) ] [ without time zone ]</code> 8 bytes tanto la fecha como la hora (sin zona horaria) 4713 BC 294276 dC 1 microsegundo <code>timestamp [ (*</code>p<code>*) ] with time zone</code> 8 bytes tanto la fecha como la hora, con huso horario 4713 BC 294276 dC 1 microsegundo <code>date</code> 4 bytes fecha (sin hora del d\u00eda) 4713 BC 5874897 dC 1 d\u00eda <code>time [ (*</code>p<code>*) ] [ without time zone ]</code> 8 bytes hora del d\u00eda (sin fecha) 00:00 horas 24:00 horas 1 microsegundo <code>time [ (*</code>p<code>*) ] with time zone</code> 12 bytes hora del d\u00eda (sin fecha), con zona horaria 00:00.1559 24:00 a 1559 1 microsegundo <code>interval [ *</code>fields<code>* ] [ (*</code>p<code>*) ]</code> 16 bytes intervalos de tiempo -178000000 a\u00f1os 178000000 a\u00f1os 1 microsegundo"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/05.-Tipos%20Fecha-Hora/#nota","title":"Nota","text":"<p>El est\u00e1ndar SQL requiere que la escritura sea s\u00f3lo  <code>timestamp</code>ser equivalente a <code>timestamp without time zone</code>, y PostgreSQL honra ese comportamiento.  <code>timestamptz</code>es aceptado como una abreviatura de <code>timestamp with time zone</code>; esta es una extensi\u00f3n de PostgreSQL.</p> <p><code>time</code>, <code>timestamp</code>, y  <code>interval</code>aceptar un valor de precisi\u00f3n opcional  <code>p</code>que especifica el n\u00famero de d\u00edgitos fraccionados retenidos en el campo de  segundos. Por defecto, no hay un l\u00edmite expl\u00edcito de precisi\u00f3n. El rango permitido de  <code>p</code>es de 0 a 6.</p> <p>El  <code>interval</code>tipo tiene una opci\u00f3n adicional, que consiste en restringir el conjunto de campos almacenados escribiendo una de estas frases:</p> <pre><code>YEAR\nMONTH\nDIA\nNUESTRO\nMINUTE\nSEGUNDO\nA los meses\nDIA a HOUR\nD\u00eda para MINUTE\nD\u00eda para SEGUNDO\nHORA A MINUTE\nHORA SEGUNDO\nMINUTE A SEGUNDO\n</code></pre> <p>Tenga en cuenta que si ambos  <code>fields</code>y  <code>p</code>se especifican, la  <code>fields</code>debe incluir <code>SECOND</code>, ya que la precisi\u00f3n se aplica s\u00f3lo a los segundos.</p> <p>El tipo  <code>time with time zone</code>se define por la norma SQL, pero la definici\u00f3n muestra propiedades que  conducen a una utilidad cuestionable. En la mayor\u00eda de los casos, una  combinaci\u00f3n de <code>date</code>, <code>time</code>, <code>timestamp without time zone</code>, y  <code>timestamp with time zone</code>debe proporcionar un rango completo de funcionalidad fecha/hora requerido por cualquier aplicaci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/05.-Tipos%20Fecha-Hora/02.-Formato%20de%20salida/","title":"02.-Formato de salida","text":"<p>El formato de salida de los tipos de fecha/hora se puede ajustar a uno de los cuatro estilos ISO 8601,  SQL(Ingres), POSTGRES tradicionales (formato de fecha de uni\u00f3n), o alem\u00e1n. El predeterminado es el  ISOformato. (El  SQLLa norma requiere el uso del formato ISO 8601. El nombre del SQLformato de salida de SQL es un accidente hist\u00f3rico.) En el cuadro 8.14 se presentan ejemplos de cada estilo de salida. La salida de la  <code>date</code>y  <code>time</code>Los tipos son generalmente s\u00f3lo la fecha o la parte a tiempo parcial de acuerdo con los ejemplos dados. Sin embargo, el estilo POSTGRES produce valores de fecha-s\u00f3lo en  formato.</p> <p>Cuadro 8.14. Estilos de salida Fecha/Tiempos de tiempo</p> Especificaci\u00f3n de estilo Descripci\u00f3n Ejemplo <code>ISO</code> ISO 8601, est\u00e1ndar SQL <code>1997-12-17 07:37:16-08</code> <code>SQL</code> estilo tradicional <code>12/17/1997 07:37:16.00 PST</code> <code>Postgres</code> estilo original <code>Wed Dec 17 07:37:16 1997 PST</code> <code>German</code> estilo regional <code>17.12.1997 07:37:16.00 PST</code>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/05.-Tipos%20Fecha-Hora/02.-Formato%20de%20salida/#nota","title":"Nota","text":"<p>La norma 8601 especifica el uso de la letra may\u00fascula  <code>T</code>para separar la fecha y la hora. PostgreSQL acepta ese formato en la entrada, pero en la salida utiliza un espacio en lugar de <code>T</code>, como se muestra arriba. Esto es para la legibilidad y para la consistencia con RFC 3339, as\u00ed como algunos otros sistemas de bases de datos.</p> <p>En el  SQLy estilos POSTGRES, d\u00eda aparece antes de mes si el pedido de campo DMY se ha especificado, de lo contrario aparezca un mes antes del d\u00eda. (V\u00e9ase la secci\u00f3n 8.5.1 de c\u00f3mo esta configuraci\u00f3n tambi\u00e9n afecta a la interpretaci\u00f3n de los valores de entrada.) En el cuadro 8.15 se presentan ejemplos.</p> <p>Cuadro 8.15. Convenciones de orden de fecha</p> <code>datestyle</code>Ajuste Ordenaci\u00f3n de entrada Salida de ejemplo <code>SQL, DMY</code> <code>day</code>/ / <code>month</code>/<code>year</code> <code>17/12/1997 15:37:16.00 CET</code> <code>SQL, MDY</code> <code>month</code>/ / <code>day</code>/<code>year</code> <code>12/17/1997 07:37:16.00 PST</code> <code>Postgres, DMY</code> <code>day</code>/ / <code>month</code>/<code>year</code> <code>Wed 17 Dec 07:37:16 1997 PST</code> <p>En el  ISOestilo, el huso horario siempre se muestra como un desplazamiento num\u00e9rico  firmado de UTC, con letro positivo utilizado para zonas al este de  Greenwich. El desplazamiento se mostrar\u00e1 como  <code>hh</code>(horas solamente) si es un n\u00famero integral de horas, m\u00e1s como <code>hh</code>: <code>mm</code>si se trata de un n\u00famero integral de minutos, de lo contrario <code>hh</code>:<code>mm</code>:<code>ss</code>. (El tercer caso no es posible con ning\u00fan est\u00e1ndar moderno de huso  horario, pero puede parecer cuando se trabaja con marcas de tiempo que  son anteriores a la adopci\u00f3n de husos horarios estandarizados.) En los  otros estilos de fecha, el huso horario se muestra como una abreviatura  alfab\u00e9tica si uno est\u00e1 en uso com\u00fan en la zona actual. De lo contrario  aparece como una compensaci\u00f3n num\u00e9rica firmada en formato b\u00e1sico ISO  8601 ( <code>hh</code>o o <code>hhmm</code>).</p> <p>El estilo fecha/hora puede ser seleccionado por el usuario usando el  <code>SET datestyle</code>comando, el par\u00e1metro DateStyle en el  <code>postgresql.conf</code>archivo de configuraci\u00f3n, o  <code>PGDATESTYLE</code>variable de entorno en el servidor o cliente.</p> <p>La funci\u00f3n de formato  <code>to_char</code>(v\u00e9ase la secci\u00f3n 9.8) tambi\u00e9n est\u00e1 disponible como una forma m\u00e1s flexible de la fecha/a la hora de formato.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/05.-Tipos%20Fecha-Hora/03.-Zonas%20horarias/","title":"03.-Zonas horarias","text":"<p>Las zonas horarias, y las convenciones de la zona horaria, est\u00e1n  influenciadas por decisiones pol\u00edticas, no s\u00f3lo por la geometr\u00eda  terrestre. Las zonas horarias de todo el mundo se estandarizaron un poco durante el siglo XX, pero siguen siendo propensas a cambios  arbitrarios, particularmente con respecto a las reglas de ahorro de luz. PostgreSQL utiliza la base de datos de huso horario IANA (Olson) ampliamente  utilizada para obtener informaci\u00f3n sobre las reglas hist\u00f3ricas de la  zona horaria. Para tiempos en el futuro, la suposici\u00f3n es que las  \u00faltimas reglas conocidas para un huso horario determinado se seguir\u00e1n  observando indefinidamente lejos en el futuro.</p> <p>PostgreSQL se esfuerza por ser compatible con la  SQLdefiniciones est\u00e1ndar para el uso t\u00edpico. Sin embargo, la  SQLEl est\u00e1ndar tiene una extra\u00f1a mezcla de tipos y capacidades de fecha y hora. Dos problemas obvios son:</p> <ul> <li>Aunque el  <code>date</code>tipo no puede tener un huso horario asociado, el  <code>time</code>tipo puede. Las zonas horarias en el mundo real tienen poco significado a  menos que se asocie a una fecha, as\u00ed como un tiempo, ya que la  compensaci\u00f3n puede variar a trav\u00e9s del a\u00f1o con l\u00edmites de tiempo para  salvar la luz del d\u00eda.</li> <li>La zona horaria predeterminada se especifica como un desplazamiento num\u00e9rico constante de UTC. Por lo tanto, es imposible adaptarse al tiempo de ahorro de luz diurnos cuando se hace la fecha/hora aritm\u00e9tica a trav\u00e9s de  DSTl\u00edmites.</li> </ul> <p>Para hacer frente a estas dificultades, recomendamos utilizar  tipos de fecha/hora que contengan tanto fecha como hora cuando se  utilizan husos horarios. No recomendamos notusar el tipo  <code>time with time zone</code>(aunque cuenta con el apoyo de PostgreSQL para aplicaciones heredadas y para el cumplimiento de la  SQLest\u00e1ndar). PostgreSQL asume su huso horario local para cualquier tipo que contenga s\u00f3lo fecha o hora.</p> <p>Todas las fechas y horarios conscientes de la zona horaria se almacenan internamente en UTC. Se convierten a la hora local en la zona especificada por el par\u00e1metro de configuraci\u00f3n de TimeZone antes de ser mostradas al cliente.</p> <p>PostgreSQL le permite especificar husos horarios en tres formas diferentes:</p> <ul> <li>Un nombre de huso horario completo, por ejemplo <code>America/New_York</code>. Los nombres reconocidos de huso horario se enumeran en la  <code>pg_timezone_names</code>opini\u00f3n (v\u00e9ase la secci\u00f3n 54.32). PostgreSQL utiliza los datos de zona horaria IANA ampliamente utilizados para este prop\u00f3sito, por lo que los mismos nombres de zona horaria tambi\u00e9n son  reconocidos por otros programas inform\u00e1ticos.</li> <li>Una abreviatura de huso horario, por ejemplo <code>PST</code>. Tal especificaci\u00f3n simplemente define una compensaci\u00f3n particular de  UTC, a diferencia de los nombres de huso horario completo que pueden  implicar un conjunto de reglas de transici\u00f3n de ahorro de luz diurna  tambi\u00e9n. Las abreviaturas reconocidas figuran en la  <code>pg_timezone_abbrevs</code>opini\u00f3n (v\u00e9ase la secci\u00f3n 54.31). No puede establecer los par\u00e1metros de configuraci\u00f3n TimeZone o log-timezone a una abreviatura de zona horaria, pero puede utilizar abreviaturas en valores de entrada de fecha/hora y con el  <code>AT TIME ZONE</code>operador.</li> <li>Adem\u00e1s de los nombres y abreviaturas de la zona horaria, PostgreSQL aceptar\u00e1 las especificaciones de la zona horaria al estilo POSIX, como se describe en la secci\u00f3n B.5. Normalmente esta opci\u00f3n no es preferible a utilizar un huetro de tiempo nombrado, pero puede ser necesario si no se dispone de una entrada  adecuada de zona horaria IANA.</li> </ul> <p>En resumen, esta es la diferencia entre abreviaturas y nombres  completos: las abreviaturas representan una compensaci\u00f3n espec\u00edfica de  UTC, mientras que muchos de los nombres completos implican una regla  local de tiempo de ahorro de luz diurno, y por lo tanto tienen dos  posibles compensaciones UTC. Por ejemplo,  <code>2014-06-04 12:00 America/New_York</code>representa el mediod\u00eda hora local en Nueva York, que para esta fecha en particular fue Eastern Daylight Time (UTC-4). As\u00ed que  <code>2014-06-04 12:00 EDT</code>especifica ese mismo instante. Pero  <code>2014-06-04 12:00 EST</code>especifica el mediod\u00eda de la hora est\u00e1ndar oriental (UTC-5), independientemente de si el ahorro de luz diurno estaba nominalmente vigente en esa fecha.</p> <p>Para complicar las cosas, algunas jurisdicciones han utilizado la misma abreviatura de zona horaria para significar diferentes  compensaciones UTC en diferentes momentos; por ejemplo, en Mosc\u00fa  <code>MSK</code>ha significado UTC3 en algunos a\u00f1os y UTC 4 en otros. PostgreSQL interpreta tales abreviaturas de acuerdo a lo que significaron (o que  lo hab\u00edan significado m\u00e1s recientemente) en la fecha especificada; pero, como con el  <code>EST</code>Ejemplo anterior, esto no es necesariamente lo mismo que la hora civil local en esa fecha.</p> <p>En todos los casos, los nombres y abreviaturas de la zona horaria se reconocen de manera insensible. (Este es un cambio de versiones de PostgreSQL anteriores a 8.2, que eran sensibles a los casos en algunos contextos, pero no en otros.)</p> <p>Ni los nombres de la zona horaria ni las abreviaturas est\u00e1n  conectados al servidor; se obtienen de los archivos de configuraci\u00f3n  almacenados bajo  <code>.../share/timezone/</code>y  <code>.../share/timezonesets/</code>del directorio de instalaci\u00f3n (ver secci\u00f3n B.4).</p> <p>El par\u00e1metro de configuraci\u00f3n de TimeZone se puede establecer en el archivo <code>postgresql.conf</code>, o de cualquiera de las dem\u00e1s formas est\u00e1ndar descritas en el cap\u00edtulo 20. Tambi\u00e9n hay algunas maneras especiales de establecerlo:</p> <ul> <li>El  SQLel mando  <code>SET TIME ZONE</code>fija el huso horario de la sesi\u00f3n. Esta es una ortizada alternativa de  <code>SET TIMEZONE TO</code>con una sintaxis m\u00e1s compatible con SQL.</li> <li>El  <code>PGTZ</code>la variable de entorno es utilizada por los clientes libpq para enviar un  <code>SET TIME ZONE</code>comando al servidor en conexi\u00f3n.</li> </ul>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/05.-Tipos%20Fecha-Hora/04.-Intervalo%20de%20valores/","title":"04.-Intervalo de valores","text":"<p><code>interval</code>valores se pueden escribir usando la siguiente sintaxis de verbose:</p> <pre><code>[o]   quantityunit[ quantityunit...] [direction]\n</code></pre> <p>d\u00f3nde  <code>quantity</code>es un n\u00famero (posiblemente firmado);  <code>unit</code>es <code>microsecond</code>, <code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, <code>day</code>, <code>week</code>, <code>month</code>, <code>year</code>, <code>decade</code>, <code>century</code>, <code>millennium</code>, o abreviaturas o plurales de estas unidades;  <code>direction</code>puede ser  <code>ago</code>o vac\u00eda. El signo de la se\u00f1al (<code>@</code>) es ruido opcional. Las cantidades de las diferentes unidades se a\u00f1aden  impl\u00edcitamente con la contabilidad de signos apropiada.  <code>ago</code>Niega todos los campos. Esta sintaxis tambi\u00e9n se utiliza para la salida de intervalo, si IntervalStyle se establece en <code>postgres_verbose</code>.</p> <p>Cantidades de d\u00edas, horas, minutos y segundos se pueden especificar sin marcas de unidad expl\u00edcitas. Por ejemplo,  <code>'1 12:59:10'</code>se lee igual que <code>'1 day 12 hours 59 min 10 sec'</code>. Adem\u00e1s, una combinaci\u00f3n de a\u00f1os y meses se puede especificar con un gui\u00f3n; por ejemplo,  <code>'200-10'</code>se lee igual que <code>'200 years 10 months'</code>. (Estas formas m\u00e1s cortas son de hecho las \u00fanicas permitidas por la  SQLest\u00e1ndar, y se utilizan para la salida cuando  <code>IntervalStyle</code>est\u00e1 listo para <code>sql_standard</code>.)</p> <p>Los valores de intervalo tambi\u00e9n se pueden escribir como intervalos de tiempo ISO 8601, utilizando el formato de la norma con los designados de la secci\u00f3n 4.4.3.2 o el formato alternativo de la secci\u00f3n 4.4.3.3. El formato con los dise\u00f1adores se ve as\u00ed:</p> <pre><code>P   quantityunit[   quantityunit...] [T [   quantityunit...]]\n</code></pre> <p>La cuerda debe empezar con un <code>P</code>, y puede incluir una  <code>T</code>que introduce las unidades del tiempo de d\u00eda. Las abreviaturas de la unidad disponibles se dan en el . Las unidades pueden ser omitidas, y pueden especificarse en cualquier  orden, pero las unidades m\u00e1s peque\u00f1as de un d\u00eda deben aparecer despu\u00e9s  de <code>T</code>. En particular, el significado de  <code>M</code>depende de si es antes o despu\u00e9s <code>T</code>.</p> <p>Cuadro 8.16. Abreviaciones de Unidad Intervalo ISO 8601</p> Abreviaci\u00f3n Significado Y A\u00f1os M Meses (en la parte de la fecha) W Semanas D D\u00edas H Horas M Minutos (a tiempo a la parte) S Segundos <p>En el formato alternativo:</p> <pre><code>P [ years- -months- - days] [T hours:minutes: seconds]\n</code></pre> <p>la cuerda debe comenzar con <code>P</code>, y un  <code>T</code>separa la fecha y las partes horaras del intervalo. Los valores se dan como n\u00fameros similares a las fechas ISO 8601.</p> <p>Al escribir una constante de intervalo con un  <code>fields</code>especificaci\u00f3n, o al asignar una cadena a una columna de intervalo que se defini\u00f3 con una  <code>fields</code>especificaci\u00f3n, la interpretaci\u00f3n de las cantidades sin marcar depende de la <code>fields</code>. Por ejemplo  <code>INTERVAL '1' YEAR</code>se lee como 1 a\u00f1o, mientras que  <code>INTERVAL '1'</code>significa 1 segundo. Adem\u00e1s, los valores de campo a la derecha del campo menos significativo permitido por la  <code>fields</code>La especificaci\u00f3n se descartan silenciosamente. Por ejemplo, escribiendo  <code>INTERVAL '1 day 2:03:04' HOUR TO MINUTE</code>resulta en bajar los segundos campo, pero no en el campo diurno.</p> <p>De acuerdo con la  SQLest\u00e1ndar todos los campos de un valor de intervalo debe tener el mismo signo,  por lo que un signo negativo l\u00edder se aplica a todos los campos; por  ejemplo, el signo negativo en el intervalo literal  <code>'-1 2:03:04'</code>se aplica tanto a los d\u00edas como a las partes de la hora/minuto/segunda. PostgreSQL permite que los campos tengan diferentes signos, y tradicionalmente  trata cada campo en la representaci\u00f3n textual como firmado de forma  independiente, de modo que la parte hora/minuto/segundo se considera  positiva en este ejemplo. Si  <code>IntervalStyle</code>est\u00e1 listo para  <code>sql_standard</code>entonces se considera que un signo de direcci\u00f3n se aplica a todos los campos  (pero s\u00f3lo si no aparecen signos adicionales). De lo contrario se  utiliza la interpretaci\u00f3n tradicional de PostgreSQL. Para evitar la ambiguedad, se recomienda adjuntar una se\u00f1al expl\u00edcita a cada campo si alg\u00fan campo es negativo.</p> <p>Los valores de campo pueden tener partes fraccionarias: por ejemplo,  <code>'1.5 weeks'</code>o o <code>'01:02:03.45'</code>. Sin embargo, debido a que el intervalo almacena internamente s\u00f3lo tres  unidades de enteros (meses, d\u00edas, microsegundos), las unidades  fraccionarias deben ser derraman unidades m\u00e1s peque\u00f1as. Las partes  fracturadas de unidades mayores a meses se redondean para ser un n\u00famero  entero de meses, por ejemplo.  <code>'1.5 years'</code>se convierte <code>'1 year 6 mons'</code>. Las partes fraccionales de las semanas y los d\u00edas se calculan para ser  un n\u00famero entero de d\u00edas y microsegundos, asumiendo 30 d\u00edas al mes y 24  horas al d\u00eda, por ejemplo,  <code>'1.75 months'</code>se convierte <code>1 mon 22 days 12:00:00</code>. S\u00f3lo los segundos se mostrar\u00e1n como fraccionamiento en la salida.</p> <p>El cuadro 8.17 muestra algunos ejemplos de  <code>interval</code>entrada.</p> <p>Cuadro 8.17. Entrada intervalada</p> Ejemplo Descripci\u00f3n <code>1-2</code> Formato est\u00e1ndar SQL: 1 a\u00f1o 2 meses <code>3 4:05:06</code> SQL formato est\u00e1ndar: 3 d\u00edas 4 horas 5 minutos 6 segundos <code>1 year 2 months 3 days 4 hours 5 minutes 6 seconds</code> Formato tradicional Postgres: 1 a\u00f1o 2 meses 3 d\u00edas 4 horas 5 minutos 6 segundos <code>P1Y2M3DT4H5M6S</code> ISO 8601 - formato con los designados: el mismo significado que arriba <code>P0001-02-03T04:05:06</code> ISO 8601 - Formato alternativo: el mismo significado que arriba <p>Internamente  <code>interval</code>los valores se almacenan en meses, d\u00edas y microsegundos. Esto se hace  porque el n\u00famero de d\u00edas en un mes var\u00eda, y un d\u00eda puede tener 23 o 25  horas si se trata de un ajuste del tiempo de ahorro de luz diurnal. Los  campos de meses y d\u00edas son enteros, mientras que el campo de  microsegundos puede almacenar segundos fraccionados. Porque los  intervalos se crean generalmente a partir de cuerdas constantes o  <code>timestamp</code>resta, este m\u00e9todo de almacenamiento funciona bien en la mayor\u00eda de los casos, pero puede causar resultados inesperados:</p> <pre><code>EXTRATO EXTRATC (horas de '80 minutos':interval);\n fecha.\n---------\n         1\n\nSELECT EXTRACT (d\u00edas de '80 horas':interval);\n fecha.\n---------\n         0\n</code></pre> <p>Funciones  <code>justify_days</code>y  <code>justify_hours</code>est\u00e1n disponibles para ajustar d\u00edas y horas que desbordan sus rangos normales.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/05.-Tipos%20Fecha-Hora/05.-Salida%20de%20intervalos/","title":"05.-Salida de intervalos","text":"<p>El formato de salida del tipo de intervalo se puede establecer en uno de los cuatro estilos <code>sql_standard</code>, <code>postgres</code>, <code>postgres_verbose</code>, o <code>iso_8601</code>, utilizando el comando <code>SET intervalstyle</code>. El predeterminado es el  <code>postgres</code>formato. El cuadro 8.18 muestra ejemplos de cada estilo de salida.</p> <p>El  <code>sql_standard</code>el estilo produce una salida que se ajusta a la especificaci\u00f3n del  est\u00e1ndar SQL para cadenas literales de intervalo, si el valor del  intervalo cumple con las restricciones del est\u00e1ndar (ya sea el mes del  a\u00f1o o s\u00f3lo de d\u00eda, sin mezcla de componentes positivos y negativos). De  lo contrario, la salida parece una cadena literal est\u00e1ndar de mes  seguido de una cadena literal diurno, con signos expl\u00edcitos a\u00f1adidos a  intervalos de firma mixta de desambiguato.</p> <p>La salida de la  <code>postgres</code>el estilo coincide con la salida de versiones de PostgreSQL antes de 8.4 cuando el par\u00e1metro DateStyle estaba establecido en <code>ISO</code>.</p> <p>La salida de la  <code>postgres_verbose</code>el estilo coincide con la salida de versiones de PostgreSQL antes de 8,4 cuando el  <code>DateStyle</code>par\u00e1metro estaba fijado a no- <code>ISO</code>salida.</p> <p>La salida de la  <code>iso_8601</code>El estilo coincide con el formato de los dise\u00f1adores descrito en la secci\u00f3n 4.4.3.2 del est\u00e1ndar ISO 8601.</p> <p>Cuadro 8.18. Ejemplos de estilo de salida intervalada</p> Especificaci\u00f3n de estilo Intervalo de a\u00f1o-Mes Intervalo de tiempo diurmo Intervalo mixto <code>sql_standard</code> 1-2 3: a.05:06 -1-2 -4:05:06 . <code>postgres</code> 1 a\u00f1o 2 mons 3 d\u00edas 04:05:06 -1 a\u00f1o -2 mons 3 d\u00edas -04:05:06 <code>postgres_verbose</code> 1 a\u00f1o 2 mons 3 d\u00edas 4 horas 5 minutos 6 segundos 1 a\u00f1o 2 mons -3 d\u00edas 4 horas 5 minutos hace 6 segs <code>iso_8601</code> P1Y2M P3DT4H5M6S P-1Y-2M3D T-4H-5M-6S"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/05.-Tipos%20Fecha-Hora/01.-Fecha-aportaci%C3%B3n%20de%20tiempo.md%20%28Conflicto%20de%20may%C3%BAsculas%20y%20min%C3%BAsculas%29/01.-Fechas/","title":"01.-Fechas","text":"<p>En el cuadro 8.10 se indican algunas posibles aportaciones para la  <code>date</code>tipo.</p> <p>Cuadro 8.10. Fecha de entrada</p> Ejemplo Descripci\u00f3n 1999-01-08 ISO 8601; 8 de enero en cualquier modo (formate recomendado) 8 de enero de 1999 inequ\u00edvoco en cualquier  <code>datestyle</code>modo de entrada 1/8/1999 8 de enero en  <code>MDY</code>modo; 1 de agosto en  <code>DMY</code>modo 1/18/1999 18 de enero en  <code>MDY</code>modo; rechazado en otros modos 01/02/03 2 de enero de 2003 en  <code>MDY</code>modo; 1 de febrero de 2003 en  <code>DMY</code>modo; 3 de febrero de 2001 en  <code>YMD</code>modo 1999-Ene-08 8 de enero en cualquier modo Ene-08-1999 8 de enero en cualquier modo 08-Ene 1999 8 de enero en cualquier modo 99-Ene-08 8 de enero en  <code>YMD</code>modo, de lo contrario error 08-Ene-99 8 de enero, excepto error en  <code>YMD</code>modo Ene-08-99 8 de enero, excepto error en  <code>YMD</code>modo 19990108 ISO 8601; 8 de enero de 1999 en cualquier modo 990108 ISO 8601; 8 de enero de 1999 en cualquier modo 1999.008 a\u00f1o y d\u00eda del a\u00f1o J2451187 Juli\u00e1n fecha 8 de enero, 99 a.C. a\u00f1o 99 BC"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/05.-Tipos%20Fecha-Hora/01.-Fecha-aportaci%C3%B3n%20de%20tiempo.md%20%28Conflicto%20de%20may%C3%BAsculas%20y%20min%C3%BAsculas%29/02.-Horas/","title":"02.-Horas","text":"<p>Los tipos del tiempo de d\u00eda son  <code>time [ (*</code>p<code>*) ] without time zone</code>y <code>time [ (*</code>p<code>*) ] with time zone</code>.  <code>time</code>por s\u00ed solo es equivalente a <code>time without time zone</code>.</p> <p>La entrada v\u00e1lida para estos tipos consiste en una hora del d\u00eda seguida de una zona horaria opcional. (V\u00e9ase el cuadro 8.11 y el cuadro 8.12.) Si se especifica un huso horario en la entrada para <code>time without time zone</code>, es ignorado silenciosamente. Tambi\u00e9n puede especificar una fecha, pero  se ignorar\u00e1, excepto cuando utilice un nombre de zona horaria que  implique una regla de ahorro de luz diurno, como <code>America/New_York</code>. En este caso se requiere especificar la fecha para determinar si se  aplica tiempo est\u00e1ndar o de ahorro de luz. El desplazamiento adecuado  del huso horario se registra en la  <code>time with time zone</code>valor.</p> <p>Cuadro 8.11. Aporte del tiempo</p> Ejemplo Descripci\u00f3n <code>04:05:06.789</code> ISO 8601 <code>04:05:06</code> ISO 8601 <code>04:05</code> ISO 8601 <code>040506</code> ISO 8601 <code>04:05 AM</code> lo mismo que 04:05; AM no afecta al valor <code>04:05 PM</code> lo mismo que 16:05; la hora de entrada debe ser de 12 <code>04:05:06.789-8</code> ISO 8601, con huso horario como desplazamiento UTC <code>04:05:06-08:00</code> ISO 8601, con huso horario como desplazamiento UTC <code>04:05-08:00</code> ISO 8601, con huso horario como desplazamiento UTC <code>040506-08</code> ISO 8601, con huso horario como desplazamiento UTC <code>040506+0730</code> ISO 8601, con huso horario fraccionada a la hora como desplazamiento UTC <code>040506+07:30:00</code> UTC compensado en segundos (no permitido en la norma ISO 8601) <code>04:05:06 PST</code> huso horario especificado por abreviatura <code>2003-04-12 04:05:06 America/New_York</code> huso horario especificado por nombre completo <p>Cuadro 8.12. Aporte de zona horaria</p> Ejemplo Descripci\u00f3n <code>PST</code> Abreviatura (para el tiempo est\u00e1ndar del Pac\u00edfico) <code>America/New_York</code> Nombre de la zona horaria completa <code>PST8PDT</code> especificaci\u00f3n de zona horaria al estilo POSIX <code>-8:00:00</code> UTC compensada por PST <code>-8:00</code> Compensaci\u00f3n UTC para PST (formaci\u00f3n extendida ISO 8601) <code>-800</code> Compensaci\u00f3n UTC para PST (formate de base ISO 8601) <code>-8</code> Compensaci\u00f3n UTC para PST (formate de base ISO 8601) <code>zulu</code> Abreviatura militar para UTC <code>z</code> De forma corta de  <code>zulu</code>(tambi\u00e9n en la norma ISO 8601) <p>Consulte la secci\u00f3n 8.5.3 para obtener m\u00e1s informaci\u00f3n sobre c\u00f3mo especificar husos horarios.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/05.-Tipos%20Fecha-Hora/01.-Fecha-aportaci%C3%B3n%20de%20tiempo.md%20%28Conflicto%20de%20may%C3%BAsculas%20y%20min%C3%BAsculas%29/03.-Mess%20de%20tiempo/","title":"03.-Mess de tiempo","text":"<p>La entrada v\u00e1lida para los tipos de sellos de tiempo consiste en la  concatenaci\u00f3n de una fecha y un tiempo, seguido de una zona horaria  opcional, seguida de una opci\u00f3n  <code>AD</code>o o <code>BC</code>. (Alternativamente, <code>AD</code>/ <code>BC</code>puede aparecer antes de la zona horaria, pero este no es el pedido preferido.) As\u00ed:</p> <pre><code>1999-01-08 04:05:06\n</code></pre> <p>y:</p> <pre><code>1999-01-08 04:05:06 -8:00\n</code></pre> <p>son valores v\u00e1lidos, que siguen la  ISOEst\u00e1ndar 8601. Adem\u00e1s, el formato com\u00fan:</p> <pre><code>8 de Enero 04:05:06 1999 PST\n</code></pre> <p>est\u00e1 apoyado.</p> <p>El  SQLest\u00e1ndar diferencia  <code>timestamp without time zone</code>y  <code>timestamp with time zone</code>literales por la presencia de un \u201c+\u201d\u201c-\u201ds\u00edmbolo y huso horario offset despu\u00e9s de la hora. Por lo tanto, seg\u00fan la norma,</p> <pre><code>TIMESTAMP '2004-10-19 10:23:54'\n</code></pre> <p>es a <code>timestamp without time zone</code>, mientras que</p> <pre><code>TIMESTAMP '2004-10-19 10:23:54-02'\n</code></pre> <p>es a <code>timestamp with time zone</code>. PostgreSQL nunca examina el contenido de una cadena literal antes de determinar su tipo, y por lo tanto tratar\u00e1 ambos de lo anterior como <code>timestamp without time zone</code>. Asegurar que un literal sea tratado como <code>timestamp with time zone</code>, darle el tipo expl\u00edcito correcto:</p> <pre><code>TIEMPO CON TIEMPO ZONE '2004-10-19 10:23:54-02'\n</code></pre> <p>En un literal que se ha determinado que es <code>timestamp without time zone</code>, PostgreSQL ignorar\u00e1 silenciosamente cualquier indicaci\u00f3n de zona horaria. Es  decir, el valor resultante se deriva de los campos de fecha/hora del  valor de entrada, y no se ajusta para la zona horaria.</p> <p>Para <code>timestamp with time zone</code>, el valor almacenado internamente est\u00e1 siempre en UTC (Tipo de  Coordinado Universal, tradicionalmente conocido como Greenwich Mean  Time, GMT). Un valor de entrada que tiene un huso horario expl\u00edcito especificado se convierte en UTC utilizando la compensaci\u00f3n apropiada para esa zona  horaria. Si no se indica un huej\u00f3 horario en la cadena de entrada,  entonces se supone que est\u00e1 en el huso horario indicado por el par\u00e1metro TimeZone del sistema, y se convierte en UTC utilizando el desplazamiento para el  <code>timezone</code>Zona.</p> <p>Cuando a  <code>timestamp with time zone</code>el valor es de salida, siempre se convierte de UTC a la corriente  <code>timezone</code>zona, y exhibida como hora local en esa zona. Para ver el tiempo en otro huso horario, o cambia  <code>timezone</code>o utilizar la  <code>AT TIME ZONE</code>construcci\u00f3n (v\u00e9ase la secci\u00f3n 9.9.4).</p> <p>Conversiones entre  <code>timestamp without time zone</code>y  <code>timestamp with time zone</code>asumen normalmente que la  <code>timestamp without time zone</code>el valor debe tomarse o darse como  <code>timezone</code>hora local. Se puede especificar un huso horario diferente para la conversi\u00f3n utilizando <code>AT TIME ZONE</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/05.-Tipos%20Fecha-Hora/01.-Fecha-aportaci%C3%B3n%20de%20tiempo.md%20%28Conflicto%20de%20may%C3%BAsculas%20y%20min%C3%BAsculas%29/04.-Valores%20especiales/","title":"04.-Valores especiales","text":"<p>PostgreSQL soporta varios valores de entrada de fecha/hora especiales para la comodidad, como se muestra en la Tabla 8.13. Los valores  <code>infinity</code>y  <code>-infinity</code>est\u00e1n especialmente representados dentro del sistema y se mostrar\u00e1n sin  cambios; pero los dem\u00e1s son simplemente abreviados notariocionales que  se convertir\u00e1n a valores ordinarios de fecha/hora cuando se lea. (En  particular,  <code>now</code>y las cadenas relacionadas se convierten en un valor de tiempo espec\u00edfico tan pronto como se leen.) Todos estos valores deben estar encerrados en comillas individuales cuando se usan como constantes en comandos SQL.</p> <p>Cuadro 8.13. Fecha especial/aportaciones de tiempo</p> Cae de entrada Tipos v\u00e1lidos Descripci\u00f3n <code>epoch</code> <code>date</code>, <code>timestamp</code> 1970-01-01 00:00:00-00 (hora del sistema de Unix cero) <code>infinity</code> <code>date</code>, <code>timestamp</code> m\u00e1s tarde que todos los sellos de tiempo <code>-infinity</code> <code>date</code>, <code>timestamp</code> antes de todos los dem\u00e1s sellos de tiempo <code>now</code> <code>date</code>, <code>time</code>, <code>timestamp</code> la hora de inicio de la transacci\u00f3n actual <code>today</code> <code>date</code>, <code>timestamp</code> medianoche (<code>00:00</code>) hoy <code>tomorrow</code> <code>date</code>, <code>timestamp</code> medianoche (<code>00:00</code>) ma\u00f1ana <code>yesterday</code> <code>date</code>, <code>timestamp</code> medianoche (<code>00:00</code>) ayer <code>allballs</code> <code>time</code> 00:00:00.00 UTC <p>A continuaci\u00f3n SQL- funciones compatibles tambi\u00e9n se pueden utilizar para obtener el valor temporal actual para el tipo de datos correspondiente: <code>CURRENT_DATE</code>, <code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, <code>LOCALTIMESTAMP</code>. (V\u00e9ase la secci\u00f3n 9.9.5.) Tenga en cuenta que estas son funciones SQL y no se reconocen en cadenas de entrada de datos.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/05.-Tipos%20Fecha-Hora/01.-Fecha-aportaci%C3%B3n%20de%20tiempo.md%20%28Conflicto%20de%20may%C3%BAsculas%20y%20min%C3%BAsculas%29/04.-Valores%20especiales/#precaucion","title":"Precauci\u00f3n","text":"<p>Mientras que las cuerdas de entrada <code>now</code>, <code>today</code>, <code>tomorrow</code>, y  <code>yesterday</code>est\u00e1n bien para usar en comandos SQL interactivos, pueden tener un  comportamiento sorprendente cuando el comando se guarda para ser  ejecutado m\u00e1s tarde, por ejemplo en declaraciones preparadas, opiniones y definiciones de funci\u00f3n. La cadena se puede convertir en un valor de  tiempo espec\u00edfico que se sigue utilizando mucho despu\u00e9s de que se vuelve rane. Util\u00edcese una de las funciones de SQL en cambio en tales  contextos. Por ejemplo,  <code>CURRENT_DATE + 1</code>es m\u00e1s seguro que <code>'tomorrow'::date</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/07.-Tipos%20enumerados/","title":"Index","text":"<p>Los tipos enumerados (enum) son tipos de datos que comprenden un  conjunto de valores est\u00e1tico y ordenado. Son equivalentes a la  <code>enum</code>tipos soportados en varios lenguajes de programaci\u00f3n. Un ejemplo de tipo enum podr\u00eda ser los d\u00edas de la semana, o un conjunto de valores de estado  para un pedazo de datos.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/07.-Tipos%20enumerados/01.-Declaraci%C3%B3n%20de%20los%20tipos%20enumerados/","title":"01.-Declaraci\u00f3n de los tipos enumerados","text":"<p>Los tipos de Enum se crean utilizando el comando CREATE TYPE, por ejemplo:</p> <pre><code>CREATE TYPE estado de \u00e1nimo AS ENUM ('sad', 'ok', 'happy');\n</code></pre> <p>Una vez creado, el tipo enum se puede utilizar en las definiciones de tabla y funci\u00f3n muy parecida a cualquier otro tipo:</p> <pre><code>CREATE TYPE estado de \u00e1nimo AS ENUM ('sad', 'ok', 'happy');\nCREATE TABLE persona (\n    texto de nombre,\n    humor de humor actual\n);\nINSERT INTO persona VALUES ('Moe', 'feliz');\nSELECT * De la persona D\u00f3nde corriente-mood = 'feliz';\n nombre de la actualidad\n--------------------\n Moe, feliz\n(1 fila)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/07.-Tipos%20enumerados/02.-Ordenando/","title":"02.-Ordenando","text":"<p>El ordenamiento de los valores en un tipo enum es el orden en el que  se enumeraban los valores cuando se cre\u00f3 el tipo. Todos los operadores  de comparaci\u00f3n est\u00e1ndar y funciones agregadas relacionadas son  compatibles para enums. Por ejemplo:</p> <pre><code>INSERT INTO persona VALUES ('Larry', 'tris');\nINSERT INTO persona VALUES ('Curly', 'ok');\nSELECT * DESDE persona D\u00f3nde corriente-mood . 'sad';\n nombre de la actualidad\n--------------------\n Moe, feliz\n Curly ok\n(2 filas)\n\nSELECT * DESDE persona D\u00f3nde est\u00e1 presente.mood . 'sad' ORDER BY current-mood;\n nombre de la actualidad\n--------------------\n Curly ok\n Moe, feliz\n(2 filas)\n\nNombre SELECT\nDe persona\nLO ADEMood = (SELECT MIN(current-mood) FROM person);\n nombre\n------\n Larry\n(1 fila)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/07.-Tipos%20enumerados/03.-Tipo%20de%20Seguridad/","title":"03.-Tipo de Seguridad","text":"<p>Cada tipo de dato enumerado es separado y no se puede comparar con otros tipos enumerados. Vea este ejemplo:</p> <pre><code>CREATE TYPE felicidad COMEN ('feliz', 'muy feliz', 'ec\u00e1tica');\nCREATE TABLE holidays (\n    n\u00famero entero de numweeks,\n    felicidad felicidad\n);\nINSERT INTO holidays(num-weeks,happiness) VALUES (4, 'feliz');\nINSERT INTO holidays(num-weeks,happiness) VALUES (6, 'muy feliz');\nINSERT INTO holidays (num-weeks,happiness) VALUES (8, 'ec\u00e1tica');\nINSERT INTO holidays(num-weeks,happiness) VALUES (2, 'tris');\nERROR: valor de entrada inv\u00e1lido para la felicidad enum: \"tris\"\nSELECT person.name, holidays.num-weeks FROM person, holidays\n  D\u00f3nde haya persona.current-mood = holidays.happiness;\nERROR: el operador no existe: estado de \u00e1nimo = felicidad\n</code></pre> <p>Si realmente necesitas hacer algo as\u00ed, puedes escribir un operador personalizado o a\u00f1adir molecos expl\u00edcitos a tu consulta:</p> <pre><code>SELECT person.name, holidays.num-weeks FROM person, holidays\n  D\u00f3nde person.current-mood::text = holidays.happiness::text;\n nombre de la semana a medias\n-----------------\n Moe 4\n(1 fila)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/07.-Tipos%20enumerados/03.-Tipo%20de%20Seguridad/#_1","title":"03.-Tipo de Seguridad","text":""},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/07.-Tipos%20enumerados/04.-Detalles%20de%20la%20implementaci%C3%B3n/","title":"04.-Detalles de la implementaci\u00f3n","text":"<p>Las etiquetas Enum son sensibles al caso, as\u00ed que  <code>'happy'</code>no es lo mismo que <code>'HAPPY'</code>. El espacio blanco en las etiquetas tambi\u00e9n es significativo.</p> <p>Aunque los tipos de enum est\u00e1n destinados principalmente a  conjuntos est\u00e1ticos de valores, hay soporte para a\u00f1adir nuevos valores a un tipo de enum existente, y para cambiar el nombre de valores (v\u00e9ase ALTER TYPE). Los valores existentes no pueden ser eliminados de un tipo enum, ni  puede cambiarse el orden de clasificaci\u00f3n de tales valores, a falta de  ca\u00edda y recreaci\u00f3n del tipo enum.</p> <p>Un valor enum ocupa cuatro bytes en disco. La longitud de la etiqueta textual de un valor enum est\u00e1 limitada por la  <code>NAMEDATALEN</code>configuraci\u00f3n compilada en PostgreSQL ; en la compilaci\u00f3n est\u00e1ndar esto significa como mucho 63 bytes.</p> <p>Las traducciones de los valores internos de enum a las etiquetas textuales se mantienen en el cat\u00e1logo del sistema <code>pg_enum</code>. Consultar este cat\u00e1logo directamente puede ser \u00fatil.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/08.-Tipos%20Geom%C3%A9tricos/","title":"Index","text":"<p>Los tipos de datos geom\u00e9tricos representan objetos espaciales bidimensionales. El cuadro 8.20 muestra los tipos geom\u00e9tricos disponibles en PostgreSQL.</p> <p>Cuadro 8.20. Tipos geom\u00e9tricos</p> Nombre Tama\u00f1o de almacenamiento Descripci\u00f3n Representaci\u00f3n <code>point</code> 16 bytes Punto en un avi\u00f3n (x,y) <code>line</code> 32 bytes L\u00ednea infinita A, B, C. <code>lseg</code> 32 bytes Segmento de l\u00ednea de finito ((x1,y1),(x2,y2)) <code>box</code> 32 bytes Caja rectangular ((x1,y1),(x2,y2)) <code>path</code> 1617 de bytes Ruta cerrada (similar al pol\u00edgono) ((x1,y1),...) <code>path</code> 1617 de bytes V\u00eda abierta [(x1,y1),...] <code>polygon</code> 40-16n bytes Pol\u00edgono (similar a la v\u00eda cerrada) ((x1,y1),...) <code>circle</code> 24 bytes C\u00edrculo \"(x,y), r (punto de centro y radio) <p>Un rico conjunto de funciones y operadores est\u00e1 disponible para  realizar diversas operaciones geom\u00e9tricas, como escalada, traducci\u00f3n,  rotaci\u00f3n e determinaciones. Se explican en la secci\u00f3n 9.11.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/08.-Tipos%20Geom%C3%A9tricos/01.-Puntos/","title":"01.-Puntos","text":"<p>Los puntos son el bloque fundamental de construcci\u00f3n bidimensional para los tipos geom\u00e9tricos. Valores de tipo  <code>point</code>se especifican utilizando cualquiera de las siguientes sintaxis:</p> <pre><code>(  x,  y)\n   x, y\n</code></pre> <p>d\u00f3nde  <code>x</code>y  <code>y</code>son las coordenadas respectivas, como n\u00fameros de punto flotante.</p> <p>Los puntos son salida usando la primera sintaxis.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/08.-Tipos%20Geom%C3%A9tricos/01.-Puntos/#_1","title":"01.-Puntos","text":""},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/08.-Tipos%20Geom%C3%A9tricos/02.-L%C3%ADneas/","title":"02.-L\u00edneas","text":"<p>Las l\u00edneas se representan por la ecuaci\u00f3n lineal <code>A</code>x <code>B</code>Y .  <code>C</code>= 0, donde  <code>A</code>y  <code>B</code>no son cero. Valores de tipo  <code>line</code>son entradas y salidas en la siguiente forma:</p> <pre><code>- A, B,  C-\n</code></pre> <p>Alternativamente, cualquiera de los siguientes formularios se puede utilizar para la entrada:</p> <pre><code>[ (  x1,  y1) (  x2,  y2) ]\n(  x1,  y1) (  x2,  y2) )\n  (  x1,  y1) (  x2,  y2)\n     x1,    y1,    x2, y2\n</code></pre> <p>d\u00f3nde  <code>(*</code>x1<code>*,*</code>y1<code>*)</code>y  <code>(*</code>x2<code>*,*</code>y2<code>*)</code>son dos puntos diferentes en la l\u00ednea.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/08.-Tipos%20Geom%C3%A9tricos/03.-Segmentos%20de%20l%C3%ADnea/","title":"03.-Segmentos de l\u00ednea","text":"<p>Los segmentos de l\u00ednea est\u00e1n representados por pares de puntos que son los puntos finales del segmento. Valores de tipo  <code>lseg</code>se especifican utilizando cualquiera de las siguientes sintaxis:</p> <pre><code>[ (  x1,  y1) (  x2,  y2) ]\n(  x1,  y1) (  x2,  y2) )\n  (  x1,  y1) (  x2,  y2)\n     x1,    y1,    x2, y2\n</code></pre> <p>d\u00f3nde  <code>(*</code>x1<code>*,*</code>y1<code>*)</code>y  <code>(*</code>x2<code>*,*</code>y2<code>*)</code>son los puntos finales del segmento de l\u00ednea.</p> <p>Los segmentos de l\u00ednea son la salida utilizando la primera sintaxis.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/08.-Tipos%20Geom%C3%A9tricos/04.-Cajas/","title":"04.-Cajas","text":"<p>Las cajas est\u00e1n representadas por pares de puntos que son esquinas opuestas de la caja. Valores de tipo  <code>box</code>se especifican utilizando cualquiera de las siguientes sintaxis:</p> <pre><code>(  x1,  y1) (  x2,  y2) )\n  (  x1,  y1) (  x2,  y2)\n     x1,    y1,    x2, y2\n</code></pre> <p>d\u00f3nde  <code>(*</code>x1<code>*,*</code>y1<code>*)</code>y  <code>(*</code>x2<code>*,*</code>y2<code>*)</code>son dos esquinas opuestas de la caja.</p> <p>Las cajas son salida usando la segunda sintaxis.</p> <p>Cualquiera de las dos esquinas opuestas se puede suministrar en  la entrada, pero los valores ser\u00e1n reordenados seg\u00fan sea necesario para  almacenar las esquinas superior derecha e inferior izquierda, en ese  orden.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/08.-Tipos%20Geom%C3%A9tricos/05.-Caminos/","title":"05.-Caminos","text":"<p>Los caminos est\u00e1n representados por listas de puntos conectados. Los caminos pueden estar abiertos, donde los primeros y \u00faltimos puntos de la lista se consideran no conectados, o cerrados, donde los primeros y \u00faltimos puntos se consideran conectados.</p> <p>Valores de tipo  <code>path</code>se especifican utilizando cualquiera de las siguientes sintaxis:</p> <pre><code>[ (  x1,  y1) , ... , (  xn,  yn) ]\n(  x1,  y1) , ... , (  xn,  yn) )\n  (  x1,  y1) , ... , (  xn,  yn)\n  (  x1,    y1, ... ,    xn,  yn)\n     x1,    y1, ... ,    xn, yn\n</code></pre> <p>donde los puntos son los puntos finales de los segmentos de l\u00ednea que componen la ruta. Etapatrozalos (<code>[]</code>) indicar una v\u00eda abierta, mientras que par\u00e9ntesis (<code>()</code>) indicar una v\u00eda cerrada. Cuando se omiten los par\u00e9ntesis m\u00e1s externos,  como en la tercera a quinta sintaxis, se asume una v\u00eda cerrada.</p> <p>Los caminos son de salida utilizando la primera o segunda sintaxis, seg\u00fan corresponda.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/08.-Tipos%20Geom%C3%A9tricos/06.-Pol%C3%ADgonos/","title":"06.-Pol\u00edgonos","text":"<p>Los pol\u00edgonos est\u00e1n representados por listas de puntos (los v\u00e9rtices  del pol\u00edgono). Los pol\u00edgonos son muy similares a los caminos cerrados;  la diferencia esencial es que se considera que un pol\u00edgono incluye el  \u00e1rea dentro de \u00e9l, mientras que un camino no lo es.</p> <p>Valores de tipo  <code>polygon</code>se especifican utilizando cualquiera de las siguientes sintaxis:</p> <pre><code>(  x1,  y1) , ... , (  xn,  yn) )\n  (  x1,  y1) , ... , (  xn,  yn)\n  (  x1,    y1, ... ,    xn,  yn)\n     x1,    y1, ... ,    xn, yn\n</code></pre> <p>donde los puntos son los puntos finales de los segmentos de l\u00ednea que componen el l\u00edmite del pol\u00edgono.</p> <p>Los pol\u00edgonos son salidas usando la primera sintaxis.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/08.-Tipos%20Geom%C3%A9tricos/07.-C%C3%ADrculos/","title":"07.-C\u00edrculos","text":"<p>Los c\u00edrculos est\u00e1n representados por un punto central y radio. Valores de tipo  <code>circle</code>se especifican utilizando cualquiera de las siguientes sintaxis:</p> <pre><code>- (  x,  y) ,  r-\n(  x,  y) ,  r)\n  (  x,  y) , \n     rx,    y, r\n</code></pre> <p>d\u00f3nde  <code>(*</code>x<code>*,*</code>y<code>*)</code>es el punto central y  <code>r</code>es el radio del c\u00edrculo.</p> <p>Los c\u00edrculos son salida usando la primera sintaxis.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/09.-Tipos%20de%20direcci%C3%B3n%20de%20red/","title":"Index","text":"<p>PostgreSQL ofrece tipos de datos para almacenar direcciones IPv4, IPv6 y MAC, como se muestra en el cuadro 8.21. Es mejor utilizar estos tipos en lugar de tipos de texto plano para  almacenar direcciones de red, porque estos tipos ofrecen verificaci\u00f3n de errores de entrada y operadores y funciones especializadas (ver Secci\u00f3n 9.12).</p> <p>Cuadro 8.21. Tipos de direcci\u00f3n de red</p> Nombre Tama\u00f1o de almacenamiento Descripci\u00f3n <code>cidr</code> 7 o 19 bytes Redes IPv4 e IPv6 <code>inet</code> 7 o 19 bytes IPv4 e IPv6 hosts y redes <code>macaddr</code> 6 bytes Direcciones MAC <code>macaddr8</code> 8 bytes direcciones MAC (formate EUI-64) <p>Al ordenar  <code>inet</code>o o  <code>cidr</code>Tipos de datos, las direcciones IPv4 siempre se ordenar\u00e1n antes de las  direcciones IPv6, incluyendo direcciones IPv4 encapsuladas o mapeadas a  direcciones IPv6, como ::10.2.3.4 offff:10.4.3.2.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/09.-Tipos%20de%20direcci%C3%B3n%20de%20red/01.-inet/","title":"01.-inet","text":"<p>El  <code>inet</code>El  tipo contiene una direcci\u00f3n de host IPv4 o IPv6, y opcionalmente su  subred, todo en un campo. La subnet est\u00e1 representada por el n\u00famero de  bits de direcciones de red presentes en la direcci\u00f3n de host (la m\u00e1scara de red). Si la m\u00e1scara de red es 32 y la direcci\u00f3n es IPv4, entonces el valor no indica una subnet, s\u00f3lo un solo hu\u00e9sco. En IPv6, la longitud de la  direcci\u00f3n es de 128 bits, por lo que 128 bits especifican una direcci\u00f3n  de host \u00fanica. Tenga en cuenta que si desea aceptar s\u00f3lo redes, debe  utilizar el  <code>cidr</code>tipo en vez de <code>inet</code>.</p> <p>El formato de entrada para este tipo es  <code>address/y</code>d\u00f3nde  <code>address</code>es una direcci\u00f3n IPv4 o IPv6 y  <code>y</code>es el n\u00famero de bits en la masa de red. Si el  <code>/y</code>Se omita la parte, la masa de red se toma como 32 para IPv4 o 128 para  IPv6, por lo que el valor representa s\u00f3lo un solo hu\u00e9sco. En exhibici\u00f3n, el  <code>/y</code>la porci\u00f3n se suprime si la m\u00e1scara de red especifica un solo hu\u00e9sco.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/09.-Tipos%20de%20direcci%C3%B3n%20de%20red/02.-cidr/","title":"02.-cidr","text":"<p>El  <code>cidr</code>tipo  posee una especificaci\u00f3n de red IPv4 o IPv6. Los formatos de entrada y  salida siguen las convenciones de clasificaci\u00f3n de Internet sin clases.  El formato para la especificaci\u00f3n de las redes es  <code>address/y</code>d\u00f3nde  <code>address</code>es la direcci\u00f3n m\u00e1s baja de la red representada como direcci\u00f3n IPv4 o IPv6, y  <code>y</code>es el n\u00famero de bits en la masa de red. Si  <code>y</code>se omite, se calcula utilizando supuestos del sistema de numeraci\u00f3n de red m\u00e1s antiguo, excepto que ser\u00e1 al menos lo suficientemente grande para  incluir todos los octets escritos en la entrada. Es un error especificar una direcci\u00f3n de red que tiene bits configurados a la derecha de la  m\u00e1scara de red especificada.</p> <p>En el cuadro 8.22 se indican algunos ejemplos.</p> <p>Cuadro 8.22.  <code>cidr</code>Ejemplos de entrada de tipo</p> <code>cidr</code>Entrada <code>cidr</code>Producto <code>abbrev(cidr)</code> 192.168.100.128/25 192.168.100.128/25 192.168.100.128/25 192.168/24 192.168.0.0/24 192.168.0/24 192.168/25 192.168.0.0/25 192.168.0.0/25 192.118.1 192.168.1.0/24 192.168.1/24 192.168 192.168.0.0/24 192.168.0/24 128.1 128.1.0.0/16 128.1/16 128 128.0.0.0/16 128.0/16 128.1.2 128.1.2.0/24 128.1.2/24 10.1.2 10.1.2.0/24 10.1.2/24 10.1 10.1.0.0/16 10.1/16 10 10.0.0.0/8 10/8 10.1.2.3/32 10.1.2.3/32 10.1.2.3/32 2001:4f8:3:ba::/64 2001:4f8:3:ba::/64 2001:4f8:3:ba/64 2001:4f8:3:ba: 2e0:81ff:fe22:d1f.128 2001:4f8:3:ba: 2e0:81ff:fe22:d1f.128 2001:4f8:3:ba: 2e0:81ff:fe22:d1f.128 ::ffff:1.2.3.0/120 ::ffff:1.2.3.0/120 ::ffff:1.2.3/120 ::ffff:1.2.3.0/128 ::ffff:1.2.3.0/128 ::ffff:1.2.3.0/128"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/09.-Tipos%20de%20direcci%C3%B3n%20de%20red/03.-inet%20vs%20cidr/","title":"03.-inet vs cidr","text":"<p>La diferencia esencial entre  <code>inet</code>y  <code>cidr</code>los tipos de datos es que  <code>inet</code>acepta valores con bits no nulos a la derecha de la m\u00e1scara de red, mientras que  <code>cidr</code>- No lo hace. Por ejemplo,  <code>192.168.0.1/24</code>es v\u00e1lido para  <code>inet</code>pero no para <code>cidr</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/09.-Tipos%20de%20direcci%C3%B3n%20de%20red/03.-inet%20vs%20cidr/#tip","title":"Tip","text":"<p>Si no le gusta el formato de salida para  <code>inet</code>o o  <code>cidr</code>valores, prueba las funciones <code>host</code>, <code>text</code>, y <code>abbrev</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/09.-Tipos%20de%20direcci%C3%B3n%20de%20red/04.-macaddr/","title":"04.-macaddr","text":"<p>El  <code>macaddr</code>Tiendas de tipo direcciones MAC, conocidas, por ejemplo, desde direcciones de  hardware de la tarjeta Ethernet (aunque las direcciones MAC se utilizan  tambi\u00e9n para otros fines). La entrada se acepta en los siguientes  formatos:</p> <code>'08:00:2b:01:02:03'</code> <code>'08-00-2b-01-02-03'</code> <code>'08002b:010203'</code> <code>'08002b-010203'</code> <code>'0800.2b01.0203'</code> <code>'0800-2b01-0203'</code> <code>'08002b010203'</code> <p>Todos estos ejemplos especifican la misma direcci\u00f3n. Se acepta el caso superior e inferior para los d\u00edgitos  <code>a</code>a trav\u00e9s <code>f</code>. La producci\u00f3n est\u00e1 siempre en la primera de las formas mostradas.</p> <p>El IEEE Standard 802-2001 especifica la segunda forma mostrada  (con guiones) como la forma can\u00f3nica para direcciones MAC, y especifica  la primera forma (con colones) como se usa con la notaci\u00f3n MSB-first, de modo que 08-00-2b-01-01-02-03 = 10:00:D4:80:40:C0. Esta convenci\u00f3n es  ampliamente ignorada hoy en d\u00eda, y es relevante s\u00f3lo para protocolos de  red obsoletos (como Token Ring). PostgreSQL no contiene disposiciones  para la reversi\u00f3n de bits; todos los formatos aceptados utilizan el  pedido LSB can\u00f3nico.</p> <p>Los cinco formatos de entrada restantes no son parte de ning\u00fan est\u00e1ndar.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/09.-Tipos%20de%20direcci%C3%B3n%20de%20red/05.-macaddr8/","title":"05.-macaddr8","text":"<p>El  <code>macaddr8</code>Almacenes de tipo direcciones MAC en formato EUI-64, conocidas, por ejemplo,  desde direcciones de hardware de la tarjeta Ethernet (aunque las  direcciones MAC se utilizan tambi\u00e9n para otros fines). Este tipo puede  aceptar direcciones MAC de 6 y 8 byte y las almacena en formato de 8  byte longitud. Las direcciones MAC dadas en formato 6 byte se  almacenar\u00e1n en formato de 8 bytes con los dedos 4o y 5o establecido en  FF y FE, respectivamente. Tenga en cuenta que IPv6 utiliza un formato  EUI-64 modificado en el que la s\u00e9ptima parte debe fijarse en uno despu\u00e9s de la conversi\u00f3n de EUI-48. La funci\u00f3n  <code>macaddr8_set7bit</code>se proporciona para hacer este cambio. En t\u00e9rminos generales, cualquier  entrada que se compone de pares de d\u00edgitos hex (en l\u00edmites de byte),  opcionalmente separados consistentemente por uno de <code>':'</code>,  <code>'-'</code>o o <code>'.'</code>, es aceptado. El n\u00famero de d\u00edgitos hex debe ser de 16 (8 bytes) o 12 (6  bytes). El espacio blanco l\u00edder y rastro se ignora. A continuaci\u00f3n se  presentan ejemplos de formatos de entrada aceptados:</p> <code>'08:00:2b:01:02:03:04:05'</code> <code>'08-00-2b-01-02-03-04-05'</code> <code>'08002b:0102030405'</code> <code>'08002b-0102030405'</code> <code>'0800.2b01.0203.0405'</code> <code>'0800-2b01-0203-0405'</code> <code>'08002b01:02030405'</code> <code>'08002b0102030405'</code> <p>Todos estos ejemplos especifican la misma direcci\u00f3n. Se acepta el caso superior e inferior para los d\u00edgitos  <code>a</code>a trav\u00e9s <code>f</code>. La producci\u00f3n est\u00e1 siempre en la primera de las formas mostradas.</p> <p>Los \u00faltimos seis formatos de entrada mostrados anteriormente no forman parte de ning\u00fan est\u00e1ndar.</p> <p>Convertir una direcci\u00f3n MAC tradicional de 48 bits en formato  EUI-48 a formato modificado EUI-64 que se incluir\u00e1 como parte de acogida de una direcci\u00f3n IPv6, utilice  <code>macaddr8_set7bit</code>como se muestra:</p> <pre><code>SELECT macaddr8-set7bit('08:00:2b:01:02:03');\n\n    macaddr8_set7bit\n-------------------------\n 0a:00:2b:ff:fe:01:02:03\n(1 row)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/11.-Tipos%20de%20b%C3%BAsqueda%20de%20texto/","title":"Index","text":"<p>PostgreSQL proporciona dos tipos de datos que est\u00e1n dise\u00f1ados para apoyar la  b\u00fasqueda completa de texto, que es la actividad de buscar a trav\u00e9s de  una colecci\u00f3n de documentos de lenguaje natural para localizar a aquellos que mejor coinstalen con una consulta. El  <code>tsvector</code>tipo representa un documento en forma optimizada para la b\u00fasqueda de texto;  <code>tsquery</code>El tipo tambi\u00e9n representa una consulta de texto. El cap\u00edtulo 12 ofrece una explicaci\u00f3n detallada de esta instalaci\u00f3n, y la secci\u00f3n 9.13 resume las funciones y operadores relacionados.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/11.-Tipos%20de%20b%C3%BAsqueda%20de%20texto/01.-tsvector/","title":"01.-tsvector","text":"<p>A  <code>tsvector</code>el valor es una lista ordenada de lexemes distintos, que son palabras que se han normalizado para combinar diferentes variantes de la misma palabra (ver el Cap\u00edtulo 12 para m\u00e1s detalles). La clasificaci\u00f3n y la eliminaci\u00f3n duplicada se  realizan autom\u00e1ticamente durante la entrada, como se muestra en este  ejemplo:</p> <pre><code>SELECT 'un gato gordo se sent\u00f3 en una estera y comi\u00f3 una rata gorda'::tsvector;\n                      tsvector\n---------------------------------------------------------------------------------\n 'A' 'and' 'ate' 'cat' 'gordo' 'mat' 'on' 'en' 'rat' 'sat'\n</code></pre> <p>Para representar lexemes que contienen espacio blanco o puntuaci\u00f3n, envolverlos con comillas:</p> <pre><code>SELECT $$the lexeme ' contiene espacios$$::tsvector;\n                 tsvector\n- A---------------\n ' 'contiene' 'contiene' 'lexeme' 'los'\n</code></pre> <p>(Utilizamos literales de cuerda con citas en d\u00f3lares en este  ejemplo y el siguiente para evitar la confusi\u00f3n de tener que duplicar  las marcas de comillas dentro de los literales.) Las citas y las  contradlas empotrados deben duplicarse:</p> <pre><code>SELECT $$the lexeme 'Joe's's' contiene una cotizaci\u00f3n$$::tsvector;\n                    tsvector\n---------------------------------------------------------------------------\n 'Joe''s' 'a' 'contiene' 'lexeme' 'cita' 'el'\n</code></pre> <p>Opcionalmente, las posiciones en el entero se pueden unir a lexemes:</p> <pre><code>SELECT 'a:1 grasa:2 gato:3 se sent\u00f3:4 on:5 a:6 ester:7 y:8 comi\u00f3:9 a:10 de grasa:11 rata:12'::tsvector;\n                                  tsvector\n-------------------------------------------------------------------------------------------------------\n 'a':1,6,10 'y':8 'ate':9 'gato':3 'gordo':2,11 'mat':7 'on':5 'rat':12 'sat':4\n</code></pre> <p>Una posici\u00f3n indica normalmente la ubicaci\u00f3n de la palabra de  origen en el documento. La informaci\u00f3n posicional se puede utilizar para la clasificaci\u00f3n de proximidad. Los valores de posici\u00f3n pueden variar de 1 a 16383; n\u00fameros m\u00e1s grandes se establecen en silencio a 16383. Se descartan las posiciones  duplicadas para la misma lexeme.</p> <p>Lexemes que tienen posiciones pueden seguir etiquetadas con un peso, que puede ser <code>A</code>, <code>B</code>, <code>C</code>, o <code>D</code>.  <code>D</code>es el predeterminado y por lo tanto no se muestra en la salida:</p> <pre><code>SELECT 'a:1A grasa:2B,4C cat:5D'::tsvector;\n          tsvector\n----------------------------\n 'a':1A 'cat':5 'gorda':2B,4C\n</code></pre> <p>Los pesos se utilizan t\u00edpicamente para reflejar la estructura de  los documentos, por ejemplo marcando las palabras del t\u00edtulo de manera  diferente a las palabras del cuerpo. Las funciones de ranking de  b\u00fasqueda de texto pueden asignar diferentes prioridades a los diferentes marcadores de peso.</p> <p>Es importante entender que el  <code>tsvector</code>El tipo en s\u00ed mismo no realiza ninguna normalizaci\u00f3n de palabras; asume  que las palabras que se da se normalizan adecuadamente para la  aplicaci\u00f3n. Por ejemplo,</p> <pre><code>SELECT 'The Fat Rats'::tsvector;\n      tsvector\n---------------------\n 'Fat' 'Rats' 'The'\n</code></pre> <p>Para la mayor\u00eda de las aplicaciones de b\u00fasqueda de texto en  ingl\u00e9s las palabras anteriores se considerar\u00edan no normalizados, pero  <code>tsvector</code>no me importa. El texto del documento crudo debe pasarse por lo general  <code>to_tsvector</code>para normalizar las palabras apropiadamente para la b\u00fasqueda:</p> <pre><code>SELECT to-tsvector ('english', 'The Fat Rats');\n   a-tsvector\n----------------\n 'gordo':2 'rata':3\n</code></pre> <p>Una vez m\u00e1s, v\u00e9ase el cap\u00edtulo 12 para m\u00e1s detalles.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/11.-Tipos%20de%20b%C3%BAsqueda%20de%20texto/02.-tsquery/","title":"02.-tsquery","text":"<p>A  <code>tsquery</code>valor almacena lexemes que se van a buscar, y puede combinarlos utilizando los operadores booleanos  <code>&amp;</code>(AND),  <code>|</code>(OR), y  <code>!</code>(NO), as\u00ed como la frase operador de b\u00fasqueda  <code>&lt;-&gt;</code>(FOLLOWED BY). Tambi\u00e9n hay una variante  <code>&lt;*</code>N<code>*&gt;</code>del operador de SEMANADO, donde  <code>N</code>es una constante en el entero que especifica la distancia entre las dos lexemes que se est\u00e1n buscando.  <code>&lt;-&gt;</code>es equivalente a <code>&lt;1&gt;</code>.</p> <p>Las parentales pueden utilizarse para hacer cumplir la agrupaci\u00f3n de estos operadores. En ausencia de par\u00e9ntesis,  <code>!</code>(NO) se une m\u00e1s apretadamente,  <code>&lt;-&gt;</code>(FOLLOWED BY) a continuaci\u00f3n m\u00e1s apretada, entonces  <code>&amp;</code>(AND), con  <code>|</code>(OR) la vinculaci\u00f3n de los menos apretados.</p> <p>Estos son algunos ejemplos:</p> <pre><code>SELECT 'grasa &amp; rata'::tsquery;\n    aclama\n- A---------------\n 'gordo' y 'rata'\n\nSELECT 'grasa &amp; (rata \u00e1 gato) '::tsquery;\n          aclama\n---------------------------\n 'gordo' y ('rata' - 'gato')\n\nSELECT 'grasa &amp; rata &amp; gato'::tsquery;\n        aclama\n------------------------\n 'gordo' y 'rata' y \"cat\"\n</code></pre> <p>Opcionalmente, lexemes en un  <code>tsquery</code>se puede etiquetar con una o m\u00e1s letras de peso, lo que las restringe a que coincidos solamente  <code>tsvector</code>lexemes con uno de esos pesos:</p> <pre><code>SELECT 'gordo:ab &amp; cat'::tsquery;\n    aclama\n---------------------\n 'gordo':AB &amp; 'gat'\n</code></pre> <p>Adem\u00e1s, lexemes en un  <code>tsquery</code>se puede etiquetar con  <code>*</code>para especificar la coincidencia de prefijos:</p> <pre><code>SELECT 'super:* '::tsquery;\n  aclama\n---------\n 'super'*:*\n</code></pre> <p>Esta consulta coincidir\u00e1 con cualquier palabra en un  <code>tsvector</code>que empieza con el s\u00faper.</p> <p>La cita de las lexemes es la misma que se describi\u00f3 anteriormente para lexemes en <code>tsvector</code>; y, como con <code>tsvector</code>, cualquier normalizaci\u00f3n necesaria de las palabras debe hacerse antes de convertirse a la  <code>tsquery</code>tipo. El  <code>to_tsquery</code>funci\u00f3n es conveniente para realizar tal normalizaci\u00f3n:</p> <pre><code>SELECT to-tsquery('Fat:ab &amp; Cats');\n    a-tsquery\n---------------------\n 'gordo':AB &amp; 'gat'\n</code></pre> <p>Tenga en cuenta que  <code>to_tsquery</code>procesar\u00e1 los prefijos de la misma manera que otras palabras, lo que significa que esta comparaci\u00f3n devuelve la verdad:</p> <pre><code>SELECT to-tsvector ( 'postgraduate' ) . to-tsquery (puestos:* \"postgres:* \"');\n ?column?\n---------\n t\n</code></pre> <p>porque  <code>postgres</code>se derrast\u00f3 a <code>postgr</code>:</p> <pre><code>SELECT to-tsvector ( 'postgraduate' ), to-tsquery (puestos*' );\n  a.tsvector a la to-tsquery\n--------------\n 'postgradu':1 . 'postgr':*\n</code></pre> <p>que coincidir\u00e1 con la forma de derido de <code>postgraduate</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/13.-El%20tipo%20XML/01.-Creaci%C3%B3n%20de%20valores%20XML/","title":"01.-Creaci\u00f3n de valores XML","text":"<p>Para producir un valor de tipo  <code>xml</code>a partir de datos de caracteres, utilice la funci\u00f3n <code>xmlparse</code>:</p> <pre><code>XMLPARSE (- DOCUMENT - CONTENT - value)\n</code></pre> <p>Ejemplos:</p> <pre><code>XMLPARSE (DOCUMENTE 'o?xml version=\"1.0\"?book.title.Manual-/title-chapter....-/chapter/book')\nXMLPARSE (CONTENT 'abc.foo-bar-/foo-bar-foo-/bar')\n</code></pre> <p>Si bien esta es la \u00fanica manera de convertir las cadenas de  caracteres en valores XML de acuerdo con el est\u00e1ndar SQL, las sintaxis  espec\u00edficas de PostgreSQL:</p> <pre><code>xml '-foo-bar\u00e1/foo'\n'Efoo-bar'/foo'::xml\n</code></pre> <p>Tambi\u00e9n se puede utilizar.</p> <p>El  <code>xml</code>el tipo no valida los valores de entrada con una declaraci\u00f3n de tipo de documento (DTD), incluso cuando  el valor de entrada especifica un DTD. Actualmente tampoco existe  soporte integrado para validar contra otros lenguajes de esquema XML,  como XML Schema.</p> <p>La operaci\u00f3n inversa, produciendo un valor de cadena de caracteres de <code>xml</code>, utiliza la funci\u00f3n <code>xmlserialize</code>:</p> <pre><code>XMLSERIALIZE (- DOCUMENT - CONTENT -  valueAS  type[ [ [ NO ] INDENT] )\n</code></pre> <p><code>type</code>puede ser <code>character</code>, <code>character varying</code>, o  <code>text</code>(o alias de uno de ellos). Una vez m\u00e1s, de acuerdo con la norma SQL, esta es la \u00fanica manera de convertir entre tipo  <code>xml</code>y tipos de caracteres, pero PostgreSQL tambi\u00e9n le permite simplemente arrojar el valor.</p> <p>El  <code>INDENT</code>opci\u00f3n hace que el resultado est\u00e9 bastante impreso, mientras que  <code>NO INDENT</code>(que es el predeterminado) s\u00f3lo emite la cadena de entrada original. El  casting a un tipo de caracteres tambi\u00e9n produce la cadena original.</p> <p>Cuando un valor de cadena de caracteres se lanza a o desde el tipo  <code>xml</code>sin pasar por  <code>XMLPARSE</code>o o <code>XMLSERIALIZE</code>, respectivamente, la elecci\u00f3n de  <code>DOCUMENT</code>versus  <code>CONTENT</code>se determina por el XML optionpar\u00e1metro de configuraci\u00f3n de sesi\u00f3n de la opci\u00f3n XML, que se puede configurar usando el comando est\u00e1ndar:</p> <pre><code>SET XML OPTION - DOCUMENT - CONTENT - .\n</code></pre> <p>o la sintaxis m\u00e1s PostgreSQL similar a la de</p> <pre><code>SET xmloption A DOCUMENTo CONTENT;\n</code></pre> <p>El incumplimiento es <code>CONTENT</code>, por lo que todas las formas de datos XML est\u00e1n permitidas.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/13.-El%20tipo%20XML/02.-Manejo%20de%20la%20codificaci%C3%B3n%20de%20codificaci%C3%B3n/","title":"02.-Manejo de la codificaci\u00f3n de codificaci\u00f3n","text":"<p>El cuidado debe tomarse cuando se trata de m\u00faltiples codificaciones  de caracteres en el cliente, el servidor y en los datos XML se pasan a  trav\u00e9s de ellos. Cuando se utiliza el modo de texto para pasar consultas al servidor y los resultados de la consulta al cliente (que es el modo  normal), PostgreSQL convierte todos los datos de caracteres pasados  entre el cliente y el servidor y viceversa a la codificaci\u00f3n de  caracteres del extremo respectivo; ver Secci\u00f3n 24.3. Esto incluye representaciones en cadena de valores XML, como en los  ejemplos anteriores. Esto normalmente significar\u00eda que las declaraciones de codificaci\u00f3n contenidas en los datos XML pueden volverse inv\u00e1lidas  ya que los datos de caracteres se convierten en otras codificaciones  mientras se viaja entre cliente y servidor, porque la declaraci\u00f3n de  codificaci\u00f3n integrada no se cambia. Para hacer frente a este  comportamiento, las declaraciones de codificaci\u00f3n contenidas en las  cadenas de caracteres presentadas para la entrada a la  <code>xml</code>tipo se ignora, y se supone que el contenido est\u00e1 en la codificaci\u00f3n actual del  servidor. Por lo tanto, para el procesamiento correcto, las cadenas de  caracteres de los datos XML deben ser enviadas desde el cliente en la  codificaci\u00f3n actual del cliente. Es responsabilidad del cliente  convertir documentos a la codificaci\u00f3n actual del cliente antes de  enviarlos al servidor, o ajustar la codificaci\u00f3n del cliente  apropiadamente. Sobre la salida, valores de tipo  <code>xml</code>no tendr\u00e1 una declaraci\u00f3n de codificaci\u00f3n, y los clientes deben asumir que todos los datos est\u00e1n en la codificaci\u00f3n actual del cliente.</p> <p>Cuando se utiliza el modo binario para pasar los par\u00e1metros de  consulta al servidor y los resultados de consulta al cliente, no se  realiza ninguna conversi\u00f3n de codificaci\u00f3n, por lo que la situaci\u00f3n es  diferente. En este caso, se observar\u00e1 una declaraci\u00f3n de codificaci\u00f3n en los datos XML, y si est\u00e1 ausente, se supone que los datos est\u00e1n en  UTF-8 (seg\u00fan lo requerido por el est\u00e1ndar XML; tenga en cuenta que  PostgreSQL no admite UTF-16). En cuanto a la salida, los datos tendr\u00e1n  una declaraci\u00f3n de codificaci\u00f3n que especificar\u00e1 la codificaci\u00f3n del  cliente, a menos que la codificaci\u00f3n del cliente sea UTF-8, en cuyo caso se omitir\u00e1.</p> <p>Huelga decir que el procesamiento de datos XML con PostgreSQL  ser\u00e1 menos propenso a errores y m\u00e1s eficiente si la codificaci\u00f3n de  datos XML, codificaci\u00f3n de clientes y codificaci\u00f3n del servidor son las  mismas. Dado que los datos XML se procesan internamente en UTF-8, los  c\u00e1lculos ser\u00e1n m\u00e1s eficientes si la codificaci\u00f3n del servidor tambi\u00e9n es UTF-8.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/13.-El%20tipo%20XML/02.-Manejo%20de%20la%20codificaci%C3%B3n%20de%20codificaci%C3%B3n/#precaucion","title":"Precauci\u00f3n","text":"<p>Algunas funciones relacionadas con XML pueden no funcionar en  absoluto en datos no-ASCII cuando la codificaci\u00f3n del servidor no es  UTF-8. Se sabe que esto es un problema para  <code>xmltable()</code>y  <code>xpath()</code>en particular.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/13.-El%20tipo%20XML/03.-Acceso%20a%20valores%20XML/","title":"03.-Acceso a valores XML","text":"<p>El  <code>xml</code>El tipo de dato es inusual en el sentido de que no proporciona ning\u00fan operador  de comparaci\u00f3n. Esto se debe a que no hay un algoritmo de comparaci\u00f3n  bien definido y universalmente \u00fatil para los datos XML. Una consecuencia de esto es que no se pueden recuperar filas comparando un  <code>xml</code>columna contra un valor de b\u00fasqueda. Por lo tanto, los valores XML deben ir  acompa\u00f1ados de un campo de claves separado, como un ID. Una soluci\u00f3n  alternativa para comparar los valores XML es convertirlos primero a  cadenas de caracteres, pero tenga en cuenta que la comparaci\u00f3n de  cadenas de caracteres tiene poco que ver con un \u00fatil m\u00e9todo de  comparaci\u00f3n XML.</p> <p>Dado que no hay operadores de comparaci\u00f3n para la  <code>xml</code>Tipo de datos, no es posible crear un \u00edndice directamente en una columna de  este tipo. Si se desean b\u00fasquedas r\u00e1pidas en los datos XML, las posibles soluciones incluyen la cadena de la expresi\u00f3n a un tipo de cadena de  caracteres e indexar eso, o indexar una expresi\u00f3n XPath. Por supuesto,  la consulta real tendr\u00eda que ser ajustada a la b\u00fasqueda por la expresi\u00f3n indexada.</p> <p>La funcionalidad de b\u00fasqueda de texto en PostgreSQL tambi\u00e9n se  puede utilizar para acelerar las b\u00fasquedas de documentos completos de  datos XML. Sin embargo, el apoyo necesario de preprocesamiento a\u00fan no  est\u00e1 disponible en la distribuci\u00f3n de PostgreSQL.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/13.-El%20tipo%20XML/index./","title":"index.","text":"<p>El  <code>xml</code>El tipo de datos se puede utilizar para almacenar datos XML. Su ventaja sobre el almacenamiento de datos XML en un  <code>text</code>El campo es que comprueba los valores de entrada para la formaci\u00f3n, y hay  funciones de apoyo para realizar operaciones de tipo seguro en \u00e9l; v\u00e9ase la secci\u00f3n 9.15. El uso de este tipo de datos requiere que la instalaci\u00f3n se haya construido con <code>configure --with-libxml</code>.</p> <p>El  <code>xml</code>El tipo puede almacenar documentos bien formados, tal como se define en el est\u00e1ndar XML, as\u00ed como contentlos fragmentos de , que se definen por referencia al nodo de documento m\u00e1s permisivo  modelo de datos XQuery y XPath. Aproximadamente, esto significa que los fragmentos de contenido pueden tener m\u00e1s de un elemento de nivel  superior o nodo de caracteres. La expresi\u00f3n  se puede utilizar para evaluar si un particular  valor es un documento completo o s\u00f3lo un fragmento de contenido.</p> <p>L\u00edmites y notas de compatibilidad para la  <code>xml</code>El tipo de datos se puede encontrar en la secci\u00f3n D.3.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/14.-El%20Tipo%20JSON/","title":"Index","text":"<p>Los tipos de datos JSON son para almacenar los datos de JSON (JavaScript Object Notation), seg\u00fan se especifica en RFC 7159. Estos datos tambi\u00e9n pueden almacenarse como <code>text</code>, pero los tipos de datos JSON tienen la ventaja de hacer cumplir que  cada valor almacenado es v\u00e1lido de acuerdo con las normas JSON. Tambi\u00e9n  hay funciones y operadores espec\u00edficos de JSON disponibles para los  datos almacenados en estos tipos de datos; v\u00e9ase .</p> <p>PostgreSQL ofrece dos tipos para almacenar datos JSON:  <code>json</code>y <code>jsonb</code>. Para implementar mecanismos de consulta eficientes para estos tipos de datos, PostgreSQL tambi\u00e9n proporciona la  <code>jsonpath</code>Tipo de datos descrito en la secci\u00f3n 8.14.7.</p> <p>El  <code>json</code>y  <code>jsonb</code>Los tipos de datos aceptan conjuntos de valores casi id\u00e9nticos como entrada. La principal diferencia pr\u00e1ctica es la de la eficiencia. El  <code>json</code>el tipo de datos almacena una copia exacta del texto de entrada, qu\u00e9  funciones de procesamiento deben volver a ensayar en cada ejecuci\u00f3n;  mientras que  <code>jsonb</code>los datos se almacenan en un formato binario descompuesto que hace que sea  ligeramente m\u00e1s lento a la entrada debido a la conversi\u00f3n adicional,  pero significativamente m\u00e1s r\u00e1pido en proceso, ya que no se necesita  reparaci\u00f3n.  <code>jsonb</code>tambi\u00e9n es compatible con la indexaci\u00f3n, lo que puede ser una ventaja significativa.</p> <p>Porque el  <code>json</code>Tipo almacena una copia exacta del texto de entrada, preservar\u00e1 el espacio  blanco sem\u00e1nticalmente insignificante entre tokens, as\u00ed como el orden de las teclas dentro de los objetos JSON. Adem\u00e1s, si un objeto JSON dentro del valor contiene la misma clave m\u00e1s que una vez, todos los pares de  clave/valor se mantienen. (Las funciones de procesamiento consideran el  \u00faltimo valor como el operativo.) En cambio,  <code>jsonb</code>no conserva el espacio en blanco, no conserva el orden de las teclas de  objetos, y no mantiene las claves de objetos duplicados. Si se  especifican las claves duplicadas en la entrada, s\u00f3lo se mantiene el  \u00faltimo valor.</p> <p>En general, la mayor\u00eda de las aplicaciones deben preferir almacenar datos JSON como <code>jsonb</code>, a menos que haya necesidades bastante especializadas, tales como  suposiciones heredadas sobre el orden de las claves de objetos.</p> <p>RFC7159 especifica que las cuerdas JSON deben ser codificadas en UTF8. Por lo  tanto, los tipos JSON no pueden ajustarse r\u00edgidamente a la  especificaci\u00f3n JSON a menos que la codificaci\u00f3n de la base de datos sea  UTF8. Los intentos de incluir directamente caracteres que no pueden ser  representados en la codificaci\u00f3n de la base de datos fallar\u00e1n; a la  inversa, se permitir\u00e1n caracteres que puedan ser representados en la  codificaci\u00f3n de la base de datos, pero no en UTF8.</p> <p>RFC7159 permite que las cuerdas JSON contengan secuencias de escape de Unicode denotadas por <code>\\u*</code>XXXX<code>*</code>. En la funci\u00f3n de entrada para el  <code>json</code>Tipo, Unicode escapes se permite independientemente de la codificaci\u00f3n de la  base de datos, y se comprueban s\u00f3lo para la correcci\u00f3n sint\u00e1ctica (es  decir, que cuatro d\u00edgitos hex siguen <code>\\u</code>). Sin embargo, la funci\u00f3n de entrada para  <code>jsonb</code>es m\u00e1s estricto: desautoriza que Unicode escape para personajes que no  pueden ser representados en la codificaci\u00f3n de la base de datos. El  <code>jsonb</code>tipo tambi\u00e9n rechaza  <code>\\u0000</code>(porque eso no puede ser representado en PostgreSQL 's  <code>text</code>tipo), e insiste en que cualquier uso de parejas sustitutas de Unicode para  designar caracteres fuera del Plano Multilenal B\u00e1sico Unicode sea  correcto. Los escapes de Unicode V\u00e1lido se convierten al car\u00e1cter \u00fanico  equivalente para el almacenamiento; esto incluye pares de sustitutos  plegables en un solo car\u00e1cter.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/14.-El%20Tipo%20JSON/#nota","title":"Nota","text":"<p>Muchas de las funciones de procesamiento JSON descritas en la Secci\u00f3n 9.16 convertir\u00e1n los escapes de Unicode a caracteres regulares, y por lo  tanto lanzar\u00e1n los mismos tipos de errores que se acaban de describir  incluso si su entrada es de tipo  <code>json</code>no <code>jsonb</code>. El hecho de que el  <code>json</code>La funci\u00f3n de entrada no hace que estos controles puedan considerarse un  artefacto hist\u00f3rico, aunque s\u00ed permite un simple almacenamiento (sin  procesamiento) de JSON Unicode escapa en una codificaci\u00f3n de base de  datos que no soporta los caracteres representados.</p> <p>Al convertir la entrada de JSON textual en <code>jsonb</code>, los tipos primitivos descritos por  RFC7159 se mapean efectivamente en los tipos nativos de PostgreSQL, como se muestra en la Tabla 8.23. Por lo tanto, hay algunas limitaciones adicionales menores a lo que constituye v\u00e1lido  <code>jsonb</code>datos que no se aplican a la  <code>json</code>tipo, ni JSON en el resumen, correspondiente a l\u00edmites en lo que puede representar el tipo de datos subyacente. En particular,  <code>jsonb</code>rechazar\u00e1 los n\u00fameros que est\u00e1n fuera del alcance de PostgreSQL  <code>numeric</code>tipo de datos, mientras que  <code>json</code>no lo har\u00e1. Esas restricciones definidas por la aplicaci\u00f3n est\u00e1n permitidas por  RFC7159. Sin embargo, en la pr\u00e1ctica es mucho m\u00e1s probable que se produzcan  tales problemas en otras implementaciones, ya que es com\u00fan representar  la  <code>number</code>Tipo primitivo como IEEE 754 punto flotante de doble precisi\u00f3n (que  RFC7159 se anticipa expl\u00edcitamente y permite). Al utilizar JSON como formato de intercambio con dichos sistemas, se debe considerar el peligro de  perder precisi\u00f3n num\u00e9rica en comparaci\u00f3n con los datos almacenados  originalmente por PostgreSQL.</p> <p>Por el contrario, como se se\u00f1ala en la tabla hay algunas  restricciones menores en el formato de entrada de los tipos primitivos  de JSON que no se aplican a los tipos correspondientes de PostgreSQL.</p> <p>Cuadro 8.23. JSON Tipos Primitivos y Tipos PostgreSQL correspondientes</p> Tipo JSON primitivo Tipo PostgreSQL Notas <code>string</code> <code>text</code> <code>\\u0000</code>es desautorizado, al igual que los escapados de Unicode representando  caracteres no disponibles en la codificaci\u00f3n de la base de datos <code>number</code> <code>numeric</code> <code>NaN</code>y  <code>infinity</code>valores se desautorizado <code>boolean</code> <code>boolean</code> S\u00f3lo min\u00fascula  <code>true</code>y  <code>false</code>se aceptan ortaciones <code>null</code> (ninguno) SQL  <code>NULL</code>es un concepto diferente"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/14.-El%20Tipo%20JSON/01.-Entradas%20JSON%20y%20sintaxis%20de%20salida/","title":"01.-Entradas JSON y sintaxis de salida","text":"<p>La sintaxis de entrada/salida para los tipos de datos JSON es la seg\u00fan se especifica en  RFC7159.</p> <p>Todos los siguientes son v\u00e1lidos  <code>json</code>(o <code>jsonb</code>) expresiones:</p> <pre><code>-- Valor escaldado/primitivo simple\n-- Los valores primitivos pueden ser n\u00fameros, cadenas cotizadas, true, falso o nulo\nSELECT '5'::json;\n\n-- Array de cero o m\u00e1s elementos (los elementos no tienen que ser del mismo tipo)\nSELECT '[1, 2, \"foo\", null]'::json;\n\n-- Objeto que contiene pares de teclas y valores\n-- Tenga en cuenta que las teclas de objetos siempre deben ser citadas cadenas\nSELECT 'a'bar\": \"baz\", \"equilibrio\": 7.77, \"activo\": false'::json;\n\n- Arrays y objetos pueden ser anidados arbitrariamente\nSELECT '\"foo\": [true, \"bar\"], \"etiquetas\": \"a\": 1, \"b\":, \"b\": null\"::json;\n</code></pre> <p>Como se ha dicho anteriormente, cuando un valor JSON es introducido y luego se imprime sin ning\u00fan procesamiento adicional,  <code>json</code>el mismo texto que se insumi\u00f3, mientras que  <code>jsonb</code>no conserva detalles sem\u00e1nticamente insignificantes como el espacio en  blanco. Por ejemplo, tenga en cuenta las diferencias aqu\u00ed:</p> <pre><code>SELECT 'a\"...: \"baz\", \"equilibrio\": 7.77, \"activo\":falso'::json;\n                      json\n-------------------------------------------------\n \"bar\": \"baz\", \"equilibrio\": 7.77, \"activo\": falso.\n(1 fila)\n\nSELECT 'a\"bar\": \"baz\", \"balance\": 7.77, \"activo\":falso'::jsonb;\n                      jsonb\n--------------------------------------------------\n \"bar\": \"baz\", \"activo\": falso, \"equilibrio\": 7.77\n(1 fila)\n</code></pre> <p>Un detalle sem\u00e1ntico-insignificante que vale la pena se\u00f1alar es que en <code>jsonb</code>, los n\u00fameros se imprimir\u00e1n de acuerdo con el comportamiento de la  <code>numeric</code>tipo. En la pr\u00e1ctica, esto significa que los n\u00fameros introducidos con  <code>E</code>La notaci\u00f3n se imprimir\u00e1 sin ella, por ejemplo:</p> <pre><code>SELECT 'E\"reading\": 1.230e-5'::json, '-leering\": 1.230e-5'::jsonb;\n         json . jsonb\n----------------------------\n \"lectura\": 1.230e-5* \"lecting\": 0,00001230\n(1 fila)\n</code></pre> <p>Sin embargo,  <code>jsonb</code>preservar\u00e1 los ceros fraccionados, como se ve en este ejemplo, a pesar de que son  sem\u00e1nticamente insignificantes para fines como los controles de  igualdad.</p> <p>La lista de funciones incorporadas y operadores disponibles para la construcci\u00f3n y transformaci\u00f3n de valores JSON figura en la secci\u00f3n 9.16.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/14.-El%20Tipo%20JSON/02.-Dise%C3%B1ar%20documentos%20JSON/","title":"02.-Dise\u00f1ar documentos JSON","text":"<p>Representar los datos como JSON puede ser considerablemente m\u00e1s  flexible que el modelo tradicional de datos relacionales, que es  convincente en entornos donde los requisitos son fluidos. Es muy posible tanto para ambos enfoques para coexistir y complementarse entre s\u00ed  dentro de la misma aplicaci\u00f3n. Sin embargo, incluso para aplicaciones en las que se desea la m\u00e1xima flexibilidad, todav\u00eda se recomienda que los  documentos JSON tengan una estructura algo fija. La estructura es  t\u00edpicamente no forzada (aunque hacer cumplir algunas reglas de negocio  es declarativamente posible), pero tener una estructura predecible hace  m\u00e1s f\u00e1cil escribir consultas que \u00fatilmente resumen un conjunto de documentos (datums) en una tabla.</p> <p>Los datos JSON est\u00e1n sujetos a las mismas consideraciones de  control de concurrencia que cualquier otro tipo de datos cuando se  almacena en una tabla. Aunque almacenar documentos grandes es factible,  tenga en cuenta que cualquier actualizaci\u00f3n adquiere un bloqueo a nivel  de fila en toda la fila. Considere la posibilidad de limitar los  documentos JSON a un tama\u00f1o manejable para disminuir la disputa de  bloqueo entre las transacciones de actualizaci\u00f3n. Idealmente, los  documentos JSON si cada uno representa un dato at\u00f3mico que las reglas  comerciales dictan no puede ser subdividido razonablemente en patos m\u00e1s  peque\u00f1os que podr\u00edan ser modificados de forma independiente.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/14.-El%20Tipo%20JSON/03.-jsonb%20Contenci%C3%B3n%20y%20existencia/","title":"03.-jsonb Contenci\u00f3n y existencia","text":"<p>La contenci\u00f3n de pruebas es una capacidad importante de <code>jsonb</code>. No hay un conjunto paralelo de instalaciones para la  <code>json</code>tipo. Contenci\u00f3n prueba si uno  <code>jsonb</code>documento ha contenido en \u00e9l otro. Estos ejemplos devuelven verdaderos salvo:</p> <pre><code>-- Los valores simples escalar/primitive contienen s\u00f3lo el valor id\u00e9ntico:\nSELECT '\"fo\"'::jsonb \"\"fo\"\":jsonb;\n\n-- El array en el lado derecho est\u00e1 contenido dentro del izquierdo:\nSELECT '[1, 2, 3]'::jsonb .[1, 3]::jsonb;\n\n-- Orden de elementos de matriz no es significativo, por lo que esto tambi\u00e9n es cierto:\nSELECT '[1, 2, 3]'::jsonb \"[3, 1]::jsonb;\n\n-- Los elementos de matriz duplicado tampoco importan:\nSELECT '[1, 2, 3]'::jsonb y '[1, 2, 2]'::jsonb;\n\n-- El objeto con un solo par en el lado derecho est\u00e1 contenido\n-- dentro del objeto en el lado izquierdo:\nSELECT \"E\"producto\": \"PostgreSQL\", \"versi\u00f3n\": 9.4, \"jsonb\": true-'::jsonb \"\"versi\u00f3n\": 9.4\"::jsonb;\n\n-- El array en el lado derecho no se considera contenido en el\n-- array a la izquierda, aunque una matriz similar est\u00e1 anidada dentro de ella:\nSELECT '[1, 2, [1, 3]]'::jsonb \"[1, 3]\"::jsonb; -- rinde falsos\n\n-- Pero con una capa de anidaci\u00f3n, est\u00e1 contenido:\nSELECT '[1, 2, [1, 3]]'::jsonb . [[1, 3]':jsonb;\n\n-- Del mismo modo, la contenci\u00f3n no se informa aqu\u00ed:\nSELECT '\"foo\": \"b\u00e1r\"\"bar\": \"baz\"::jsonb \"\"bar\": \"baz\"\"::jsonb; -- produce falso\n\n-- Una llave de alto nivel y un objeto vac\u00edo est\u00e1n contenidos:\nSELECT '\"foo\": \"baz\"'::jsonb \"\"foo\": \"\"foo\"::jsonb;\n</code></pre> <p>El principio general es que el objeto contenido debe coincidir  con el objeto que contiene en cuanto al contenido de la estructura y los datos, posiblemente despu\u00e9s de descartar algunos elementos de matriz no coincidente o pares de clave/valor de objetos del objeto que contiene.  Pero recuerde que el orden de los elementos de array no es significativo cuando se hace una coincidencia de contenci\u00f3n, y los elementos  duplicados de matriz se consideran efectivamente s\u00f3lo una vez.</p> <p>Como excepci\u00f3n especial al principio general de que las estructuras deben coincidir, un array puede contener un valor primitivo:</p> <pre><code>-- Esta matriz contiene el valor de cuerda primitivo:\nSELECT '[\"foo\", \"bar\"]'::jsonb \"\"bar\"\":jsonb;\n\n-- Esta excepci\u00f3n no es rec\u00edproca -- la no contenci\u00f3n se comunica aqu\u00ed:\nSELECT '\"bar\":::jsonb \"[\"bar\"'::jsonb; -- rinde falsos\n</code></pre> <p><code>jsonb</code>tambi\u00e9n tiene un operador de existencia, que es una variaci\u00f3n en el tema de la contenci\u00f3n: prueba si una cadena (dado como un  <code>text</code>valor) aparece como una clave de objeto o elemento de matriz en el nivel superior de la  <code>jsonb</code>valor. Estos ejemplos devuelven verdaderos salvo:</p> <pre><code>-- La cuerda existe como elemento de matriz:\nSELECT '['foo\", \"bar\", \"baz\"]'::jsonb ? 'bar';\n\n-- Cadena existe como clave de objeto:\nSELECT 'A\"foo\": \"bar\"\"::jsonb ? 'foo';\n\n- Los valores de los objetos no se consideran:\nSELECT '\"foo\": \"bar\"\"::jsonb ? 'bar'; -- produce falso\n\n-- Al igual que con la contenci\u00f3n, la existencia debe coincidir en el nivel superior:\nSELECT 'A\"foo\": \"b\u00e1r\"\"bar\": \"baz\"::jsonb ? 'bar'; -- rinde falsos\n\n-- Se considera que existe una cuerda si coincide con una cuerda JSON primitiva:\nSELECT '\"foo\"::jsonb ? 'foo';\n</code></pre> <p>Los objetos JSON son m\u00e1s adecuados que los arrays para probar la  contenci\u00f3n o la existencia cuando hay muchas llaves o elementos  involucrados, porque a diferencia de los arrays est\u00e1n optimizados  internamente para buscar, y no necesitan ser buscados linealmente.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/14.-El%20Tipo%20JSON/03.-jsonb%20Contenci%C3%B3n%20y%20existencia/#tip","title":"Tip","text":"<p>Debido a que la contenci\u00f3n JSON est\u00e1 anidadada, una consulta  apropiada puede saltarse la selecci\u00f3n expl\u00edcita de sub-objetos. Como  ejemplo, supongamos que tenemos una  <code>doc</code>columna que contiene objetos de primer nivel, con la mayor\u00eda de los objetos que contienen  <code>tags</code>campos que contienen matrices de subobjetos. En esta consulta se encuentran  entradas en las que los subobjetos que contienen ambos  <code>\"term\":\"paris\"</code>y  <code>\"term\":\"food\"</code>, mientras ignoran esas llaves fuera de la  <code>tags</code>matriz:</p> <pre><code>SELECT doc---'site-name' FROM webs\n  DONDE doc \"\"tags\":[\"term\":\"paris\", \"t\u00e9rmino\":\"food\"]';\n</code></pre> <p>Uno podr\u00eda lograr lo mismo con, digamos,</p> <pre><code>SELECT doc---'site-name' FROM webs\n  D\u00f3nde hacer-o'tags' \"[\"term\":\"paris\", \"t\u00e9rmino\":\"food\"];\n</code></pre> <p>pero ese enfoque es menos flexible y a menudo tambi\u00e9n menos eficiente.</p> <p>Por otro lado, el operador de la existencia JSON no est\u00e1  anidado: s\u00f3lo buscar\u00e1 el elemento clave o matriz especificado en el  nivel superior del valor JSON.</p> <p>Los diversos operadores de contenci\u00f3n y existencia, junto con  todos los dem\u00e1s operadores y funciones de JSON, est\u00e1n documentados en la secci\u00f3n 9.16.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/14.-El%20Tipo%20JSON/04.-jsonb%20Indexaci%C3%B3n/","title":"04.-jsonb Indexaci\u00f3n","text":"<p>Los \u00edndices GIN se pueden utilizar para buscar de manera eficiente  las claves o pares de clave/valor que ocurren dentro de un gran n\u00famero  de  <code>jsonb</code>documentos (datums). Se proporcionan dos  de  GIN, que ofrecen diferentes prestaciones y compensaciones de flexibilidad.</p> <p>La clase de operador GIN predeterminada para  <code>jsonb</code>apoya consultas con los operadores de claves-existas <code>?</code>,  <code>?|</code>y <code>?&amp;</code>, el operador de contenci\u00f3n <code>@&gt;</code>, y el  <code>jsonpath</code>operadores de partidos  <code>@?</code>y <code>@@</code>. (Para m\u00e1s detalles de la sem\u00e1ntica que estos operadores implementan, v\u00e9ase .) Un ejemplo de creaci\u00f3n de un \u00edndice con esta clase de operador es:</p> <pre><code>CREATE INDEX idxgin ON api USING GIN (jdoc);\n</code></pre> <p>La clase de operador GIN no predeterminada  <code>jsonb_path_ops</code>no apoya a los operadores de claves-existas, pero s\u00ed apoya <code>@&gt;</code>,  <code>@?</code>y <code>@@</code>. Un ejemplo de creaci\u00f3n de un \u00edndice con esta clase de operador es:</p> <pre><code>CREATE INDEX idxginp ON api USING GIN (jdoc jsonb-path-ops);\n</code></pre> <p>Considere el ejemplo de una tabla que almacena documentos JSON  recuperados de un servicio web de terceros, con una definici\u00f3n de  esquema documentada. Un documento t\u00edpico es:</p> <pre><code>-\n    \"guid\": \"9c36adc1-7fb5-4d5b-83b4-903565646061a\",\n    \"nombre\": \"Angela Barton\",\n    \"isactivo\": verdadero,\n    \"compa\u00f1era\": \"Magnafone\",\n    \"Adem\u00e1s\": \"178 Howard Place, Gulf, Washington, 702\",\n    \"registrado\": \"2009-11-07T08:53:22 -08:00\",\n    \"latitud\": 19.793713,\n    \"longitud\": 86.513373,\n    \"etiquetas\": [\n        \"enim\",\n        \"aliquipaci\u00f3n\",\n        \"quis\"\n    ]\n-\n</code></pre> <p>Almacenamos estos documentos en una mesa nombrada <code>api</code>, en un  <code>jsonb</code>columna nombrada <code>jdoc</code>. Si se crea un \u00edndice GIN en esta columna, consultas como las siguientes pueden hacer uso del \u00edndice:</p> <pre><code>- Encuentra documentos en los que la \"compa\u00f1era\" clave tiene valor \"Magnafone\"\nSELECT jdoc-''guid', jdoc-''name' FROM api WHERE jdoc \"\"company\": \"Magnafone\"\".;\n</code></pre> <p>Sin embargo, el \u00edndice no pudo ser utilizado para consultas como la siguiente, porque aunque el operador  <code>?</code>es indexable, no se aplica directamente a la columna indexada <code>jdoc</code>:</p> <pre><code>-- Encontrar documentos en los que las \"etiquetas\" de la clave contienen elemento clave o de matriz \"qui\"\nSELECT jdoc-'guid', jdoc-'name' FROM api WHERE Jdoc -''\n</code></pre> <p>A\u00fan as\u00ed, con el uso apropiado de \u00edndices de expresi\u00f3n, la  consulta anterior puede utilizar un \u00edndice. Si se est\u00e1 consultando para  determinados art\u00edculos dentro de la  <code>\"tags\"</code>La clave es com\u00fan, definir un \u00edndice como este puede valer la pena:</p> <pre><code>CREATE INDEX idxgintags ON api USING GIN ((jdoc - \"etiquetas\"));\n</code></pre> <p>Ahora, el  <code>WHERE</code>cl\u00e1usula  <code>jdoc -&gt; 'tags' ? 'qui'</code>se reconocer\u00e1 como una aplicaci\u00f3n del operador indexable  <code>?</code>a la expresi\u00f3n indexada <code>jdoc -&gt; 'tags'</code>. (M\u00e1s informaci\u00f3n sobre los \u00edndices de expresi\u00f3n se puede encontrar en la Secci\u00f3n 11.7.)</p> <p>Otro enfoque para las consultas es explotar la contenci\u00f3n, por ejemplo:</p> <pre><code>-- Encuentra documentos en los que las \"etiquetas\" clave contienen elemento de matriz \"qui\"\nSELECT jdoc-'guid', jdoc-'name' FROM api WHERE jdoc \"\"tags\": [\"qui\"\"';\n</code></pre> <p>Un simple \u00edndice GIN en el  <code>jdoc</code>columna puede soportar esta consulta. Pero tenga en cuenta que tal \u00edndice almacenar\u00e1 copias de cada clave y valor en el  <code>jdoc</code>columna, mientras que el \u00edndice de expresi\u00f3n del ejemplo anterior almacena s\u00f3lo los datos encontrados en el  <code>tags</code>llave. Si bien el enfoque de \u00edndice simple es mucho m\u00e1s flexible (ya que  admite consultas sobre cualquier clave), es probable que los \u00edndices de  expresi\u00f3n dirigidas sean m\u00e1s peque\u00f1os y r\u00e1pidos de buscar que un simple  \u00edndice.</p> <p>Los \u00edndices GIN tambi\u00e9n apoyan el  <code>@?</code>y  <code>@@</code>los operadores que realizan  <code>jsonpath</code>a juego. Ejemplos son</p> <pre><code>SELECT jdoc-'guid', jdoc-'name' FROM api WHERE jdoc? '$.tags[*] ? () == \"qui\");\nSELECT jdoc-'guid', jdoc-'name' FROM api WHERE jdoc \"$.tags[*] == \"qui\"';\n</code></pre> <p>Para estos operadores, un \u00edndice GIN extrae cl\u00e1usulas de la forma  <code>*</code>accessors_chain<code>* = *</code>constant<code>*</code>fuera de la  <code>jsonpath</code>patr\u00f3n, y hace la b\u00fasqueda de \u00edndice basada en las claves y valores mencionados en estas cl\u00e1usulas. La cadena de accesoros puede incluir <code>.*</code>key<code>*</code>, <code>[*]</code>, y  <code>[*</code>index<code>*]</code>accesos. El  <code>jsonb_ops</code>la clase de operadora tambi\u00e9n soporta  <code>.*</code>y  <code>.**</code>accesos, pero el  <code>jsonb_path_ops</code>la clase de operador no.</p> <p>Aunque el  <code>jsonb_path_ops</code>clase de operador compatible con las consultas con el <code>@&gt;</code>,  <code>@?</code>y  <code>@@</code>operadores, tiene notables ventajas de rendimiento sobre la clase de operador por defecto <code>jsonb_ops</code>. A  <code>jsonb_path_ops</code>El \u00edndice suele ser mucho m\u00e1s peque\u00f1o que un  <code>jsonb_ops</code>\u00edndice sobre los mismos datos, y la especificidad de las b\u00fasquedas es mejor,  particularmente cuando las consultas contienen claves que aparecen  frecuentemente en los datos. Por lo tanto, las operaciones de b\u00fasqueda  suelen tener un mejor desempe\u00f1o que con la clase de operador por  defecto.</p> <p>La diferencia t\u00e9cnica entre un  <code>jsonb_ops</code>y a  <code>jsonb_path_ops</code>El \u00edndice GIN es que el primero crea elementos de \u00edndice independientes  para cada clave y valor en los datos, mientras que el segundo crea  elementos \u00edndice s\u00f3lo para cada valor en los datos. [7] B\u00e1sicamente, cada uno  <code>jsonb_path_ops</code>\u00edtem \u00edndice es un hash del valor y las claves que lo conducen; por ejemplo, indexar <code>{\"foo\": {\"bar\": \"baz\"}}</code>, se crear\u00eda una \u00fanica partida de \u00edndice que incorporar\u00eda los tres <code>foo</code>, <code>bar</code>, y  <code>baz</code>en el valor del hash. As\u00ed, una consulta de contenci\u00f3n buscando esta  estructura resultar\u00eda en una b\u00fasqueda de \u00edndice extremadamente  espec\u00edfica; pero no hay manera en absoluto de averiguar si  <code>foo</code>aparece como una llave. Por otro lado, un  <code>jsonb_ops</code>el \u00edndice crear\u00eda tres elementos \u00edndice que representar\u00edan <code>foo</code>, <code>bar</code>, y  <code>baz</code>por separado; luego para hacer la consulta de contenci\u00f3n, buscar\u00eda filas  que contengan los tres de estos art\u00edculos. Mientras que los \u00edndices GIN  pueden realizar tal Y b\u00fasqueda de manera bastante eficiente, todav\u00eda  ser\u00e1 menos espec\u00edfico y m\u00e1s lento que el equivalente  <code>jsonb_path_ops</code>b\u00fasqueda, especialmente si hay un gran n\u00famero de filas que contienen cualquiera de los tres elementos \u00edndice.</p> <p>Una desventaja de la  <code>jsonb_path_ops</code>el enfoque es que no produce entradas de \u00edndice para estructuras JSON que no contengan ning\u00fan valor, tales como <code>{\"a\": {}}</code>. Si se solicita una b\u00fasqueda de documentos que contengan tal estructura, se requerir\u00e1 un escaneo de \u00edndice completo, que es bastante lento.  <code>jsonb_path_ops</code>Por lo tanto, no es adecuado para las solicitudes que a menudo realizan tales b\u00fasquedas.</p> <p><code>jsonb</code>apoya tambi\u00e9n  <code>btree</code>y  <code>hash</code>\u00edndices. Estos son generalmente \u00fatiles s\u00f3lo si es importante comprobar la igualdad de los documentos JSON completos. El  <code>btree</code>Ordenar para  <code>jsonb</code>Los datums rara vez son de gran inter\u00e9s, pero para la plenitud es:</p> <pre><code> Object-  Array-  Boolean-  Number-  String- \n\n NullObject with n pairs- \n\n object with n - 1 pairsArray with n elements- array with n - 1 elements\n</code></pre> <p>Los objetos con igual n\u00famero de pares se comparan en el orden:</p> <pre><code>key-1, value-1,  key-2...\n</code></pre> <p>Tenga en cuenta que las teclas de objetos se comparan en su  pedido de almacenamiento; en particular, dado que las teclas m\u00e1s cortas  se almacenan antes de las teclas m\u00e1s largas, esto puede conducir a  resultados que podr\u00edan ser poco intuuitivos, tales como:</p> <pre><code>\"aa\": 1, \"c\"\"b\": 1, \"d\": 1\n</code></pre> <p>Del mismo modo, se comparan en el orden los arrays con igual n\u00famero de elementos:</p> <pre><code>element-1,  element-2...\n</code></pre> <p>Los valores de JSON Primitive se comparan usando las mismas reglas de comparaci\u00f3n que para el tipo de datos PostgreSQL subyacente. Las cuerdas se comparan usando la cocoteaci\u00f3n por defecto de la base de datos.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/14.-El%20Tipo%20JSON/05.-jsonb%20Suscripci%C3%B3n/","title":"05.-jsonb Suscripci\u00f3n","text":"<p>El  <code>jsonb</code>El  tipo de datos admite expresiones subscriptores al estilo array para  extraer y modificar elementos. Los valores ansidos pueden ser indicados  mediante la encadenamiento de expresiones subscriptores, siguiendo las  mismas reglas que la  <code>path</code>argumento en el  <code>jsonb_set</code>funci\u00f3n. Si a  <code>jsonb</code>el valor es una matriz, los sub\u00edndices num\u00e9ricos comienzan en cero, y los  enteros negativos cuentan hacia atr\u00e1s desde el \u00faltimo elemento de la  matriz. Las expresiones de corte no se apoyan. El resultado de una  expresi\u00f3n de subscriptor es siempre del tipo de datos de jsonb.</p> <p><code>UPDATE</code>declaraciones pueden utilizar subscripting en la  <code>SET</code>cl\u00e1usula de modificaci\u00f3n  <code>jsonb</code>valores. Los caminos de suscripto deben ser traversables para todos los valores  afectados en la medida en que existan. Por ejemplo, el camino  <code>val['a']['b']['c']</code>puede ser atravesado todo el camino a  <code>c</code>si cada uno de ellos <code>val</code>, <code>val['a']</code>, y  <code>val['a']['b']</code>es un objeto. Si lo hay  <code>val['a']</code>o o  <code>val['a']['b']</code>no est\u00e1 definida, se crear\u00e1 como un objeto vac\u00edo y se llenar\u00e1 seg\u00fan sea necesario. Sin embargo, si lo hubiera.  <code>val</code>o uno de los valores intermedios se define como un objeto no objeto, como una cadena, n\u00famero o  <code>jsonb``null</code>, la traversal no puede proceder por lo que se levanta un error y se abort\u00f3 la transacci\u00f3n.</p> <p>Un ejemplo de la sintaxis de subescritaxis:</p> <pre><code>-- Extraer el valor de objeto por la tecla\nSELECT ('a\": 1o'::jsonb)['a'];\n\n-- Extraer el valor de objeto anidado por v\u00eda clave\nSELECT (A\"a\": \"b\": \"c\": 1\"c\":::jsonb)['a']['b']['c']['c'];\n\n- Extracto de la matriz por \u00edndice\nSELECT ('[1, \"2, null]'::jsonb)[1];\n\n-- Actualizar el valor de objeto por la tecla. Observe las citas alrededor de '1': la asignada\n-- el valor debe ser del tipo jsonb tambi\u00e9n\nActualizaci\u00f3n de la tabla SET jsonb-field['key'] = '1';\n\n-- Esto elevar\u00e1 un error si alg\u00fan disco es jsonb-field['a'a]['b'] es algo\n- aparte de un objeto. Por ejemplo, el valor \"a\": 1o tiene un valor num\u00e9rico\n- de la llave \"a\".\nActualizaci\u00f3n de la tabla SET jsonb-field['a']['b']['c'] = '1';\n\n-- Filtrar registros usando una cl\u00e1usula WHERE con subscriptor. Desde el resultado de\n-- subscribir es jsonb, el valor con el que lo comparamos tambi\u00e9n debe ser jsonb.\n-- Las comillas dobles hacen \"valor\" tambi\u00e9n una cadena de jsonb v\u00e1lida.\nSELECT * DESDE table.nombre de hoyE Jsonb-field['key'] = 'valor';\n</code></pre> <p><code>jsonb</code>asignaci\u00f3n mediante subscripti maneja algunos casos de borde de diferente de <code>jsonb_set</code>. Cuando una fuente  <code>jsonb</code>el valor es <code>NULL</code>, la asignaci\u00f3n a trav\u00e9s de la subscripci\u00f3n proceder\u00e1 como si fuera un  valor JSON vac\u00edo del tipo (objeto o matriz) implicado por la tecla  sub\u00edndice:</p> <pre><code>-- Donde Josonb-field era NULL, es ahora \"a\"a\": 1\nActualizaci\u00f3n de la tabla de nombre SET jsonb-field['a'] = '1';\n\n-- Donde Josonb-field era NULL, ahora es [1]\nActualizaci\u00f3n de la tabla SET jsonb-field[0] = '1';\n</code></pre> <p>Si se especifica un \u00edndice para un array que contenga demasiado pocos elementos,  <code>NULL</code>Los elementos se adjuntar\u00e1n hasta que el \u00edndice sea alcanzable y se pueda establecer el valor.</p> <pre><code>-- Donde estaba Jsonb-field [], es ahora [null, null, 2];\n-- donde estaba Jsonbfield [0], ahora es [0, null, 2]\nActualizaci\u00f3n de la tabla SET jsonb-field[2] = '2';\n</code></pre> <p>A  <code>jsonb</code>El valor aceptar\u00e1 asignaciones a rutas sub\u00edndice inexistentes siempre y  cuando el \u00faltimo elemento existente a ser atravesado sea un objeto o  matriz, como lo implica el sub\u00edndice correspondiente (el elemento  indicado por el \u00faltimo sub\u00edndice en la ruta no se atraviesa y puede ser  cualquier cosa). Se crear\u00e1n estructuras de matriz y objetos, y en el  caso anterior <code>null</code>acolchado, seg\u00fan lo especificado por la ruta del sub\u00edndice hasta que se pueda colocar el valor asignado.</p> <pre><code>-- Donde estaba Josonb-field, es ahora \"a\"a\": [\"b\": 1o]\nActualizaci\u00f3n de la tabla SET jsonb-field['a'[0]['b'] = '1';\n\n-- Donde estaba Josonb-field [], es ahora [null, \"a\": 1o]\nActualizaci\u00f3n de la tabla de SET jsonb-field[1]['a'] = '1';\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/14.-El%20Tipo%20JSON/06.-Transformaci%C3%B3n/","title":"06.-Transformaci\u00f3n","text":"<p>Se dispone de extensiones adicionales que implementan transformadas para la  <code>jsonb</code>tipo para diferentes lenguas de procedimiento.</p> <p>Las extensiones de PL/Perl se llaman  <code>jsonb_plperl</code>y <code>jsonb_plperlu</code>. Si los usas,  <code>jsonb</code>valores se mapean a matrices Perl, hashes y scalars, seg\u00fan corresponda.</p> <p>Se llama la extensi\u00f3n de PL/Python <code>jsonb_plpython3u</code>. Si lo usas,  <code>jsonb</code>Los valores se mapean a los diccionarios, listas y scalars de Python, seg\u00fan corresponda.</p> <p>De estas extensiones,  <code>jsonb_plperl</code>se considera de confianza, es decir, puede ser instalado por no-superusuarios que tienen  <code>CREATE</code>privilegio en la base de datos actual. El resto requiere privilegio superusuario para instalar.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/14.-El%20Tipo%20JSON/07.-Tipo%20jsonpath/","title":"07.-Tipo jsonpath","text":"<p>El  <code>jsonpath</code>tipo implementa soporte para el lenguaje de ruta SQL/JSON en PostgreSQL para consultar eficientemente los datos JSON. Proporciona una  representaci\u00f3n binaria de la expresi\u00f3n de la ruta SQL/JSON que  especifica los elementos a recuperar por el motor de la ruta de los  datos JSON para su posterior procesamiento con las funciones de consulta SQL/JSON.</p> <p>La sem\u00e1ntica de los predicados y operadores de la ruta SQL/JSON  generalmente siguen SQL. Al mismo tiempo, para proporcionar una forma  natural de trabajar con los datos JSON, la sintaxis de la ruta SQL/JSON  utiliza algunas convenciones de JavaScript:</p> <ul> <li>Dot (<code>.</code>) se utiliza para el acceso a los miembros.</li> <li>Soportes cuadrados (<code>[]</code>) se utilizan para el acceso a la matriz.</li> <li>Los arrays SQL/JSON son de 0 parientes, a diferencia de los conjuntos SQL regulares que comienzan desde 1.</li> </ul> <p>Los literales num\u00e9ricos en las expresiones de la ruta SQL/JSON  siguen las reglas de JavaScript, que son diferentes tanto de SQL como de JSON en algunos detalles menores. Por ejemplo, la ruta SQL/JSON permite  <code>.1</code>y <code>1.</code>, que no son v\u00e1lidos en JSON. Se apoyan los literales enteros no decimales y los separadores subrayados, por ejemplo, <code>1_000_000</code>, <code>0x1EEE_FFFF</code>, <code>0o273</code>, <code>0b100101</code>. En la ruta SQL/JSON (y en JavaScript, pero no en SQL propiamente  dicha), no debe haber un separador de subrayado directamente despu\u00e9s del prefijo del radix.</p> <p>Una expresi\u00f3n de ruta SQL/JSON est\u00e1 t\u00edpicamente escrita en una  consulta SQL como una cadena de caracteres SQL literalmente, por lo que  debe ser adjuntada en comillas simples, y cualquier comillas deseadas  dentro del valor debe ser duplicada (ver Secci\u00f3n 4.1.2.1). Algunas formas de expresiones de ruta requieren literales de cuerda  dentro de ellas. Estos literales de cuerdas incrustados siguen las  convenciones de JavaScript/ECMAScript: deben estar rodeados de comillas  dobles, y los escapes de reacci\u00f3n pueden ser usados dentro de ellos para representar personajes de otra manera dif\u00edciles de escribir. En  particular, la manera de escribir una doble cita dentro de una cuerda  literal incrustada es <code>\\\"</code>, y para escribir una reacci\u00f3n en s\u00ed, usted debe escribir <code>\\\\</code>. Otras secuencias especiales de reacci\u00f3n incluyen las reconocidas en las cadenas JSON: <code>\\b</code>, <code>\\f</code>, <code>\\n</code>, <code>\\r</code>, <code>\\t</code>,  <code>\\v</code>para varios caracteres de control ASCII, y  <code>\\u*</code>NNNN<code>*</code>para un car\u00e1cter Unicode identificado por su punto de c\u00f3digo de 4 hect\u00e1reas. La sintaxis de reacci\u00f3n tambi\u00e9n incluye dos casos no permitidos por  JSON:  <code>\\x*</code>NN<code>*</code>para un c\u00f3digo de caracteres escrito con s\u00f3lo dos d\u00edgitos hexazicos, y  <code>\\u{*</code>N...<code>*}</code>para un c\u00f3digo de caracteres escrito con 1 a 6 d\u00edgitos hex.</p> <p>Una expresi\u00f3n de ruta consiste en una secuencia de elementos de ruta, que pueden ser cualquiera de los siguientes:</p> <ul> <li>Literanos de JSON tipos primitivos: texto unicode, num\u00e9rico, verdadero, falso o nulo.</li> <li>Variables de ruta enumeradas en la Tabla 8.24.</li> <li>Operadores de acceso a los operadores enumerados en el cuadro 8.25.</li> <li><code>jsonpath</code>los operadores y m\u00e9todos enumerados en la secci\u00f3n 9.16.2.2.</li> <li>Parentheses, que se pueden utilizar para proporcionar expresiones filtrantes o definir el orden de evaluaci\u00f3n de la ruta.</li> </ul> <p>Para m\u00e1s detalles sobre el uso de  <code>jsonpath</code>expresiones con funciones de consulta SQL/JSON, v\u00e9ase la secci\u00f3n 9.16.2.</p> <p>Cuadro 8.24.  <code>jsonpath</code>Variables</p> Variable Descripci\u00f3n <code>$</code> Una variable que representa el valor de JSON que se est\u00e1 consultando (el elemento contextual). <code>$varname</code> Una variable nombrada. Su valor se puede fijar por el par\u00e1metro  <code>vars</code>de varias funciones de procesamiento de JSON; v\u00e9ase la Tabla 9.49 para m\u00e1s detalles. <code>@</code> Una variable que representa el resultado de la evaluaci\u00f3n de la ruta en las expresiones de filtro. <p>Cuadro 8.25.  <code>jsonpath</code>Accesorios</p> Operador de acceso Descripci\u00f3n <code>.*</code>key<code>*</code> <code>.\"$*</code>varname<code>*\"</code> Accesorio miembro que devuelve a un miembro objeto  con la clave especificada. Si el nombre clave coincide con alguna  variable nombrada a partir de  <code>$</code>o no cumple con las reglas de JavaScript para un identificador, debe ser  encerrado en comillas dobles para que sea una cadena literal. <code>.*</code> Accesorio miembro de Wildcard que devuelve los valores de todos los miembros ubicados en el nivel superior del objeto actual. <code>.**</code> Accesorio miembro de comod\u00edn recursivo que procesa  todos los niveles de la jerarqu\u00eda JSON del objeto actual y devuelve  todos los valores de los miembros, independientemente de su nivel de  anidaci\u00f3n. Esta es una extensi\u00f3n PostgreSQL del est\u00e1ndar SQL/JSON. <code>.**{*</code>level<code>*}</code> <code>.**{*</code>start_level<code>* to *</code>end_level<code>*}</code> Como <code>.**</code>, pero seleccione s\u00f3lo los niveles especificados de la jerarqu\u00eda JSON.  Los niveles de desgajo se especifican como n\u00fameros enteros. El nivel  cero corresponde al objeto actual. Para acceder al nivel de anidaci\u00f3n  m\u00e1s bajo, se puede utilizar el  <code>last</code>Palabra clave. Esta es una extensi\u00f3n PostgreSQL del est\u00e1ndar SQL/JSON. <code>[*</code>subscript<code>*, ...]</code> Accesorio de elementos Array.  <code>*</code>subscript<code>*</code>puede administrarse en dos formas:  <code>*</code>index<code>*</code>o o <code>*</code>start_index<code>* to *</code>end_index<code>*</code>. La primera forma devuelve un elemento de matriz por su \u00edndice. La  segunda forma devuelve una rebanada de matriz por el rango de \u00edndices,  incluyendo los elementos que corresponden a los proporcionados  <code>start_index</code>y <code>end_index</code>.                Especificado  <code>index</code>puede ser un entero, as\u00ed como una expresi\u00f3n que devuelve un solo valor  num\u00e9rico, que se lanza autom\u00e1ticamente al n\u00famero entero. El \u00edndice cero  corresponde al elemento de la primera matriz. Tambi\u00e9n puede utilizar el  <code>last</code>palabra clave para denotar el \u00faltimo elemento de matriz, que es \u00fatil para manejar conjuntos de longitud desconocida. <code>[*]</code> Acceso o accebador de elementos de matriz Wildcard que devuelve todos los elementos de la matriz. <p>[7] Para este prop\u00f3sito, el t\u00e9rmino valor incluye elementos de matriz, aunque la terminolog\u00eda JSON a veces considera  elementos de matriz distintos de los valores dentro de los objetos.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/15.-Arrays/","title":"Index","text":"<p>PostgreSQL permite definir columnas de una tabla como matrices multidimensionales  de longitud variable. Se pueden crear los Arrays de cualquier tipo de  base incorporado o definido por el usuario, tipo enum, tipo compuesto,  tipo de rango o dominio.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/15.-Arrays/01.-Declaraci%C3%B3n%20de%20los%20tipos%20de%20Array/","title":"01.-Declaraci\u00f3n de los tipos de Array","text":"<p>Para ilustrar el uso de tipos de arrays, creamos esta tabla:</p> <pre><code>CREATE TABLE sal-emp (\n    texto de nombre,\n    el n\u00famero entero de pago por trimestre[],\n    texto de calendario[][]\n);\n</code></pre> <p>Como se muestra, un tipo de datos de matriz se nombra mediante soportes cuadrados de ap\u00e9ndice (<code>[]</code>) al nombre del tipo de datos de los elementos array. El comando anterior crear\u00e1 una tabla nombrada  <code>sal_emp</code>con una columna de tipo  <code>text</code>(<code>name</code>), una matriz unidimensional de tipo  <code>integer</code>(<code>pay_by_quarter</code>), que representa el salario del empleado por trimestre, y una matriz bidimensional de  <code>text</code>(<code>schedule</code>), que representa el horario semanal del empleado.</p> <p>La sintaxis para  <code>CREATE TABLE</code>permite especificar el tama\u00f1o exacto de los arrays, por ejemplo:</p> <pre><code>CREATE tictactoctoe de la tabla (\n    cuadrados entero[3]\n);\n</code></pre> <p>Sin embargo, la implementaci\u00f3n actual ignora cualquier l\u00edmite de  tama\u00f1o de matriz suministrado, es decir, el comportamiento es el mismo  que para los arrays de longitud no especificada.</p> <p>La aplicaci\u00f3n actual tampoco hace cumplir el n\u00famero declarado de  dimensiones. Los arayas de un tipo de elemento particular se consideran  del mismo tipo, independientemente del tama\u00f1o o el n\u00famero de  dimensiones. Por lo tanto, declarando el tama\u00f1o de la matriz o el n\u00famero de dimensiones en  <code>CREATE TABLE</code>es simplemente documentaci\u00f3n; no afecta el comportamiento en tiempo de ejecuci\u00f3n.</p> <p>Una sintaxis alternativa, que se ajusta al est\u00e1ndar SQL mediante el uso de la palabra clave <code>ARRAY</code>, se puede utilizar para matrices unidimensionales.  <code>pay_by_quarter</code>podr\u00eda haberse definido como:</p> <pre><code>el cuarto entero ARRAY[4],\n</code></pre> <p>O, si no se debe especificar el tama\u00f1o de array:</p> <pre><code>pay.byquarter integer ARRAY,\n</code></pre> <p>Como antes, sin embargo, PostgreSQL no hace cumplir la restricci\u00f3n de tama\u00f1o en ning\u00fan caso.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/15.-Arrays/02.-Entrada%20de%20valores%20en%20Arrays/","title":"02.-Entrada de valores en Arrays","text":"<p>Para escribir un valor de matriz como una constante literal, encierre los valores de elementos dentro de los aparatos drones y los separe por comas. (Si conoces C, esto no es diferente a la sintaxis C para la  inicializaci\u00f3n de estructuras.) Puede poner comillas dobles en torno a  cualquier valor de elemento, y debe hacerlo si contiene comas o aparatos ortuzos rizado. (A continuaci\u00f3n se presentan m\u00e1s detalles.) As\u00ed, el  formato general de una constante de matriz es el siguiente:</p> <pre><code>- A.     val1delimval2delim... -\n</code></pre> <p>d\u00f3nde  <code>delim</code>es el car\u00e1cter delimitador del tipo, como se registra en su  <code>pg_type</code>entrada. Entre los tipos de datos est\u00e1ndar proporcionados en la distribuci\u00f3n de PostgreSQL, todos utilizan una coma (<code>,</code>), excepto para el tipo  <code>box</code>que utiliza un punto y coma (<code>;</code>). Cada uno  <code>val</code>es una constante del tipo de elemento de array, o un subarray. Un ejemplo de una constante de array es:</p> <pre><code>\"1,2,3, 4,5,6, 78,9\".\n</code></pre> <p>Esta constante es una matriz bidimensional de 3 por 3 por 3 que consiste en tres subarrays de enteros.</p> <p>Para establecer un elemento de una matriz constante a NULL, escriba  <code>NULL</code>para el valor del elemento. (Toda variante superior o inferior de  <code>NULL</code>lo har\u00e1.) Si quieres un valor real de cadena. NULL, debes poner comillas dobles a su alrededor.</p> <p>(Ese tipo de constantes de array son en realidad s\u00f3lo un caso especial de las constantes gen\u00e9ricas de tipo discutidas en la Secci\u00f3n 4.1.2.7. La constante se trata inicialmente como una cadena y se pasa a la  rutina de conversi\u00f3n de entrada de array. Una especificaci\u00f3n de tipo  expl\u00edcita podr\u00eda ser necesaria.)</p> <p>Ahora podemos mostrar algo  <code>INSERT</code>declaraciones:</p> <pre><code>INSERT INTO sal-emp\n    VALORS ('Bill',\n    \"10000, 10000, 10000, 10000\",\n    \"Encuentro\", \"almuerzo\", \"entrenamiento\", \"presentaci\u00f3n\");\n\nINSERT INTO sal-emp\n    VALUES ('Carol',\n    'Auentre 20000, 25000, 25000, 25000',\n    \"Desayuno\", \"consultar\", \"encuentro\", \"almuerzo\");\n</code></pre> <p>El resultado de las dos inserciones anteriores se ve as\u00ed:</p> <pre><code>SELECT * DESDE sal-emp;\n nombre de la agenda de pago.\n-----------------------------------------------------------------------------------------------------------------------------\n Billete de 10000.10000,10000,10000,10000 . . . . . . . . . . . . . . . . . . . . . . . . . . .\n Carol - 20000,25000,25000,25000* Desayuno,consulting,meeting,lunch.\n(2 filas)\n</code></pre> <p>Los arrays multidimensionales deben tener alcances de  correspondencia para cada dimensi\u00f3n. Un desajuste causa un error, por  ejemplo:</p> <pre><code>INSERT INTO sal-emp\n    VALORS ('Bill',\n    \"10000, 10000, 10000, 10000\",\n    \"\"Encuentro\", \"almuerzo\", reuni\u00f3n\".\nERROR: los arrays multidimensionales deben tener expresiones de matriz con dimensiones a juego\n</code></pre> <p>El  <code>ARRAY</code>La sintaxis constructora tambi\u00e9n se puede utilizar:</p> <pre><code>INSERT INTO sal-emp\n    VALORS ('Bill',\n    ARRAY[10000, 10000, 10000, 10000],\n    ARRAY['encuentro', 'almuerzo'], ['entrenamiento', 'presentaci\u00f3n']);\n\nINSERT INTO sal-emp\n    VALUES ('Carol',\n    ARRAY[20000, 25000, 25000, 25000],\n    ARRAY[['breakfast', 'consulting'], ['reuni\u00f3n', 'almuerzo']]);\n</code></pre> <p>Observe que los elementos de matriz son constantes o expresiones  ordinarias de SQL; por ejemplo, los literales de cuerda se cotizan  solos, en lugar de doble cotizaci\u00f3n, ya que estar\u00edan en una matriz  literal. El  <code>ARRAY</code>La sintaxis de constructor se examina con m\u00e1s detalle en la secci\u00f3n 4.2.12.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/15.-Arrays/03.-Accediendo%20a%20los%20Arrays/","title":"03.-Accediendo a los Arrays","text":"<p>Ahora, podemos hacer algunas preguntas sobre la mesa. Primero,  mostramos c\u00f3mo acceder a un solo elemento de una matriz. Esta consulta  recupera los nombres de los empleados cuya paga cambi\u00f3 en el segundo  trimestre:</p> <pre><code>SELECT name FROM sal-emp WHERE pay.quarter[1].\n\n nombre\n------\n Carol\n(1 fila)\n</code></pre> <p>Los n\u00fameros de sub\u00edndice de array se escriben entre corchetes. Por defecto PostgreSQL utiliza una convenci\u00f3n de numeraci\u00f3n basada en una sola para arrays, es decir, una variedad de  <code>n</code>los elementos comienzan con  <code>array[1]</code>y termina con <code>array[*</code>n<code>*]</code>.</p> <p>Esta consulta recupera el salario del tercer trimestre de todos los empleados:</p> <pre><code>SELECT pay.by.quarter[3] FROM sal-emp;\n\n pagar por cuarto\n----------------\n          10000\n          25000\n(2 filas)\n</code></pre> <p>Tambi\u00e9n podemos acceder a rebanadas rectangulares arbitrarias de  un array, o subarrays. Una rebanada de matriz se denota por la escritura  <code>*</code>lower-bound<code>*:*</code>upper-bound<code>*</code>para una o m\u00e1s dimensiones de matriz. Por ejemplo, esta consulta recupera el primer elemento del calendario de Bill para los dos primeros d\u00edas de la semana:</p> <pre><code>SELECT schedule[1:2][1:1] DESDE sal\u00e1emp DOHERE name = 'Bill';\n\n        horario\n------------------------\n -meeting, entrenamiento.\n(1 fila)\n</code></pre> <p>Si alguna dimensi\u00f3n se escribe como una rebanada, es decir,  contiene un colon, entonces todas las dimensiones se tratan como  rodajas. Cualquier dimensi\u00f3n que tenga un solo n\u00famero (sin colon) se  trata como de 1 a n\u00famero especificado. Por ejemplo,  <code>[2]</code>se trata como <code>[1:2]</code>, como en este ejemplo:</p> <pre><code>SELECT schedule[1:2][2] DESDE sal\u00e1emp DOHERE name = 'Bill';\n\n                 horario\n- A---------------\n - reuni\u00f3n, almuerzo, formaci\u00f3n, presentaci\u00f3n.\n(1 fila)\n</code></pre> <p>Para evitar confusiones con el caso no rebanado, lo mejor es usar sintaxis de rebanada para todas las dimensiones, por ejemplo, <code>[1:2][1:1]</code>, no <code>[2][1:1]</code>.</p> <p>Es posible omitir el  <code>lower-bound</code>y/o  <code>upper-bound</code>de un especificador de rodajas; el l\u00edmite que falta; el l\u00edmite inferior o superior de los sub\u00edndices del array. Por ejemplo:</p> <pre><code>SELECT schedule[:2][2:] DESDE sal-empo nombre = 'Bill';\n\n        horario\n------------------------\n Almuerzo, presente.\n(1 fila)\n\nSELECT schedule[:][1:1] DESDE sal-empo nombre de Donde = 'Bill';\n\n        horario\n------------------------\n -meeting, entrenamiento.\n(1 fila)\n</code></pre> <p>Una expresi\u00f3n de sub\u00edndice de matriz devolver\u00e1 nula si el array  en s\u00ed o cualquiera de las expresiones sub\u00edndices son nulas. Adem\u00e1s, null se devuelve si un sub\u00edndice est\u00e1 fuera de los l\u00edmites de array (este  caso no plantea un error). Por ejemplo, si  <code>schedule</code>Actualmente tiene dimensiones  <code>[1:3][1:2]</code>luego referencias  <code>schedule[3][3]</code>rinde NULL. Del mismo modo, una referencia de matriz con el n\u00famero equivocado de sub\u00edndices produce un nulo en lugar de un error.</p> <p>Una expresi\u00f3n de corte de matriz tambi\u00e9n rinde nulo si el array  en s\u00ed o cualquiera de las expresiones sub\u00edndices son nulas. Sin embargo, en otros casos, como la selecci\u00f3n de una rebanada de matriz que est\u00e1  completamente fuera de los l\u00edmites actuales de la matriz, una expresi\u00f3n  de rebanada produce una matriz vac\u00eda (dimensional cero) en lugar de  nula. (Esto no coincide con el comportamiento no-sulado y se hace por  razones hist\u00f3ricas.) Si la rebanada solicitada se superpone parcialmente a los l\u00edmites del array, entonces se reduce silenciosamente s\u00f3lo a la  regi\u00f3n superpuesta en lugar de devolver nula.</p> <p>Las dimensiones actuales de cualquier valor de array se pueden recuperar con la  <code>array_dims</code>funci\u00f3n:</p> <pre><code>SELECT array.dims(schedule) DES de sal-emp DOHERE name = 'Carol';\n\n array-dims\n-----------\n [1:2][1:2]\n(1 fila)\n</code></pre> <p><code>array_dims</code>produce a  <code>text</code>resultado, que es conveniente para la gente para leer, pero tal vez inconveniente  para los programas. Las dimensiones tambi\u00e9n se pueden recuperar con  <code>array_upper</code>y <code>array_lower</code>, que devuelvan el l\u00edmite superior e inferior de una dimensi\u00f3n espec\u00edfica de matriz, respectivamente:</p> <pre><code>SELECT array.upper(schedule, 1) DESDE sal-emp DONDE nombre = 'Carol';\n\n array.upper\n------------\n           2\n(1 fila)\n</code></pre> <p><code>array_length</code>devolver\u00e1 la longitud de una dimensi\u00f3n de matriz especificada:</p> <pre><code>SELECT array.length(schedule, 1) DESDE sal-emp WHERE name = 'Carol';\n\n array-longitud\n--------------\n            2\n(1 fila)\n</code></pre> <p><code>cardinality</code>devuelve el n\u00famero total de elementos en una matriz en todas las dimensiones. Es efectivamente el n\u00famero de filas que llaman a  <code>unnest</code>rendir\u00eda:</p> <pre><code>SELECT cardinality(schedule) DESDE sal-emp DONDE nombre = 'Carol';\n\n cardinalidad\n------------\n           4\n(1 fila)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/15.-Arrays/04.-Modificando%20Arrays/","title":"04.-Modificando Arrays","text":"<p>Un valor de array puede ser reemplazado completamente:</p> <pre><code>UPDATE sal-emp SET pay-by-quarter = '25000,25000,27000,27000'\n    DONDE nombre = 'Carol';\n</code></pre> <p>o el uso de la  <code>ARRAY</code>sintaxis de expresi\u00f3n:</p> <pre><code>Actualizaci\u00f3n sal-emp SET pay-by-quarter = ARRAY[25000,25000,27000,27000]\n    DONDE nombre = 'Carol';\n</code></pre> <p>Un array tambi\u00e9n se puede actualizar en un solo elemento:</p> <pre><code>Actualizaci\u00f3n sal-emp SET pay-by-quarter[4] = 15000\n    Donde nombre = 'Bill';\n</code></pre> <p>o actualizado en una rebanada:</p> <pre><code>UPDATE sal-emp SET pay-by-quarter[1:2] = '27000,27000'\n    DONDE nombre = 'Carol';\n</code></pre> <p>La sintaxis de la rebanada con omitida  <code>lower-bound</code>y/o  <code>upper-bound</code>tambi\u00e9n se puede utilizar, pero s\u00f3lo cuando se actualiza un valor de matriz que no es NULL o de dimensi\u00f3n cero (de lo contrario, no hay un l\u00edmite de  sub\u00edndice existente para sustituir).</p> <p>El valor de matriz almacenado se puede ampliar asignando a  elementos que no est\u00e1n ya presentes. Cualquier puesto entre los  anteriormente presentes y los elementos reci\u00e9n asignados se llenar\u00e1 con  nulos. Por ejemplo, si array  <code>myarray</code>actualmente tiene 4 elementos, tendr\u00e1 seis elementos despu\u00e9s de una actualizaci\u00f3n que asigna a <code>myarray[6]</code>;  <code>myarray[5]</code>contendr\u00e1n nulos. Actualmente, la ampliaci\u00f3n de esta manera s\u00f3lo est\u00e1 permitida  para matrices unidimensionales, no conjuntos multidimensionales.</p> <p>La asignaci\u00f3n suscrita permite la creaci\u00f3n de matrices que no  utilizan sub\u00edndices basados en uno. Por ejemplo, uno podr\u00eda asignar a  <code>myarray[-2:7]</code>crear una matriz con valores de sub\u00edndice de -2 a 7.</p> <p>Los nuevos valores de matriz tambi\u00e9n se pueden construir utilizando el operador de concatenaci\u00f3n, <code>||</code>:</p> <pre><code>SELECT ARRAY[1,2] - ARRAY[3,4];\n ?column?\n---------\n 1,3,4 euros.\n(1 fila)\n\nSELECT ARRAY[5,6] ARRAY[1,2],[3,4]];\n      ?column?\n----------------------\n -5,6, 1,2o,3o-.\n(1 fila)\n</code></pre> <p>El operador de concatenaci\u00f3n permite empujar un solo elemento al  principio o al final de una matriz unidimensional. Tambi\u00e9n acepta dos <code>N</code>- arrays dimensionales, o un <code>N</code>-dimensional y un <code>N+1</code>- matriz dimensional.</p> <p>Cuando un solo elemento se empuja hacia el principio o el final  de una matriz unidimensional, el resultado es un array con el mismo  sub\u00edndice de l\u00edmite inferior que el array operand. Por ejemplo:</p> <pre><code>SELECT array.dims(1 \"[0:1]=-2,3o':int[]);\n array-dims\n-----------\n [0:2]\n(1 fila)\n\nSELECT array.dims (ARRAY[1,2] 3);\n array-dims\n-----------\n [1:3]\n(1 fila)\n</code></pre> <p>Cuando se concatenan dos conjuntos con un n\u00famero igual de  dimensiones, el resultado conserva el sub\u00edndice de l\u00edmite inferior de la dimensi\u00f3n exterior del operando de la izquierda. El resultado es una  matriz que comprende cada elemento del operando zurdo seguido por cada  elemento del operando a la derecha. Por ejemplo:</p> <pre><code>SELECT array.dims (ARRAY[1,2] - ARRAY[3,4,5]);\n array-dims\n-----------\n [1,5]\n(1 fila)\n\nSELECT array.dims (ARRAY[[1,2],[3,4]] ARRAY[[5,6],[7,8],[9,0]]);\n array-dims\n-----------\n [1:5][1:2]\n(1 fila)\n</code></pre> <p>Cuando es un <code>N</code>- matriz dimensional se empuja al principio o al final de un <code>N+1</code>- arraydimensional, el resultado es an\u00e1logo al caso de lazo de lazo de elementos de arriba. Cada uno <code>N</code>- el sub-array dimensional es esencialmente un elemento de la <code>N+1</code>- la dimensi\u00f3n exterior de la matriz. Por ejemplo:</p> <pre><code>SELECT array.dims (ARRAY[1,2] ARRAY[3,4],[5,6]);\n array-dims\n-----------\n [1:3][1:2]\n(1 fila)\n</code></pre> <p>Un array tambi\u00e9n se puede construir utilizando las funciones <code>array_prepend</code>, <code>array_append</code>, o <code>array_cat</code>. Los dos primeros s\u00f3lo soportan matrices unidimensionales, pero  <code>array_cat</code>apoya conjuntos multidimensionales. Algunos ejemplos:</p> <pre><code>SELECT array.prepend(1, ARRAY[2,3]);\n array-prepender\n- A---------------\n 1,2,3\n(1 fila)\n\nSELECT array.append (ARRAY[1,2], 3);\n array.append\n--------------\n 1,2,3\n(1 fila)\n\nSELECT array.cat(ARRAY[1,2], ARRAY[3,4]);\n array-cat\n---------\n 1,3,4\n(1 fila)\n\nSELECT array.cat(ARRAY[[1,2],[3,4]], ARRAY[5,6]);\n      array-cat\n----------------------\n 1,2o,3,4,5,6o.\n(1 fila)\n\nSELECT array.cat(ARRAY[5,6], ARRAY[1,2],[3,4]]);\n      array-cat\n----------------------\n -5,6, 1,2o,3o-.\n</code></pre> <p>En casos simples, el operador de concatenaci\u00f3n discutido  anteriormente se prefiere sobre el uso directo de estas funciones. Sin  embargo, debido a que el operador de concatenaci\u00f3n est\u00e1 sobrecargado  para atender los tres casos, hay situaciones en las que el uso de una de las funciones es \u00fatil para evitar la ambiguedad. Por ejemplo,  considere:</p> <pre><code>SELECT ARRAY[1, 2] \"A3, 4o\"; -- el literal no mecanotipado se toma como una matriz\n ?column?\n---------\n 1,3,4 euros.\n\nSELECT ARRAY[1, 2] - '7'; -- as\u00ed es este\nERROR: matriz malformada literalmente: \"7\"\n\nSELECT ARRAY[1, 2] - NULL; -- as\u00ed es un NULL no decorado\n ?column?\n---------\n - 1*\n(1 fila)\n\nSELECT array.append(ARRAY[1, 2], NULL); -- esto podr\u00eda haber sido sed.\n array.append\n--------------\n - 1,2,NULL.\n</code></pre> <p>En los ejemplos anteriores, el analizador ve un array entero en  un lado del operador de concatenaci\u00f3n, y una constante de tipo  indeterminado en el otro. El heurista que utiliza para resolver el tipo  de la constante es asumir que es del mismo tipo que la otra entrada del  operador en este caso, matriz en de n\u00fameros enteros. As\u00ed que se presume  que el operador de concatenaci\u00f3n representa <code>array_cat</code>, no <code>array_append</code>. Cuando esa es la elecci\u00f3n equivocada, podr\u00eda fijarse lanzando la  constante al tipo de elemento del array; pero el uso expl\u00edcito de  <code>array_append</code>podr\u00eda ser una soluci\u00f3n preferible.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/15.-Arrays/05.-Buscando%20en%20Arrays/","title":"05.-Buscando en Arrays","text":"<p>Para buscar un valor en una matriz, se debe comprobar cada valor.  Esto se puede hacer manualmente, si usted sabe el tama\u00f1o de la matriz.  Por ejemplo:</p> <pre><code>SELECT * DESDE sal-emp WHERE pay.quarter[1] = 10000 O\n                            el cuarto de pago[2] = 10000 OR\n                            el cuarto de pago[3] = 10000 OR\n                            pagar por trimestre[4] = 10000;\n</code></pre> <p>Sin embargo, esto r\u00e1pidamente se vuelve tedioso para grandes matrices, y no es \u00fatil si se desconoce el tama\u00f1o de la matriz. En la secci\u00f3n 9.24 se describe un m\u00e9todo alternativo. La consulta anterior podr\u00eda sustituirse por:</p> <pre><code>SELECT * DESDE sal-emp D\u00f3nde 10000 = CUALQUIER (pay-by-quarter);\n</code></pre> <p>Adem\u00e1s, puede encontrar filas donde el array tiene todos los valores iguales a 10000 con:</p> <pre><code>SELECT * DESDE sal-emp D\u00f3nde hay 10000 = TODOS (pap\u00e1trido; cuarto);\n</code></pre> <p>Alternativamente, el  <code>generate_subscripts</code>funci\u00f3n se puede utilizar. Por ejemplo:</p> <pre><code>SELECT * DESDE\n   (SELECT pay.by.quarter,\n           generar, subscripts(pay-by-quarter, 1) AS s\n      DESDE sal-emp) AS foo\n DONDE el cuarto de[s] = 10000;\n</code></pre> <p>Esta funci\u00f3n se describe en la Tabla 9.66.</p> <p>Tambi\u00e9n puede buscar un array usando el  <code>&amp;&amp;</code>operador, que comprueba si el operando izquierdo se solapa con el operando derecho. Por ejemplo:</p> <pre><code>SELECT * DESDE sal-emp WHERE pay-by-quarter &amp;&amp; ARRAY[10000];\n</code></pre> <p>Este y otros operadores de matrices se describen en la secci\u00f3n 9.19. Puede acelerarse mediante un \u00edndice apropiado, como se describe en la secci\u00f3n 11.2.</p> <p>Tambi\u00e9n puede buscar valores espec\u00edficos en un array usando el  <code>array_position</code>y  <code>array_positions</code>funciones. El primero devuelve el sub\u00edndice de la primera ocurrencia de un valor  en un array; el segundo devuelve un array con los sub\u00edndices de todas  las ocurreciones del valor en el array. Por ejemplo:</p> <pre><code>SELECT array.position (ARRAY['sun','mon','tue','wed','t','fri','sat', 'mon');\n array-posici\u00f3n\n----------------\n              2\n(1 fila)\n\nSELECT array-positions(ARRAY[1, 4, 3, 1, 3, 4, 2, 1], 1);\n arrays-posiciones\n----------------\n 1,4,8\n(1 fila)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/15.-Arrays/05.-Buscando%20en%20Arrays/#tip","title":"Tip","text":"<p>Los arrays no son conjuntos; la b\u00fasqueda de elementos  espec\u00edficos de array puede ser un signo de mal dise\u00f1o de base de datos.  Considere usar una tabla separada con una fila para cada elemento que  ser\u00eda un elemento de matriz. Esto ser\u00e1 m\u00e1s f\u00e1cil de buscar, y es  probable que se ampl\u00ede mejor para un gran n\u00famero de elementos.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/15.-Arrays/06.-Entradas%20en%20Arrays%20y%20sintaxis%20de%20salida/","title":"06.-Entradas en Arrays y sintaxis de salida","text":"<p>La representaci\u00f3n externa de un valor de matriz consiste en elementos que se interpretan de acuerdo con las reglas de conversi\u00f3n de E/S para  el tipo de elemento del array, m\u00e1s decoraci\u00f3n que indica la estructura  de array. La decoraci\u00f3n consiste en aparatos de color rizado ( <code>{</code>y <code>}</code>) alrededor del valor de array m\u00e1s caracteres de delimitador entre los  art\u00edculos adyacentes. El car\u00e1cter delimitador suele ser una coma (<code>,</code>) pero puede ser otra cosa: est\u00e1 determinada por la  <code>typdelim</code>configuraci\u00f3n para el tipo de elemento del array. Entre los tipos de datos est\u00e1ndar proporcionados en la distribuci\u00f3n de PostgreSQL, todos usen una coma, excepto el tipo <code>box</code>, que utiliza un punto y coma (<code>;</code>). En una matriz multidimensional, cada dimensi\u00f3n (l\u00eda, plano, cubo, etc.) obtiene su propio nivel de aparatos de cors\u00e9s rizado, y los  delimitadores deben ser escritos entre entidades adyacentes de la misma  nivel.</p> <p>La rutina de salida de array pondr\u00e1 comillas dobles en torno a  los valores de los elementos si son cadenas vac\u00edas, contienen aparatos  descartes rizado, caracteres delimitadores, comillas dobles, espaldas o  espacio blanco, o coinciden con la palabra <code>NULL</code>. Las citas dobles y las barras de fondo incrustados en los valores de  los elementos ser\u00e1n desviados por la reacci\u00f3n. Para los tipos de datos  num\u00e9ricos es seguro asumir que nunca aparecer\u00e1n comillas dobles, pero  para los tipos de datos textuales uno debe estar preparado para hacer  frente a la presencia o ausencia de cotizaciones.</p> <p>Por defecto, el valor \u00edndice de l\u00edmite inferior de las  dimensiones de un array se establece en uno. Para representar arrays con otros l\u00edmites inferiores, los rangos de sub\u00edndices de array se pueden  especificar expl\u00edcitamente antes de escribir los contenidos del array.  Esta decoraci\u00f3n consiste en soportes cuadrados (<code>[]</code>) en torno a los l\u00edmites inferior y superior de cada matriz, con un colon (<code>:</code>) car\u00e1cter delimitador en el medio. La decoraci\u00f3n de la dimensi\u00f3n de la matriz es seguida por un signo igual (<code>=</code>). Por ejemplo:</p> <pre><code>SELECT f1[1][2][3] AS e1, f1[1][1][5] AS e2\n De De (SELECT '[1:1][-2:-1][3:5]=1,2,3o,-,4,5,6o'::int[] AS f1) AS ss;\n\n e1 e2\n-------\n  1o 6\n(1 fila)\n</code></pre> <p>La rutina de salida de array incluir\u00e1 dimensiones expl\u00edcitas en  su resultado s\u00f3lo cuando haya uno o m\u00e1s l\u00edmites inferiores diferentes de uno.</p> <p>Si el valor escrito para un elemento es  <code>NULL</code>(en cualquier variante), el elemento se toma como NULL. La presencia de  cualquier cita o rebavea desnuda esto y permite que el valor de cuerda  literal sea \u201cNULL\u201dingresado. Adem\u00e1s, para la compatibilidad con versiones pre-8.2 de PostgreSQL, el par\u00e1metro de configuraci\u00f3n array-nulls se puede girar  <code>off</code>suprimir el reconocimiento de  <code>NULL</code>como una NULL.</p> <p>Como se mostr\u00f3 anteriormente, al escribir un valor de array puede utilizar comillas dobles en torno a cualquier elemento de matriz  individual. Usted debe hacerlo si el valor del elemento de otra manera confundir el analizador de valor de array. Por ejemplo, los elementos que contienen aparatos  descar\u00e1rselos, comas (o el car\u00e1cter delimitador del tipo de datos),  comillas dobles, barras de fondo o espacio blanco de direcci\u00f3n o de ruta deben ser doblemente citados. Cierras vac\u00edas y cuerdas que coinciden  con la palabra  <code>NULL</code>tambi\u00e9n debe ser citado. Para poner una doble cotizaci\u00f3n o reacci\u00f3n en un valor de elemento de matriz citado, preceda con una barra atr\u00e1s.  Alternativamente, puede evitar comillas y usar el escalote de la  reacci\u00f3n para proteger todos los caracteres de datos que de otra manera  se tomar\u00edan como sintaxis de matriz.</p> <p>Puedes a\u00f1adir espacio en blanco antes de un cors\u00e9 izquierdo o  despu\u00e9s de un cors\u00e9 derecho. Tambi\u00e9n puede agregar espacio en blanco  antes o despu\u00e9s de cualquier cadena individual de elementos. En todos  estos casos se ignorar\u00e1 el espacio blanco. Sin embargo, no se ignora el  espacio blanco dentro de elementos de doble cotizaci\u00f3n, o rodeado por  ambos lados por caracteres no blanque blancos de un elemento.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/15.-Arrays/06.-Entradas%20en%20Arrays%20y%20sintaxis%20de%20salida/#tip","title":"Tip","text":"<p>El  <code>ARRAY</code>la sintaxis constructora (ver Secci\u00f3n 4.2.12) es a menudo m\u00e1s f\u00e1cil de trabajar que la sintaxis de array-literal cuando se escriben valores de array en comandos SQL. En <code>ARRAY</code>, los valores de elementos individuales se escriben de la misma manera que se escribir\u00edan cuando no los miembros de un array.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/16.-Tipos%20compuestos/","title":"Index","text":"<p>Un tipo compuesto representa la estructura de una fila o registro; es esencialmente s\u00f3lo una lista de nombres de campo y sus tipos de datos. PostgreSQL permite utilizar tipos compuestos en muchas de las mismas formas en que se pueden utilizar tipos simples. Por ejemplo, una columna de una tabla puede ser declarada de tipo compuesto.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/16.-Tipos%20compuestos/01.-Declaraci%C3%B3n%20de%20tipos%20compuestos/","title":"01.-Declaraci\u00f3n de tipos compuestos","text":"<p>Aqu\u00ed hay dos ejemplos simples de definici\u00f3n de tipos compuestos:</p> <pre><code>CREATE TYPE complejo AS (\n    r doble precisi\u00f3n,\n    I doble precisi\u00f3n\n);\n\nCREATE TYPE inventario.item AS (\n    texto de nombre,\n    proveedorid integer,\n    letra de precio\n);\n</code></pre> <p>La sintaxis es comparable a <code>CREATE TABLE</code>, excepto que s\u00f3lo se pueden especificar nombres y tipos de campo; no hay restricciones (por ejemplo, <code>NOT NULL</code>) puede incluirse actualmente. Tenga en cuenta que el  <code>AS</code>palabra clave es esencial; sin ella, el sistema pensar\u00e1 un tipo diferente de  <code>CREATE TYPE</code>El comando est\u00e1 destinado, y obtendr\u00e1 errores de sintaxis impares.</p> <p>Habiendo definido los tipos, podemos usarlos para crear tablas:</p> <pre><code>CREATE TABLE a mano (\n    inventario de partidas.item,\n    conteo entero\n);\n\nINSERT INTO on-hand VALUES (ROW(''Difusy dados', 42, 1.99), 1000);\n</code></pre> <p>o funciones:</p> <pre><code>CREATE FUNCTION price.extension(inventory item.item, integer) RETURNS numeric\nAS 'SELECT $1.price * $2' LANGUAGE SQL;\n\nSELECT price.extensi\u00f3n(item, 10) DESDE a mano;\n</code></pre> <p>Cada vez que crea una tabla, un tipo compuesto tambi\u00e9n se crea  autom\u00e1ticamente, con el mismo nombre que la tabla, para representar el  tipo de fila de la tabla. Por ejemplo, hab\u00edamos dicho:</p> <pre><code>CREATE TABLE inventario \u00edtems (\n    texto de nombre,\n    proveedores: proveedores\n    precio num\u00e9rico CHECK (precio 0)\n);\n</code></pre> <p>entonces lo mismo  <code>inventory_item</code>El tipo compuesto mostrado anteriormente llegar\u00eda a ser un subproducto, y  podr\u00eda utilizarse igual de arriba. Tenga en cuenta, sin embargo, una  restricci\u00f3n importante de la aplicaci\u00f3n actual: dado que no hay  restricciones asociadas a un tipo compuesto, las limitaciones que se  muestran en la definici\u00f3n de tabla no se aplican a los valores del tipo compuesto fuera de la tabla. (Para trabajar en torno a esto, crear un dominio sobre el tipo compuesto, y aplicar las restricciones deseadas como  <code>CHECK</code>limitaciones del dominio.)</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/16.-Tipos%20compuestos/02.-Construcci%C3%B3n%20de%20tipos%20compuestos/","title":"02.-Construcci\u00f3n de tipos compuestos","text":"<p>Para escribir un valor compuesto como una constante literal, encierre los valores de campo entre par\u00e9ntesis y separe por comas. Puede poner  comillas dobles en torno a cualquier valor de campo, y debe hacerlo si  contiene comas o par\u00e9ntesis. (A continuaci\u00f3n se presentan m\u00e1s detalles.) As\u00ed, el formato general de una constante compuesta es el siguiente:</p> <pre><code>\"  val1,  val2, ... )'\n</code></pre> <p>Un ejemplo es:</p> <pre><code>'(\"di\u00e1mez deslumbrado\",42,1.99)'\n</code></pre> <p>que ser\u00eda un valor v\u00e1lido de la  <code>inventory_item</code>tipo definido arriba. Para hacer que un campo sea NULL, no escriba  caracteres en absoluto en su posici\u00f3n en la lista. Por ejemplo, esta  constante especifica un tercer campo NULL:</p> <pre><code>'(\"digo deslumbrado\"42,)\n</code></pre> <p>Si quieres una cuerda vac\u00eda en lugar de NULL, escribe comillas dobles:</p> <pre><code>''\"42,)'\n</code></pre> <p>Aqu\u00ed el primer campo es una cadena vac\u00eda no NULL, la tercera es NULL.</p> <p>(Estas constantes son en realidad s\u00f3lo un caso especial de las constantes gen\u00e9ricas de tipo discutidos en la secci\u00f3n 4.1.2.7. La constante se trata inicialmente como una cadena y se pasa a la  rutina de conversi\u00f3n de entrada de tipo compuesto. Una especificaci\u00f3n de tipo expl\u00edcita podr\u00eda ser necesaria para decir a qu\u00e9 tipo convertir la  constante.)</p> <p>El  <code>ROW</code>la sintaxis de expresi\u00f3n tambi\u00e9n se puede utilizar para construir valores  compuestos. En la mayor\u00eda de los casos esto es considerablemente m\u00e1s  simple de usar que la sintaxis de cuerda-literal ya que no tienes que  preocuparte por m\u00faltiples capas de citas. Ya hemos utilizado este m\u00e9todo arriba:</p> <pre><code>ROW('sfuzzy dado', 42, 1.99)\nROW(', 42, NULL)\n</code></pre> <p>La palabra clave ROW es realmente opcional siempre y cuando  tengas m\u00e1s de un campo en la expresi\u00f3n, por lo que estos se pueden  simplificar a:</p> <pre><code>('dios deslumbrados', 42, 1.99)\n('', 42, NULL)\n</code></pre> <p>El  <code>ROW</code>la sintaxis de expresi\u00f3n se discute con m\u00e1s detalle en la secci\u00f3n 4.2.13.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/16.-Tipos%20compuestos/03.-Acceso%20a%20tipos%20compuestos/","title":"03.-Acceso a tipos compuestos","text":"<p>Para acceder a un campo de una columna compuesta, se escribe un punto y el nombre del campo, al igual que seleccionar un campo de un nombre  de tabla. De hecho, es tanto como seleccionar de un nombre de mesa que a menudo tienes que usar par\u00e9ntesis para evitar confundir el analizador.  Por ejemplo, usted podr\u00eda tratar de seleccionar algunos subcampos de  nuestro  <code>on_hand</code>tabla de ejemplo con algo como:</p> <pre><code>SELECT item.name FROM on-hand WHERE item.Prece . 9.99;\n</code></pre> <p>Esto no funcionar\u00e1 desde el nombre  <code>item</code>se toma como un nombre de tabla, no un nombre de columna de <code>on_hand</code>, seg\u00fan las reglas de sintaxis SQL. Debes escribirlo as\u00ed:</p> <pre><code>SELECT (tema).Nombre DESDE DE .-Amanga D\u00f3nde (tema).Presorcir 9.99;\n</code></pre> <p>o si usted necesita utilizar el nombre de la tabla tambi\u00e9n (por ejemplo, en una consulta multitable), as\u00ed:</p> <pre><code>SELECT (onhand.item).name FROM on-hand WHERE (onhand.item).Prece . 9.99;\n</code></pre> <p>Ahora el objeto entre par\u00e9nteslo se interpreta correctamente como una referencia a la  <code>item</code>columnas, y luego el subcampo se puede seleccionar de \u00e9l.</p> <p>Problemas sint\u00e1cticos similares se aplican cada vez que  seleccione un campo de un valor compuesto. Por ejemplo, para seleccionar s\u00f3lo un campo del resultado de una funci\u00f3n que devuelve un valor  compuesto, tendr\u00edas que escribir algo como:</p> <pre><code>SELECT (my-func(...)).\n</code></pre> <p>Sin los par\u00e9ntesis adicionales, esto generar\u00e1 un error de sintaxis.</p> <p>El nombre especial de campo  <code>*</code>significa \" todos los campos\", como se explica en la secci\u00f3n 8.16.5.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/16.-Tipos%20compuestos/04.-Modificaci%C3%B3n%20de%20tipos%20compuestos/","title":"04.-Modificaci\u00f3n de tipos compuestos","text":"<p>Estos son algunos ejemplos de la sintaxis adecuada para insertar y  actualizar columnas compuestas. En primer lugar, la inserci\u00f3n o  actualizaci\u00f3n de una columna entera:</p> <pre><code>INSERT INTO mytab (complex-col) VALORS ((1,2.2));\n\nActualizaci\u00f3n mytab SET complex-col = ROW (1,2.2) DONDE ...;\n</code></pre> <p>El primer ejemplo omite <code>ROW</code>, el segundo lo usa; podr\u00edamos haberlo hecho de cualquier manera.</p> <p>Podemos actualizar un subcampo individual de una columna compuesta:</p> <pre><code>Actualizaci\u00f3n mytab SET complex.col.r = (complex-col).r 1 WHERE ...;\n</code></pre> <p>Observe aqu\u00ed que no necesitamos (y de hecho no podemos) poner  par\u00e9ntesis alrededor del nombre de la columna que aparece justo despu\u00e9s <code>SET</code>, pero necesitamos par\u00e9ntesis cuando nos referimos a la misma columna en la expresi\u00f3n a la derecha del signo igual.</p> <p>Y podemos especificar subcampos como objetivos para <code>INSERT</code>, tambi\u00e9n:</p> <pre><code>INSERT INTO mytab (complex-col.r, complex-col.i) VALUES (1.1, 2.2);\n</code></pre> <p>Si no hubi\u00e9ramos suministrado valores para todos los subcampos de la columna, los subcampos restantes se habr\u00edan llenado de valores  nulos.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/16.-Tipos%20compuestos/05.-Uso%20de%20tipos%20compuestos%20en%20consultas/","title":"05.-Uso de tipos compuestos en consultas","text":"<p>Hay varias reglas especiales de sintaxis y comportamientos asociados  con tipos compuestos en las consultas. Estas reglas proporcionan atajos  \u00fatiles, pero pueden ser confusos si no conoces la l\u00f3gica detr\u00e1s de  ellas.</p> <p>En PostgreSQL, una referencia a un nombre de tabla (o alias) en una consulta es  efectivamente una referencia al valor compuesto de la fila actual de la  tabla. Por ejemplo, si tuvi\u00e9ramos una mesa  <code>inventory_item</code>como se muestra arriba, podr\u00edamos escribir:</p> <pre><code>SELECT c DESDE inventario \u00edtems c;\n</code></pre> <p>Esta consulta produce una sola columna de valor compuesto, por lo que podr\u00edamos obtener salida como:</p> <pre><code>c\n------------------------\n (\"Dih dados fuzz\",42,1.99)\n(1 fila)\n</code></pre> <p>Tenga en cuenta que los nombres simples se combinan con los  nombres de la columna antes de los nombres de la tabla, por lo que este  ejemplo funciona s\u00f3lo porque no hay columna nombrada  <code>c</code>en las mesas de la consulta.</p> <p>La sintaxis ordinaria de nombre calificado-column-nombre  <code>table_name</code><code>.</code><code>column_name</code>puede entenderse como la aplicaci\u00f3n de la selecci\u00f3n de campo al valor compuesto de la fila actual de la tabla. (Por razones de eficiencia, en realidad no se implementa de esa manera.)</p> <p>Cuando escribimos</p> <pre><code>SELECT c.* DESDE inventario \u00edtems c;\n</code></pre> <p>entonces, de acuerdo con el est\u00e1ndar SQL, debemos ampliar el contenido de la tabla en columnas separadas:</p> <pre><code>nombre . Proveedid . Precio\n------------------------------------------\n dados borrosos de 42 1,99\n(1 fila)\n</code></pre> <p>como si la consulta fuera</p> <pre><code>SELECT c.name, c.supplier-id, c.price FROM inventory-item c;\n</code></pre> <p>PostgreSQL aplicar\u00e1 este comportamiento de expansi\u00f3n a cualquier expresi\u00f3n valorada en composite, aunque como se muestra anteriormente, es necesario escribir par\u00e9ntesis alrededor del valor que  <code>.*</code>se aplica a siempre que no es un simple nombre de mesa. Por ejemplo, si  <code>myfunc()</code>es una funci\u00f3n devolviendo un tipo compuesto con columnas <code>a</code>, <code>b</code>, y <code>c</code>, entonces estas dos consultas tienen el mismo resultado:</p> <pre><code>SELECT (myfunc(x)).* DESDE algunos-table;\nSELECT (myfunc(x)).a, (myfunc(x)).b, (myfunc(x)).c DESDE algunos de...\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/16.-Tipos%20compuestos/05.-Uso%20de%20tipos%20compuestos%20en%20consultas/#tip","title":"Tip","text":"<p>PostgreSQL maneja la expansi\u00f3n de la columna transformando la primera forma en la segunda. As\u00ed que, en este ejemplo,  <code>myfunc()</code>ser\u00eda invocado tres veces por fila con cualquiera de las sintaxis. Si se  trata de una funci\u00f3n costosa que desee evitar eso, lo que puede hacer  con una consulta como:</p> <pre><code>SELECT m.* DESDE alg\u00fan-table, LATERAL myfunc(x) AS m;\n</code></pre> <p>Colocar la funci\u00f3n en un   <code>LATERAL``FROM</code>El elemento evita que se invoque m\u00e1s de una vez por fila.  <code>m.*</code>se sigue ampliando en <code>m.a, m.b, m.c</code>, pero ahora esas variables son s\u00f3lo referencias a la salida de la  <code>FROM</code>el tema. (El  <code>LATERAL</code>palabra clave es opcional aqu\u00ed, pero lo mostramos para aclarar que la funci\u00f3n est\u00e1 consiguiendo  <code>x</code>de <code>some_table</code>.)</p> <p>El  <code>composite_value</code><code>.*</code>sintaxis resulta en la expansi\u00f3n de la columna de este tipo cuando aparece en el nivel superior de un  <code>SELECT</code>lista de salida, a  <code>RETURNING</code>lista en <code>INSERT</code>/<code>UPDATE</code>/<code>DELETE</code>, a  <code>VALUES</code>cl\u00e1usula, o un constructor de filas. En todos los dem\u00e1s contextos (incluso cuando se anida dentro de una de esas construcciones), uniendo  <code>.*</code>a un valor compuesto no cambia el valor, ya que significa \"todas las columnas\" y por lo tanto se produce de nuevo el mismo valor compuesto. Por ejemplo, si  <code>somefunc()</code>acepta un argumento valorado en compuesto, estas consultas son las mismas:</p> <pre><code>SELECT algunos func(c.*) DES del inventario \u00edtems c;\nSELECT algunos?func (c) DESDE inventario \u00edtems c;\n</code></pre> <p>En ambos casos, la fila actual de  <code>inventory_item</code>se pasa a la funci\u00f3n como un solo argumento compuesto. Aunque  <code>.*</code>no hace nada en estos casos, usarlo es un buen estilo, ya que deja claro  que se pretende un valor compuesto. En particular, el analizador  considerar\u00e1  <code>c</code>en  <code>c.*</code>remitir a un nombre de tabla o alias, no a un nombre de columna, de modo que no haya ambiguedad; mientras que sin <code>.*</code>, no est\u00e1 claro si  <code>c</code>por que se prefiera un nombre de tabla o un nombre de columna, y de hecho  se prefiera la interpretaci\u00f3n de la columna si hay una columna nombrada <code>c</code>.</p> <p>Otro ejemplo que demuestra estos conceptos es que todas estas consultas significan lo mismo:</p> <pre><code>SELECT * DESDE inventario.item c ORDER BY c;\nSELECT * DESDE inventario.item c ORDER BY c.*;\nSELECT * DESDE inventario \u00edtems c ORDEN POR ROW(c.*);\n</code></pre> <p>Todos estos  <code>ORDER BY</code>las cl\u00e1usulas especifican el valor compuesto de la fila, lo que da lugar a  ordenar las filas de acuerdo con las normas descritas en la secci\u00f3n 9.24.6. Sin embargo, si  <code>inventory_item</code>con una columna nombrada <code>c</code>, el primer caso ser\u00eda diferente de los dem\u00e1s, ya que significar\u00eda  ordenar con esa columna solamente. Dados los nombres de la columna  previamente mostrados, estas consultas tambi\u00e9n son equivalentes a las  anteriores:</p> <pre><code>SELECT * DESDE inventario.item c ORDER BY ROW(c.name, c.supplier.id, c.price);\nSELECT * DESDE inventario.item c ORDER BY (c.name, c.supplier-id, c.price);\n</code></pre> <p>(El \u00faltimo caso utiliza un constructor de filas con la palabra clave  <code>ROW</code>omitido.)</p> <p>Otro comportamiento sint\u00e9tico especial asociado a los valores compuestos es que podemos utilizar la notaci\u00f3n funcional para extraer un campo de un valor compuesto. La forma sencilla de explicar esto es que las anotaciones  <code>*</code>field<code>*(*</code>table<code>*)</code>y  <code>*</code>table<code>*.*</code>field<code>*</code>son intercambiables. Por ejemplo, estas consultas son equivalentes:</p> <pre><code>SELECT c.name FROM inventory.item cHERE c. pricece . 1000;\nSELECT name(c) DESDE inventario \u00e1item D\u00f3nde D\u00f3nde precio (c) 1000;\n</code></pre> <p>Adem\u00e1s, si tenemos una funci\u00f3n que acepta un solo argumento de un tipo compuesto, podemos llamarlo con cualquiera de las dos notaciones.  Todas estas consultas son equivalentes:</p> <pre><code>SELECT algunos?func (c) DESDE inventario \u00edtems c;\nSELECT algunos func(c.*) DES del inventario \u00edtems c;\nSELECT c.somefunc DESDE inventario \u00edtems c;\n</code></pre> <p>Esta equivalencia entre la notaci\u00f3n funcional y la notaci\u00f3n de  campo permite utilizar funciones en tipos compuestos para implementar campos computados.   Una aplicaci\u00f3n que utilice la \u00faltima consulta anterior no tendr\u00eda que ser directamente consciente de que  <code>somefunc</code>no es una columna real de la mesa.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/16.-Tipos%20compuestos/05.-Uso%20de%20tipos%20compuestos%20en%20consultas/#tip_1","title":"Tip","text":"<p>Debido a este comportamiento, es imprable dar una funci\u00f3n que  toma un solo argumento de tipo compuesto del mismo nombre que cualquiera de los campos de ese tipo compuesto. Si hay ambiguedad, se elegir\u00e1 la  interpretaci\u00f3n de nombre de campo si se utiliza la sintaxis de nombre de campo, mientras que la funci\u00f3n se elegir\u00e1 si se usa la sintaxis de la  llamada de la funci\u00f3n. Sin embargo, las versiones de PostgreSQL antes de 11 siempre eligieron la interpretaci\u00f3n del nombre de campo, a  menos que la sintaxis de la llamada lo requiri\u00f3 para ser una llamada de  funci\u00f3n. Una forma de forzar la interpretaci\u00f3n de la funci\u00f3n en  versiones anteriores es esquema-calificar el nombre de la funci\u00f3n, es  decir, escribir <code>*</code>schema<code>*.*</code>func<code>*(*</code>compositevalue<code>*)</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/16.-Tipos%20compuestos/06.-Entrada%20de%20tipos%20compuestos%20y%20sintaxis%20de%20salida/","title":"06.-Entrada de tipos compuestos y sintaxis de salida","text":"<p>La representaci\u00f3n de texto externo de un valor compuesto consiste en  elementos que se interpretan de acuerdo con las reglas de conversi\u00f3n de  E/S para los tipos de campo individuales, adem\u00e1s de la decoraci\u00f3n que  indica la estructura compuesta. La decoraci\u00f3n consiste en par\u00e9ntesis ( <code>(</code>y <code>)</code>) alrededor de todo el valor, m\u00e1s comas (<code>,</code>) entre los objetos adyacentes. Whitespace fuera de los par\u00e9ntesis se  ignora, pero dentro de los par\u00e9ntesis se considera parte del valor de  campo, y podr\u00eda o no ser significativo dependiendo de las reglas de  conversi\u00f3n de entrada para el tipo de datos de campo. Por ejemplo, en:</p> <pre><code>\"(42) \"\n</code></pre> <p>el espacio blanco ser\u00e1 ignorado si el tipo de campo es entero, pero no si es texto.</p> <p>Como se muestra anteriormente, al escribir un valor compuesto se  pueden escribir comillas dobles en torno a cualquier valor de campo  individual. Usted debe hacerlo si el valor de campo de lo contrario confund\u00eda el analizador de valor compuesto. En particular, los campos que contienen par\u00e9ntesis,  comas, comillas dobles o barras de fondo deben ser doblemente citados.  Para poner una doble cotizaci\u00f3n o reacci\u00f3n en un valor de campo  compuesto citado, preceda con una reacci\u00f3n. (Adem\u00e1s, un par de comillas  dobles dentro de un valor de campo de doble cotidad se toma para  representar un car\u00e1cter de doble cotizaci\u00f3n, an\u00e1logamente a las reglas  para comillas individuales en cuerdas literales de SQL.)  Alternativamente, puede evitar citar y usar el escalote de la barra de  fondo para proteger todos los caracteres de datos que de otra manera se  tomar\u00edan como sintaxis compuesta.</p> <p>Un valor de campo completamente vac\u00edo (sin caracteres en absoluto entre las comas o par\u00e9ntesis) representa un NULL. Para escribir un  valor que es una cuerda vac\u00eda en lugar de NULL, escriba <code>\"\"</code>.</p> <p>La rutina de salida compuesta pondr\u00e1 comillas dobles alrededor de los valores de campo si son cadenas vac\u00edas o contienen par\u00e9ntesis,  comas, comillas dobles, barras o espacio blanco. (Haciendolo por el  espacio blanco no es esencial, sino que ayuda a la legibilidad.) Las  citas dobles y las barras de fondo incrustados en los valores de campo  se duplicar\u00e1n.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/16.-Tipos%20compuestos/06.-Entrada%20de%20tipos%20compuestos%20y%20sintaxis%20de%20salida/#nota","title":"Nota","text":"<p>Recuerde que lo que escribe en un comando SQL primero se  interpretar\u00e1 como una cadena literal, y luego como un compuesto. Esto  duplica el n\u00famero de barras de espaldas que necesita (asumiendo que se  utiliza la sintaxis de cadena de escape). Por ejemplo, para insertar un  <code>text</code>campo que contiene una doble cotizaci\u00f3n y una reacci\u00f3n en un valor compuesto, tendr\u00edas que escribir:</p> <pre><code>INSERT ... VALUES ('*'\"\"));\n</code></pre> <p>El procesador de cuerda-literal elimina un nivel de barras  trasero, de modo que lo que llega al analizador de valor compuesto  parece <code>(\"\\\"\\\\\")</code>. A su vez, la cuerda se alimed al  <code>text</code>La rutina de entrada del tipo de datos se convierte en <code>\"\\</code>. (Si est\u00e1bamos trabajando con un tipo de datos cuya rutina de entrada tambi\u00e9n trataba especialmente,  <code>bytea</code>por ejemplo, podr\u00edamos necesitar hasta ocho contradices en el comando para  conseguir una reacci\u00f3n en el campo compuesto almacenado.) La cita del  d\u00f3lar (v\u00e9ase la secci\u00f3n 4.1.2.4) se puede utilizar para evitar la necesidad de duplicar las barras de fondo.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/16.-Tipos%20compuestos/06.-Entrada%20de%20tipos%20compuestos%20y%20sintaxis%20de%20salida/#tip","title":"Tip","text":"<p>El  <code>ROW</code>La sintaxis constructora suele ser m\u00e1s f\u00e1cil de trabajar que la sintaxis  alfabetal compuesta al escribir valores compuestos en comandos SQL. En <code>ROW</code>, los valores de campo individuales se escriben de la misma manera que se escribir\u00edan cuando no los miembros de un compuesto.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/17.-Tipos%20de%20Rango/","title":"Index","text":"<p>Los tipos de rango son tipos de datos que representan una gama de valores de alg\u00fan tipo de elemento (llamado subtipo del rango). Por ejemplo, rangos de  <code>timestamp</code>podr\u00eda ser utilizado para representar los rangos de tiempo que una sala de  reuniones est\u00e1 reservada. En este caso el tipo de datos es  <code>tsrange</code>(corto para el rango de marcas de tiempo), y  <code>timestamp</code>es el subtipo. El subtipo debe tener un orden total para que est\u00e9 bien  definido si los valores de los elementos est\u00e1n dentro, antes o despu\u00e9s  de una serie de valores.</p> <p>Los tipos de rango son \u00fatiles porque representan muchos valores de  elementos en un solo valor de rango, y debido a que conceptos como  rangos superpuestos se pueden expresar claramente. El uso de rangos de  tiempo y fecha para fines de programaci\u00f3n es el ejemplo m\u00e1s claro; pero  los rangos de precios, la medici\u00f3n va desde un instrumento, y as\u00ed  sucesivamente tambi\u00e9n puede ser \u00fatil.</p> <p>Cada tipo de rango tiene un tipo multirango correspondiente. Un  multirango es una lista ordenada de rangos no vac\u00edos, no vac\u00edos. La  mayor\u00eda de los operadores de gama tambi\u00e9n trabajan en multirangoza, y  tienen algunas funciones propias.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/17.-Tipos%20de%20Rango/01.-Gama%20de%20distribuci%C3%B3n%20y%20tipos%20multidisco%20construidos/","title":"01.-Gama de distribuci\u00f3n y tipos multidisco construidos","text":"<p>PostgreSQL viene con los siguientes tipos de rango incorporados:</p> <ul> <li><code>int4range</code>- Rango de <code>integer</code>,  <code>int4multirange</code>- Multiordenaci\u00f3n correspondiente</li> <li><code>int8range</code>- Rango de <code>bigint</code>,  <code>int8multirange</code>- Multiordenaci\u00f3n correspondiente</li> <li><code>numrange</code>- Rango de <code>numeric</code>,  <code>nummultirange</code>- Multiordenaci\u00f3n correspondiente</li> <li><code>tsrange</code>- Rango de <code>timestamp without time zone</code>,  <code>tsmultirange</code>- Multiordenaci\u00f3n correspondiente</li> <li><code>tstzrange</code>- Rango de <code>timestamp with time zone</code>,  <code>tstzmultirange</code>- Multiordenaci\u00f3n correspondiente</li> <li><code>daterange</code>- Rango de <code>date</code>,  <code>datemultirange</code>- Multiordenaci\u00f3n correspondiente</li> </ul> <p>Adem\u00e1s, puede definir sus propios tipos de rango; consulte CREATE TYPE para m\u00e1s informaci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/17.-Tipos%20de%20Rango/02.-Ejemplos/","title":"02.-Ejemplos","text":"<pre><code>CREATE TABLE reservation (habitin, durante el tren);\nINSERT INTO reservation VALUES\n    (1108, '[2010-01-14:30, 2010-01-01 15:30)');\n\n- Contenci\u00f3n\nSELECT int4range (10, 20) y 3;\n\n- Sobrepasos\nSELECT numrange (11.1, 22.2) &amp;&amp; numrange (20,0, 30,0);\n\n- Extraer el l\u00edmite superior\nSELECT superior (int8yquilo (15, 25));\n\n- Calentar la intersecci\u00f3n\nSELECT int4range(10, 20) * int4range(15, 25);\n\n- Est\u00e1 vac\u00edo el campo?\nSELECT isempty(1, 5));\n</code></pre> <p>V\u00e9ase el cuadro 9.55 y el cuadro 9.57 para las listas completas de operadores y funciones sobre los tipos de rango.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/17.-Tipos%20de%20Rango/03.-Escenas%20inclusivas%20y%20exclusivas/","title":"03.-Escenas inclusivas y exclusivas","text":"<p>Cada rango no vac\u00edo  tiene dos l\u00edmites, el l\u00edmite inferior y el l\u00edmite superior. Todos los  puntos entre estos valores se incluyen en el rango. Un l\u00edmite inclusivo  significa que el punto l\u00edmite en s\u00ed est\u00e1 incluido tambi\u00e9n en el rango,  mientras que un l\u00edmite exclusivo significa que el punto l\u00edmite no est\u00e1  incluido en el rango.</p> <p>En la forma de texto de un rango, un l\u00edmite inferior inclusivo est\u00e1 representado por .<code>[</code>- mientras que un l\u00edmite inferior exclusivo est\u00e1 representado por<code>(</code>- . Del mismo modo, un l\u00edmite superior inclusivo est\u00e1 representado por .<code>]</code>Mientras que un l\u00edmite superior exclusivo est\u00e1 representado por<code>)</code>- . (Para m\u00e1s detalles puede obtener m\u00e1s detalles.)</p> <p>Las funciones  <code>lower_inc</code>y  <code>upper_inc</code>comprobar la inclusividad de los l\u00edmites inferior y superior de un valor de rango, respectivamente.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/17.-Tipos%20de%20Rango/03.-Escenas%20inclusivas%20y%20exclusivas/#_1","title":"03.-Escenas inclusivas y exclusivas","text":""},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/17.-Tipos%20de%20Rango/04.-Cora%20Ranges%20infinitos%20%28no%20consolidados%29/","title":"04.-Cora Ranges infinitos (no consolidados)","text":"<p>Se puede omitir el l\u00edmite inferior de un rango, lo que significa que  todos los valores menos que el l\u00edmite superior se incluyen en el rango,  por ejemplo, <code>(,3]</code>. Del mismo modo, si se omite el l\u00edmite superior del rango, entonces  todos los valores mayores que el l\u00edmite inferior se incluyen en el  rango. Si se omiten los l\u00edmites inferiores y superiores, se considera  que todos los valores del tipo de elemento est\u00e1n en el rango.  Especificar un l\u00edmite que falta como incluido se convierte  autom\u00e1ticamente en exclusivo, por ejemplo,  <code>[,]</code>se convierte en <code>(,)</code>. Usted puede pensar en estos valores que faltan como el infinito, pero  son valores de tipo de rango especial y se consideran que est\u00e1n m\u00e1s all\u00e1 de los valores de cualquier tipo de elemento de rango.</p> <p>Los tipos de infinityelemento que tienen la noci\u00f3n de infinidad pueden utilizarlos como valores de l\u00edmites expl\u00edcitos. Por ejemplo, con rangos de marcas de tiempo,  <code>[today,infinity)</code>excluye la especial  <code>timestamp</code>valor <code>infinity</code>, mientras que  <code>[today,infinity]</code>incluirlo, al igual que  <code>[today,)</code>y <code>[today,]</code>.</p> <p>Las funciones  <code>lower_inf</code>y  <code>upper_inf</code>ensayo para l\u00edmites inferiores y superiores infinitos de un rango, respectivamente.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/17.-Tipos%20de%20Rango/05.-Aparcar%20entrada-producto/","title":"05.-Aparcar entrada-producto","text":"<p>La entrada para un valor de rango debe seguir uno de los siguientes patrones:</p> <pre><code>(lower-bound,upper-bound)\n(lower-bound,upper-bound]\n[lower-bound,upper-bound)\n[lower-bound,upper-bound]\nvac\u00edas\n</code></pre> <p>Los par\u00e9ntesis o par\u00e9ntesis indican si los l\u00edmites inferior y  superior son exclusivos o inclusivos, como se describe anteriormente.  Observe que el patr\u00f3n final es <code>empty</code>, que representa un rango vac\u00edo (un rango que no contiene puntos).</p> <p>El  <code>lower-bound</code>puede ser una cadena que sea una entrada v\u00e1lida para el subtipo, o vaciado para indicar no un l\u00edmite inferior. Del mismo modo,  <code>upper-bound</code>puede ser una cadena que sea una entrada v\u00e1lida para el subtipo, o vac\u00eda para indicar no un l\u00edmite superior.</p> <p>Cada valor encuaderecido se puede citar usando  <code>\"</code>(comiaci\u00f3n doble) caracteres. Esto es necesario si el valor encuadre contiene  par\u00e9ntesis, corchetes, comas, comillas dobles o contraslas, ya que estos caracteres de otra manera se tomar\u00edan como parte de la sintaxis de  rango. Para poner una doble cotizaci\u00f3n o reacci\u00f3n en un valor encuadrado cotizado, preced\u00edcalo con una reacci\u00f3n. (Adem\u00e1s, un par de comillas  dobles dentro de un valor encuadecido de doble cotizaci\u00f3n se toma para  representar un car\u00e1cter de doble cotizaci\u00f3n, an\u00e1logamente a las reglas  para comillas simples en cuerdas literales SQL.) Alternativamente, puede evitar citar y usar el descabamiento-escapado para proteger todos los  caracteres de datos que de otra manera se tomar\u00edan como sintaxis de  rango. Adem\u00e1s, para escribir un valor encuadrado que es una cadena  vac\u00eda, escriba <code>\"\"</code>, ya que escribir nada significa un l\u00edmite infinito.</p> <p>Whitespace est\u00e1 permitido antes y despu\u00e9s del valor de rango,  pero cualquier espacio en blanco entre los par\u00e9ntesis o soportes se toma como parte del valor de l\u00edmite inferior o superior. (Dependiendo del  tipo de elemento, podr\u00eda o no ser significativo.)</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/17.-Tipos%20de%20Rango/05.-Aparcar%20entrada-producto/#nota","title":"Nota","text":"<p>Estas reglas son muy similares a las de escribir valores de campo en literales de tipo compuesto. V\u00e9ase la secci\u00f3n 8.16.6 para que le presente un comentario adicional.</p> <p>Ejemplos:</p> <pre><code>-- incluye 3, no incluye 7, e incluye todos los puntos en el medio\nSELECT '[3,7) '::int4range;\n\n-- no incluye ni 3 o 7, pero incluye todos los puntos en el medio\nSELECT '(3,7) ':int4range;\n\n-- incluye s\u00f3lo el punto 4 \u00fanico\nSELECT '[4,4]':int4range;\n\n-- no incluye puntos (y se normalizar\u00e1 a 'vac\u00eda')\nSELECT '[4,4) ':int4range;\n</code></pre> <p>La entrada para un multirango son los soportes rizados ( <code>{</code>y <code>}</code>) que contienen rangos cero o m\u00e1s v\u00e1lidos, separados por comas. El  espacio blanco est\u00e1 permitido alrededor de los soportes y comas. Esto  pretende recordar la sintaxis de array, aunque los multirancos son mucho m\u00e1s simples: tienen una sola dimensi\u00f3n y no hay necesidad de citar su  contenido. (Sin embargo, los l\u00edmites de sus rangos pueden citarse como  anteriores.)</p> <p>Ejemplos:</p> <pre><code>SELECT 'A'::int4multirange;\nSELECT '.[3,7) '::int4multirange;\nSELECT 'A[3,7, [8,9) ':int4multirange;\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/17.-Tipos%20de%20Rango/06.-Construcci%C3%B3n%20de%20rangos%20y%20Multidiscos/","title":"06.-Construcci\u00f3n de rangos y Multidiscos","text":"<p>Cada tipo de rango tiene una funci\u00f3n de constructor con el mismo  nombre que el tipo de rango. El uso de la funci\u00f3n de constructor es a  menudo m\u00e1s conveniente que escribir una constante literal de rango, ya  que evita la necesidad de una cita adicional de los valores  consolidados. La funci\u00f3n constructora acepta dos o tres argumentos. La  forma de dos engures construye un rango en forma est\u00e1ndar (incluyendo un l\u00edmite inferior, exclusivo de l\u00edmites superior), mientras que la forma  de tresargumentos construye un rango con l\u00edmites de la forma  especificada por el tercer argumento. El tercer argumento debe ser uno  de los hilos.<code>()</code>-<code>(]</code>-<code>[)</code>- O<code>[]</code>- . Por ejemplo:</p> <pre><code>-- La forma completa es: encuaderado inferior, l\u00edmite superior y argumento de texto que indica\n- inclusividad/exclusividad de los l\u00edmites.\nSELECT numrange (1.0, 14.0, '(]');\n\n-- Si se omite el tercer argumento, se asume '[)'.\nSELECT numrange(1.0, 14.0);\n\n-- Aunque '(]' se especifica aqu\u00ed, en la pantalla el valor se convertir\u00e1 en\n-- forma can\u00f3nica, ya que int8range es un tipo de rango discreto (ver m\u00e1s abajo).\nSELECT int8range (1, 14, '(]');\n\n-- El uso de NULL para cualquiera de los dos encuadres hace que el rango no est\u00e9 atado en ese lado.\nSELECT numrange (NULL, 2.2);\n</code></pre> <p>Cada tipo de rango tambi\u00e9n tiene un constructor multirango con el mismo nombre que el tipo multirango. La funci\u00f3n de constructor toma  cero o m\u00e1s argumentos que son todos los rangos del tipo apropiado. Por  ejemplo:</p> <pre><code>SELECT nummultirange ();\nSELECT nummultirange(numrange(1.0, 14.0));\nSELECT nummultirange(1, 14,0), numrange(20,0, 25.0);\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/17.-Tipos%20de%20Rango/07.-Tipos%20de%20rango%20discretos/","title":"07.-Tipos de rango discretos","text":"<p>Un rango discreto es aquel cuyo tipo de elemento tiene un paso bien definido, como  <code>integer</code>o o <code>date</code>. En estos tipos se pueden decir que dos elementos son adyacentes, cuando no hay valores v\u00e1lidos entre ellos. Esto contrasta con los rangos  continuos, donde siempre (o casi siempre) es posible identificar otros  valores de elementos entre dos valores dados. Por ejemplo, un rango  sobre el  <code>numeric</code>tipo es continuo, al igual que un rango de <code>timestamp</code>. (A\u00fan, sin embargo  <code>timestamp</code>tiene una precisi\u00f3n limitada, y por lo tanto podr\u00eda ser tratado te\u00f3ricamente  como discreto, es mejor considerarlo continuo ya que el tama\u00f1o del paso  normalmente no es de inter\u00e9s.)</p> <p>Otra forma de pensar en un tipo de rango discreto es que hay una idea clara de un \u201cnext\u201dpreviousvalor anterior para cada valor de elemento. Sabiendo que, es posible convertir entre  representaciones inclusivas y exclusivas de los l\u00edmites de una gama,  eligiendo el valor de elemento siguiente o anterior en lugar del  originalmente dado. Por ejemplo, en un tipo de rango entero  <code>[4,8]</code>y  <code>(3,9)</code>denota el mismo conjunto de valores; pero esto no ser\u00eda as\u00ed para un rango sobre num\u00e9rico.</p> <p>Un tipo de rango discreto debe tener una funci\u00f3n de canonicalizaci\u00f3n que sea consciente del tama\u00f1o de paso deseado para el tipo de elemento. La funci\u00f3n de canonicalizaci\u00f3n se encarga de convertir valores  equivalentes del tipo de rango para tener representaciones id\u00e9nticas, en particular encuadres consistentemente inclusivos o exclusivos. Si no se especifica una funci\u00f3n de canonicalizaci\u00f3n, entonces los rangos con  diferentes formatos siempre ser\u00e1n tratados como desiguales, aunque  podr\u00edan representar el mismo conjunto de valores en la realidad.</p> <p>Los tipos de rango incorporados <code>int4range</code>, <code>int8range</code>, y  <code>daterange</code>todos usen una forma can\u00f3nica que incluya el l\u00edmite inferior y excluya el l\u00edmite superior; es decir, <code>[)</code>. Sin embargo, los tipos de rango definidos por el usuario pueden utilizar otras convenciones.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/17.-Tipos%20de%20Rango/08.-Definir%20nuevos%20tipos%20de%20rango/","title":"08.-Definir nuevos tipos de rango","text":"<p>Los usuarios pueden definir sus propios tipos de rango. La raz\u00f3n m\u00e1s  com\u00fan para hacer esto es utilizar rangos sobre subtipos no  proporcionados entre los tipos de rango incorporados. Por ejemplo, para  definir un nuevo tipo de rango de subtipo <code>float8</code>:</p> <pre><code>CREATE TYPE floatrange AS RANGE (\n    subtipo = flotador8,\n    subtype.diff = float8mi\n);\n\nSELECT '[1.234, 5.678]'::floatrange;\n</code></pre> <p>Porque  <code>float8</code>no tiene un paso significativo, no definimos una funci\u00f3n de canonicalizaci\u00f3n en este ejemplo.</p> <p>Cuando definas tu propia gama obtienes autom\u00e1ticamente un tipo multiranquio correspondiente.</p> <p>Definir su propio tipo de rango tambi\u00e9n le permite especificar  una clase de operador de \u00e1rbol B diferente de su tipo para usar o  cotejar, para cambiar el orden de clasificaci\u00f3n que determina qu\u00e9  valores caen en un rango determinado.</p> <p>Si se considera que el subtipo tiene valores discretos en lugar de continuos,  <code>CREATE TYPE</code>el comando debe especificar a  <code>canonical</code>funci\u00f3n. La funci\u00f3n de canonicalizaci\u00f3n toma un valor de rango de entrada, y  debe devolver un valor de rango equivalente que puede tener diferentes  l\u00edmites y formateo. La salida can\u00f3nica para dos rangos que representan  el mismo conjunto de valores, por ejemplo los rangos enteros  <code>[1, 7]</code>y <code>[1, 8)</code>, debe ser id\u00e9ntico. No importa qu\u00e9 representaci\u00f3n elijas ser el  can\u00f3nico, siempre y cuando dos valores equivalentes con diferentes  formatos sean siempre mapeados al mismo valor con el mismo formato.  Adem\u00e1s de ajustar el formato de l\u00edmites inclusivos/exclusivos, una  funci\u00f3n de canonicalizaci\u00f3n podr\u00eda redondear los valores de los l\u00edmites, en caso de que el tama\u00f1o de paso deseado sea mayor que lo que el  subtipo es capaz de almacenar. Por ejemplo, un tipo de rango sobre  <code>timestamp</code>podr\u00eda definirse para tener un tama\u00f1o de paso de una hora, en cuyo caso la  funci\u00f3n de canonicalizaci\u00f3n tendr\u00eda que redondear l\u00edmites que no fueran  un m\u00faltiplo de una hora, o tal vez lanzar un error en su lugar.</p> <p>Adem\u00e1s, cualquier tipo de rango que se deba utilizar con los \u00edndices GiST o SP-GiST debe definir una diferencia de subtipo, o <code>subtype_diff</code>, funci\u00f3n. (El \u00edndice seguir\u00e1 funcionando sin <code>subtype_diff</code>, pero es probable que sea considerablemente menos eficiente que si se  proporciona una funci\u00f3n diferenciada.) La funci\u00f3n de diferencia de  subtipo toma dos valores de entrada del subtipo, y devuelve su  diferencia (es decir,  <code>X</code>menos <code>Y</code>) representada como  <code>float8</code>valor. En nuestro ejemplo anterior, la funci\u00f3n  <code>float8mi</code>que subyace a la normalidad  <code>float8</code>Menos de operador se puede utilizar; pero para cualquier otro subtipo, ser\u00eda  necesaria alguna conversi\u00f3n de tipo. Algunos pensamientos creativos  sobre c\u00f3mo representar las diferencias como los n\u00fameros tambi\u00e9n podr\u00edan  ser necesarios. En la mayor medida posible, el  <code>subtype_diff</code>funci\u00f3n debe estar de acuerdo con el orden de clasificaci\u00f3n que implica la  clase de operador y la recopilaci\u00f3n seleccionada; es decir, su resultado debe ser positivo siempre que su primer argumento sea mayor que su  segundo seg\u00fan el orden de clasificaci\u00f3n.</p> <p>Un ejemplo menos simplificado de una  <code>subtype_diff</code>funci\u00f3n es:</p> <pre><code>CREATE FUNCTION time.subtype.diff(x tiempo, y hora)\n'SELECT EXTRACT(EPOCH FROM (x - y))' LANGUAGE sql STRICT IMMUTABLE;\n\nCREATE TIPO tiempo de la gama AS RANGE (\n    subtipo = tiempo,\n    subtype.diff = time.subtype.diff\n);\n\nSELECT '[11:10, 23:00]::timerange;\n</code></pre> <p>Consulte CREATE TIPO para obtener m\u00e1s informaci\u00f3n sobre la creaci\u00f3n de tipos de rango.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/17.-Tipos%20de%20Rango/09.-Indiceci%C3%B3n/","title":"09.-Indiceci\u00f3n","text":"<p>Los \u00edndices GiST y SP-GiST se pueden crear para columnas de tablas de tipos de rango. Los \u00edndices GiST tambi\u00e9n se pueden crear para columnas  de tablas de tipos multirango. Por ejemplo, para crear un \u00edndice GiST:</p> <pre><code>CREATE INDEX reservation.idx ON reservation USING GIST (durante);\n</code></pre> <p>Un \u00edndice GiST o SP-GiST en los rangos puede acelerar las consultas que involucran a estos operadores de rango: <code>=</code>, <code>&amp;&amp;</code>, <code>&lt;@</code>, <code>@&gt;</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>-|-</code>, <code>&amp;&lt;</code>, y <code>&amp;&gt;</code>. Un \u00edndice GiST en varios acuerdos puede acelerar las consultas que  involucran al mismo conjunto de operadores multi-rango. Un \u00edndice GiST  en los rangos y el \u00edndice GiST en multirango tambi\u00e9n pueden acelerar las consultas que involucran estos rangos de tipo cruzado a operadores  multi-raneja y multi-raneja para variar correspondientemente: <code>&amp;&amp;</code>, <code>&lt;@</code>, <code>@&gt;</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>-|-</code>, <code>&amp;&lt;</code>, y <code>&amp;&gt;</code>. V\u00e9ase el cuadro 9.55 para m\u00e1s informaci\u00f3n.</p> <p>Adem\u00e1s, se pueden crear \u00edndices de \u00e1rbol B y hash para columnas  de tabla de tipos de rango. Para estos tipos de \u00edndice, b\u00e1sicamente la  \u00fanica operaci\u00f3n de rango \u00fatil es la igualdad. Hay un orden de tipo B  definido para los valores de rango, con correspondientes  <code>&lt;</code>y  <code>&gt;</code>operadores, pero el ordenamiento es bastante arbitrario y no suele ser \u00fatil en el  mundo real. El soporte de \u00e1rbol B y hash de los tipos de rango est\u00e1  destinado principalmente a permitir la clasificaci\u00f3n y la reducci\u00f3n  interna en consultas, en lugar de la creaci\u00f3n de \u00edndices reales.</p>"},{"location":"02.-El%20lenguaje%20SQL/05.-Tipos%20de%20Datos/17.-Tipos%20de%20Rango/10.-Limitaciones%20en%20las%20cordilleras/","title":"10.-Limitaciones en las cordilleras","text":"<p>Mientras que  <code>UNIQUE</code>es una restricci\u00f3n natural para los valores escalares, por lo general no  es adecuado para los tipos de rango. En cambio, una restricci\u00f3n de  exclusi\u00f3n es a menudo m\u00e1s apropiada (ver CREATE TABLE ... CONSTRAINT ... EXCLUDE). Las restricciones de exclusi\u00f3n permiten la especificaci\u00f3n de limitaciones como la no superaci\u00f3n en un tipo de rango. Por ejemplo:</p> <pre><code>CREATE TABLE reservation (\n    durante el alcance,\n    EXCLUDE USING GIST (durante con &amp;&amp;)\n);\n</code></pre> <p>Esta limitaci\u00f3n impedir\u00e1 que los valores superpuestos existan en el cuadro al mismo tiempo:</p> <pre><code>INSERT INTO reservation VALUES\n    ('[2010-01-01 11:30, 2010-01-01 15:00)');\nINSERT 0 1\n\nINSERT INTO reservation VALUES\n    ('[2010-01-01 14:45, 2010-01-01 15:45)');\nERROR: el valor clave en conflicto viola la restricci\u00f3n de exclusi\u00f3n \"reservaduring-excl\"\nDETAIL: Clave (durante)=([\"2010-01-01 14:45:00\",\"2010-01-01 15:45:00\") conflictos\ncon la clave existente (durante)=([\"2010-01-01 11:30:00\",\"2010-01-01 15:00:00\")).\n</code></pre> <p>Puedes usar el  <code>btree_gist</code>extensi\u00f3n para definir las restricciones de exclusi\u00f3n a los tipos de datos  escalar simples, que pueden combinarse con exclusiones de rango para la  m\u00e1xima flexibilidad. Por ejemplo, despu\u00e9s de  <code>btree_gist</code>est\u00e1 instalada, la siguiente restricci\u00f3n rechazar\u00e1 los rangos superpuestos  s\u00f3lo si los n\u00fameros de la sala de reuniones son iguales:</p> <pre><code>CREATE EXTENSION btree-gist;\nCREATE TABLE habitaci\u00f3n-reservaci\u00f3n (\n    texto de la habitaci\u00f3n,\n    durante el alcance,\n    EXCLUDE USING GIST (establecido con =, durante con y)\n);\n\nINSERT INTO habitaci\u00f3n VALUES\n    ('123A', '[2010-01-01 14:00, 2010-01-01 15:00)');\nINSERT 0 1\n\nINSERT INTO habitaci\u00f3n VALUES\n    ('123A', '[2010-01-01 14:30, 2010-01-01 15:30)');\nERROR: el valor clave en conflicto viola la restricci\u00f3n de exclusi\u00f3n \"room-reservation-room-during-excl\"\nDETALLE: Clave (habitaci\u00f3n, durante)=(123A, [\"2010-01-01 14:30:00\",\"2010-01-01 15:30:00\") conflictos\ncon la clave existente (habitaci\u00f3n, durante)=(123A, [\"2010-01-01 14:00:00\",\"2010-01-01 15:00:00\")).\n\nINSERT INTO habitaci\u00f3n VALUES\n    ('123B', '[2010-01-01 14:30, 2010-01-01 15:30)');\nINSERT 0 1\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/","title":"Index","text":"<p>PostgreSQL proporciona un gran n\u00famero de funciones y operadores para los tipos de  datos incorporados. Este cap\u00edtulo describe la mayor\u00eda de ellos, aunque  en las secciones pertinentes del manual aparecen funciones adicionales  para fines especiales. Los usuarios tambi\u00e9n pueden definir sus propias  funciones y operadores, como se describe en la Parte V. Los comandos psql  <code>\\df</code>y  <code>\\do</code>se puede utilizar para enumerar todas las funciones y operadores disponibles, respectivamente.</p> <p>La notaci\u00f3n utilizada en todo el cap\u00edtulo para describir los tipos  de argumentos y datos de resultados de una funci\u00f3n u operador es as\u00ed:</p> <pre><code> repeat( text,  integer) . text\n</code></pre> <p>que dice que la funci\u00f3n  <code>repeat</code>toma un texto y un argumento entero y devuelve el resultado de texto tipo.  La flecha derecha tambi\u00e9n se utiliza para indicar el resultado de un  ejemplo, as\u00ed:</p> <pre><code>repetici\u00f3n('Pg', 4) PgPgPgPg\n</code></pre> <p>Si le preocupa la portabilidad, tenga en cuenta que la mayor\u00eda de  las funciones y operadores descritos en este cap\u00edtulo, con la excepci\u00f3n  de los operadores de aritm\u00e9tica y comparaci\u00f3n m\u00e1s triviales y algunas  funciones expl\u00edcitamente marcadas, no se especifican por la  SQLest\u00e1ndar. Parte de esta funcionalidad extendida est\u00e1 presente en otros  SQLsistemas de gesti\u00f3n de bases de datos, y en muchos casos esta funcionalidad es  compatible y coherente entre las diversas implementaciones.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/01.-Operadores%20l%C3%B3gicos/","title":"01.-Operadores l\u00f3gicos","text":"<p>Los operadores l\u00f3gicos habituales est\u00e1n disponibles:      </p> <pre><code>   booleanANDboolean- \n   booleanbooleanORboolean- \n  booleanNOTboolean- boolean\n</code></pre> <p>SQLutiliza un sistema l\u00f3gico de tres valorados con verdadero, falso, y <code>null</code>, que representa - desconocido - . Observa las siguientes tablas de la verdad:</p> <code>a</code> <code>b</code> <code>a</code>Y <code>a</code>O O o TRUE TRUE TRUE TRUE TRUE FALSE FALSE TRUE TRUE NULL NULL TRUE FALSE FALSE FALSE FALSE FALSE NULL FALSE NULL NULL NULL NULL NULL <code>a</code> NO <code>a</code> TRUE FALSE FALSE TRUE NULL NULL <p>Los operadores  <code>AND</code>y  <code>OR</code>son conmutativos, es decir, se puede cambiar los operandidores izquierdo y  derecho sin afectar el resultado. (Sin embargo, no est\u00e1 garantizado que  el operando izquierdo sea evaluado antes del operando derecho. Consulte la secci\u00f3n 4.2.14 para m\u00e1s informaci\u00f3n sobre el orden de evaluaci\u00f3n de las subexpresiones.)</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/02.-Funciones%20y%20operadores%20de%20comparaci%C3%B3n/","title":"02.-Funciones y operadores de comparaci\u00f3n","text":"<p>Los operadores de comparaci\u00f3n habituales est\u00e1n disponibles, como se muestra en el .1.</p> <p>Cuadro 9.1. Operadores de comparaci\u00f3n</p> Operadora Descripci\u00f3n <code>datatype</code><code>&lt;</code><code>datatype</code>- <code>boolean</code> Menos que <code>datatype</code><code>&gt;</code><code>datatype</code>- <code>boolean</code> M\u00e1s grande que <code>datatype</code><code>&lt;=</code><code>datatype</code>- <code>boolean</code> Menos o igual a <code>datatype</code><code>&gt;=</code><code>datatype</code>- <code>boolean</code> M\u00e1s que o igual a <code>datatype</code><code>=</code><code>datatype</code>- <code>boolean</code> Igual <code>datatype</code><code>&lt;&gt;</code><code>datatype</code>- <code>boolean</code> No igual <code>datatype</code><code>!=</code><code>datatype</code>- <code>boolean</code> No igual"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/02.-Funciones%20y%20operadores%20de%20comparaci%C3%B3n/#nota","title":"Nota","text":"<p><code>&lt;&gt;</code>es la notaci\u00f3n est\u00e1ndar de SQL para no igual.  <code>!=</code>es un alias, que se convierte a  <code>&lt;&gt;</code>en una etapa muy temprana de parsing. Por lo tanto, no es posible implementar  <code>!=</code>y  <code>&lt;&gt;</code>operadores que hacen cosas diferentes.</p> <p>Estos operadores de comparaci\u00f3n est\u00e1n disponibles para todos los  tipos de datos incorporados que tienen un pedido natural, incluyendo  tipos num\u00e9ricos, de cadena y fecha/hora. Adem\u00e1s, los arrays, tipos  compuestos y rangos se pueden comparar si sus tipos de datos de  componentes son comparables.</p> <p>Por lo general, tambi\u00e9n es posible comparar los valores de los tipos de datos relacionados; por ejemplo    <code>integer``&gt;``bigint</code>trabajar\u00e1. Algunos casos de este tipo se llevan a cabo directamente por operadores  comparaci\u00f3n , pero si no se dispone de dicho operador, el analizador cotecer\u00e1 el tipo menos general al tipo m\u00e1s general y aplicar\u00e1 el operador de comparaci\u00f3n de este \u00faltimo.</p> <p>Como se ha indicado anteriormente, todos los operadores de comparaci\u00f3n son operadores binarios que devuelven valores de tipo <code>boolean</code>. As\u00ed, expresiones como  <code>1 &lt; 2 &lt; 3</code>no son v\u00e1lidas (porque no hay  <code>&lt;</code>operador para comparar un valor booleano con <code>3</code>). Util\u00edcese el  <code>BETWEEN</code>predicados que se muestran a continuaci\u00f3n para realizar pruebas de rango.</p> <p>Tambi\u00e9n hay algunos predicados de comparaci\u00f3n, como se muestra en el cuadro 9.2. Estos se comportan muy parecidos a los operadores, pero tienen una sintaxis especial ordenada por el est\u00e1ndar SQL.</p> <p>Cuadro 9.2. Comparaci\u00f3n Predicatos</p> Predicar              Descripci\u00f3n              Ejemplos (s) <code>datatype</code><code>BETWEEN</code><code>datatype</code><code>AND</code><code>datatype</code>- <code>boolean</code>              Entre (incluido los criterios finales de rango).               <code>2 BETWEEN 1 AND 3</code>-                <code>2 BETWEEN 3 AND 1</code>- <code>datatype</code><code>NOT BETWEEN</code><code>datatype</code><code>AND</code><code>datatype</code>- <code>boolean</code>              No entre (la negaci\u00f3n de <code>BETWEEN</code>).               <code>2 NOT BETWEEN 1 AND 3</code>- <code>datatype</code><code>BETWEEN SYMMETRIC</code><code>datatype</code><code>AND</code><code>datatype</code>- <code>boolean</code>              Entre, despu\u00e9s de ordenar los dos valores de endpoint.               <code>2 BETWEEN SYMMETRIC 3 AND 1</code>- <code>datatype</code><code>NOT BETWEEN SYMMETRIC</code><code>datatype</code><code>AND</code><code>datatype</code>- <code>boolean</code>              No entre, despu\u00e9s de ordenar los dos valores de endpoint.               <code>2 NOT BETWEEN SYMMETRIC 3 AND 1</code>- <code>datatype</code><code>IS DISTINCT FROM</code><code>datatype</code>- <code>boolean</code>              No igual, tratando nulo como un valor comparable.               <code>1 IS DISTINCT FROM NULL</code>-  <code>t</code>(en lugar de <code>NULL</code>)               <code>NULL IS DISTINCT FROM NULL</code>-  <code>f</code>(en lugar de <code>NULL</code>) <code>datatype</code><code>IS NOT DISTINCT FROM</code><code>datatype</code>- <code>boolean</code>              Igual, tratando null como un valor comparable.               <code>1 IS NOT DISTINCT FROM NULL</code>-  <code>f</code>(en lugar de <code>NULL</code>)               <code>NULL IS NOT DISTINCT FROM NULL</code>-  <code>t</code>(en lugar de <code>NULL</code>) <code>datatype</code><code>IS NULL</code>- <code>boolean</code>              Pruebe si el valor es nulo.               <code>1.5 IS NULL</code>- <code>datatype</code><code>IS NOT NULL</code>- <code>boolean</code>              Pruebe si el valor no es nulo.               <code>'null' IS NOT NULL</code>- <code>datatype</code><code>ISNULL</code>- <code>boolean</code>              Pruebe si el valor es nulo (sintaxis no est\u00e1ndar). <code>datatype</code><code>NOTNULL</code>- <code>boolean</code>              Pruebe si el valor no es nulo (sintaxis no est\u00e1ndar). <code>boolean``IS TRUE</code>- <code>boolean</code>              Pruebe si la expresi\u00f3n booleana se produce verdadera.               <code>true IS TRUE</code>-                <code>NULL::boolean IS TRUE</code>-  <code>f</code>(en lugar de <code>NULL</code>) <code>boolean``IS NOT TRUE</code>- <code>boolean</code>              Pruebe si la expresi\u00f3n booleana produce falso o desconocido.               <code>true IS NOT TRUE</code>-                <code>NULL::boolean IS NOT TRUE</code>-  <code>t</code>(en lugar de <code>NULL</code>) <code>boolean``IS FALSE</code>- <code>boolean</code>              Pruebe si la expresi\u00f3n booleana rinde falso.               <code>true IS FALSE</code>-                <code>NULL::boolean IS FALSE</code>-  <code>f</code>(en lugar de <code>NULL</code>) <code>boolean``IS NOT FALSE</code>- <code>boolean</code>              Pruebe si la expresi\u00f3n booleana se produce verdadera o desconocida.               <code>true IS NOT FALSE</code>-                <code>NULL::boolean IS NOT FALSE</code>-  <code>t</code>(en lugar de <code>NULL</code>) <code>boolean``IS UNKNOWN</code>- <code>boolean</code>              Pon a prueba si la expresi\u00f3n booleana produce inc\u00f3gnita.               <code>true IS UNKNOWN</code>-                <code>NULL::boolean IS UNKNOWN</code>-  <code>t</code>(en lugar de <code>NULL</code>) <code>boolean``IS NOT UNKNOWN</code>- <code>boolean</code>              Pruebe si la expresi\u00f3n booleana cede verdadera o falsa.               <code>true IS NOT UNKNOWN</code>-                <code>NULL::boolean IS NOT UNKNOWN</code>-  <code>f</code>(en lugar de <code>NULL</code>) <p>El  <code>BETWEEN</code>predicate simplifia las pruebas de rango:</p> <pre><code> aBETWEEN  xY y\n</code></pre> <p>es equivalente a</p> <pre><code> a.=  xY  a.= y\n</code></pre> <p>Note que  <code>BETWEEN</code>trata los valores de endpoint incluidos en el rango.  <code>BETWEEN SYMMETRIC</code>es como  <code>BETWEEN</code>excepto que no se exige que el argumento a la izquierda de  <code>AND</code>ser menos o igual al argumento de la derecha. Si no lo es, esos dos  argumentos se intercambian autom\u00e1ticamente, de modo que siempre se  implica un rango no vac\u00edo.</p> <p>Las diversas variantes de  <code>BETWEEN</code>se aplican en t\u00e9rminos de los operadores de comparaci\u00f3n ordinaria, y por  lo tanto funcionar\u00e1n para cualquier tipo de dato que pueda compararse.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/02.-Funciones%20y%20operadores%20de%20comparaci%C3%B3n/#nota_1","title":"Nota","text":"<p>El uso de  <code>AND</code>en el  <code>BETWEEN</code>sintaxis crea una ambiguedad con el uso de  <code>AND</code>como operador l\u00f3gico. Para resolver esto, s\u00f3lo un conjunto limitado de tipos de expresi\u00f3n se permiten como el segundo argumento de un  <code>BETWEEN</code>cl\u00e1usula. Si necesitas escribir una subexpresi\u00f3n m\u00e1s compleja en <code>BETWEEN</code>, escribe par\u00e9ntesis alrededor de la sub-expresi\u00f3n.</p> <p>Los operadores de comparaci\u00f3n ordinaria rinden nulo (significando la \"se\u00f1alidad no es cierto o falso, cuando cualquiera de los dos insumos es nulo. Por ejemplo,  <code>7 = NULL</code>rendimientos nulos, al igual que <code>7 &lt;&gt; NULL</code>. Cuando este comportamiento no sea adecuado, utilice el  <code>IS [ NOT ] DISTINCT FROM</code>predicados:</p> <pre><code> aES DISTINCT DE \n baNO DISTINCT DESDE b\n</code></pre> <p>Para entradas no nulas,  <code>IS DISTINCT FROM</code>es lo mismo que el  <code>&lt;&gt;</code>operador. Sin embargo, si ambas entradas son nulas devuelve falsa, y si s\u00f3lo una  entrada es nula devuelve la verdad. Del mismo modo,  <code>IS NOT DISTINCT FROM</code>es id\u00e9ntico a  <code>=</code>para entradas no nulas, pero devuelve la verdad cuando ambas entradas son  nulas, y falsas cuando s\u00f3lo una entrada es nula. Por lo tanto, estos  predicados act\u00faan efectivamente como si fueran nulos un valor de datos  normal, en lugar de \"desconoc\u00edan\".</p> <p>\u200b    Para comprobar si un valor es nulo o no, utilice los predicados:</p> <pre><code> expressionES NULL\n expressionNO ES NULL\n</code></pre> <p>o los determinantes equivalentes, pero no est\u00e1ndar:</p> <pre><code> expressionISNULL\n expressionNOTNULL\n</code></pre> <p>No notescriba  <code>*</code>expression<code>* = NULL</code>porque  <code>NULL</code>no es igual a <code>NULL</code>. (El valor nulo representa un valor desconocido, y no se sabe si dos valores desconocidos son iguales.)</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/02.-Funciones%20y%20operadores%20de%20comparaci%C3%B3n/#tip","title":"Tip","text":"<p>Algunas aplicaciones podr\u00edan esperarse que  <code>*</code>expression<code>* = NULL</code>devuelve verdad si  <code>expression</code>eval\u00faa el valor nulo. Se recomienda encarecidamente que estas aplicaciones se  modifiquen para cumplir con la norma SQL. Sin embargo, si eso no se  puede hacer, la variable de configuraci\u00f3n de transform.null-equals est\u00e1 disponible. Si est\u00e1 habilitado, PostgreSQL se convertir\u00e1  <code>x = NULL</code>cl\u00e1usulas a <code>x IS NULL</code>.</p> <p>Si el  <code>expression</code>est\u00e1 en valor de filas, entonces  <code>IS NULL</code>es cierto cuando la expresi\u00f3n de la fila misma es nula o cuando todos los campos de la fila son nulos, mientras que  <code>IS NOT NULL</code>es cierto cuando la expresi\u00f3n de la fila en s\u00ed no es nula y todos los  campos de la fila no son nulos. Debido a este comportamiento,  <code>IS NULL</code>y  <code>IS NOT NULL</code>no siempre devuelve resultados inversos para expresiones valoradas en  fila; en particular, una expresi\u00f3n valorada en fila que contiene tanto  campos nulos como no nulos devolver\u00e1 falso para ambas pruebas. En  algunos casos, puede ser preferible escribir   <code>row</code><code>IS DISTINCT FROM NULL</code>o o  <code>row</code><code>IS NOT DISTINCT FROM NULL</code>, que simplemente comprobar\u00e1 si el valor total de la fila es nulo sin ninguna prueba adicional en los campos de fila.</p> <p>\u200b      Los valores booleanos tambi\u00e9n se pueden probar usando los predicados</p> <pre><code> boolean_expressionES VERDADERA\n boolean_expressionNO es VERDADERA\n boolean_expressionES FALSE\n boolean_expressionNO ES FALSE\n boolean_expressionES UNKNOWN\n boolean_expressionNO ES UNKNOWN\n</code></pre> <p>Estos siempre volver\u00e1n verdaderos o falsos, nunca un valor nulo,  incluso cuando el operando es nulo. Una entrada nula se trata como el  valor l\u00f3gico.unknown Note que  <code>IS UNKNOWN</code>y  <code>IS NOT UNKNOWN</code>son efectivamente los mismos que  <code>IS NULL</code>y <code>IS NOT NULL</code>, respectivamente, excepto que la expresi\u00f3n de entrada debe ser de tipo booleano.</p> <p>Tambi\u00e9n se dispone de algunas funciones relacionadas con la comparaci\u00f3n, como se muestra en el cuadro 9.3.</p> <p>Cuadro 9.3. Funciones de comparaci\u00f3n</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>num_nonnulls</code>(   <code>VARIADIC``\"any\"</code>) . <code>integer</code>              Devuelve el n\u00famero de argumentos no nulos.               <code>num_nonnulls(1, NULL, 2)</code>- <code>num_nulls</code>(   <code>VARIADIC``\"any\"</code>) . <code>integer</code>              Devuelve el n\u00famero de argumentos nulos.               <code>num_nulls(1, NULL, 2)</code>-"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/03.-Funciones%20y%20operadores%20matem%C3%A1ticos/","title":"03.-Funciones y operadores matem\u00e1ticos","text":"<p>Los operadores matem\u00e1ticos se proporcionan para muchos tipos PostgreSQL. Para tipos sin convenciones matem\u00e1ticas est\u00e1ndar (por ejemplo, tipos de fecha/hora) describimos el comportamiento real en secciones  posteriores.</p> <p>La Tabla 9.4 muestra los operadores matem\u00e1ticos que est\u00e1n disponibles para los tipos num\u00e9ricos est\u00e1ndar. A menos que se indique lo contrario, los operadores se mostraron como aceptados  <code>numeric_type</code>est\u00e1n disponibles para todos los tipos <code>smallint</code>, <code>integer</code>, <code>bigint</code>, <code>numeric</code>, <code>real</code>, y <code>double precision</code>. Operadores mostrados como aceptados  <code>integral_type</code>est\u00e1n disponibles para los tipos <code>smallint</code>, <code>integer</code>, y <code>bigint</code>. Salvo cuando se indique, cada forma de operador devuelve el mismo tipo  de datos que sus argumentos. Llamaciones que involucran m\u00faltiples tipos  de datos de argumentos, tales como   <code>integer``+``numeric</code>, se resuelven utilizando el tipo que aparece m\u00e1s adelante en estas listas.</p> <p>Cuadro 9.4. Operadores matem\u00e1ticos</p> Operadora              Descripci\u00f3n              Ejemplos (s) <code>numeric_type</code><code>+</code><code>numeric_type</code>- <code>*</code>numeric_type<code>*</code>              Adici\u00f3n               <code>2 + 3</code>- <code>+</code><code>numeric_type</code>- <code>*</code>numeric_type<code>*</code>              Unary plus (sin operaci\u00f3n)               <code>+ 3.5</code>- <code>numeric_type</code><code>-</code><code>numeric_type</code>- <code>*</code>numeric_type<code>*</code>              Sutracci\u00f3n               <code>2 - 3</code>- <code>-</code><code>numeric_type</code>- <code>*</code>numeric_type<code>*</code>              Negaci\u00f3n               <code>- (-4)</code>- <code>numeric_type</code><code>*</code><code>numeric_type</code>- <code>*</code>numeric_type<code>*</code>              Multiplicaci\u00f3n               <code>2 * 3</code>- <code>numeric_type</code><code>/</code><code>numeric_type</code>- <code>*</code>numeric_type<code>*</code>              Divisi\u00f3n (para tipos integrales, la divisi\u00f3n trunca el resultado hacia cero)               <code>5.0 / 2</code>-                <code>5 / 2</code>-                <code>(-5) / 2</code>- <code>numeric_type</code><code>%</code><code>numeric_type</code>- <code>*</code>numeric_type<code>*</code>              Modulo (restaor); disponible para <code>smallint</code>, <code>integer</code>, <code>bigint</code>, y <code>numeric</code> <code>5 % 4</code>- <code>numeric``^``numeric</code>- <code>numeric</code> <code>double precision``^``double precision</code>- <code>double precision</code>              Exponen la               <code>2 ^ 3</code>-               A diferencia de la pr\u00e1ctica matem\u00e1tica t\u00edpica, los usos m\u00faltiples de  <code>^</code>se asociar\u00e1 de izquierda a derecha por defecto:               <code>2 ^ 3 ^ 3</code>-                <code>2 ^ (3 ^ 3)</code>- <code>|/``double precision</code>- <code>double precision</code>              Ra\u00edces cuadrados               <code>|/ 25.0</code>- <code>||/``double precision</code>- <code>double precision</code>              Ra\u00edces del cubo               <code>||/ 64.0</code>- <code>@</code><code>numeric_type</code>- <code>*</code>numeric_type<code>*</code>              Valor absoluto               <code>@ -5.0</code>- <code>integral_type</code><code>&amp;</code><code>integral_type</code>- <code>*</code>integral_type<code>*</code>              A unedit y               <code>91 &amp; 15</code>- <code>integral_type</code><code>|</code><code>integral_type</code>- <code>*</code>integral_type<code>*</code>              Bitwise OR               <code>32 | 3</code>- <code>integral_type</code><code>#</code><code>integral_type</code>- <code>*</code>integral_type<code>*</code>              Bitwise exclusivo OR               <code>17 # 5</code>- <code>~</code><code>integral_type</code>- <code>*</code>integral_type<code>*</code>              A la nada               <code>~1</code>- <code>integral_type</code><code>&lt;&lt;``integer</code>- <code>*</code>integral_type<code>*</code>              Cambio a la izquierda               <code>1 &lt;&lt; 4</code>- <code>integral_type</code><code>&gt;&gt;``integer</code>- <code>*</code>integral_type<code>*</code>              Cambio a la derecha               <code>8 &gt;&gt; 2</code>- <p>La Tabla 9.5 muestra las funciones matem\u00e1ticas disponibles. Muchas de estas  funciones se proporcionan en m\u00faltiples formas con diferentes tipos de  argumentaci\u00f3n. Salvo cuando se haya observado, cualquier forma dada de  una funci\u00f3n devuelve el mismo tipo de datos que sus argumentos (s); los  casos de tipo cruzado se resuelven de la misma manera que se explica  anteriormente para los operadores. Las funciones que funcionan con  <code>double precision</code>Los datos se implementan principalmente en la parte superior de la  biblioteca C del sistema host; la precisi\u00f3n y el comportamiento en los  casos de l\u00edmites pueden por lo tanto variar dependiendo del sistema  host.</p> <p>Cuadro 9.5. Funciones matem\u00e1ticas</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>abs</code>(  <code>numeric_type</code>) . <code>*</code>numeric_type<code>*</code>              Valor absoluto               <code>abs(-17.4)</code>- <code>cbrt</code>(  <code>double precision</code>) . <code>double precision</code>              Ra\u00edces del cubo               <code>cbrt(64.0)</code>- <code>ceil</code>(  <code>numeric</code>) . <code>numeric</code> <code>ceil</code>(  <code>double precision</code>) .               entero m\u00e1s cercano mayor o igual a argumento               <code>ceil(42.2)</code>-                <code>ceil(-42.8)</code>- <code>ceiling</code>(  <code>numeric</code>) . <code>numeric</code> <code>ceiling</code>(  <code>double precision</code>) .               entero m\u00e1s cercano mayor o igual a argumento (lo mismo que <code>ceil</code>)               <code>ceiling(95.3)</code>- <code>degrees</code>(  <code>double precision</code>) . <code>double precision</code>              Converte radians en grados               <code>degrees(0.5)</code>- <code>div</code>(  <code>y</code><code>numeric</code>,   <code>x</code><code>numeric</code>) . <code>numeric</code>              Cencitado entero de <code>y</code>/ <code>x</code>(truncate hacia cero)               <code>div(9, 4)</code>- <code>erf</code>(  <code>double precision</code>) . <code>double precision</code>              Funci\u00f3n de error               <code>erf(1.0)</code>- <code>erfc</code>(  <code>double precision</code>) . <code>double precision</code>              Funci\u00f3n de error complementario (<code>1 - erf(x)</code>, sin p\u00e9rdida de precisi\u00f3n para entradas grandes)               <code>erfc(1.0)</code>- <code>exp</code>(  <code>numeric</code>) . <code>numeric</code> <code>exp</code>(  <code>double precision</code>) .               Exponente ( <code>e</code>elevado al poder dado)               <code>exp(1.0)</code>- <code>factorial</code>(  <code>bigint</code>) . <code>numeric</code>              Factorial               <code>factorial(5)</code>- <code>floor</code>(  <code>numeric</code>) . <code>numeric</code> <code>floor</code>(  <code>double precision</code>) .               M\u00e1s cercano en el n\u00famero entero menos o igual a argumento               <code>floor(42.8)</code>-                <code>floor(-42.8)</code>- <code>gcd</code>( <code>numeric_type</code>,  <code>numeric_type</code>) . <code>*</code>numeric_type<code>*</code>              Divisor com\u00fan m\u00e1s grande (el mayor n\u00famero positivo que divide ambos insumos sin restos); devuelve  <code>0</code>si ambas entradas son cero; disponibles para <code>integer</code>, <code>bigint</code>, y <code>numeric</code> <code>gcd(1071, 462)</code>- <code>lcm</code>( <code>numeric_type</code>,  <code>numeric_type</code>) . <code>*</code>numeric_type<code>*</code>              M\u00faltiplos menos comunes (el menor n\u00famero estrictamente positivo que es un m\u00faltiplo integral de ambos insumos); devuelve  <code>0</code>si cualquiera de las entradas es cero; disponible para <code>integer</code>, <code>bigint</code>, y <code>numeric</code> <code>lcm(1071, 462)</code>- <code>ln</code>(  <code>numeric</code>) . <code>numeric</code> <code>ln</code>(  <code>double precision</code>) .               Logaritmo natural               <code>ln(2.0)</code>- <code>log</code>(  <code>numeric</code>) . <code>numeric</code> <code>log</code>(  <code>double precision</code>) .               Base 10 logaritmo               <code>log(100)</code>- <code>log10</code>(  <code>numeric</code>) . <code>numeric</code> <code>log10</code>(  <code>double precision</code>) .               Base 10 logaritmo (as\u00ed como <code>log</code>)               <code>log10(1000)</code>- <code>log</code>(  <code>b</code><code>numeric</code>,   <code>x</code><code>numeric</code>) . <code>numeric</code>              Logaritmo de  <code>x</code>a base <code>b</code> <code>log(2.0, 64.0)</code>- <code>min_scale</code>(  <code>numeric</code>) . <code>integer</code>              Escala m\u00ednima (n\u00famero de d\u00edgitos decimales fraccionados) necesaria para representar el valor suministrado con precisi\u00f3n               <code>min_scale(8.4100)</code>- <code>mod</code>(  <code>y</code><code>numeric_type</code>,   <code>x</code><code>numeric_type</code>) . <code>*</code>numeric_type<code>*</code>              Resto de <code>y</code>/<code>x</code>; disponible para <code>smallint</code>, <code>integer</code>, <code>bigint</code>, y <code>numeric</code> <code>mod(9, 4)</code>- <code>pi</code>() <code>double precision</code>              Valor aproximado de\u03c0               <code>pi()</code>- <code>power</code>(  <code>a</code><code>numeric</code>,   <code>b</code><code>numeric</code>) . <code>numeric</code> <code>power</code>(  <code>a</code><code>double precision</code>,   <code>b</code><code>double precision</code>) . <code>double precision</code> <code>a</code>elevado al poder de                <code>power(9, 3)</code>- <code>radians</code>(  <code>double precision</code>) . <code>double precision</code>              Converte grados en radians               <code>radians(45.0)</code>- <code>round</code>(  <code>numeric</code>) . <code>numeric</code> <code>round</code>(  <code>double precision</code>) .               Rondas al n\u00famero entero m\u00e1s cercano. Para <code>numeric</code>, los lazos se romp\u00edan al redondear de cero. Para <code>double precision</code>, el comportamiento de ruptura de corbatas es dependiente de la plataforma, pero - redondo a m\u00e1s cercano incluso - es la regla m\u00e1s com\u00fan.               <code>round(42.4)</code>- <code>round</code>(  <code>v</code><code>numeric</code>,   <code>s</code><code>integer</code>) . <code>numeric</code>              Rondas  <code>v</code>a  <code>s</code>decimales. Los lazos se romn por redondear de cero.               <code>round(42.4382, 2)</code>-                <code>round(1234.56, -1)</code>- <code>scale</code>(  <code>numeric</code>) . <code>integer</code>              Escala del argumento (n\u00famero de d\u00edgitos decimales en la parte fraccionada)               <code>scale(8.4100)</code>- <code>sign</code>(  <code>numeric</code>) . <code>numeric</code> <code>sign</code>(  <code>double precision</code>) .               Signo del argumento (-1, 0 o 1o)               <code>sign(-8.4)</code>- <code>sqrt</code>(  <code>numeric</code>) . <code>numeric</code> <code>sqrt</code>(  <code>double precision</code>) .               Ra\u00edces cuadrados               <code>sqrt(2)</code>- <code>trim_scale</code>(  <code>numeric</code>) . <code>numeric</code>              Reduce la escala del valor (n\u00famero de d\u00edgitos decimales fraccionados) eliminando ceros de rastro               <code>trim_scale(8.4100)</code>- <code>trunc</code>(  <code>numeric</code>) . <code>numeric</code> <code>trunc</code>(  <code>double precision</code>) .               Truncates al entero (hacia cero)               <code>trunc(42.8)</code>-                <code>trunc(-42.8)</code>- <code>trunc</code>(  <code>v</code><code>numeric</code>,   <code>s</code><code>integer</code>) . <code>numeric</code>              Truncates  <code>v</code>a  <code>s</code>decimales               <code>trunc(42.4382, 2)</code>- <code>width_bucket</code>(  <code>operand</code><code>numeric</code>,  <code>low</code><code>numeric</code>,  <code>high</code><code>numeric</code>,   <code>count</code><code>integer</code>) . <code>integer</code> <code>width_bucket</code>(  <code>operand</code><code>double precision</code>,  <code>low</code><code>double precision</code>,  <code>high</code><code>double precision</code>,   <code>count</code><code>integer</code>) . <code>integer</code>              Devuelve el n\u00famero del cubo en el que  <code>operand</code>caen en un histograma teniendo  <code>count</code>Cubos de ancho de coma de altura que abarcan la gama  <code>low</code>a <code>high</code>. Retornos  <code>0</code>o o  <code>*</code>count<code>*+1</code>para una entrada fuera de ese rango.               <code>width_bucket(5.35, 0.024, 10.06, 5)</code>- <code>width_bucket</code>(  <code>operand</code><code>anycompatible</code>,   <code>thresholds</code><code>anycompatiblearray</code>) . <code>integer</code>              Devuelve el n\u00famero del cubo en el que  <code>operand</code>cae dada una matriz que enumera los l\u00edmites inferiores de los cubos. Retornos  <code>0</code>para una entrada menor que el primer l\u00edmite inferior.  <code>operand</code>y los elementos de matriz pueden ser de cualquier tipo con operadores de comparaci\u00f3n est\u00e1ndar. El  <code>thresholds</code>La matriz debe ser ordenada, la m\u00e1s peque\u00f1a primero, o se obtendr\u00e1n resultados inesperados.               <code>width_bucket(now(), array['yesterday', 'today', 'tomorrow']::timestamptz[])</code>- <p>La Tabla 9.6 muestra funciones para generar n\u00fameros aleatorios.</p> <p>Cuadro 9.6. Funciones aleatorias</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>random</code>() <code>double precision</code>              Devuelve un valor aleatorio en el rango 0.0 = x . 1.0               <code>random()</code>- <code>random_normal</code>( [   <code>mean</code><code>double precision</code>[,   <code>stddev</code><code>double precision</code>]] ) . <code>double precision</code>              Devuelve un valor aleatorio de la distribuci\u00f3n normal con los par\u00e1metros dados;  <code>mean</code>morosidad a 0.0 y  <code>stddev</code>incumplimientos a 1.0               <code>random_normal(0.0, 1.0)</code>- <code>setseed</code>(  <code>double precision</code>) . <code>void</code>              Estace la semilla para su posterior  <code>random()</code>y  <code>random_normal()</code>llamadas; el argumento debe ser entre -1.0 y 1.0, inclusive              <code>setseed(0.12345)</code> <p>El  <code>random()</code>funci\u00f3n utiliza un generador de n\u00fameros pseudoaleatorias deterministas. Es  r\u00e1pido pero no adecuado para aplicaciones criptogr\u00e1ficas; vea el m\u00f3dulo pgcrypto para una alternativa m\u00e1s segura. Si  <code>setseed()</code>se llama, la serie de resultados de  <code>random()</code>las llamadas en el actual per\u00edodo de sesiones se pueden repetir reexpedici\u00f3n  <code>setseed()</code>con el mismo argumento. Sin ning\u00fan antecedente  <code>setseed()</code>llamada en la misma sesi\u00f3n, la primera  <code>random()</code>llamada obtiene una semilla de una fuente de bits al azar dependiente de la  plataforma. Estas observaciones se sostienen por igual para <code>random_normal()</code>.</p> <p>La Tabla 9.7 muestra las funciones trigonom\u00e9tricas disponibles. Cada una de estas  funciones viene en dos variantes, una que mide \u00e1ngulos en radianes y  otra que mide \u00e1ngulos en grados.</p> <p>Cuadro 9.7. Funciones trigonom\u00e9tricas</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>acos</code>(  <code>double precision</code>) . <code>double precision</code>              Coseno inverso, derer en radianes               <code>acos(1)</code>- <code>acosd</code>(  <code>double precision</code>) . <code>double precision</code>              Coseno inverso, resultado en grados               <code>acosd(0.5)</code>- <code>asin</code>(  <code>double precision</code>) . <code>double precision</code>              Inverse seno, dera\u00f1an radianes               <code>asin(1)</code>- <code>asind</code>(  <code>double precision</code>) . <code>double precision</code>              senos e inversas, resultado en grados               <code>asind(0.5)</code>- <code>atan</code>(  <code>double precision</code>) . <code>double precision</code>              Tangent inverso, dera\u00f1a en radianes               <code>atan(1)</code>- <code>atand</code>(  <code>double precision</code>) . <code>double precision</code>              Tangente inversa, resultado en grados               <code>atand(1)</code>- <code>atan2</code>(  <code>y</code><code>double precision</code>,   <code>x</code><code>double precision</code>) . <code>double precision</code>              Tangente inversa de <code>y</code>/<code>x</code>, el resultado en radianes               <code>atan2(1, 0)</code>- <code>atan2d</code>(  <code>y</code><code>double precision</code>,   <code>x</code><code>double precision</code>) . <code>double precision</code>              Tangente inversa de <code>y</code>/<code>x</code>, resultado en grados               <code>atan2d(1, 0)</code>- <code>cos</code>(  <code>double precision</code>) . <code>double precision</code>              Coseno, argumento en radianes               <code>cos(0)</code>- <code>cosd</code>(  <code>double precision</code>) . <code>double precision</code>              Coseno, argumento en grados               <code>cosd(60)</code>- <code>cot</code>(  <code>double precision</code>) . <code>double precision</code>              Cotangent, argumento en radianes               <code>cot(0.5)</code>- <code>cotd</code>(  <code>double precision</code>) . <code>double precision</code>              Cotangent, argumento en grados               <code>cotd(45)</code>- <code>sin</code>(  <code>double precision</code>) . <code>double precision</code>              Sine, argumento en radianes               <code>sin(1)</code>- <code>sind</code>(  <code>double precision</code>) . <code>double precision</code>              Sine, argumento en grados               <code>sind(30)</code>- <code>tan</code>(  <code>double precision</code>) . <code>double precision</code>              Tangent, argumento en radianes               <code>tan(1)</code>- <code>tand</code>(  <code>double precision</code>) . <code>double precision</code>              Ense\u00f1ado, argumento en grados               <code>tand(45)</code>-"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/03.-Funciones%20y%20operadores%20matem%C3%A1ticos/#nota","title":"Nota","text":"<p>Otra forma de trabajar con \u00e1ngulos medidos en grados es utilizar las funciones de transformaci\u00f3n de la unidad  <code>radians()</code>y  <code>degrees()</code>se mostr\u00f3 antes. Sin embargo, se prefiere el uso de las funciones  trigonom\u00e9tricas basadas en el t\u00edtulo, ya que de esa manera evita errores redondeados para casos especiales como <code>sind(30)</code>.</p> <p>La Tabla 9.8 muestra las funciones hiperb\u00f3licas disponibles.</p> <p>Cuadro 9.8. Funciones hiperb\u00f3licas</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>sinh</code>(  <code>double precision</code>) . <code>double precision</code>              seno hiperb\u00f3lico               <code>sinh(1)</code>- <code>cosh</code>(  <code>double precision</code>) . <code>double precision</code>              Coseno hiperb\u00f3lico               <code>cosh(0)</code>- <code>tanh</code>(  <code>double precision</code>) . <code>double precision</code>              Tangent hiperb\u00f3lico               <code>tanh(1)</code>- <code>asinh</code>(  <code>double precision</code>) . <code>double precision</code>              seno hiperb\u00f3lico inverso               <code>asinh(1)</code>- <code>acosh</code>(  <code>double precision</code>) . <code>double precision</code>              Coseno hiperb\u00f3lico inverso               <code>acosh(1)</code>- <code>atanh</code>(  <code>double precision</code>) . <code>double precision</code>              Tangente hiperb\u00f3lico inverso               <code>atanh(0.5)</code>-"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/05.-Funciones%20binarias%20de%20cuerda%20y%20operadores/","title":"05.-Funciones binarias de cuerda y operadores","text":"<p>Esta secci\u00f3n describe funciones y operadores para examinar y manipular cadenas binarias, es decir, valores de tipo <code>bytea</code>. Muchas de ellas son equivalentes, en finalidad y sintaxis, a las  funciones de cuerda de texto descritas en la secci\u00f3n anterior.</p> <p>SQLdefine algunas funciones de cuerda que utilizan palabras clave, en lugar de  comas, para separar los argumentos. Los detalles se encuentran en la Tabla 9.11. PostgreSQL tambi\u00e9n proporciona versiones de estas funciones que utilizan la sintaxis de invocaci\u00f3n de funci\u00f3n regular (ver Tabla 9.12).</p> <p>Cuadro 9.11.  SQLFunciones binarias de cuerda y operadores</p> Funci\u00f3n/Operador              Descripci\u00f3n              Ejemplos (s) <code>bytea``||``bytea</code>- <code>bytea</code>              Concateniza las dos cuerdas binarias.               <code>'\\x123456'::bytea || '\\x789a00bcde'::bytea</code>- <code>bit_length</code>(  <code>bytea</code>) . <code>integer</code>              Devuelve el n\u00famero de bits en la cuerda binaria (8 veces el <code>octet_length</code>).               <code>bit_length('\\x123456'::bytea)</code>- <code>btrim</code>(  <code>bytes</code><code>bytea</code>,   <code>bytesremoved</code><code>bytea</code>) . <code>bytea</code>              Elienza la cuerda m\u00e1s larga que contiene s\u00f3lo bytes que aparecen  <code>bytesremoved</code>desde el principio y el final de <code>bytes</code>.               <code>btrim('\\x1234567890'::bytea, '\\x9012'::bytea)</code>- <code>ltrim</code>(  <code>bytes</code><code>bytea</code>,   <code>bytesremoved</code><code>bytea</code>) . <code>bytea</code>              Elienza la cuerda m\u00e1s larga que contiene s\u00f3lo bytes que aparecen  <code>bytesremoved</code>desde el principio de <code>bytes</code>.               <code>ltrim('\\x1234567890'::bytea, '\\x9012'::bytea)</code>- <code>octet_length</code>(  <code>bytea</code>) . <code>integer</code>              Devuelve el n\u00famero de bytes en la cuerda binaria.               <code>octet_length('\\x123456'::bytea)</code>- <code>overlay</code>(         <code>bytes</code><code>bytea``PLACING</code><code>newsubstring</code><code>bytea``FROM</code><code>start</code><code>integer</code>[    <code>FOR</code><code>count</code><code>integer</code>] . <code>bytea</code>              Sustituida la subcadeaci\u00f3n de  <code>bytes</code>que empieza en el <code>start</code>Su\u00e9te y se extiende para  <code>count</code>bytes con <code>newsubstring</code>. Si  <code>count</code>se omite, se engabida a la longitud de <code>newsubstring</code>.               <code>overlay('\\x1234567890'::bytea placing '\\002\\003'::bytea from 2 for 3)</code>- <code>position</code>(      <code>substring</code><code>bytea``IN</code><code>bytes</code><code>bytea</code>) . <code>integer</code>              Devuelve el primer \u00edndice de partida de los especificados  <code>substring</code>dentro <code>bytes</code>, o cero si no est\u00e1 presente.               <code>position('\\x5678'::bytea in '\\x1234567890'::bytea)</code>- <code>rtrim</code>(  <code>bytes</code><code>bytea</code>,   <code>bytesremoved</code><code>bytea</code>) . <code>bytea</code>              Elimo la cuerda m\u00e1s larga que contiene s\u00f3lo bytes que aparecen  <code>bytesremoved</code>desde el final de <code>bytes</code>.               <code>rtrim('\\x1234567890'::bytea, '\\x9012'::bytea)</code>- <code>substring</code>(   <code>bytes</code><code>bytea</code>[    <code>FROM</code><code>start</code><code>integer</code>] [    <code>FOR</code><code>count</code><code>integer</code>] . <code>bytea</code>              Extrae la substring de  <code>bytes</code>a partir de la <code>start</code>'th byte si eso se especifica, y parando despu\u00e9s  <code>count</code>bytes si se especifica. Proporcionar al menos uno de  <code>start</code>y <code>count</code>.               <code>substring('\\x1234567890'::bytea from 3 for 2)</code>- <code>trim</code>( [  <code>LEADING</code>-  <code>TRAILING</code>-  <code>BOTH</code>]      <code>bytesremoved</code><code>bytea``FROM</code><code>bytes</code><code>bytea</code>) . <code>bytea</code>              Elimbote la cuerda m\u00e1s larga que contiene s\u00f3lo bytes que aparecen  <code>bytesremoved</code>desde el principio, el final, o ambos extremos ( <code>BOTH</code>es el predeterminado) de <code>bytes</code>.               <code>trim('\\x9012'::bytea from '\\x1234567890'::bytea)</code>- <code>trim</code>( [  <code>LEADING</code>-  <code>TRAILING</code>-  <code>BOTH</code>] [  <code>FROM</code>]  <code>bytes</code><code>bytea</code>,   <code>bytesremoved</code><code>bytea</code>) . <code>bytea</code>              Esta es una sintaxis no est\u00e1ndar para <code>trim()</code>.               <code>trim(both from '\\x1234567890'::bytea, '\\x9012'::bytea)</code>- <p>Se dispone de funciones adicionales de manipulaci\u00f3n binaria de cuerdas que se enumeran en la Tabla 9.12. Algunos de ellos se utilizan internamente para implementar la SQL- Funciones est\u00e1ndar de cadena enumeradas en la Tabla 9.11.</p> <p>Cuadro 9.12. Otras funciones binarias de la cadena</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>bit_count</code>(   <code>bytes</code><code>bytea</code>) . <code>bigint</code>              Devuelve el n\u00famero de bits encadenados en la cuerda binaria (tambi\u00e9n conocido como popcount\"Cu\u00e1ndote pop\" .               <code>bit_count('\\x1234567890'::bytea)</code>- <code>get_bit</code>(  <code>bytes</code><code>bytea</code>,   <code>n</code><code>bigint</code>) . <code>integer</code>              Extractos n'th bit de la cuerda binaria.               <code>get_bit('\\x1234567890'::bytea, 30)</code>- <code>get_byte</code>(  <code>bytes</code><code>bytea</code>,   <code>n</code><code>integer</code>) . <code>integer</code>              Extractos n'th byte de la cuerda binaria.               <code>get_byte('\\x1234567890'::bytea, 4)</code>- <code>length</code>(  <code>bytea</code>) . <code>integer</code>              Devuelve el n\u00famero de bytes en la cuerda binaria.               <code>length('\\x1234567890'::bytea)</code>- <code>length</code>(  <code>bytes</code><code>bytea</code>,   <code>encoding</code><code>name</code>) . <code>integer</code>              Devuelve el n\u00famero de caracteres en la cadena binaria, suponiendo que es texto en el dado <code>encoding</code>.               <code>length('jose'::bytea, 'UTF8')</code>- <code>md5</code>(  <code>bytea</code>) . <code>text</code>              Calma el hash MD5 de la cuerda binaria, con el resultado escrito en hexadecimal.               <code>md5('Th\\000omas'::bytea)</code>- <code>set_bit</code>(  <code>bytes</code><code>bytea</code>,  <code>n</code><code>bigint</code>,   <code>newvalue</code><code>integer</code>) . <code>bytea</code>              Sets n'th bit en cuerda binaria a <code>newvalue</code>.               <code>set_bit('\\x1234567890'::bytea, 30, 0)</code>- <code>set_byte</code>(  <code>bytes</code><code>bytea</code>,  <code>n</code><code>integer</code>,   <code>newvalue</code><code>integer</code>) . <code>bytea</code>              Sets n'th byte en cadena binaria a <code>newvalue</code>.               <code>set_byte('\\x1234567890'::bytea, 4, 64)</code>- <code>sha224</code>(  <code>bytea</code>) . <code>bytea</code>              Cala el hash SHA-224 de la cuerda binaria.               <code>sha224('abc'::bytea)</code>- <code>sha256</code>(  <code>bytea</code>) . <code>bytea</code>              Compute el hash SHA-256 de la cuerda binaria.               <code>sha256('abc'::bytea)</code>- <code>sha384</code>(  <code>bytea</code>) . <code>bytea</code>              Cala el hash SHA-384 de la cuerda binaria.               <code>sha384('abc'::bytea)</code>- <code>sha512</code>(  <code>bytea</code>) . <code>bytea</code>              Cala el hash SHA-512 de la cuerda binaria.               <code>sha512('abc'::bytea)</code>- <code>substr</code>(  <code>bytes</code><code>bytea</code>,   <code>start</code><code>integer</code>[,   <code>count</code><code>integer</code>] . <code>bytea</code>              Extrae la substring de  <code>bytes</code>a partir de la <code>start</code>La tuerte, y extendiendo para  <code>count</code>bytes si se especifica. (En la misma medida <code>substring(*</code>bytes<code>* from *</code>start<code>* for *</code>count<code>*)</code>.)               <code>substr('\\x1234567890'::bytea, 3, 2)</code>- <p>Funciones  <code>get_byte</code>y  <code>set_byte</code>n\u00famero el primer byte de una cuerda binaria como byte 0. Funciones  <code>get_bit</code>y  <code>set_bit</code>N\u00famero bits de la derecha dentro de cada byte; por ejemplo, el bit 0 es el  peda menos significativo del primer byte, y el bit 15 es el bit m\u00e1s  significativo del segundo byte.</p> <p>Por razones hist\u00f3ricas, la funci\u00f3n  <code>md5</code>devuelve un valor de tipo codificado por hechizo  <code>text</code>que el tipo de retorno de funciones SHA-2 <code>bytea</code>. Utilice las funciones  <code>encode</code>y  <code>decode</code>para convertir entre los dos. Por ejemplo, escribir  <code>encode(sha256('abc'), 'hex')</code>para obtener una representaci\u00f3n de texto codificada con hex, o  <code>decode(md5('abc'), 'hex')</code>para conseguir un  <code>bytea</code>valor.</p> <p>Las funciones para convertir cadenas entre diferentes conjuntos de  caracteres (codificaciones), y para representar datos binarios  arbitrarios en forma textual, se muestran en la Tabla 9.13. Para estas funciones, argumento o resultado de tipo  <code>text</code>se expresa en la codificaci\u00f3n por defecto de la base de datos, mientras que los argumentos o resultados de tipo  <code>bytea</code>est\u00e1n en una codificaci\u00f3n nombrada por otro argumento.</p> <p>Cuadro 9.13 Funciones de conversi\u00f3n de cuerda de texto/Binaria</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>convert</code>(  <code>bytes</code><code>bytea</code>,  <code>src_encoding</code><code>name</code>,   <code>dest_encoding</code><code>name</code>) . <code>bytea</code>              Convierte una cadena binaria que representa texto en la codificaci\u00f3n  <code>src_encoding</code>a una cuerda binaria en la codificaci\u00f3n  <code>dest_encoding</code>(ver secci\u00f3n 24.3.4 para las conversiones disponibles).               <code>convert('text_in_utf8', 'UTF8', 'LATIN1')</code>- <code>convert_from</code>(  <code>bytes</code><code>bytea</code>,   <code>src_encoding</code><code>name</code>) . <code>text</code>              Convierte una cadena binaria que representa texto en la codificaci\u00f3n  <code>src_encoding</code>a  <code>text</code>en la codificaci\u00f3n de la base de datos (v\u00e9ase la secci\u00f3n 24.3.4 para las conversiones disponibles).               <code>convert_from('text_in_utf8', 'UTF8')</code>- <code>convert_to</code>(  <code>string</code><code>text</code>,   <code>dest_encoding</code><code>name</code>) . <code>bytea</code>              Convierte a  <code>text</code>cadena (en la codificaci\u00f3n de la base de datos) a una cadena binaria codificado en la codificaci\u00f3n  <code>dest_encoding</code>(ver secci\u00f3n 24.3.4 para las conversiones disponibles).               <code>convert_to('some_text', 'UTF8')</code>- <code>encode</code>(  <code>bytes</code><code>bytea</code>,   <code>format</code><code>text</code>) . <code>text</code>              Encodes los datos binarios en una representaci\u00f3n textual; se apoya  <code>format</code>valores son: <code>base64</code>, <code>escape</code>, <code>hex</code>.               <code>encode('123\\000\\001', 'base64')</code>- <code>decode</code>(  <code>string</code><code>text</code>,   <code>format</code><code>text</code>) . <code>bytea</code>              Descuesta los datos binarios de una representaci\u00f3n textual; soportado  <code>format</code>valores son los mismos que para <code>encode</code>.               <code>decode('MTIzAAE=', 'base64')</code>- <p>El  <code>encode</code>y  <code>decode</code>las funciones soportan los siguientes formatos textuales:</p> <ul> <li>base64</li> </ul> <p>\u200b        El  <code>base64</code>el formato es el de RFC 2045 Secci\u00f3n 6.8. De acuerdo con el RFC, las l\u00edneas codificadas se romen a los 76 caracteres. Sin embargo, en  lugar del marcador MIME CRLF de fin de l\u00ednea, s\u00f3lo se utiliza una nueva  l\u00ednea para el final de l\u00ednea. El  <code>decode</code>funci\u00f3n ignora la vuelta de los carruajes, la nueva l\u00ednea, el espacio y los  caracteres de pesta\u00f1as. De lo contrario, se plantea un error cuando  <code>decode</code>se suministra base inv\u00e1lida64 datos, incluyendo cuando el relleno de rastro es incorrecto.      </p> <ul> <li>escapar</li> </ul> <p>\u200b        El  <code>escape</code>format convierte cero bytes y bytes con el bit alto establecido en secuencias de escape octal (<code>\\</code><code>nnn</code>), y duplica las barras. Otros valores de byte est\u00e1n representados literalmente. El  <code>decode</code>funci\u00f3n elevar\u00e1 un error si una reacci\u00f3n no es seguida por una segunda reacci\u00f3n o tres d\u00edgitos o octales; acepta otros valores de byte sin cambios.      </p> <ul> <li>hex.</li> </ul> <p>\u200b        El  <code>hex</code>el formato representa cada 4 bits de datos como un d\u00edgito hexadecimal,  <code>0</code>a trav\u00e9s <code>f</code>, escribiendo el d\u00edgito de mayor orden de cada byte primero. El  <code>encode</code>funci\u00f3n de los productos <code>a</code>- - <code>f</code>d\u00edgitos hex en min\u00fasculo. Debido a que la unidad m\u00e1s peque\u00f1a de datos es de 8  bits, siempre hay un n\u00famero par de caracteres devueltos por <code>encode</code>. El  <code>decode</code>funci\u00f3n acepta el <code>a</code>- - <code>f</code>caracteres en may\u00fasculo o en la parte inferior. Se plantea un error cuando  <code>decode</code>se da datos hex inv\u00e1lidos, incluyendo cuando se les da un n\u00famero impar de caracteres.      </p> <p>V\u00e9ase tambi\u00e9n la funci\u00f3n agregada  <code>string_agg</code>en la secci\u00f3n 9.21 y en las funciones de objeto de la secci\u00f3n 35.4.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/06.-Funciones%20de%20cuerda%20de%20cuerda%20y%20operadores/","title":"06.-Funciones de cuerda de cuerda y operadores","text":"<p>Esta secci\u00f3n describe funciones y operadores para examinar y manipular las cadenas de bits, es decir, valores de los tipos  <code>bit</code>y <code>bit varying</code>. (Mientras que s\u00f3lo escriba  <code>bit</code>se menciona en estos cuadros, valores de tipo  <code>bit varying</code>se puede utilizar indistintamente.) Las cuerdas de bit soportan los operadores de comparaci\u00f3n habituales que figuran en el cuadro 9.1, as\u00ed como los operadores que se muestran en el cuadro 9.14.</p> <p>Cuadro 9.14. Operadores de cuerda de cuerda</p> Operadora              Descripci\u00f3n              Ejemplos (s) <code>bit``||``bit</code>- <code>bit</code>              Concatenaci\u00f3n               <code>B'10001' || B'011'</code>- <code>bit``&amp;``bit</code>- <code>bit</code>              Y de a unedito y (las aportaciones deben ser de igual longitud)               <code>B'10001' &amp; B'01101'</code>- <code>bit``|``bit</code>- <code>bit</code>              O OR de altura (las aportaciones deben ser de igual longitud)               <code>B'10001' | B'01101'</code>- <code>bit``#``bit</code>- <code>bit</code>              OR exclusivos en partes (las aportaciones deben ser de igual longitud)               <code>B'10001' # B'01101'</code>- <code>~``bit</code>- <code>bit</code>              A la nada               <code>~ B'10001'</code>- <code>bit``&lt;&lt;``integer</code>- <code>bit</code>              Cambio a la izquierda (la longitud de la cuerda se conserva)               <code>B'10001' &lt;&lt; 3</code>- <code>bit``&gt;&gt;``integer</code>- <code>bit</code>              Deseado de turno a la derecha (se conserva la longitud de la cuerda)               <code>B'10001' &gt;&gt; 2</code>- <p>Algunas de las funciones disponibles para cadenas binarias tambi\u00e9n est\u00e1n disponibles para cuerdas de bits, como se muestra en la Tabla 9.15.</p> <p>Cuadro 9.15. Funciones de cuerda de cuerda</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>bit_count</code>(  <code>bit</code>) . <code>bigint</code>              Devuelve el n\u00famero de bits encadenados en la cuerda de bits (tambi\u00e9n conocido como \"Cuento de                <code>bit_count(B'10111')</code>- <code>bit_length</code>(  <code>bit</code>) . <code>integer</code>              Devuelve el n\u00famero de bits en la cuerda de bits.               <code>bit_length(B'10111')</code>- <code>length</code>(  <code>bit</code>) . <code>integer</code>              Devuelve el n\u00famero de bits en la cuerda de bits.               <code>length(B'10111')</code>- <code>octet_length</code>(  <code>bit</code>) . <code>integer</code>              Devuelve el n\u00famero de bytes en la cadena de bits.               <code>octet_length(B'1011111011')</code>- <code>overlay</code>(         <code>bits</code><code>bit``PLACING</code><code>newsubstring</code><code>bit``FROM</code><code>start</code><code>integer</code>[    <code>FOR</code><code>count</code><code>integer</code>] . <code>bit</code>              Sustituida la subcadeaci\u00f3n de  <code>bits</code>que empieza en el <code>start</code>'th bit y se extiende por  <code>count</code>partes con <code>newsubstring</code>. Si  <code>count</code>se omite, se engabida a la longitud de <code>newsubstring</code>.               <code>overlay(B'01010101010101010' placing B'11111' from 2 for 3)</code>- <code>position</code>(      <code>substring</code><code>bit``IN</code><code>bits</code><code>bit</code>) . <code>integer</code>              Devuelve el primer \u00edndice de partida de los especificados  <code>substring</code>dentro <code>bits</code>, o cero si no est\u00e1 presente.               <code>position(B'010' in B'000001101011')</code>- <code>substring</code>(   <code>bits</code><code>bit</code>[    <code>FROM</code><code>start</code><code>integer</code>] [    <code>FOR</code><code>count</code><code>integer</code>] . <code>bit</code>              Extrae la substring de  <code>bits</code>a partir de la <code>start</code>\"p\u00e1ramo parte si eso se especifica, y parando despu\u00e9s de  <code>count</code>bits si se especifica. Proporcionar al menos uno de  <code>start</code>y <code>count</code>.               <code>substring(B'110010111111' from 3 for 2)</code>- <code>get_bit</code>(  <code>bits</code><code>bit</code>,   <code>n</code><code>integer</code>) . <code>integer</code>              Extractos <code>n</code>'th bit de cuerda bit; el primer (iz-lo m\u00e1s alto) es un poco 0.               <code>get_bit(B'101010101010101010', 6)</code>- <code>set_bit</code>(  <code>bits</code><code>bit</code>,  <code>n</code><code>integer</code>,   <code>newvalue</code><code>integer</code>) . <code>bit</code>              Conjuntos <code>n</code>'th bit en una cuerda de bits a <code>newvalue</code>; el primer bit (de izquierda) es de un bit 0.               <code>set_bit(B'101010101010101010', 6, 0)</code>- <p>Adem\u00e1s, es posible arrojar valores integrales desde y hacia el tipo <code>bit</code>. Lanzando un entero de  <code>bit(n)</code>copiar los m\u00e1s a la derecha  <code>n</code>pediciones. Lantar un n\u00famero entero a un poco de ancho de cuerda m\u00e1s ancho que el  propio n\u00famero entero se extiende a la izquierda. Algunos ejemplos:</p> <pre><code>44::bit(10) 0000101100\n44::bit(3) 100\nelenco-44 como bits (12)) 111111010100\n'1110'::bit(4)::integer 14\n</code></pre> <p>Tenga en cuenta que el casting a s\u00f3lo un poco significa casting a <code>bit(1)</code>, y por lo tanto ser\u00e1 s\u00f3lo la parte menos significativa del n\u00famero entero.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/08.-Funciones%20de%20Formato%20de%20tipo%20de%20datos/","title":"08.-Funciones de Formato de tipo de datos","text":"<p>Las funciones de formatting PostgreSQL proporcionan un potente conjunto de herramientas para la conversi\u00f3n de  varios tipos de datos (fecha/tiempo, n\u00famero entero, punto flotante,  num\u00e9rico) a cadenas formateadas y para convertir de cadenas formateadas a tipos de datos espec\u00edficos. El cuadro 9.26 las enumera. Estas funciones siguen a una convenci\u00f3n de llamada com\u00fan:  el primer argumento es el valor a formatear y el segundo argumento es  una plantilla que define el formato de salida o entrada.</p> <p>Cuadro 9.26. Formato de funciones</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>to_char</code>( <code>timestamp</code>,  <code>text</code>) . <code>text</code> <code>to_char</code>( <code>timestamp with time zone</code>,  <code>text</code>) .               Convierte el sello de tiempo en string de acuerdo con el formato dado.               <code>to_char(timestamp '2002-04-20 17:31:12.66', 'HH12:MI:SS')</code>- <code>to_char</code>( <code>interval</code>,  <code>text</code>) .               Convierte el intervalo en la cadena de acuerdo con el formato dado.               <code>to_char(interval '15h 2m 12s', 'HH24:MI:SS')</code>- <code>to_char</code>( <code>numeric_type</code>,  <code>text</code>) .               Convierte el n\u00famero en string seg\u00fan el formato dado; disponible para <code>integer</code>, <code>bigint</code>, <code>numeric</code>, <code>real</code>, <code>double precision</code>.               <code>to_char(125, '999')</code>-                <code>to_char(125.8::real, '999D9')</code>-                <code>to_char(-125.8, '999D99S')</code>- <code>to_date</code>( <code>text</code>,  <code>text</code>) . <code>date</code>              Convierte cadena hasta la fecha de acuerdo con el formato dado.               <code>to_date('05 Dec 2000', 'DD Mon YYYY')</code>- <code>to_number</code>( <code>text</code>,  <code>text</code>) . <code>numeric</code>              Convierte cadena en num\u00e9rico de acuerdo con el formato dado.               <code>to_number('12,454.8-', '99G999D9S')</code>- <code>to_timestamp</code>( <code>text</code>,  <code>text</code>) . <code>timestamp with time zone</code>              Convierte estampilla de cadena en tiempo de acuerdo al formato dado. (Vea tambi\u00e9n  <code>to_timestamp(double precision)</code>en el cuadro 9.33.)               <code>to_timestamp('05 Dec 2000', 'DD Mon YYYY')</code>-"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/08.-Funciones%20de%20Formato%20de%20tipo%20de%20datos/#tip","title":"Tip","text":"<p><code>to_timestamp</code>y  <code>to_date</code>existen para manejar los formatos de entrada que no se pueden convertir por  simple casting. Para la mayor\u00eda de los formatos est\u00e1ndar de fecha/hora,  simplemente lanza la cadena de origen al tipo de datos requerido  funciona, y es mucho m\u00e1s f\u00e1cil. Del mismo modo,  <code>to_number</code>es innecesario para las representaciones num\u00e9ricas est\u00e1ndar.</p> <p>En un  <code>to_char</code>Correda de la plantilla de salida, hay ciertos patrones que se reconocen y  reemplazan con datos debidamente formatados basados en el valor dado.  Cualquier texto que no sea un patr\u00f3n de plantilla se copia simplemente  literalmente. Del mismo modo, en una cadena de plantilla de entrada  (para las otras funciones), los patrones de plantilla identifican los  valores que se suministrar\u00e1 por la cadena de datos de entrada. Si hay  caracteres en la cadena de plantillas que no son patrones de plantilla,  los caracteres correspondientes en la cadena de datos de entrada  simplemente se saltan (si son o no iguales a los caracteres de cadena de plantilla).</p> <p>La Tabla 9.27 muestra los patrones de plantilla disponibles para formatear los valores de fecha y hora.</p> <p>Cuadro 9.27. Patrones de plantilla para el formato de fecha/hora</p> Patr\u00f3n Descripci\u00f3n <code>HH</code> hora del d\u00eda (01o 12) <code>HH12</code> hora del d\u00eda (01o 12) <code>HH24</code> hora del d\u00eda (00-23) <code>MI</code> minuto (00o59) <code>SS</code> segundo (00-59) <code>MS</code> mil de segundo (000.999) <code>US</code> microsegundo (000000.999999) <code>FF1</code> d\u00e9cimo de segundo (0-9) <code>FF2</code> cent\u00e9sima de segundo (00o99) <code>FF3</code> mil de segundo (000.999) <code>FF4</code> d\u00e9cimo de milisegundo (0000-9999) <code>FF5</code> cent\u00e9sima de milisegundo (00000-99999) <code>FF6</code> microsegundo (000000.999999) <code>SSSS</code>, <code>SSSSS</code> segundos despu\u00e9s de la medianoche (0.86399) <code>AM</code>, <code>am</code>,  <code>PM</code>o o <code>pm</code> indicador meridiem (sin per\u00edodos) <code>A.M.</code>, <code>a.m.</code>,  <code>P.M.</code>o o <code>p.m.</code> Indicador meridiem (con per\u00edodos) <code>Y,YYY</code> a\u00f1o (4 o m\u00e1s d\u00edgitos) con coma <code>YYYY</code> a\u00f1o (4 o m\u00e1s d\u00edgitos) <code>YYY</code> los \u00faltimos 3 d\u00edgitos del a\u00f1o <code>YY</code> los \u00faltimos 2 d\u00edgitos del a\u00f1o <code>Y</code> \u00faltimo d\u00edgito del a\u00f1o <code>IYYY</code> ISO 8601 a\u00f1o de numeraci\u00f3n de semana (4 o m\u00e1s d\u00edgitos) <code>IYY</code> los \u00faltimos 3 d\u00edgitos del a\u00f1o de n\u00fameros a la semana ISO 8601 <code>IY</code> \u00faltimos 2 d\u00edgitos de ISO 8601 a\u00f1o de n\u00famero de semana <code>I</code> \u00faltimo d\u00edgito del a\u00f1o de n\u00famero de semanas ISO 8601 <code>BC</code>, <code>bc</code>,  <code>AD</code>o o <code>ad</code> indicador (sin per\u00edodos) <code>B.C.</code>, <code>b.c.</code>,  <code>A.D.</code>o o <code>a.d.</code> indicador de la era (con per\u00edodos) <code>MONTH</code> Nombre completo del mes superior (agregado en blanco a 9 caracteres) <code>Month</code> nombre completo may\u00fasculada mes (acolchado a 9 caracteres) <code>month</code> nombre completo de mes inferior (agregado en blanco a 9 caracteres) <code>MON</code> abaratado el nombre de mes superior de la caja (3 caracteres en ingl\u00e9s, longitudes localizadas var\u00edan) <code>Mon</code> abaratado de nombre may\u00fasculada (3 caracteres en ingl\u00e9s, longitudes localizadas var\u00edan) <code>mon</code> abaratado min\u00fal de la caja mes dino (3 caracteres en ingl\u00e9s, longitudes localizadas var\u00edan) <code>MM</code> n\u00famero de mes (01o) <code>DAY</code> nombre de d\u00eda superior completo (agregado en blanco a 9 caracteres) <code>Day</code> nombre completo may\u00fasculada (acolchado a 9 caracteres) <code>day</code> nombre del d\u00eda de la caja inferior (agregado en blanco a 9 chars) <code>DY</code> abaratado nombre del d\u00eda de la caja superior (3 caracteres en Ingl\u00e9s, longitudes localizadas var\u00edan) <code>Dy</code> Nombre de d\u00eda capitalizado abreviado (3 caracteres en ingl\u00e9s, longitudes localizadas var\u00edan) <code>dy</code> nombre de d\u00eda de caja baja abreviado (3 caracteres en ingl\u00e9s, longitudes localizadas var\u00edan) <code>DDD</code> d\u00eda del a\u00f1o (001-366) <code>IDDD</code> d\u00eda del a\u00f1o de n\u00famero de la norma ISO 8601 (001-371; d\u00eda 1 del a\u00f1o es lunes de la primera semana ISO) <code>DD</code> d\u00eda del mes (01o31) <code>D</code> d\u00eda de la semana, domingo (<code>1</code>) al s\u00e1bado (<code>7</code>) <code>ID</code> ISO 8601 d\u00eda de la semana, lunes (<code>1</code>) hasta el domingo (<code>7</code>) <code>W</code> semana del mes (1o5o) (la primera semana comienza el primer d\u00eda del mes) <code>WW</code> semana n\u00famero de a\u00f1o (1o53) (la primera semana comienza el primer d\u00eda del a\u00f1o) <code>IW</code> semana n\u00famero de n\u00fameros ISO 8601 semana de n\u00famero (01-53; el primer jueves del a\u00f1o es en la semana 1) <code>CC</code> siglo (2 d\u00edgitos) (el siglo XXI comienza el 2001-01-01) <code>J</code> Julian Date (d\u00edas de entrada desde el 24 de noviembre de 4714 A.C. en la medianoche local; v\u00e9ase Secci\u00f3n B.7) <code>Q</code> trimestre <code>RM</code> mes en la parte superior n\u00fameros romanos (I-XII; I=Enero) <code>rm</code> mes en min b\u00edf romanos n\u00fameros romanos (ixii; i=enero) <code>TZ</code> abreviatura de la zona temporal superior (s\u00f3lo se apoya en <code>to_char</code>) <code>tz</code> abreviatura de la zona temporal de caso inferior (s\u00f3lo se apoya en <code>to_char</code>) <code>TZH</code> horas de zona horaria <code>TZM</code> minutos de zona horaria <code>OF</code> compensaci\u00f3n de la zona temporal de UTC (s\u00f3lo se apoya en <code>to_char</code>) <p>Los modustadores se pueden aplicar a cualquier patr\u00f3n de plantilla para alterar su comportamiento. Por ejemplo,  <code>FMMonth</code>es el  <code>Month</code>patr\u00f3n con el  <code>FM</code>modificador. En el cuadro 9.28 se muestran los patrones modificadores para el formato de fecha/hora.</p> <p>Cuadro 9.28. Modificadores de patr\u00f3n de plantilla para el formato de fecha/tiempo</p> Modificador Descripci\u00f3n Ejemplo <code>FM</code>prefix modo de relleno (suprimir los ceros de los principales y acolchado en blanco) <code>FMMonth</code> <code>TH</code>suffix Sufijo de n\u00famero ordinal de la caja superior <code>DDTH</code>, por ejemplo, <code>12TH</code> <code>th</code>suffix Caso inferior sufijo n\u00famero ordinal <code>DDth</code>, por ejemplo, <code>12th</code> <code>FX</code>prefix opci\u00f3n global de formato fijo (v\u00e9anse las notas de uso) <code>FX Month DD Day</code> <code>TM</code>prefix modo de traducci\u00f3n (utilizar nombres de d\u00eda y mes localizados basados en lc-time) <code>TMMonth</code> <code>SP</code>suffix modo hechizo (no implemento) <code>DDSP</code> <p>Notas de uso para el formato de fecha/hora:</p> <ul> <li> <p><code>FM</code>suprime los ceros de salida y los espacios en blanco que de otra manera se  a\u00f1adir\u00edan para hacer que la salida de un patr\u00f3n sea de ancho fijo. En PostgreSQL,  <code>FM</code>modifica s\u00f3lo la siguiente especificaci\u00f3n, mientras que en Or\u00e1culo  <code>FM</code>afecta a todas las especificaciones posteriores, y  <code>FM</code>Los modificadores se mueven el modo de relleno dentro y fuera.</p> </li> <li> <p><code>TM</code>suprimir los espacios en blanco, incluso  <code>FM</code>se especifica.</p> </li> <li> <p><code>to_timestamp</code>y  <code>to_date</code>ignorar el caso de la letra en la entrada; as\u00ed, por ejemplo <code>MON</code>, <code>Mon</code>, y  <code>mon</code>todos aceptan las mismas cuerdas. Cuando se usa el  <code>TM</code>modificador, pleplicar la jurisprudencia se realiza de acuerdo con las reglas de la  recopilaci\u00f3n de entradas de la funci\u00f3n (v\u00e9ase la secci\u00f3n 24.2).</p> </li> <li> <p><code>to_timestamp</code>y  <code>to_date</code>saltar varios espacios en blanco al principio de la cadena de entrada y  alrededor de los valores de fecha y hora a menos que el  <code>FX</code>opci\u00f3n se usa. Por ejemplo,  <code>to_timestamp(' 2000  JUN', 'YYYY MON')</code>y  <code>to_timestamp('2000 - JUN', 'YYYY-MON')</code>trabajo, pero  <code>to_timestamp('2000  JUN', 'FXYYYY MON')</code>devuelve un error porque  <code>to_timestamp</code>espera un solo espacio.  <code>FX</code>debe especificarse como el primer elemento de la plantilla.</p> </li> <li> <p>Un separador (un espacio o car\u00e1cter no de letra/no d\u00edgito) en la cadena de plantillas de  <code>to_timestamp</code>y  <code>to_date</code>coincide con cualquier separador en la cadena de entrada o se salta, a menos que el  <code>FX</code>opci\u00f3n se usa. Por ejemplo,  <code>to_timestamp('2000JUN', 'YYYY///MON')</code>y  <code>to_timestamp('2000/JUN', 'YYYY MON')</code>trabajo, pero  <code>to_timestamp('2000//JUN', 'YYYY/MON')</code>devuelve un error porque el n\u00famero de separadores en la cadena de entrada supera el n\u00famero de separadores en la plantilla.</p> </li> </ul> <p>Si  <code>FX</code>se especifica, un separador en la cadena de plantilla coincide exactamente con un personaje en la cadena de entrada. Pero tenga en cuenta que el  car\u00e1cter de cadena de entrada no es necesario para ser el mismo que el  separador de la cadena de plantillas. Por ejemplo,  <code>to_timestamp('2000/JUN', 'FXYYYY MON')</code>funciona, pero  <code>to_timestamp('2000/JUN', 'FXYYYY MON')</code>devuelve un error porque el segundo espacio en la cadena de plantilla consume la letra  <code>J</code>de la cuerda de entrada.</p> <ul> <li> <p>A  <code>TZH</code>patr\u00f3n de plantilla puede coincidir con un n\u00famero firmado. Sin el  <code>FX</code>opci\u00f3n, menos signos pueden ser ambiguos, y podr\u00edan interpretarse como un  separador. Esta ambiguedad se resuelve de la siguiente manera: Si el  n\u00famero de separadores antes  <code>TZH</code>en la cadena de plantilla es menor que el n\u00famero de separadores antes del  signo menos en la cadena de entrada, el signo menos se interpreta como  parte de <code>TZH</code>. De lo contrario, el signo menos se considera un separador entre valores. Por ejemplo,  <code>to_timestamp('2000 -10', 'YYYY TZH')</code>partidos  <code>-10</code>a <code>TZH</code>, pero  <code>to_timestamp('2000 -10', 'YYYY TZH')</code>partidos  <code>10</code>a <code>TZH</code>.</p> </li> <li> <p>Se permite el texto ordinario en  <code>to_char</code>plantillas y ser\u00e1 de salida literalmente. Puede poner una substring en comillas  dobles para forzarla a ser interpretada como texto literal incluso si  contiene patrones de plantilla. Por ejemplo, en <code>'\"Hello Year \"YYYY'</code>, el  <code>YYYY</code>ser\u00e1 reemplazado por los datos del a\u00f1o, pero el  <code>Y</code>en  <code>Year</code>no lo ser\u00e1. En <code>to_date</code>, <code>to_number</code>, y <code>to_timestamp</code>, el texto literal y las cuerdas de doble cotidad dan como resultado en  saltarse el n\u00famero de caracteres contenidos en la cadena; por ejemplo  <code>\"XX\"</code>salta dos caracteres de entrada (sean o no <code>XX</code>).</p> </li> </ul> <p>### Tip</p> <p>Antes de PostgreSQL 12, era posible saltar texto arbitrario en la cadena de entrada usando caracteres no de letras o no d\u00edgitos. Por ejemplo,  <code>to_timestamp('2000y6m1d', 'yyyy-MM-DD')</code>sol\u00eda trabajar. Ahora s\u00f3lo puede utilizar caracteres de letras para este prop\u00f3sito. Por ejemplo,  <code>to_timestamp('2000y6m1d', 'yyyytMMtDDt')</code>y  <code>to_timestamp('2000y6m1d', 'yyyy\"y\"MM\"m\"DD\"d\"')</code>saltar <code>y</code>, <code>m</code>, y <code>d</code>.</p> <ul> <li> <p>Si desea tener una doble cotizaci\u00f3n en la salida debe precederla con una reacci\u00f3n de espaldas, por ejemplo <code>'\\\"YYYY Month\\\"'</code>. Las barras de espalda no son especiales fuera de las cuerdas de doble  cotizaci\u00f3n. Dentro de una cuerda de doble cotizado, una reacci\u00f3n hace  que el siguiente personaje sea tomado literalmente, sea lo que sea (pero esto no tiene ning\u00fan efecto especial a menos que el siguiente personaje sea una doble cita u otra reacci\u00f3n).</p> </li> <li> <p>En  <code>to_timestamp</code>y <code>to_date</code>, si la especificaci\u00f3n del formato del a\u00f1o es inferior a cuatro d\u00edgitos, por ejemplo, <code>YYY</code>, y el a\u00f1o suministrado es inferior a cuatro d\u00edgitos, el a\u00f1o se ajustar\u00e1 para ser m\u00e1s cercano al a\u00f1o 2020, por ejemplo,  <code>95</code>se convierte en 1995.</p> </li> <li> <p>En  <code>to_timestamp</code>y <code>to_date</code>, los a\u00f1os negativos se tratan como significar BC. Si escribes tanto un a\u00f1o negativo como un expl\u00edcito  <code>BC</code>Campo, consigue AD de nuevo. Una entrada del a\u00f1o cero se trata como 1 BC.</p> </li> <li> <p>En  <code>to_timestamp</code>y <code>to_date</code>, el  <code>YYYY</code>La conversi\u00f3n tiene una restricci\u00f3n cuando se procesan a\u00f1os con m\u00e1s de 4  d\u00edgitos. Debe utilizar alg\u00fan car\u00e1cter o plantilla sin d\u00edgitos despu\u00e9s <code>YYYY</code>, de lo contrario el a\u00f1o siempre se interpreta como 4 d\u00edgitos. Por ejemplo (con el a\u00f1o 20000):  <code>to_date('200001131', 'YYYYMMDD')</code>se interpretar\u00e1 como un a\u00f1o de 4 d\u00edgitos; en su lugar, utilizar un separador no d\u00edgito despu\u00e9s del a\u00f1o, como  <code>to_date('20000-1131', 'YYYY-MMDD')</code>o o <code>to_date('20000Nov31', 'YYYYMonDD')</code>.</p> </li> <li> <p>En  <code>to_timestamp</code>y <code>to_date</code>, el  <code>CC</code>(centros) campo es aceptado pero ignorado si hay una <code>YYY</code>,  <code>YYYY</code>o o  <code>Y,YYY</code>campo. Si  <code>CC</code>se utiliza con  <code>YY</code>o o  <code>Y</code>entonces el resultado se calcula como ese a\u00f1o en el siglo especificado. Si se  especifica el siglo pero el a\u00f1o no lo es, se asume el primer a\u00f1o del  siglo.</p> </li> <li> <p>En  <code>to_timestamp</code>y <code>to_date</code>, nombres o n\u00fameros de los d\u00edas de la semana (<code>DAY</code>, <code>D</code>, y los tipos de campo relacionados) se aceptan, pero se ignoran a  efectos de calcular el resultado. Lo mismo ocurre con el trimestre (<code>Q</code>- campos.</p> </li> <li> <p>En  <code>to_timestamp</code>y <code>to_date</code>, una fecha de n\u00famero de la semana ISO 8601 (a diferencia de una fecha gregoriana) se puede especificar de dos maneras:</p> </li> <li> <p>A\u00f1o, n\u00famero de la semana y d\u00eda de la semana: por ejemplo  <code>to_date('2006-42-4', 'IYYY-IW-ID')</code>devuelve la fecha <code>2006-10-19</code>. Si omite el d\u00eda de la semana se supone que es 1 (lunes).</p> </li> <li>A\u00f1o y d\u00eda del a\u00f1o: por ejemplo  <code>to_date('2006-291', 'IYYY-IDDD')</code>devuelve tambi\u00e9n <code>2006-10-19</code>.</li> </ul> <p>Intentar entrar en una fecha usando una mezcla de campos de  n\u00fameros de semana ISO 8601 y campos de fecha gregorianas es absurdo, y  causar\u00e1 un error. En el contexto de un a\u00f1o de n\u00famero de semanas ISO  8601, el concepto de un mes o d\u00eda del mes no tiene significado. En el contexto de un a\u00f1o gregoriano, la semana ISO no tiene sentido.</p> <p>### Precauci\u00f3n</p> <p>Mientras que  <code>to_date</code>rechazar\u00e1 una mezcla de campos de fecha de n\u00famero de semanas gregoriana e ISO,  <code>to_char</code>no lo har\u00e1, ya que las especificaciones del formato de salida como  <code>YYYY-MM-DD (IYYY-IDDD)</code>puede ser \u00fatil. Pero evita escribir algo as\u00ed como <code>IYYY-MM-DD</code>; eso dar\u00eda resultados sorprendentes cerca del comienzo del a\u00f1o. (Para m\u00e1s informaci\u00f3n cabe ver la )</p> <ul> <li>En <code>to_timestamp</code>, milisegundo (<code>MS</code>) o microsegundos (<code>US</code>) los campos se utilizan como los segundos d\u00edgitos despu\u00e9s del punto decimal. Por ejemplo  <code>to_timestamp('12.3', 'SS.MS')</code>no es 3 milisegundos, sino 300, porque la conversi\u00f3n lo trata como 12 x 0,3 segundos. Por lo tanto, para el formato <code>SS.MS</code>, los valores de entrada <code>12.3</code>, <code>12.30</code>, y  <code>12.300</code>especificar el mismo n\u00famero de milisegundos. Para obtener tres milisegundos, uno debe escribir <code>12.003</code>, que la conversi\u00f3n trata como 12 - 0.003 = 12.003 segundos.</li> </ul> <p>He aqu\u00ed un ejemplo m\u00e1s complejo:  <code>to_timestamp('15:12:02.020.001230', 'HH24:MI:SS.MS.US')</code>es de 15 horas, 12 minutos y 2 segundos 20 milisegundos 1230 microsegundos = 2.021230 segundos.</p> <ul> <li> <p><code>to_char(..., 'ID')</code>'s d\u00eda de la semana de la semana coincide con el  <code>extract(isodow from ...)</code>funci\u00f3n, pero <code>to_char(..., 'D')</code>'s no coincide <code>extract(dow from ...)</code>El d\u00eda de la numeraci\u00f3n.</p> </li> <li> <p><code>to_char(interval)</code>formatos de formatos  <code>HH</code>y  <code>HH12</code>como se muestra en un reloj de 12 horas, por ejemplo cero horas y 36 horas tanto de salida como <code>12</code>, mientras que  <code>HH24</code>salidas del valor de la hora completa, que puede superar los 23 en un  <code>interval</code>valor.</p> </li> </ul> <p>La Tabla 9.29 muestra los patrones de plantilla disponibles para formatear valores num\u00e9ricos.</p> <p>Cuadro 9.29. Plantas de plantilla para la formatea num\u00e9rica</p> Patr\u00f3n Descripci\u00f3n <code>9</code> posici\u00f3n de d\u00edgito (puede ser eliminado si es insignificante) <code>0</code> posici\u00f3n de d\u00edgito (no se dejar\u00e1 caer, aunque sea insignificante) <code>.</code>(per\u00edodo) punto decimal <code>,</code>(comma) el separador de grupo (miles) <code>PR</code> valor negativo en los corchetes de \u00e1ngulo <code>S</code> signo anclado al n\u00famero (utiliza locale) <code>L</code> s\u00edmbolo de la moneda (utiliza locale) <code>D</code> punto decimal (utiliza locale) <code>G</code> separador de grupo (utiliza locale) <code>MI</code> menos signo en la posici\u00f3n especificada (si n\u00famero 0) <code>PL</code> m\u00e1s signo en la posici\u00f3n especificada (si n\u00famero 0) <code>SG</code> m\u00e1s/menos signo en la posici\u00f3n especificada <code>RN</code> N\u00famero romano (a la entrada entre 1 y 3999) <code>TH</code>o o sufijo de n\u00famero ordinal <code>V</code> cambio especificado n\u00famero de d\u00edgitos (v\u00e9anse las notas) <code>EEEE</code> exponente de notaci\u00f3n cient\u00edfica <p>Notas de uso para el formato num\u00e9rico:</p> <ul> <li><code>0</code>especifica una posici\u00f3n de d\u00edgito que siempre se imprimir\u00e1, incluso si contiene un cero de direcci\u00f3n/trasing.  <code>9</code>Tambi\u00e9n especifica una posici\u00f3n de d\u00edgito, pero si es un cero l\u00edder entonces  ser\u00e1 reemplazado por un espacio, mientras que si es un rastro cero y el  modo de llenado se especifica entonces se eliminar\u00e1. (Por: <code>to_number()</code>, estos dos caracteres de patr\u00f3n son equivalentes.)</li> <li>Si el formato proporciona menos d\u00edgitos fraccionados que el n\u00famero que se est\u00e1 formateando,  <code>to_char()</code>redondear\u00e1 el n\u00famero al n\u00famero especificado de d\u00edgitos fraccionados.</li> <li>Los caracteres patr\u00f3n <code>S</code>, <code>L</code>, <code>D</code>, y  <code>G</code>representan el signo, s\u00edmbolo de la moneda, punto decimal, y miles de caracteres  separadores definidos por la localidad actual (v\u00e9ase lc-monetaria y lc-numeric). Los caracteres de patr\u00f3n per\u00edodo y coma representan esos caracteres  exactos, con los significados de punto decimal y miles de separadores,  independientemente de la localidad.</li> <li>Si no se hace una disposici\u00f3n expl\u00edcita para firmar <code>to_char()</code>patr\u00f3n de 's, una columna se reservar\u00e1 para el signo, y se anclar\u00e1 para (aparentemente a la izquierda de) el n\u00famero. Si  <code>S</code>Parece que acaba de dejar de algo. <code>9</code>Tambi\u00e9n estar\u00e1 anclado al n\u00famero.</li> <li>Un signo formateado usando <code>SG</code>, <code>PL</code>, o  <code>MI</code>no est\u00e1 anclada al n\u00famero; por ejemplo,  <code>to_char(-12, 'MI9999')</code>productos  <code>'- 12'</code>pero,  <code>to_char(-12, 'S9999')</code>productos <code>' -12'</code>. (La implementaci\u00f3n de Oracle no permite el uso de  <code>MI</code>antes de <code>9</code>, pero m\u00e1s bien requiere que  <code>9</code>preceder <code>MI</code>.)</li> <li><code>TH</code>no convierte valores inferiores a cero y no convierte n\u00fameros fraccionales.</li> <li><code>PL</code>, <code>SG</code>, y  <code>TH</code>son extensiones de PostgreSQL.</li> <li>En <code>to_number</code>, si no se trata de patrones de plantillas no datos, tales como  <code>L</code>o o  <code>TH</code>se utilizan, se saltan el n\u00famero correspondiente de caracteres de entrada, coinc\u00e1ndolos o no con el patr\u00f3n de la plantilla, a menos que se traten  caracteres de datos (es decir, d\u00edgitos, signo, punto decimal o coma).  Por ejemplo,  <code>TH</code>Se saltar\u00eda dos caracteres no-datos.</li> <li><code>V</code>con  <code>to_char</code>multiplica los valores de entrada por <code>10^*</code>n<code>*</code>, d\u00f3nde  <code>n</code>es el n\u00famero de d\u00edgitos siguientes <code>V</code>.  <code>V</code>con  <code>to_number</code>se divide de manera similar.  <code>to_char</code>y  <code>to_number</code>no apoyar el uso de  <code>V</code>combinado con un punto decimal (p. ej.,  <code>99.9V99</code>no est\u00e1 permitido).</li> <li><code>EEEE</code>(notaci\u00f3n cient\u00edfica) no se puede utilizar en combinaci\u00f3n con cualquiera de los  otros patrones de formato o modificadores distintos de los patrones de  d\u00edgitos y decimales, y debe estar al final de la cadena de formato (por  ejemplo,  <code>9.99EEEE</code>es un patr\u00f3n v\u00e1lido).</li> </ul> <p>Ciertos modificadores se pueden aplicar a cualquier patr\u00f3n de plantilla para alterar su comportamiento. Por ejemplo,  <code>FM99.99</code>es el  <code>99.99</code>patr\u00f3n con el  <code>FM</code>modificador. La Tabla 9.30 muestra los patrones modificadores para el formato num\u00e9rico.</p> <p>Cuadro 9.30. Modificadores de patr\u00f3n de plantilla para formates num\u00e9ricos</p> Modificador Descripci\u00f3n Ejemplo <code>FM</code>prefix modo de relleno (supprimir ceros de rastro y acolchado en blanco) <code>FM99.99</code> <code>TH</code>suffix Sufijo de n\u00famero ordinal de la caja superior <code>999TH</code> <code>th</code>suffix Caso inferior sufijo n\u00famero ordinal <code>999th</code> <p>En el cuadro 9.31 se indican algunos ejemplos de la utilizaci\u00f3n de la  <code>to_char</code>funci\u00f3n.</p> <p>Cuadro 9.31.  <code>to_char</code>Ejemplos</p> Expresi\u00f3n Resultado <code>to_char(current_timestamp, 'Day, DD HH12:MI:SS')</code> <code>'Tuesday , 06 05:39:18'</code> <code>to_char(current_timestamp, 'FMDay, FMDD HH12:MI:SS')</code> <code>'Tuesday, 6 05:39:18'</code> <code>to_char(-0.1, '99.99')</code> <code>' -.10'</code> <code>to_char(-0.1, 'FM9.99')</code> <code>'-.1'</code> <code>to_char(-0.1, 'FM90.99')</code> <code>'-0.1'</code> <code>to_char(0.1, '0.9')</code> <code>' 0.1'</code> <code>to_char(12, '9990999.9')</code> <code>'  0012.0'</code> <code>to_char(12, 'FM9990999.9')</code> <code>'0012.'</code> <code>to_char(485, '999')</code> <code>' 485'</code> <code>to_char(-485, '999')</code> <code>'-485'</code> <code>to_char(485, '9 9 9')</code> <code>' 4 8 5'</code> <code>to_char(1485, '9,999')</code> <code>' 1,485'</code> <code>to_char(1485, '9G999')</code> <code>' 1 485'</code> <code>to_char(148.5, '999.999')</code> <code>' 148.500'</code> <code>to_char(148.5, 'FM999.999')</code> <code>'148.5'</code> <code>to_char(148.5, 'FM999.990')</code> <code>'148.500'</code> <code>to_char(148.5, '999D999')</code> <code>' 148,500'</code> <code>to_char(3148.5, '9G999D999')</code> <code>' 3 148,500'</code> <code>to_char(-485, '999S')</code> <code>'485-'</code> <code>to_char(-485, '999MI')</code> <code>'485-'</code> <code>to_char(485, '999MI')</code> <code>'485 '</code> <code>to_char(485, 'FM999MI')</code> <code>'485'</code> <code>to_char(485, 'PL999')</code> <code>'+485'</code> <code>to_char(485, 'SG999')</code> <code>'+485'</code> <code>to_char(-485, 'SG999')</code> <code>'-485'</code> <code>to_char(-485, '9SG99')</code> <code>'4-85'</code> <code>to_char(-485, '999PR')</code> <code>'&lt;485&gt;'</code> <code>to_char(485, 'L999')</code> <code>'DM 485'</code> <code>to_char(485, 'RN')</code> <code>'    CDLXXXV'</code> <code>to_char(485, 'FMRN')</code> <code>'CDLXXXV'</code> <code>to_char(5.2, 'FMRN')</code> <code>'V'</code> <code>to_char(482, '999th')</code> <code>' 482nd'</code> <code>to_char(485, '\"Good number:\"999')</code> <code>'Good number: 485'</code> <code>to_char(485.8, '\"Pre:\"999\" Post:\" .999')</code> <code>'Pre: 485 Post: .800'</code> <code>to_char(12, '99V999')</code> <code>' 12000'</code> <code>to_char(12.4, '99V999')</code> <code>' 12400'</code> <code>to_char(12.45, '99V9')</code> <code>' 125'</code> <code>to_char(0.0004859, '9.99EEEE')</code> <code>' 4.86e-04'</code>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/10.-Funciones%20de%20soporte%20de%20Enum/","title":"10.-Funciones de soporte de Enum","text":"<p>Para los tipos enum (descrito en la Secci\u00f3n 8.7), hay varias funciones que permiten una programaci\u00f3n m\u00e1s limpia sin  valores particulares de codificaci\u00f3n dura de tipo enum. Estos se  enumeran en la Tabla 9.35. Los ejemplos asumen un tipo enum creado como:</p> <pre><code>CREATE TYPE arco iris AS ENUM ('rojo', 'naranja', 'amarillo', 'verde', 'az\u00facar', 'p\u00farpura');\n</code></pre> <p>Cuadro 9.35. Funciones de soporte de Enum</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>enum_first</code>(  <code>anyenum</code>) . <code>anyenum</code>              Devuelve el primer valor del tipo de entrada enum.               <code>enum_first(null::rainbow)</code>- <code>enum_last</code>(  <code>anyenum</code>) . <code>anyenum</code>              Devuelve el \u00faltimo valor del tipo de entrada enum.               <code>enum_last(null::rainbow)</code>- <code>enum_range</code>(  <code>anyenum</code>) . <code>anyarray</code>              Devuelve todos los valores del tipo entrada enum en un array ordenado.               <code>enum_range(null::rainbow)</code>- <code>enum_range</code>( <code>anyenum</code>,  <code>anyenum</code>) .               Devuelve el rango entre los dos valores enum dados,  como una matriz ordenada. Los valores deben ser del mismo tipo enum. Si  el primer par\u00e1metro es nulo, el resultado comenzar\u00e1 con el primer valor  del tipo enum. Si el segundo par\u00e1metro es nulo, el resultado terminar\u00e1  con el \u00faltimo valor del tipo enum.               <code>enum_range('orange'::rainbow, 'green'::rainbow)</code>-                <code>enum_range(NULL, 'green'::rainbow)</code>-                <code>enum_range('orange'::rainbow, NULL)</code>- <p>Observe que, excepto la forma de dosargumentos de <code>enum_range</code>, estas funciones ignoran el valor espec\u00edfico que se les ha pasado; s\u00f3lo  les importa su tipo de datos declarado. O se puede pasar un valor  espec\u00edfico del tipo, con el mismo resultado. Es m\u00e1s com\u00fan aplicar estas  funciones a una columna de tabla o argumento de funci\u00f3n que a un nombre  de tipo cableado como se usa en los ejemplos.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/11.-Funciones%20geom%C3%A9tricas%20y%20operadores/","title":"11.-Funciones geom\u00e9tricas y operadores","text":"<p>Los tipos geom\u00e9tricos <code>point</code>, <code>box</code>, <code>lseg</code>, <code>line</code>, <code>path</code>, <code>polygon</code>, y  <code>circle</code>tener un gran conjunto de funciones y operadores de soporte nativa, que se muestran en la ,  y .</p> <p>Cuadro 9.36. Operadores geom\u00e9tricos</p> Operadora              Descripci\u00f3n              Ejemplos (s) <code>geometric_type</code><code>+``point</code>- <code>*</code>geometric_type<code>*</code>              A\u00f1ade las coordenadas del segundo  <code>point</code>a los de cada punto del primer argumento, realizando as\u00ed traducci\u00f3n. Disponible para <code>point</code>, <code>box</code>, <code>path</code>, <code>circle</code>.               <code>box '(1,1),(0,0)' + point '(2,0)'</code>- <code>path``+``path</code>- <code>path</code>              Concatenates dos caminos abiertos (vuelve NULL si cualquiera de las dos v\u00edas est\u00e1 cerrada).               <code>path '[(0,0),(1,1)]' + path '[(2,2),(3,3),(4,4)]'</code>- <code>geometric_type</code><code>-``point</code>- <code>*</code>geometric_type<code>*</code>              Resta las coordenadas de la segunda  <code>point</code>de los de cada punto del primer argumento, realizando as\u00ed traducci\u00f3n. Disponible para <code>point</code>, <code>box</code>, <code>path</code>, <code>circle</code>.               <code>box '(1,1),(0,0)' - point '(2,0)'</code>- <code>geometric_type</code><code>*``point</code>- <code>*</code>geometric_type<code>*</code>              Multiplica cada punto del primer argumento por el segundo  <code>point</code>(tratando un punto como un n\u00famero complejo representado por partes reales e  imaginarios, y realizando la multiplicaci\u00f3n compleja est\u00e1ndar). Si uno  interpreta el segundo  <code>point</code>como vector, esto es equivalente a escalar el tama\u00f1o y distancia del objeto  desde el origen por la longitud del vector, y girarlo en sentido  contrario a las agujas del reloj alrededor del origen por el \u00e1ngulo del  vector desde el  <code>x</code>eje. Disponible para <code>point</code>, <code>box</code>,[a] <code>path</code>, <code>circle</code>.               <code>path '((0,0),(1,0),(1,1))' * point '(3.0,0)'</code>-                <code>path '((0,0),(1,0),(1,1))' * point(cosd(45), sind(45))</code>- <code>geometric_type</code><code>/``point</code>- <code>*</code>geometric_type<code>*</code>              Divide cada punto del primer argumento por el segundo  <code>point</code>(tratar un punto como un n\u00famero complejo representado por partes reales e  imaginarios, y realizar una divisi\u00f3n compleja est\u00e1ndar). Si uno  interpreta el segundo  <code>point</code>como vector, esto es equivalente a escalar el tama\u00f1o y distancia del objeto  hacia abajo por la longitud del vector, y girarlo en el sentido de las  agujas del reloj alrededor del origen por el \u00e1ngulo del vector desde el  <code>x</code>eje. Disponible para <code>point</code>, <code>box</code>,[a] <code>path</code>, <code>circle</code>.               <code>path '((0,0),(1,0),(1,1))' / point '(2.0,0)'</code>-                <code>path '((0,0),(1,0),(1,1))' / point(cosd(45), sind(45))</code>- <code>@-@</code><code>geometric_type</code>- <code>double precision</code>              Recuto la longitud total. Disponible para <code>lseg</code>, <code>path</code>.               <code>@-@ path '[(0,0),(1,0),(1,1)]'</code>- <code>@@</code><code>geometric_type</code>- <code>point</code>              Recuto el punto central. Disponible para <code>box</code>, <code>lseg</code>, <code>polygon</code>, <code>circle</code>.               <code>@@ box '(2,2),(0,0)'</code>- <code>#</code><code>geometric_type</code>- <code>integer</code>              Devuelve el n\u00famero de puntos. Disponible para <code>path</code>, <code>polygon</code>.               <code># path '((1,0),(0,1),(-1,0))'</code>- <code>geometric_type</code><code>#</code><code>geometric_type</code>- <code>point</code>              Calca el punto de intersecci\u00f3n, o NULL si no hay ninguno. Disponible para <code>lseg</code>, <code>line</code>.               <code>lseg '[(0,0),(1,1)]' # lseg '[(1,0),(0,1)]'</code>- <code>box``#``box</code>- <code>box</code>              Calca la intersecci\u00f3n de dos cajas, o NULL si no hay ninguna.               <code>box '(2,2),(-1,-1)' # box '(1,1),(-2,-2)'</code>- <code>geometric_type</code><code>##</code><code>geometric_type</code>- <code>point</code>              Calma el punto m\u00e1s cercano al primer objeto en el segundo objeto. Disponible para estos pares de tipos: (<code>point</code>, <code>box</code>), (<code>point</code>, <code>lseg</code>), (<code>point</code>, <code>line</code>), (<code>lseg</code>, <code>box</code>), (<code>lseg</code>, <code>lseg</code>), (<code>line</code>, <code>lseg</code>).               <code>point '(0,0)' ## lseg '[(2,0),(0,2)]'</code>- <code>geometric_type</code><code>&lt;-&gt;</code><code>geometric_type</code>- <code>double precision</code>              Calca la distancia entre los objetos. Disponible para los siete tipos geom\u00e9tricos, para todas las combinaciones de  <code>point</code>con otro tipo geom\u00e9trico, y para estos pares adicionales de tipos: (<code>box</code>, <code>lseg</code>), (<code>lseg</code>, <code>line</code>), (<code>polygon</code>, <code>circle</code>) (y los casos de conmutadores).               <code>circle '&lt;(0,0),1&gt;' &lt;-&gt; circle '&lt;(5,0),1&gt;'</code>- <code>geometric_type</code><code>@&gt;</code><code>geometric_type</code>- <code>boolean</code>              El primer objeto contiene segundo? Disponible para estos pares de tipos: (<code>box</code>, <code>point</code>), (<code>box</code>, <code>box</code>), (<code>path</code>, <code>point</code>), (<code>polygon</code>, <code>point</code>), (<code>polygon</code>, <code>polygon</code>), (<code>circle</code>, <code>point</code>), (<code>circle</code>, <code>circle</code>).               <code>circle '&lt;(0,0),2&gt;' @&gt; point '(1,1)'</code>- <code>geometric_type</code><code>&lt;@</code><code>geometric_type</code>- <code>boolean</code>              El primer objeto est\u00e1 contenido en o en el segundo? Disponible para estos pares de tipos: (<code>point</code>, <code>box</code>), (<code>point</code>, <code>lseg</code>), (<code>point</code>, <code>line</code>), (<code>point</code>, <code>path</code>), (<code>point</code>, <code>polygon</code>), (<code>point</code>, <code>circle</code>), (<code>box</code>, <code>box</code>), (<code>lseg</code>, <code>box</code>), (<code>lseg</code>, <code>line</code>), (<code>polygon</code>, <code>polygon</code>), (<code>circle</code>, <code>circle</code>).               <code>point '(1,1)' &lt;@ circle '&lt;(0,0),2&gt;'</code>- <code>geometric_type</code><code>&amp;&amp;</code><code>geometric_type</code>- <code>boolean</code>              Estos objetos se superponen? (Un punto en com\u00fan hace que esto sea cierto.) Disponible para <code>box</code>, <code>polygon</code>, <code>circle</code>.               <code>box '(1,1),(0,0)' &amp;&amp; box '(2,2),(0,0)'</code>- <code>geometric_type</code><code>&lt;&lt;</code><code>geometric_type</code>- <code>boolean</code>              El primer objeto es estrictamente dejado de segundo? Disponible para <code>point</code>, <code>box</code>, <code>polygon</code>, <code>circle</code>.               <code>circle '&lt;(0,0),1&gt;' &lt;&lt; circle '&lt;(5,0),1&gt;'</code>- <code>geometric_type</code><code>&gt;&gt;</code><code>geometric_type</code>- <code>boolean</code>              Es el primer objeto estrictamente correcto de segundo? Disponible para <code>point</code>, <code>box</code>, <code>polygon</code>, <code>circle</code>.               <code>circle '&lt;(5,0),1&gt;' &gt;&gt; circle '&lt;(0,0),1&gt;'</code>- <code>geometric_type</code><code>&amp;&lt;</code><code>geometric_type</code>- <code>boolean</code>              Primero se opone no extenderse a la derecha de segundo? Disponible para <code>box</code>, <code>polygon</code>, <code>circle</code>.               <code>box '(1,1),(0,0)' &amp;&lt; box '(2,2),(0,0)'</code>- <code>geometric_type</code><code>&amp;&gt;</code><code>geometric_type</code>- <code>boolean</code>              Primero se opone no extenderse a la izquierda de segundo? Disponible para <code>box</code>, <code>polygon</code>, <code>circle</code>.               <code>box '(3,3),(0,0)' &amp;&gt; box '(2,2),(0,0)'</code>- <code>geometric_type</code><code>&lt;&lt;|</code><code>geometric_type</code>- <code>boolean</code>              Es el primer objeto estrictamente por debajo del segundo? Disponible para <code>point</code>, <code>box</code>, <code>polygon</code>, <code>circle</code>.               <code>box '(3,3),(0,0)' &lt;&lt;| box '(5,5),(3,4)'</code>- <code>geometric_type</code><code>|&gt;&gt;</code><code>geometric_type</code>- <code>boolean</code>              Es el primer objeto estrictamente por encima del segundo? Disponible para <code>point</code>, <code>box</code>, <code>polygon</code>, <code>circle</code>.               <code>box '(5,5),(3,4)' |&gt;&gt; box '(3,3),(0,0)'</code>- <code>geometric_type</code><code>&amp;&lt;|</code><code>geometric_type</code>- <code>boolean</code>              El primer objeto no se extiende por encima del segundo? Disponible para <code>box</code>, <code>polygon</code>, <code>circle</code>.               <code>box '(1,1),(0,0)' &amp;&lt;| box '(2,2),(0,0)'</code>- <code>geometric_type</code><code>|&amp;&gt;</code><code>geometric_type</code>- <code>boolean</code>              El primer objeto no se extiende por debajo de segundo? Disponible para <code>box</code>, <code>polygon</code>, <code>circle</code>.               <code>box '(3,3),(0,0)' |&amp;&gt; box '(2,2),(0,0)'</code>- <code>box``&lt;^``box</code>- <code>boolean</code>              Es el primer objeto debajo del segundo (perseguir los bordes para tocar)?               <code>box '((1,1),(0,0))' &lt;^ box '((2,2),(1,1))'</code>- <code>box``&gt;^``box</code>- <code>boolean</code>              Es el primer objeto por encima del segundo (perseguir los bordes a tocar)?               <code>box '((2,2),(1,1))' &gt;^ box '((1,1),(0,0))'</code>- <code>geometric_type</code><code>?#</code><code>geometric_type</code>- <code>boolean</code>              Estos objetos se cruzan? Disponible para estos pares de tipos: (<code>box</code>, <code>box</code>), (<code>lseg</code>, <code>box</code>), (<code>lseg</code>, <code>lseg</code>), (<code>lseg</code>, <code>line</code>), (<code>line</code>, <code>box</code>), (<code>line</code>, <code>line</code>), (<code>path</code>, <code>path</code>).               <code>lseg '[(-1,0),(1,0)]' ?# box '(2,2),(-2,-2)'</code>- <code>?-``line</code>- <code>boolean</code> <code>?-``lseg</code>- <code>boolean</code>              Es la l\u00ednea horizontal?               <code>?- lseg '[(-1,0),(1,0)]'</code>- <code>point``?-``point</code>- <code>boolean</code>              Los puntos est\u00e1n alineados horizontalmente (es decir, tienen la misma y coordinaci\u00f3n)?               <code>point '(1,0)' ?- point '(0,0)'</code>- <code>?|``line</code>- <code>boolean</code> <code>?|``lseg</code>- <code>boolean</code>              Es la l\u00ednea vertical?               <code>?| lseg '[(-1,0),(1,0)]'</code>- <code>point``?|``point</code>- <code>boolean</code>              Los puntos est\u00e1n alineados verticalmente (es decir, tienen la misma x de coordenadas)?               <code>point '(0,1)' ?| point '(0,0)'</code>- <code>line``?-|``line</code>- <code>boolean</code> <code>lseg``?-|``lseg</code>- <code>boolean</code>              Son las l\u00edneas perpendiculares?               <code>lseg '[(0,0),(0,1)]' ?-| lseg '[(0,0),(1,0)]'</code>- <code>line``?||``line</code>- <code>boolean</code> <code>lseg``?||``lseg</code>- <code>boolean</code>              Son l\u00edneas paralelas?               <code>lseg '[(-1,0),(1,0)]' ?|| lseg '[(-1,2),(1,2)]'</code>- <code>geometric_type</code><code>~=</code><code>geometric_type</code>- <code>boolean</code>              Son estos objetos iguales? Disponible para <code>point</code>, <code>box</code>, <code>polygon</code>, <code>circle</code>.               <code>polygon '((0,0),(1,1))' ~= polygon '((1,1),(0,0))'</code>- [a] Rotating, una caja con estos operadores, s\u00f3lo mueve sus puntos de esquina: la  caja todav\u00eda se considera que tiene lados paralelos a los ejes. Por lo  tanto el tama\u00f1o de la caja no se conserva, como har\u00eda una verdadera  rotaci\u00f3n."},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/11.-Funciones%20geom%C3%A9tricas%20y%20operadores/#precaucion","title":"Precauci\u00f3n","text":"<p>Tenga en cuenta que el operador de la misma que el operador, <code>~=</code>, representa la noci\u00f3n habitual de igualdad para la <code>point</code>, <code>box</code>, <code>polygon</code>, y  <code>circle</code>tipos. Algunos de los tipos geom\u00e9tricos tambi\u00e9n tienen  <code>=</code>operador, pero  <code>=</code>se compara s\u00f3lo para \u00e1reas iguales. Los otros operadores de comparaci\u00f3n escalar ( <code>&lt;=</code>y as\u00ed encendido), cuando est\u00e9 disponible para este tipo, tambi\u00e9n comparar \u00e1reas.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/11.-Funciones%20geom%C3%A9tricas%20y%20operadores/#nota","title":"Nota","text":"<p>Antes de PostgreSQL 14, el punto est\u00e1 estrictamente por debajo de / por encima de los operadores de comparaci\u00f3n    <code>point``&lt;&lt;|``point</code>y    <code>point``|&gt;&gt;``point</code>se llamaban respectivamente  <code>&lt;^</code>y <code>&gt;^</code>. Estos nombres todav\u00eda est\u00e1n disponibles, pero se desprecaban y eventualmente ser\u00e1n eliminados.</p> <p>Cuadro 9.37. Funciones geom\u00e9tricas</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>area</code>(  <code>geometric_type</code>) . <code>double precision</code>              Zona de c\u00f3nygo. Disponible para <code>box</code>, <code>path</code>, <code>circle</code>. A  <code>path</code>la entrada debe ser cerrada, de lo contrario NULL se devuelve. Tambi\u00e9n, si el  <code>path</code>es auto-intersec\u00e1ndose, el resultado puede carecer de sentido.               <code>area(box '(2,2),(0,0)')</code>- <code>center</code>(  <code>geometric_type</code>) . <code>point</code>              Calca el punto central. Disponible para <code>box</code>, <code>circle</code>.               <code>center(box '(1,2),(0,0)')</code>- <code>diagonal</code>(  <code>box</code>) . <code>lseg</code>              Extracto de la diagonal de la caja como segmento de l\u00ednea (mismo que <code>lseg(box)</code>).               <code>diagonal(box '(1,2),(0,0)')</code>- <code>diameter</code>(  <code>circle</code>) . <code>double precision</code>              Caldea el di\u00e1metro del c\u00edrculo.               <code>diameter(circle '&lt;(0,0),2&gt;')</code>- <code>height</code>(  <code>box</code>) . <code>double precision</code>              Calca el tama\u00f1o vertical de la caja.               <code>height(box '(1,2),(0,0)')</code>- <code>isclosed</code>(  <code>path</code>) . <code>boolean</code>              Est\u00e1 el camino cerrado?               <code>isclosed(path '((0,0),(1,1),(2,0))')</code>- <code>isopen</code>(  <code>path</code>) . <code>boolean</code>              Est\u00e1 abierto el camino?               <code>isopen(path '[(0,0),(1,1),(2,0)]')</code>- <code>length</code>(  <code>geometric_type</code>) . <code>double precision</code>              Recuto la longitud total. Disponible para <code>lseg</code>, <code>path</code>.               <code>length(path '((-1,0),(1,0))')</code>- <code>npoints</code>(  <code>geometric_type</code>) . <code>integer</code>              Devuelve el n\u00famero de puntos. Disponible para <code>path</code>, <code>polygon</code>.               <code>npoints(path '[(0,0),(1,1),(2,0)]')</code>- <code>pclose</code>(  <code>path</code>) . <code>path</code>              Convierte la ruta a la forma cerrada.               <code>pclose(path '[(0,0),(1,1),(2,0)]')</code>- <code>popen</code>(  <code>path</code>) . <code>path</code>              Convierte la ruta a la forma abierta.               <code>popen(path '((0,0),(1,1),(2,0))')</code>- <code>radius</code>(  <code>circle</code>) . <code>double precision</code>              El radio de c\u00e1lculo del c\u00edrculo.               <code>radius(circle '&lt;(0,0),2&gt;')</code>- <code>slope</code>( <code>point</code>,  <code>point</code>) . <code>double precision</code>              Calma ladera de una l\u00ednea trazada a trav\u00e9s de los dos puntos.               <code>slope(point '(0,0)', point '(2,1)')</code>- <code>width</code>(  <code>box</code>) . <code>double precision</code>              Calca el tama\u00f1o horizontal de la caja.               <code>width(box '(1,2),(0,0)')</code>- <p>Cuadro 9.38. Funciones de conversi\u00f3n de tipo geom\u00e9trico</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>box</code>(  <code>circle</code>) . <code>box</code>              Calca de c\u00e1lculo inscrita dentro del c\u00edrculo.               <code>box(circle '&lt;(0,0),2&gt;')</code>- <code>box</code>(  <code>point</code>) .               Converts apuntan a caja vac\u00eda.               <code>box(point '(1,0)')</code>- <code>box</code>( <code>point</code>,  <code>point</code>) .               Convierte cualquier punto de esquina en caja.               <code>box(point '(0,1)', point '(1,0)')</code>- <code>box</code>(  <code>polygon</code>) .               Calca la caja de encuaja de pol\u00edgono.               <code>box(polygon '((0,0),(1,1),(2,0))')</code>- <code>bound_box</code>( <code>box</code>,  <code>box</code>) . <code>box</code>              Calca encuaja de dos cajas.               <code>bound_box(box '(1,1),(0,0)', box '(4,4),(3,3)')</code>- <code>circle</code>(  <code>box</code>) . <code>circle</code>              Calca la casilla de encierre de c\u00edrculo m\u00e1s peque\u00f1a.               <code>circle(box '(1,1),(0,0)')</code>- <code>circle</code>( <code>point</code>,  <code>double precision</code>) .               Constructa el c\u00edrculo desde el centro y el radio.               <code>circle(point '(0,0)', 2.0)</code>- <code>circle</code>(  <code>polygon</code>) .               Convert es pol\u00edgono en c\u00edrculo. El centro del c\u00edrculo  es la media de las posiciones de los puntos del pol\u00edgono, y el radio es  la distancia media de los puntos del pol\u00edgono de ese centro.               <code>circle(polygon '((0,0),(1,3),(2,0))')</code>- <code>line</code>( <code>point</code>,  <code>point</code>) . <code>line</code>              Convierte dos puntos en la l\u00ednea a trav\u00e9s de ellos.               <code>line(point '(-1,0)', point '(1,0)')</code>- <code>lseg</code>(  <code>box</code>) . <code>lseg</code>              Extracto de la diagonal de la caja como segmento de l\u00ednea.               <code>lseg(box '(1,0),(-1,0)')</code>- <code>lseg</code>( <code>point</code>,  <code>point</code>) .               Constructa segmento de l\u00ednea de dos puntos finales.               <code>lseg(point '(-1,0)', point '(1,0)')</code>- <code>path</code>(  <code>polygon</code>) . <code>path</code>              Convierte el pol\u00edgono en una ruta cerrada con la misma lista de puntos.               <code>path(polygon '((0,0),(1,1),(2,0))')</code>- <code>point</code>( <code>double precision</code>,  <code>double precision</code>) . <code>point</code>              Constructa punto desde sus coordenadas.               <code>point(23.4, -44.5)</code>- <code>point</code>(  <code>box</code>) .               Calca el centro de la caja.               <code>point(box '(1,0),(-1,0)')</code>- <code>point</code>(  <code>circle</code>) .               Caldea el centro del c\u00edrculo.               <code>point(circle '&lt;(0,0),2&gt;')</code>- <code>point</code>(  <code>lseg</code>) .               Caluta el segmento de l\u00ednea.               <code>point(lseg '[(-1,0),(1,0)]')</code>- <code>point</code>(  <code>polygon</code>) .               Califica de centro de pol\u00edgono (la media de las posiciones de los puntos del pol\u00edgono).               <code>point(polygon '((0,0),(1,1),(2,0))')</code>- <code>polygon</code>(  <code>box</code>) . <code>polygon</code>              Convierte caja en un pol\u00edgono de 4 puntos.               <code>polygon(box '(1,1),(0,0)')</code>- <code>polygon</code>(  <code>circle</code>) .               Converte c\u00edrculo en un pol\u00edgono de 12 puntos.               <code>polygon(circle '&lt;(0,0),2&gt;')</code>- <code>polygon</code>( <code>integer</code>,  <code>circle</code>) .               Converte c\u00edrculo en <code>n</code>- Pol\u00edgono de punta.               <code>polygon(4, circle '&lt;(3,0),1&gt;')</code>- <code>polygon</code>(  <code>path</code>) .               Convierte ruta cerrada a un pol\u00edgono con la misma lista de puntos.               <code>polygon(path '((0,0),(1,1),(2,0))')</code>- <p>Es posible acceder a los dos n\u00fameros de componentes de una  <code>point</code>como si el punto fuera un array con \u00edndices 0 y 1. Por ejemplo, si  <code>t.p</code>es a  <code>point</code>columna entonces  <code>SELECT p[0] FROM t</code>recupera la X y  <code>UPDATE t SET p[1] = ...</code>cambia la coordenada Y. De la misma manera, un valor de tipo  <code>box</code>o o  <code>lseg</code>se puede tratar como una matriz de dos  <code>point</code>valores.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/12.-Funciones%20de%20direcci%C3%B3n%20de%20red%20y%20operadores/","title":"12.-Funciones de direcci\u00f3n de red y operadores","text":"<p>Los tipos de direcciones de red IP,  <code>cidr</code>y <code>inet</code>, apoyar a los operadores de comparaci\u00f3n habituales que figuran en el cuadro 9.1, as\u00ed como a los operadores y funciones especializados que figuran en el  y .</p> <p>Cualquiera  <code>cidr</code>valor se puede echar a  <code>inet</code>impl\u00edcitamente; por lo tanto, los operadores y funciones que se muestran a continuaci\u00f3n como operan en  <code>inet</code>tambi\u00e9n trabajar en  <code>cidr</code>valores. (Donde haya funciones separadas para  <code>inet</code>y <code>cidr</code>, es porque el comportamiento debe ser diferente para los dos casos.) Adem\u00e1s, se permite lanzar un  <code>inet</code>valor a <code>cidr</code>. Cuando esto se hace, cualquier bits a la derecha de la masajea de red se er cero silenciosamente para crear un  <code>cidr</code>valor.</p> <p>Cuadro 9.39. Operadores de direcciones IP</p> Operadora              Descripci\u00f3n              Ejemplos (s) <code>inet``&lt;&lt;``inet</code>- <code>boolean</code>              Est\u00e1 la subred estrictamente contenida por la subred?  Este operador, y los siguientes cuatro, prueba para la inclusi\u00f3n de la  subred. Consideran s\u00f3lo las partes de la red de las dos direcciones  (ignorando cualquier bit a la derecha de las m\u00e1scaras de red) y  determinan si una red es id\u00e9ntica o una subred de la otra.               <code>inet '192.168.1.5' &lt;&lt; inet '192.168.1/24'</code>-                <code>inet '192.168.0.5' &lt;&lt; inet '192.168.1/24'</code>-                <code>inet '192.168.1/24' &lt;&lt; inet '192.168.1/24'</code>- <code>inet``&lt;&lt;=``inet</code>- <code>boolean</code>              La subred est\u00e1 contenida por o igual a la subred?               <code>inet '192.168.1/24' &lt;&lt;= inet '192.168.1/24'</code>- <code>inet``&gt;&gt;``inet</code>- <code>boolean</code>              La subred contiene estrictamente la subred?               <code>inet '192.168.1/24' &gt;&gt; inet '192.168.1.5'</code>- <code>inet``&gt;&gt;=``inet</code>- <code>boolean</code>              La subred contiene o igual de subred?               <code>inet '192.168.1/24' &gt;&gt;= inet '192.168.1/24'</code>- <code>inet``&amp;&amp;``inet</code>- <code>boolean</code>              O contiene la subred o iguala al otro?               <code>inet '192.168.1/24' &amp;&amp; inet '192.168.1.80/28'</code>-                <code>inet '192.168.1/24' &amp;&amp; inet '192.168.2.0/28'</code>- <code>~``inet</code>- <code>inet</code>              Computes NOTA NOT.               <code>~ inet '192.168.1.6'</code>- <code>inet``&amp;``inet</code>- <code>inet</code>              Computa a poco y.               <code>inet '192.168.1.6' &amp; inet '0.0.0.255'</code>- <code>inet``|``inet</code>- <code>inet</code>              Computa a poco de quir\u00f3fano.               <code>inet '192.168.1.6' | inet '0.0.0.255'</code>- <code>inet``+``bigint</code>- <code>inet</code>              A\u00f1ade una compensaci\u00f3n a una direcci\u00f3n.               <code>inet '192.168.1.6' + 25</code>- <code>bigint``+``inet</code>- <code>inet</code>              A\u00f1ade una compensaci\u00f3n a una direcci\u00f3n.               <code>200 + inet '::ffff:fff0:1'</code>- <code>inet``-``bigint</code>- <code>inet</code>              Resta un desplazamiento de una direcci\u00f3n.               <code>inet '192.168.1.43' - 36</code>- <code>inet``-``inet</code>- <code>bigint</code>              Cale la diferencia de dos direcciones.               <code>inet '192.168.1.43' - inet '192.168.1.19'</code>-                <code>inet '::1' - inet '::ffff:1'</code>- <p>Cuadro 9.40. Funciones de direcci\u00f3n IP</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>abbrev</code>(  <code>inet</code>) . <code>text</code>              Crea un formato de visualizaci\u00f3n abreviado como texto. (El resultado es el mismo que el  <code>inet</code>la funci\u00f3n de salida produce; se abrevian s\u00f3lo en comparaci\u00f3n con el resultado de un elenco expl\u00edcito a <code>text</code>, que por razones hist\u00f3ricas nunca suprimir\u00e1 la parte de la masa de red.)               <code>abbrev(inet '10.1.0.0/32')</code>- <code>abbrev</code>(  <code>cidr</code>) .               Crea un formato de visualizaci\u00f3n abreviado como texto.  (La abreviatura consiste en la ca\u00edda de octets de cero a la derecha de  la masaj de red; m\u00e1s ejemplos est\u00e1n en la Tabla 8.22.)               <code>abbrev(cidr '10.1.0.0/16')</code>- <code>broadcast</code>(  <code>inet</code>) . <code>inet</code>              Compute la direcci\u00f3n de transmisi\u00f3n de la red de la direcci\u00f3n.               <code>broadcast(inet '192.168.1.5/24')</code>- <code>family</code>(  <code>inet</code>) . <code>integer</code>              Devuelve la familia de la direcci\u00f3n:  <code>4</code>para IPv4,  <code>6</code>para IPv6.               <code>family(inet '::1')</code>- <code>host</code>(  <code>inet</code>) . <code>text</code>              Devuelve la direcci\u00f3n IP como texto, ignorando la m\u00e1scara de red.               <code>host(inet '192.168.1.0/24')</code>- <code>hostmask</code>(  <code>inet</code>) . <code>inet</code>              Cale la m\u00e1scara de hu\u00e9sco para la red de la direcci\u00f3n.               <code>hostmask(inet '192.168.23.20/30')</code>- <code>inet_merge</code>( <code>inet</code>,  <code>inet</code>) . <code>cidr</code>              El mismo que la m\u00e1s peque\u00f1a red que incluye ambas redes.               <code>inet_merge(inet '192.168.1.5/24', inet '192.168.2.5/24')</code>- <code>inet_same_family</code>( <code>inet</code>,  <code>inet</code>) . <code>boolean</code>              Pruebas si las direcciones pertenecen a la misma familia IP.               <code>inet_same_family(inet '192.168.1.5/24', inet '::1')</code>- <code>masklen</code>(  <code>inet</code>) . <code>integer</code>              Devuelve la longitud de la masa de la red en bits.               <code>masklen(inet '192.168.1.5/24')</code>- <code>netmask</code>(  <code>inet</code>) . <code>inet</code>              Cale la m\u00e1scara de red para la red de la direcci\u00f3n.               <code>netmask(inet '192.168.1.5/24')</code>- <code>network</code>(  <code>inet</code>) . <code>cidr</code>              Devuelve la parte de la red de la direcci\u00f3n, a punto de , a la derecha de la masa de red. (Esto es equivalente a la fundici\u00f3n  del valor a <code>cidr</code>.)               <code>network(inet '192.168.1.5/24')</code>- <code>set_masklen</code>( <code>inet</code>,  <code>integer</code>) . <code>inet</code>              Estace la longitud de la masa de red para un  <code>inet</code>valor. La parte de la direcci\u00f3n no cambia.               <code>set_masklen(inet '192.168.1.5/24', 16)</code>- <code>set_masklen</code>( <code>cidr</code>,  <code>integer</code>) .               Estaca la longitud de la masa de red para un  <code>cidr</code>valor. Los bits de direcci\u00f3n a la derecha de la nueva masa de red se establecen a cero.               <code>set_masklen(cidr '192.168.1.0/24', 16)</code>- <code>text</code>(  <code>inet</code>) . <code>text</code>              Devuelve la direcci\u00f3n IP no abreviada y la longitud de  la masa de red como texto. (Esto tiene el mismo resultado como un elenco expl\u00edcito a <code>text</code>.)               <code>text(inet '192.168.1.5')</code>-"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/12.-Funciones%20de%20direcci%C3%B3n%20de%20red%20y%20operadores/#tip","title":"Tip","text":"<p>El <code>abbrev</code>, <code>host</code>, y  <code>text</code>las funciones est\u00e1n destinadas principalmente a ofrecer formatos alternativos de visualizaci\u00f3n para direcciones IP.</p> <p>Los tipos de direcciones MAC,  <code>macaddr</code>y <code>macaddr8</code>, apoyar a los operadores de comparaci\u00f3n habituales que figuran en el cuadro 9.1, as\u00ed como las funciones especializadas que se muestran en el . Adem\u00e1s, apoyan a los operadores l\u00f3gicos <code>~</code>,  <code>&amp;</code>y  <code>|</code>(NO, Y y quir\u00f3fano), tal como se muestra arriba para las direcciones IP.</p> <p>Cuadro 9.41. Funciones de direcci\u00f3n MAC</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>trunc</code>(  <code>macaddr</code>) . <code>macaddr</code>              Estace los \u00faltimos 3 bytes de la direcci\u00f3n a cero. El  prefijo restante puede estar asociado a un fabricante en particular  (utilizando datos no incluidos en PostgreSQL).               <code>trunc(macaddr '12:34:56:78:90:ab')</code>- <code>trunc</code>(  <code>macaddr8</code>) .               Estace los \u00faltimos 5 bytes de la direcci\u00f3n a cero. El  prefijo restante puede estar asociado a un fabricante en particular  (utilizando datos no incluidos en PostgreSQL).               <code>trunc(macaddr8 '12:34:56:78:90:ab:cd:ef')</code>- <code>macaddr8_set7bit</code>(  <code>macaddr8</code>) . <code>macaddr8</code>              Estace la s\u00e9ptima parte de la direcci\u00f3n a una, creando  lo que se conoce como EUI-64 modificado, para su inclusi\u00f3n en una  direcci\u00f3n IPv6.               <code>macaddr8_set7bit(macaddr8 '00:34:56:ab:cd:ef')</code>-"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/13.-Funciones%20de%20b%C3%BAsqueda%20de%20texto%20y%20operadores/","title":"13.-Funciones de b\u00fasqueda de texto y operadores","text":"<p>En el cuadro 9.42,  y  se resumen las funciones y los operadores que se proporcionan para la b\u00fasqueda completa de texto. Consulte el cap\u00edtulo 12 para una explicaci\u00f3n detallada de  's servicio de b\u00fasqueda de texto.</p> <p>Cuadro 9.42. Operadores de b\u00fasqueda de texto</p> Operadora              Descripci\u00f3n              Ejemplos (s) <code>tsvector``@@``tsquery</code>- <code>boolean</code> <code>tsquery``@@``tsvector</code>- <code>boolean</code>              Lo hace  <code>tsvector</code>partido <code>tsquery</code>? (Los argumentos pueden darse en cualquier orden.)               <code>to_tsvector('fat cats ate rats') @@ to_tsquery('cat &amp; rat')</code>- <code>text``@@``tsquery</code>- <code>boolean</code>              Hace cadena de texto, despu\u00e9s de la invocaci\u00f3n impl\u00edcita de <code>to_tsvector()</code>, partido <code>tsquery</code>?               <code>'fat cats ate rats' @@ to_tsquery('cat &amp; rat')</code>- <code>tsvector``@@@``tsquery</code>- <code>boolean</code> <code>tsquery``@@@``tsvector</code>- <code>boolean</code>              Este es un sin\u00f3nimo desprecado <code>@@</code>.               <code>to_tsvector('fat cats ate rats') @@@ to_tsquery('cat &amp; rat')</code>- <code>tsvector``||``tsvector</code>- <code>tsvector</code>              Concatenadas dos <code>tsvector</code>s. Si ambas entradas contienen posiciones de lexeme, las posiciones de la segunda entrada se ajustan en consecuencia.               <code>'a:1 b:2'::tsvector || 'c:1 d:2 b:3'::tsvector</code>- <code>tsquery``&amp;&amp;``tsquery</code>- <code>tsquery</code>              YES dos <code>tsquery</code>en conjunto, produciendo una consulta que coincide con documentos que coinciden con ambas consultas de entrada.               <code>'fat | rat'::tsquery &amp;&amp; 'cat'::tsquery</code>- <code>tsquery``||``tsquery</code>- <code>tsquery</code>              Ociones dos <code>tsquery</code>es juntos, produciendo una consulta que coincide con los documentos que coinciden con cualquier consulta de entrada.               <code>'fat | rat'::tsquery || 'cat'::tsquery</code>- <code>!!``tsquery</code>- <code>tsquery</code>              Negates a <code>tsquery</code>, produciendo una consulta que coincide con documentos que no coinciden con la consulta de entrada.               <code>!! 'cat'::tsquery</code>- <code>tsquery``&lt;-&gt;``tsquery</code>- <code>tsquery</code>              Construce una consulta de frases, que coincide si las dos consultas de entrada coinciden en lexemes sucesivos.               <code>to_tsquery('fat') &lt;-&gt; to_tsquery('rat')</code>- <code>tsquery``@&gt;``tsquery</code>- <code>boolean</code>              Hace primero  <code>tsquery</code>contiene el segundo? (Esto s\u00f3lo considera si todas las lexemes que aparecen en  una consulta aparecen en la otra, ignorando a los operadores  combinados.)               <code>'cat'::tsquery @&gt; 'cat &amp; rat'::tsquery</code>- <code>tsquery``&lt;@``tsquery</code>- <code>boolean</code>              Primero es el primero.  <code>tsquery</code>contenida en el segundo? (Esto s\u00f3lo considera si todas las lexemes que aparecen  en una consulta aparecen en la otra, ignorando a los operadores  combinados.)               <code>'cat'::tsquery &lt;@ 'cat &amp; rat'::tsquery</code>-                <code>'cat'::tsquery &lt;@ '!cat &amp; rat'::tsquery</code>- <p>Adem\u00e1s de estos operadores especializados, los operadores de comparaci\u00f3n habituales que figuran en el cuadro 9.1 est\u00e1n disponibles para los tipos  <code>tsvector</code>y <code>tsquery</code>. Estos no son muy \u00fatiles para la b\u00fasqueda de texto, pero permiten, por  ejemplo, que los \u00edndices \u00fanicos se construyen sobre columnas de este  tipo.</p> <p>Cuadro 9.43. Funciones de b\u00fasqueda de texto</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>array_to_tsvector</code>(  <code>text[]</code>) . <code>tsvector</code>              Convierte una variedad de cadenas de texto en a <code>tsvector</code>. Las cuerdas dadas se utilizan como lexemes as-is, sin m\u00e1s procesamiento. Los elementos de Array no deben ser cadenas vac\u00edas o <code>NULL</code>.               <code>array_to_tsvector('{fat,cat,rat}'::text[])</code>- <code>get_current_ts_config</code>() <code>regconfig</code>              Devuelve el OID de la configuraci\u00f3n de b\u00fasqueda de texto predeterminada actual (seg\u00fan lo establecido por default.text.search.config).               <code>get_current_ts_config()</code>- <code>length</code>(  <code>tsvector</code>) . <code>integer</code>              Devuelve el n\u00famero de lexemes en el <code>tsvector</code>.               <code>length('fat:2,4 cat:3 rat:5A'::tsvector)</code>- <code>numnode</code>(  <code>tsquery</code>) . <code>integer</code>              Devuelve el n\u00famero de lexemes m\u00e1s operadores en el <code>tsquery</code>.               <code>numnode('(fat &amp; rat) | cat'::tsquery)</code>- <code>plainto_tsquery</code>( [  <code>config</code><code>regconfig</code>, ]   <code>query</code><code>text</code>) . <code>tsquery</code>              Convierte texto en <code>tsquery</code>, la normalizaci\u00f3n de las palabras de acuerdo con la configuraci\u00f3n  especificada o predeterminada. Cualquier puntuaci\u00f3n en la cuerda se  ignora (no determina los operadores de consultas). La consulta  resultante coincide con documentos que contienen todas las palabras sin  parar en el texto.               <code>plainto_tsquery('english', 'The Fat Rats')</code>- <code>phraseto_tsquery</code>( [  <code>config</code><code>regconfig</code>, ]   <code>query</code><code>text</code>) . <code>tsquery</code>              Convierte texto en <code>tsquery</code>, la normalizaci\u00f3n de las palabras de acuerdo con la configuraci\u00f3n  especificada o predeterminada. Cualquier puntuaci\u00f3n en la cuerda se  ignora (no determina los operadores de consultas). La consulta  resultante coincide con frases que contienen todas las palabras sin  parar en el texto.               <code>phraseto_tsquery('english', 'The Fat Rats')</code>-                <code>phraseto_tsquery('english', 'The Cat and Rats')</code>- <code>websearch_to_tsquery</code>( [  <code>config</code><code>regconfig</code>, ]   <code>query</code><code>text</code>) . <code>tsquery</code>              Convierte texto en <code>tsquery</code>, la normalizaci\u00f3n de las palabras de acuerdo con la configuraci\u00f3n  especificada o predeterminada. Las secuencias de palabras comidas se  convierten en pruebas de frases. La palabra \"o o - se entiende como producir un operador de OR, y un gui\u00f3n produce un  operador de NO; se ignora otra puntuaci\u00f3n. Esto se aproxima al  comportamiento de algunas herramientas de b\u00fasqueda web comunes.               <code>websearch_to_tsquery('english', '\"fat rat\" or cat dog')</code>- <code>querytree</code>(  <code>tsquery</code>) . <code>text</code>              Produce una representaci\u00f3n de la porci\u00f3n indexable de una <code>tsquery</code>. Un resultado que est\u00e1 vac\u00edo o justo  <code>T</code>indica una consulta no indexable.               <code>querytree('foo &amp; ! bar'::tsquery)</code>- <code>setweight</code>(  <code>vector</code><code>tsvector</code>,   <code>weight</code><code>\"char\"</code>) . <code>tsvector</code>              Asigna lo especificado  <code>weight</code>a cada elemento de la <code>vector</code>.               <code>setweight('fat:2,4 cat:3 rat:5B'::tsvector, 'A')</code>- <code>setweight</code>(  <code>vector</code><code>tsvector</code>,  <code>weight</code><code>\"char\"</code>,   <code>lexemes</code><code>text[]</code>) . <code>tsvector</code>              Asigna lo especificado  <code>weight</code>a elementos de la  <code>vector</code>que se enumeran en <code>lexemes</code>. Las cuerdas en  <code>lexemes</code>se toman como lexemes como-es, sin m\u00e1s procesamiento. Cadenas que no coinciden con ninguna lexeme en  <code>vector</code>son ignorados.               <code>setweight('fat:2,4 cat:3 rat:5,6B'::tsvector, 'A', '{cat,rat}')</code>- <code>strip</code>(  <code>tsvector</code>) . <code>tsvector</code>              Eliba las posiciones y pesos del <code>tsvector</code>.               <code>strip('fat:2,4 cat:3 rat:5A'::tsvector)</code>- <code>to_tsquery</code>( [  <code>config</code><code>regconfig</code>, ]   <code>query</code><code>text</code>) . <code>tsquery</code>              Convierte texto en <code>tsquery</code>, la normalizaci\u00f3n de las palabras de acuerdo con la configuraci\u00f3n  especificada o predeterminada. Las palabras deben combinarse por su  validez  <code>tsquery</code>operadores.               <code>to_tsquery('english', 'The &amp; Fat &amp; Rats')</code>- <code>to_tsvector</code>( [  <code>config</code><code>regconfig</code>, ]   <code>document</code><code>text</code>) . <code>tsvector</code>              Convierte texto en <code>tsvector</code>, la normalizaci\u00f3n de las palabras de acuerdo con la configuraci\u00f3n  especificada o predeterminada. La informaci\u00f3n de posici\u00f3n est\u00e1 incluida  en el resultado.               <code>to_tsvector('english', 'The Fat Rats')</code>- <code>to_tsvector</code>( [  <code>config</code><code>regconfig</code>, ]   <code>document</code><code>json</code>) . <code>tsvector</code> <code>to_tsvector</code>( [  <code>config</code><code>regconfig</code>, ]   <code>document</code><code>jsonb</code>) . <code>tsvector</code>              Convierte cada valor de cadena en el documento JSON a a <code>tsvector</code>, la normalizaci\u00f3n de las palabras de acuerdo con la configuraci\u00f3n  especificada o predeterminada. Los resultados se concatenizan en  documento para producir la salida. La informaci\u00f3n de posici\u00f3n se genera  como si existiera una palabra de stop entre cada par de valores de  cadena. (C\u00f3malo de que la  de  de un objeto JSON depende de la implementaci\u00f3n cuando la entrada es ; observar la diferencia en los ejemplos.)               <code>to_tsvector('english', '{\"aa\": \"The Fat Rats\", \"b\": \"dog\"}'::json)</code>-                <code>to_tsvector('english', '{\"aa\": \"The Fat Rats\", \"b\": \"dog\"}'::jsonb)</code>- <code>json_to_tsvector</code>( [  <code>config</code><code>regconfig</code>, ]  <code>document</code><code>json</code>,   <code>filter</code><code>jsonb</code>) . <code>tsvector</code> <code>jsonb_to_tsvector</code>( [  <code>config</code><code>regconfig</code>, ]  <code>document</code><code>jsonb</code>,   <code>filter</code><code>jsonb</code>) . <code>tsvector</code>              Selecciona cada elemento del documento JSON que se solicita por la  <code>filter</code>y convierte cada uno en un <code>tsvector</code>, la normalizaci\u00f3n de las palabras de acuerdo con la configuraci\u00f3n  especificada o predeterminada. Los resultados se concatenizan en  documento para producir la salida. La informaci\u00f3n de posici\u00f3n se genera  como si existiera una palabra de parada entre cada par de elementos  seleccionados. (C\u00f3meseo de que la  de  de un objeto JSON depende de la implementaci\u00f3n cuando la entrada es <code>jsonb</code>.) El  <code>filter</code>debe ser un  <code>jsonb</code>array que contiene cero o m\u00e1s de estas palabras clave:  <code>\"string\"</code>(para incluir todos los valores de cuerda),  <code>\"numeric\"</code>(para incluir todos los valores num\u00e9ricos),  <code>\"boolean\"</code>(para incluir todos los valores booleanos),  <code>\"key\"</code>(para incluir todas las llaves), o  <code>\"all\"</code>(incluir todo lo anterior). Como caso especial, el  tambi\u00e9n puede ser un simple valor JSON que es una de estas palabras clave.               <code>json_to_tsvector('english', '{\"a\": \"The Fat Rats\", \"b\": 123}'::json, '[\"string\", \"numeric\"]')</code>-                <code>json_to_tsvector('english', '{\"cat\": \"The Fat Rats\", \"dog\": 123}'::json, '\"all\"')</code>- <code>ts_delete</code>(  <code>vector</code><code>tsvector</code>,   <code>lexeme</code><code>text</code>) . <code>tsvector</code>              Elipulsa cualquier ocurrencia de lo dado  <code>lexeme</code>de la <code>vector</code>. El  <code>lexeme</code>la cuerda se trata como una lexeme as-is, sin m\u00e1s procesamiento.               <code>ts_delete('fat:2,4 cat:3 rat:5A'::tsvector, 'fat')</code>- <code>ts_delete</code>(  <code>vector</code><code>tsvector</code>,   <code>lexemes</code><code>text[]</code>) . <code>tsvector</code>              Eliba cualquier ocurrencia de las lexemes en  <code>lexemes</code>de la <code>vector</code>. Las cuerdas en  <code>lexemes</code>se toman como lexemes como-es, sin m\u00e1s procesamiento. Cadenas que no coinciden con ninguna lexeme en  <code>vector</code>son ignorados.               <code>ts_delete('fat:2,4 cat:3 rat:5A'::tsvector, ARRAY['fat','rat'])</code>- <code>ts_filter</code>(  <code>vector</code><code>tsvector</code>,   <code>weights</code><code>\"char\"[]</code>) . <code>tsvector</code>              Selecciona elementos con el dado  <code>weights</code>de la <code>vector</code>.               <code>ts_filter('fat:2,4 cat:3b,7c rat:5A'::tsvector, '{a,b}')</code>- <code>ts_headline</code>( [  <code>config</code><code>regconfig</code>, ]  <code>document</code><code>text</code>,   <code>query</code><code>tsquery</code>[,   <code>options</code><code>text</code>] . <code>text</code>              Muestra, en una forma abreviada, el partido (es) para el  <code>query</code>en el <code>document</code>, que debe ser un texto en bruto, no una <code>tsvector</code>. Las palabras en el documento se normalizan de acuerdo con la  configuraci\u00f3n especificada o predeterminada antes de coincidir con la  consulta. El uso de esta funci\u00f3n se examina en la Secci\u00f3n 12.3.4, que tambi\u00e9n describe la disponible <code>options</code>.               <code>ts_headline('The fat cat ate the rat.', 'cat')</code>- <code>ts_headline</code>( [  <code>config</code><code>regconfig</code>, ]  <code>document</code><code>json</code>,   <code>query</code><code>tsquery</code>[,   <code>options</code><code>text</code>] . <code>text</code> <code>ts_headline</code>( [  <code>config</code><code>regconfig</code>, ]  <code>document</code><code>jsonb</code>,   <code>query</code><code>tsquery</code>[,   <code>options</code><code>text</code>] . <code>text</code>              Las pantallas, en una forma abreviada, coinciden(es) para el  <code>query</code>que ocurren en valores de cuerda dentro de la JSON <code>document</code>. Vea la Secci\u00f3n 12.3.4 para m\u00e1s detalles.               <code>ts_headline('{\"cat\":\"raining cats and dogs\"}'::jsonb, 'cat')</code>- <code>ts_rank</code>( [  <code>weights</code><code>real[]</code>, ]  <code>vector</code><code>tsvector</code>,   <code>query</code><code>tsquery</code>[,   <code>normalization</code><code>integer</code>] . <code>real</code>              Computa una partigu\u00eda que muestra lo bien que  <code>vector</code>coincide con el <code>query</code>. V\u00e9ase la secci\u00f3n 12.3.3 para m\u00e1s detalles.               <code>ts_rank(to_tsvector('raining cats and dogs'), 'cat')</code>- <code>ts_rank_cd</code>( [  <code>weights</code><code>real[]</code>, ]  <code>vector</code><code>tsvector</code>,   <code>query</code><code>tsquery</code>[,   <code>normalization</code><code>integer</code>] . <code>real</code>              Computa una partici\u00f3n que muestra lo bien que el  <code>vector</code>coincide con el <code>query</code>, usando un algoritmo de densidad de cubierta. V\u00e9ase la secci\u00f3n 12.3.3 para m\u00e1s detalles.               <code>ts_rank_cd(to_tsvector('raining cats and dogs'), 'cat')</code>- <code>ts_rewrite</code>(  <code>query</code><code>tsquery</code>,  <code>target</code><code>tsquery</code>,   <code>substitute</code><code>tsquery</code>) . <code>tsquery</code>              Sustitula las ocurrencias de  <code>target</code>con  <code>substitute</code>dentro de la <code>query</code>. Para m\u00e1s detalles v\u00e9ase .               <code>ts_rewrite('a &amp; b'::tsquery, 'a'::tsquery, 'foo|bar'::tsquery)</code>- <code>ts_rewrite</code>(  <code>query</code><code>tsquery</code>,   <code>select</code><code>text</code>) . <code>tsquery</code>              Sustituida porciones de la  <code>query</code>de acuerdo con los objetivos (s) y los (s) de destino) obtenidos mediante la ejecuci\u00f3n de una  <code>SELECT</code>comando. Para m\u00e1s detalles v\u00e9ase .               <code>SELECT ts_rewrite('a &amp; b'::tsquery, 'SELECT t,s FROM aliases')</code>- <code>tsquery_phrase</code>(  <code>query1</code><code>tsquery</code>,   <code>query2</code><code>tsquery</code>) . <code>tsquery</code>              Construce una frase que busca coincidencias de  <code>query1</code>y  <code>query2</code>en las lexemes sucesivas (s\u00ed como  <code>&lt;-&gt;</code>operador).               <code>tsquery_phrase(to_tsquery('fat'), to_tsquery('cat'))</code>- <code>tsquery_phrase</code>(  <code>query1</code><code>tsquery</code>,  <code>query2</code><code>tsquery</code>,   <code>distance</code><code>integer</code>) . <code>tsquery</code>              Construce una frase que busca coincidencias de  <code>query1</code>y  <code>query2</code>que ocurren exactamente  <code>distance</code>lexemes aparte.               <code>tsquery_phrase(to_tsquery('fat'), to_tsquery('cat'), 10)</code>- <code>tsvector_to_array</code>(  <code>tsvector</code>) . <code>text[]</code>              Convierte a  <code>tsvector</code>a una serie de lexemes.               <code>tsvector_to_array('fat:2,4 cat:3 rat:5A'::tsvector)</code>- <code>unnest</code>(  <code>tsvector</code>) .  <code>setof record</code>(  <code>lexeme</code><code>text</code>,  <code>positions</code><code>smallint[]</code>,   <code>weights</code><code>text</code>)              Expande a  <code>tsvector</code>en un juego de filas, uno por lexeme.               <code>select * from unnest('cat:3 fat:2,4 rat:5A'::tsvector)</code>-              <code>lexeme - posiciones - pesas ------------------------------------ gato, no 3, D. grasa - 2,4 euros de la D, D.D. rata de 5o</code>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/13.-Funciones%20de%20b%C3%BAsqueda%20de%20texto%20y%20operadores/#nota","title":"Nota","text":"<p>Todas las funciones de b\u00fasqueda de texto que aceptan una opci\u00f3n opcional  <code>regconfig</code>argument usar\u00e1 la configuraci\u00f3n especificada por default.text.search.config cuando se omite ese argumento.</p> <p>Las funciones de la Tabla 9.44 se enumeran por separado porque no suelen utilizarse en operaciones de  b\u00fasqueda de textos cotidianos. Son principalmente \u00fatiles para el  desarrollo y depuraci\u00f3n de nuevas configuraciones de b\u00fasqueda de texto.</p> <p>Cuadro 9.44. Texto Buscar Funciones de depuraci\u00f3n</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>ts_debug</code>( [  <code>config</code><code>regconfig</code>, ]   <code>document</code><code>text</code>) .  <code>setof record</code>(  <code>alias</code><code>text</code>,  <code>description</code><code>text</code>,  <code>token</code><code>text</code>,  <code>dictionaries</code><code>regdictionary[]</code>,  <code>dictionary</code><code>regdictionary</code>,   <code>lexemes</code><code>text[]</code>)              Extractos y normaliza las fichas de la  <code>document</code>seg\u00fan la configuraci\u00f3n de b\u00fasqueda de texto especificada o predeterminada, y  devuelve informaci\u00f3n sobre c\u00f3mo se proces\u00f3 cada ficha. V\u00e9ase la secci\u00f3n 12.8.1 para m\u00e1s detalles.               <code>ts_debug('english', 'The Brightest supernovaes')</code>- <code>ts_lexize</code>(  <code>dict</code><code>regdictionary</code>,   <code>token</code><code>text</code>) . <code>text[]</code>              Devuelve una matriz de lexemes de reemplazo si el token de entrada es conocido por el diccionario, o un array vac\u00edo si el token es conocido por el diccionario, pero es una palabra de parada, o NULL  si no es una palabra conocida. Para m\u00e1s detalles v\u00e9ase .               <code>ts_lexize('english_stem', 'stars')</code>- <code>ts_parse</code>(  <code>parser_name</code><code>text</code>,   <code>document</code><code>text</code>) .  <code>setof record</code>(  <code>tokid</code><code>integer</code>,   <code>token</code><code>text</code>)              Extrae fichas de la  <code>document</code>usando el analizador. V\u00e9ase la secci\u00f3n 12.8.2 para m\u00e1s detalles.               <code>ts_parse('default', 'foo - bar')</code>- <code>ts_parse</code>(  <code>parser_oid</code><code>oid</code>,   <code>document</code><code>text</code>) .  <code>setof record</code>(  <code>tokid</code><code>integer</code>,   <code>token</code><code>text</code>)              Extrae fichas de la  <code>document</code>utilizando un analizador especificado por OID. V\u00e9ase la secci\u00f3n 12.8.2 para m\u00e1s detalles.               <code>ts_parse(3722, 'foo - bar')</code>- <code>ts_token_type</code>(   <code>parser_name</code><code>text</code>) .  <code>setof record</code>(  <code>tokid</code><code>integer</code>,  <code>alias</code><code>text</code>,   <code>description</code><code>text</code>)              Devuelve una tabla que describe cada tipo de token que el parser nombrado puede reconocer. V\u00e9ase la secci\u00f3n 12.8.2 para m\u00e1s detalles.               <code>ts_token_type('default')</code>- <code>ts_token_type</code>(   <code>parser_oid</code><code>oid</code>) .  <code>setof record</code>(  <code>tokid</code><code>integer</code>,  <code>alias</code><code>text</code>,   <code>description</code><code>text</code>)              Devuelve una tabla que describe cada tipo de token que un analizador especificado por OID puede reconocer. V\u00e9ase la secci\u00f3n 12.8.2 para m\u00e1s detalles.               <code>ts_token_type(3722)</code>- <code>ts_stat</code>(   <code>sqlquery</code><code>text</code>[,   <code>weights</code><code>text</code>] .  <code>setof record</code>(  <code>word</code><code>text</code>,  <code>ndoc</code><code>integer</code>,   <code>nentry</code><code>integer</code>)              Ejega el <code>sqlquery</code>, que debe devolver un solo  <code>tsvector</code>columnas, y devuelve estad\u00edsticas sobre cada lexeme distintor contenida en los datos. V\u00e9ase la secci\u00f3n 12.4.4 para m\u00e1s detalles.               <code>ts_stat('SELECT vector FROM apod')</code>-"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/14.-Funciones%20UUID/","title":"14.-Funciones UUID","text":"<p>PostgreSQL incluye una funci\u00f3n para generar un UUID:</p> <pre><code> gen_random_uuid() uuid\n</code></pre> <p>Esta funci\u00f3n devuelve una versi\u00f3n 4 (aleatorio) UUID. Este es el  tipo m\u00e1s com\u00fanmente utilizado de UUID y es apropiado para la mayor\u00eda de  las aplicaciones.</p> <p>El m\u00f3dulo uuid-ossp proporciona funciones adicionales que implementan otros algoritmos est\u00e1ndar para generar UUIDs.</p> <p>PostgreSQL tambi\u00e9n proporciona los operadores de comparaci\u00f3n habituales que se muestran en la Tabla 9.1 para UUIDs.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/17.-Funciones%20de%20manipulaci%C3%B3n%20de%20secuencias/","title":"17.-Funciones de manipulaci\u00f3n de secuencias","text":"<p>Esta secci\u00f3n describe funciones para operar en objetos de secuencia, tambi\u00e9n llamados generadores de secuencia o simplemente secuencias. Los objetos de secuencia son mesas especiales de una sola fila creadas con CREATE SEQUENCE. Los objetos de secuencia se utilizan com\u00fanmente para generar  identificadores \u00fanicos para las filas de una tabla. Las funciones de  secuencia, enumeradas en la Tabla 9.52, proporcionan m\u00e9todos simples y multiusuarios para obtener sucesivos valores de secuencia de objetos de secuencia.</p> <p>Cuadro 9.52. Funciones de secuencia</p> Funci\u00f3n              Descripci\u00f3n <code>nextval</code>(  <code>regclass</code>) . <code>bigint</code>              Avance el objeto de secuencia a su siguiente valor y  devuelve ese valor. Esto se hace at\u00f3micamente: incluso si se ejecutan  varias sesiones  <code>nextval</code>concurrentemente, cada uno recibir\u00e1 con seguridad un valor de secuencia distinto. Si el  objeto de secuencia ha sido creado con par\u00e1metros por defecto, sucesivos  <code>nextval</code>Las  llamadas devolver\u00e1n valores sucesivos a partir de 1. Otros  comportamientos se pueden obtener utilizando par\u00e1metros apropiados en el comando CREATE SEQUENCE.              Esta funci\u00f3n requiere  <code>USAGE</code>o o  <code>UPDATE</code>privilegio en la secuencia. <code>setval</code>( <code>regclass</code>,  <code>bigint</code>[,  <code>boolean</code>] . <code>bigint</code>              Establece el valor actual del objeto de secuencia, y opcionalmente su  <code>is_called</code>- bandera. La forma de dos par\u00e1metros establece la secuencia  <code>last_value</code>campo al valor especificado y fija su  <code>is_called</code>campo a <code>true</code>, lo que significa que el siguiente  <code>nextval</code>avanzar\u00e1 en la secuencia antes de devolver un valor. El valor que se comunicar\u00e1 por  <code>currval</code>se establece tambi\u00e9n al valor especificado. En la forma de tres par\u00e1metros,  <code>is_called</code>puede ser configurado a cualquiera de los dos  <code>true</code>o o <code>false</code>.  <code>true</code>tiene el mismo efecto que la forma de dos par\u00e1metros. Si est\u00e1 listo <code>false</code>, el siguiente  <code>nextval</code>devolver\u00e1 exactamente el valor especificado, y el avance de secuencias comienza con el siguiente <code>nextval</code>. Adem\u00e1s, el valor comunicado por  <code>currval</code>no se ha cambiado en este caso. Por ejemplo,              <code>SELECT setval('myseq', 42); *Siguiente</code>nextval<code>regresar\u00e1 43* SELECT setval('myseq', 42, true); *Iguo que arriba* SELECT setval('myseq', 42, falso); *Siguiente</code>nextval<code>regresar\u00e1 42*</code>              El resultado devuelto por  <code>setval</code>es s\u00f3lo el valor de su segundo argumento.              Esta funci\u00f3n requiere  <code>UPDATE</code>privilegio en la secuencia. <code>currval</code>(  <code>regclass</code>) . <code>bigint</code>              Devuelve el valor obtenido recientemente por  <code>nextval</code>para esta secuencia en el actual per\u00edodo de sesiones. (Se informa de un error si  <code>nextval</code>Nunca se ha llamado a esta secuencia en esta sesi\u00f3n.) Debido a que esto est\u00e1  devolviendo un valor de sesi\u00f3n-local, da una respuesta predecible si  otras sesiones han ejecutado o no  <code>nextval</code>desde el actual per\u00edodo de sesiones.              Esta funci\u00f3n requiere  <code>USAGE</code>o o  <code>SELECT</code>privilegio en la secuencia. <code>lastval</code>() <code>bigint</code>              Devuelve el valor devuelto m\u00e1s recientemente por  <code>nextval</code>en el actual per\u00edodo de sesiones. Esta funci\u00f3n es id\u00e9ntica a <code>currval</code>, excepto que en lugar de tomar el nombre de la secuencia como argumento se refiere a cualquier secuencia  <code>nextval</code>Se aplic\u00f3 m\u00e1s recientemente en el actual per\u00edodo de sesiones. Es un error llamar  <code>lastval</code>si  <code>nextval</code>Todav\u00eda no se ha convocado en el actual per\u00edodo de sesiones.              Esta funci\u00f3n requiere  <code>USAGE</code>o o  <code>SELECT</code>privilegio en la \u00faltima secuencia usada."},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/17.-Funciones%20de%20manipulaci%C3%B3n%20de%20secuencias/#precaucion","title":"Precauci\u00f3n","text":"<p>Para evitar bloquear las transacciones simult\u00e1neas que obtienen n\u00fameros de la misma secuencia, el valor obtenido por  <code>nextval</code>no se reclama para su reutilizaci\u00f3n si la transacci\u00f3n de llamada aborta  m\u00e1s tarde. Esto significa que los abortos de transacciones o fallos de  bases de datos pueden resultar en lagunas en la secuencia de valores  asignados. Eso tambi\u00e9n puede suceder sin que una transacci\u00f3n aborte. Por ejemplo a  <code>INSERT</code>con un  <code>ON CONFLICT</code>cl\u00e1usula calcular\u00e1 la tupla de la que se pueda insertar, incluyendo hacer lo requerido  <code>nextval</code>llamadas, antes de detectar cualquier conflicto que le hiciera seguir el  <code>ON CONFLICT</code>Regla en lugar de eso. Por lo tanto, los objetos de secuencia PostgreSQL no se pueden utilizar para obtener gaplesssecuencias sin huecos.</p> <p>Asimismo, los cambios de estado de secuencia realizados por  <code>setval</code>son inmediatamente visibles a otras transacciones, y no se deshacen si la transacci\u00f3n de llamada retrocede.</p> <p>Si el grupo de base de datos se bloquea antes de cometer una transacci\u00f3n que contiene un  <code>nextval</code>o o  <code>setval</code>Llama, el cambio de estado de secuencia podr\u00eda no haber hecho su camino hacia  el almacenamiento persistente, por lo que no est\u00e1 claro si la secuencia  tendr\u00e1 su estado original o actualizado despu\u00e9s de que el c\u00famulo se  reinicia. Esto es inofenable para el uso de la secuencia dentro de la  base de datos, ya que otros efectos de transacciones no comprometidas  tampoco ser\u00e1n visibles. Sin embargo, si desea utilizar un valor de  secuencia para fines persistentes de la base de datos externo, aseg\u00farese de que el  <code>nextval</code>Se ha cometido una llamada antes de hacerlo.</p> <p>La secuencia a operar por una funci\u00f3n de secuencia se especifica por un  <code>regclass</code>argument, que es simplemente la OID de la secuencia en el  <code>pg_class</code>cat\u00e1logo de sistemas. Sin embargo, no tienes que buscar el OID a mano, desde el  <code>regclass</code>El convertidor de entradas del tipo de datos har\u00e1 el trabajo para usted. V\u00e9ase la secci\u00f3n 8.19 para m\u00e1s detalles.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/19.-Funciones%20de%20Array%20y%20operadores/","title":"19.-Funciones de Array y operadores","text":"<p>La Tabla 9.53 muestra los operadores especializados disponibles para los tipos de  array. Adem\u00e1s de estos, los operadores de comparaci\u00f3n habituales que se  muestran en el cuadro 9.1 est\u00e1n disponibles para los arrays. Los operadores de comparaci\u00f3n  comparan el elemento de contenido de matriz-by-element, utilizando la  funci\u00f3n de comparaci\u00f3n de \u00e1rboles B predeterminada para el tipo de datos de elementos, y clasifican en funci\u00f3n de la primera diferencia. En los  arrays multidimensionales los elementos se visitan en el orden mayor de  la fila (el \u00faltimo sub\u00edscript var\u00eda m\u00e1s r\u00e1pidamente). Si el contenido de dos arrays es igual pero la dimensionalidad es diferente, la primera  diferencia en la informaci\u00f3n de dimensionalidad determina el orden de  tipo.</p> <p>Cuadro 9.53. Operadores de Array</p> Operadora              Descripci\u00f3n              Ejemplos (s) <code>anyarray``@&gt;``anyarray</code>- <code>boolean</code>              El primer array contiene el segundo, es decir, cada  elemento que aparece en el segundo array es igual a alg\u00fan elemento de la primera matriz? (Las duplicaciones no se tratan especialmente, por lo  tanto  <code>ARRAY[1]</code>y  <code>ARRAY[1,1]</code>se consideran cada uno para contener el otro.)               <code>ARRAY[1,4,3] @&gt; ARRAY[3,1,3]</code>- <code>anyarray``&lt;@``anyarray</code>- <code>boolean</code>              Est\u00e1 la primera matriz contenida en el segundo?               <code>ARRAY[2,2,7] &lt;@ ARRAY[1,7,4,2,6]</code>- <code>anyarray``&amp;&amp;``anyarray</code>- <code>boolean</code>              Los arrays se superponen, es decir, tienen alg\u00fan elemento en com\u00fan?               <code>ARRAY[1,4,3] &amp;&amp; ARRAY[2,1]</code>- <code>anycompatiblearray``||``anycompatiblearray</code>- <code>anycompatiblearray</code>              Concateniza las dos matrices. Concatenar un array nulo o vac\u00edo es una no-operaci\u00f3n; de lo contrario, los arrays deben tener el  mismo n\u00famero de dimensiones (como ilustra el primer ejemplo) o difieren  en n\u00famero de dimensiones por uno (como ilustra el segundo). Si los  arrays no son de tipos de elementos id\u00e9nticos, ser\u00e1n coaccionales a un  tipo com\u00fan (ver secci\u00f3n 10.5).               <code>ARRAY[1,2,3] || ARRAY[4,5,6,7]</code>-                <code>ARRAY[1,2,3] || ARRAY[[4,5,6],[7,8,9.9]]</code>- <code>anycompatible``||``anycompatiblearray</code>- <code>anycompatiblearray</code>              Concateniza un elemento en la parte delantera de un array (que debe estar vac\u00edo o unidimensional).               <code>3 || ARRAY[4,5,6]</code>- <code>anycompatiblearray``||``anycompatible</code>- <code>anycompatiblearray</code>              Concateniza un elemento sobre el extremo de un array (que debe estar vac\u00edo o unidimensional).               <code>ARRAY[4,5,6] || 7</code>- <p>Consulte Secci\u00f3n 8.15 para m\u00e1s detalles sobre el comportamiento del operador de array. V\u00e9ase la secci\u00f3n 11.2 para m\u00e1s detalles sobre qu\u00e9 operadores apoyan las operaciones indexadas.</p> <p>La tabla 9.54 muestra las funciones disponibles para su uso con tipos de array. V\u00e9ase la secci\u00f3n 8.15 para m\u00e1s informaci\u00f3n y ejemplos de la utilizaci\u00f3n de estas funciones.</p> <p>Cuadro 9.54. Funciones de Array</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>array_append</code>( <code>anycompatiblearray</code>,  <code>anycompatible</code>) . <code>anycompatiblearray</code>              Aplica un elemento al final de un array (lo mismo que el    <code>anycompatiblearray``||``anycompatible</code>operador).               <code>array_append(ARRAY[1,2], 3)</code>- <code>array_cat</code>( <code>anycompatiblearray</code>,  <code>anycompatiblearray</code>) . <code>anycompatiblearray</code>              Concatenates dos arrays (s\u00f3melos como el    <code>anycompatiblearray``||``anycompatiblearray</code>operador).               <code>array_cat(ARRAY[1,2,3], ARRAY[4,5])</code>- <code>array_dims</code>(  <code>anyarray</code>) . <code>text</code>              Devuelve una representaci\u00f3n de texto de las dimensiones del array.               <code>array_dims(ARRAY[[1,2,3], [4,5,6]])</code>- <code>array_fill</code>( <code>anyelement</code>,  <code>integer[]</code>[,  <code>integer[]</code>] . <code>anyarray</code>              Devuelve un array lleno de copias del valor dado, con  dimensiones de las longitudes especificadas por el segundo argumento. El tercer argumento opcional suministra valores de menor l\u00edmite para cada  dimensi\u00f3n (que por defecto a todos <code>1</code>).               <code>array_fill(11, ARRAY[2,3])</code>-                <code>array_fill(7, ARRAY[3], ARRAY[2])</code>- <code>array_length</code>( <code>anyarray</code>,  <code>integer</code>) . <code>integer</code>              Devuelve la longitud de la dimensi\u00f3n de matriz  solicitada. (Produce NULL en lugar de 0 para dimensiones vac\u00edas o  faltadas de matriz.)               <code>array_length(array[1,2,3], 1)</code>-                <code>array_length(array[]::int[], 1)</code>-                <code>array_length(array['text'], 2)</code>- <code>array_lower</code>( <code>anyarray</code>,  <code>integer</code>) . <code>integer</code>              Devuelve el l\u00edmite inferior de la dimensi\u00f3n del array solicitado.               <code>array_lower('[0:2]={1,2,3}'::integer[], 1)</code>- <code>array_ndims</code>(  <code>anyarray</code>) . <code>integer</code>              Devuelve el n\u00famero de dimensiones de la matriz.               <code>array_ndims(ARRAY[[1,2,3], [4,5,6]])</code>- <code>array_position</code>( <code>anycompatiblearray</code>,  <code>anycompatible</code>[,  <code>integer</code>] . <code>integer</code>              Devuelve el sub\u00edndice de la primera ocurrencia del segundo argumento en el array, o  <code>NULL</code>si no est\u00e1 presente. Si se da el tercer argumento, la b\u00fasqueda comienza en ese sub\u00edscripto. La matriz debe ser unidimensional. Las comparaciones  se hacen usando  <code>IS NOT DISTINCT FROM</code>sem\u00e1ntica, por lo que es posible buscar <code>NULL</code>.               <code>array_position(ARRAY['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'], 'mon')</code>- <code>array_positions</code>( <code>anycompatiblearray</code>,  <code>anycompatible</code>) . <code>integer[]</code>              Devuelve una matriz de los sub\u00edndices de todas las  ocurrencias del segundo argumento en el array dado como primer  argumento. La matriz debe ser unidimensional. Las comparaciones se hacen usando  <code>IS NOT DISTINCT FROM</code>sem\u00e1ntica, por lo que es posible buscar <code>NULL</code>.  <code>NULL</code>se devuelve s\u00f3lo si el array es <code>NULL</code>; si el valor no se encuentra en el array, se devuelve una matriz vac\u00eda.               <code>array_positions(ARRAY['A','A','B','A'], 'A')</code>- <code>array_prepend</code>( <code>anycompatible</code>,  <code>anycompatiblearray</code>) . <code>anycompatiblearray</code>              Prespende un elemento al comienzo de un array (lo mismo que el    <code>anycompatible``||``anycompatiblearray</code>operador).               <code>array_prepend(1, ARRAY[2,3])</code>- <code>array_remove</code>( <code>anycompatiblearray</code>,  <code>anycompatible</code>) . <code>anycompatiblearray</code>              Elipar todos los elementos iguales al valor dado de la  matriz. La matriz debe ser unidimensional. Las comparaciones se hacen  usando  <code>IS NOT DISTINCT FROM</code>sem\u00e1ntica, por lo que es posible quitar <code>NULL</code>s.               <code>array_remove(ARRAY[1,2,3,2], 2)</code>- <code>array_replace</code>( <code>anycompatiblearray</code>, <code>anycompatible</code>,  <code>anycompatible</code>) . <code>anycompatiblearray</code>              Sustituir cada elemento de matriz igual al segundo argumento con el tercer argumento.               <code>array_replace(ARRAY[1,2,5,4], 5, 3)</code>- <code>array_sample</code>(  <code>array</code><code>anyarray</code>,   <code>n</code><code>integer</code>) . <code>anyarray</code>              Devuelve una matriz de  <code>n</code>elementos seleccionados al azar de <code>array</code>.  <code>n</code>no podr\u00e1 exceder la longitud de <code>array</code>Es de primera dimensi\u00f3n. Si  <code>array</code>es multidimensional, un \u00edtem es una rebanada que tiene un primer sub\u00edscripto dado.               <code>array_sample(ARRAY[1,2,3,4,5,6], 3)</code>-                <code>array_sample(ARRAY[[1,2],[3,4],[5,6]], 2)</code>- <code>array_shuffle</code>(  <code>anyarray</code>) . <code>anyarray</code>              El aleatorio barajo la primera dimensi\u00f3n de la matriz.               <code>array_shuffle(ARRAY[[1,2],[3,4],[5,6]])</code>- <code>array_to_string</code>(  <code>array</code><code>anyarray</code>,   <code>delimiter</code><code>text</code>[,   <code>null_string</code><code>text</code>] . <code>text</code>              Converte cada elemento de matriz en su representaci\u00f3n de texto, y concateniza a los separados por la  <code>delimiter</code>cuerdas. Si  <code>null_string</code>se da y no es <code>NULL</code>, entonces  <code>NULL</code>Las entradas de array est\u00e1n representadas por esa cadena; de lo contrario, se omiten. V\u00e9ase tambi\u00e9n <code>string_to_array</code>.               <code>array_to_string(ARRAY[1, 2, 3, NULL, 5], ',', '*')</code>- <code>array_upper</code>( <code>anyarray</code>,  <code>integer</code>) . <code>integer</code>              Devuelve el l\u00edmite superior de la dimensi\u00f3n del array solicitado.               <code>array_upper(ARRAY[1,8,3,7], 1)</code>- <code>cardinality</code>(  <code>anyarray</code>) . <code>integer</code>              Devuelve el n\u00famero total de elementos en la matriz, o 0 si el array est\u00e1 vac\u00edo.               <code>cardinality(ARRAY[[1,2],[3,4]])</code>- <code>trim_array</code>(  <code>array</code><code>anyarray</code>,   <code>n</code><code>integer</code>) . <code>anyarray</code>              Recorta una matriz eliminando el \u00faltimo  <code>n</code>elementos. Si la matriz es multidimensional, s\u00f3lo se recorta la primera dimensi\u00f3n.               <code>trim_array(ARRAY[1,2,3,4,5,6], 2)</code>- <code>unnest</code>(  <code>anyarray</code>) . <code>setof anyelement</code>              Expande un array en un conjunto de filas. Los elementos de la matriz se leen en orden de almacenamiento.               <code>unnest(ARRAY[1,2])</code>-              <code>1 2</code> <code>unnest(ARRAY[['foo','bar'],['baz','quux']])</code>-              <code>foo barra de barra baz quux</code> <code>unnest</code>( <code>anyarray</code>,  <code>anyarray</code>[, ... ] .               Expande m\u00faltiples matrices (posiblemente de diferentes  tipos de datos) en un conjunto de filas. Si los arrays no todos son la  misma longitud, los m\u00e1s cortos est\u00e1n acolchados con <code>NULL</code>s. Esta forma s\u00f3lo est\u00e1 permitida en una cl\u00e1usula de la desconoces; v\u00e9ase la secci\u00f3n 7.2.1.4.               <code>select * from unnest(ARRAY[1,2], ARRAY['foo','bar','baz']) as x(a,b)</code>-              <code>a -------- 1 Foo 2 bar   - Baz</code> <p>V\u00e9ase tambi\u00e9n la secci\u00f3n 9.21 sobre la funci\u00f3n agregada  <code>array_agg</code>para uso con arrays.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/20.-Funciones%20de%20rango-multirango%20y%20operadores/","title":"20.-Funciones de rango-multirango y operadores","text":"<p>V\u00e9ase la secci\u00f3n 8.17 para una visi\u00f3n general de los tipos de gama.</p> <p>La Tabla 9.55 muestra los operadores especializados disponibles para los tipos de rango. La tabla 9.56 muestra los operadores especializados disponibles para tipos  multiorden. Adem\u00e1s de estos, los operadores de comparaci\u00f3n habituales  que se muestran en el cuadro 9.1 est\u00e1n disponibles para tipos de rango y multirango. Los operadores de  comparaci\u00f3n ordenan primero por los l\u00edmites inferiores del rango, y s\u00f3lo si son iguales, comparan los l\u00edmites superiores. Los operadores  multirano se comparan cada rango hasta que uno es desigual. Esto no  suele dar lugar a un pedido global \u00fatil, pero se proporciona a los  operadores para permitir que se construya \u00edndices \u00fanicos en rangos.</p> <p>Cuadro 9.55. Operadores de rango</p> Operadora              Descripci\u00f3n              Ejemplos (s) <code>anyrange``@&gt;``anyrange</code>- <code>boolean</code>              El primer rango contiene el segundo?               <code>int4range(2,4) @&gt; int4range(2,3)</code>- <code>anyrange``@&gt;``anyelement</code>- <code>boolean</code>              El rango contiene el elemento?               <code>'[2011-01-01,2011-03-01)'::tsrange @&gt; '2011-01-10'::timestamp</code>- <code>anyrange``&lt;@``anyrange</code>- <code>boolean</code>              Est\u00e1 el primer rango contenido en el segundo?               <code>int4range(2,4) &lt;@ int4range(1,7)</code>- <code>anyelement``&lt;@``anyrange</code>- <code>boolean</code>              Est\u00e1 el elemento contenido en el rango?               <code>42 &lt;@ int4range(1,7)</code>- <code>anyrange``&amp;&amp;``anyrange</code>- <code>boolean</code>              Los rangos se superponen, es decir, tienen alg\u00fan elemento en com\u00fan?               <code>int8range(3,7) &amp;&amp; int8range(4,12)</code>- <code>anyrange``&lt;&lt;``anyrange</code>- <code>boolean</code>              Es el primer rango estrictamente dejado del segundo?               <code>int8range(1,10) &lt;&lt; int8range(100,110)</code>- <code>anyrange``&gt;&gt;``anyrange</code>- <code>boolean</code>              Es el primer rango estrictamente correcto del segundo?               <code>int8range(50,60) &gt;&gt; int8range(20,30)</code>- <code>anyrange``&amp;&lt;``anyrange</code>- <code>boolean</code>              El primer rango no se extiende a la derecha del segundo?               <code>int8range(1,20) &amp;&lt; int8range(18,20)</code>- <code>anyrange``&amp;&gt;``anyrange</code>- <code>boolean</code>              El primer rango no se extiende a la izquierda del segundo?               <code>int8range(7,20) &amp;&gt; int8range(5,10)</code>- <code>anyrange``-|-``anyrange</code>- <code>boolean</code>              Son los rangos adyacentes?               <code>numrange(1.1,2.2) -|- numrange(2.2,3.3)</code>- <code>anyrange``+``anyrange</code>- <code>anyrange</code>              Compute la uni\u00f3n de los rangos. Los rangos deben solaparse o ser adyacentes, para que el sindicato sea un solo rango (pero vea <code>range_merge()</code>).               <code>numrange(5,15) + numrange(10,20)</code>- <code>anyrange``*``anyrange</code>- <code>anyrange</code>              Cale la intersecci\u00f3n de los rangos.               <code>int8range(5,15) * int8range(10,20)</code>- <code>anyrange``-``anyrange</code>- <code>anyrange</code>              Cale la diferencia de los rangos. El segundo rango no  debe estar contenido en la primera de tal manera que la diferencia no  sea un solo rango.               <code>int8range(5,15) - int8range(10,20)</code>- <p>Cuadro 9.56. Operadores multi-ordenados</p> Operadora              Descripci\u00f3n              Ejemplos (s) <code>anymultirange``@&gt;``anymultirange</code>- <code>boolean</code>              El primer multirango contiene el segundo?               <code>'{[2,4)}'::int4multirange @&gt; '{[2,3)}'::int4multirange</code>- <code>anymultirange``@&gt;``anyrange</code>- <code>boolean</code>              El multirango contiene el rango?               <code>'{[2,4)}'::int4multirange @&gt; int4range(2,3)</code>- <code>anymultirange``@&gt;``anyelement</code>- <code>boolean</code>              El multirango contiene el elemento?               <code>'{[2011-01-01,2011-03-01)}'::tsmultirange @&gt; '2011-01-10'::timestamp</code>- <code>anyrange``@&gt;``anymultirange</code>- <code>boolean</code>              El rango contiene el multiorden?               <code>'[2,4)'::int4range @&gt; '{[2,3)}'::int4multirange</code>- <code>anymultirange``&lt;@``anymultirange</code>- <code>boolean</code>              Est\u00e1 el primer multirango contenido en el segundo?               <code>'{[2,4)}'::int4multirange &lt;@ '{[1,7)}'::int4multirange</code>- <code>anymultirange``&lt;@``anyrange</code>- <code>boolean</code>              Est\u00e1 el multirango.               <code>'{[2,4)}'::int4multirange &lt;@ int4range(1,7)</code>- <code>anyrange``&lt;@``anymultirange</code>- <code>boolean</code>              Es el rango contenido por el multirango?               <code>int4range(2,4) &lt;@ '{[1,7)}'::int4multirange</code>- <code>anyelement``&lt;@``anymultirange</code>- <code>boolean</code>              Es el elemento contenido por el multirango?               <code>4 &lt;@ '{[1,7)}'::int4multirange</code>- <code>anymultirange``&amp;&amp;``anymultirange</code>- <code>boolean</code>              Los multirancos se superponen, es decir, tienen alg\u00fan elemento en com\u00fan?               <code>'{[3,7)}'::int8multirange &amp;&amp; '{[4,12)}'::int8multirange</code>- <code>anymultirange``&amp;&amp;``anyrange</code>- <code>boolean</code>              El multirango se superpone en el rango?               <code>'{[3,7)}'::int8multirange &amp;&amp; int8range(4,12)</code>- <code>anyrange``&amp;&amp;``anymultirange</code>- <code>boolean</code>              El rango se superpone el multirango?               <code>int8range(3,7) &amp;&amp; '{[4,12)}'::int8multirange</code>- <code>anymultirange``&lt;&lt;``anymultirange</code>- <code>boolean</code>              Es el primer multirano estrictamente dejado del segundo?               <code>'{[1,10)}'::int8multirange &lt;&lt; '{[100,110)}'::int8multirange</code>- <code>anymultirange``&lt;&lt;``anyrange</code>- <code>boolean</code>              Es el multirango m\u00e1s estrictamente izquierdo del rango?               <code>'{[1,10)}'::int8multirange &lt;&lt; int8range(100,110)</code>- <code>anyrange``&lt;&lt;``anymultirange</code>- <code>boolean</code>              Es el rango estrictamente dejado del multirango?               <code>int8range(1,10) &lt;&lt; '{[100,110)}'::int8multirange</code>- <code>anymultirange``&gt;&gt;``anymultirange</code>- <code>boolean</code>              Es el primer multirango estrictamente correcto del segundo?               <code>'{[50,60)}'::int8multirange &gt;&gt; '{[20,30)}'::int8multirange</code>- <code>anymultirange``&gt;&gt;``anyrange</code>- <code>boolean</code>              Es el multirango estrictamente correcto del rango?               <code>'{[50,60)}'::int8multirange &gt;&gt; int8range(20,30)</code>- <code>anyrange``&gt;&gt;``anymultirange</code>- <code>boolean</code>              Es el rango estrictamente correcto del multi-arreglo?               <code>int8range(50,60) &gt;&gt; '{[20,30)}'::int8multirange</code>- <code>anymultirange``&amp;&lt;``anymultirange</code>- <code>boolean</code>              El primer multiranquio no se extiende a la derecha del segundo?               <code>'{[1,20)}'::int8multirange &amp;&lt; '{[18,20)}'::int8multirange</code>- <code>anymultirange``&amp;&lt;``anyrange</code>- <code>boolean</code>              El multirango no se extiende a la derecha del rango?               <code>'{[1,20)}'::int8multirange &amp;&lt; int8range(18,20)</code>- <code>anyrange``&amp;&lt;``anymultirange</code>- <code>boolean</code>              El rango no se extiende a la derecha del multirango?               <code>int8range(1,20) &amp;&lt; '{[18,20)}'::int8multirange</code>- <code>anymultirange``&amp;&gt;``anymultirange</code>- <code>boolean</code>              El primer multiranquio no se extiende a la izquierda del segundo?               <code>'{[7,20)}'::int8multirange &amp;&gt; '{[5,10)}'::int8multirange</code>- <code>anymultirange``&amp;&gt;``anyrange</code>- <code>boolean</code>              El multirango no se extiende a la izquierda del rango?               <code>'{[7,20)}'::int8multirange &amp;&gt; int8range(5,10)</code>- <code>anyrange``&amp;&gt;``anymultirange</code>- <code>boolean</code>              El rango no se extiende a la izquierda del multirango?               <code>int8range(7,20) &amp;&gt; '{[5,10)}'::int8multirange</code>- <code>anymultirange``-|-``anymultirange</code>- <code>boolean</code>              Son los multiranos adyacentes?               <code>'{[1.1,2.2)}'::nummultirange -|- '{[2.2,3.3)}'::nummultirange</code>- <code>anymultirange``-|-``anyrange</code>- <code>boolean</code>              Es el multirango al lado del rango?               <code>'{[1.1,2.2)}'::nummultirange -|- numrange(2.2,3.3)</code>- <code>anyrange``-|-``anymultirange</code>- <code>boolean</code>              Es el rango adyacente al multirango?               <code>numrange(1.1,2.2) -|- '{[2.2,3.3)}'::nummultirange</code>- <code>anymultirange``+``anymultirange</code>- <code>anymultirange</code>              Recuto la uni\u00f3n de los multirandos. Los multiranquias no necesitan solapamiento o ser adyacentes.               <code>'{[5,10)}'::nummultirange + '{[15,20)}'::nummultirange</code>- <code>anymultirange``*``anymultirange</code>- <code>anymultirange</code>              Cale la intersecci\u00f3n de los multirandos.               <code>'{[5,15)}'::int8multirange * '{[10,20)}'::int8multirange</code>- <code>anymultirange``-``anymultirange</code>- <code>anymultirange</code>              Computa la diferencia de los multirandos.               <code>'{[5,20)}'::int8multirange - '{[10,15)}'::int8multirange</code>- <p>Los operadores izquierdos/de derechos/aguicentes siempre devuelven  falsos cuando se trata de un rango vac\u00edo o multirango; es decir, un  rango vac\u00edo no se considera antes ni despu\u00e9s de cualquier otro rango.</p> <p>En otras partes, las gamas vac\u00edas y los multirandos se tratan como  la identidad aditiva: cualquier cosa sindical con un valor vac\u00eda es en  s\u00ed misma. Cualquier cosa menos un valor vac\u00edo es en s\u00ed misma. Un  multirango vac\u00edo tiene exactamente los mismos puntos que un rango vac\u00edo. Cada rango contiene el rango vac\u00edo. Cada multiranquio contiene tantos  rangos vac\u00edos como te gusta.</p> <p>Los operadores de la uni\u00f3n y diferencia de rango fracasar\u00e1n si el  rango resultante tendr\u00eda que contener dos subranos disjuntos, ya que tal gama no puede estar representada. Hay operadores separados para uni\u00f3n y diferencia que toman par\u00e1metros multirango y devuelven un multirango, y no fallan incluso si sus argumentos son desarten. As\u00ed que si usted  necesita una operaci\u00f3n de uni\u00f3n o diferencia para rangos que pueden ser  desarten, usted puede evitar errores primero lanzando sus rangos a  multi-rango.</p> <p>La Tabla 9.57 muestra las funciones disponibles para su uso con tipos de rango. La tabla 9.58 muestra las funciones disponibles para su uso con tipos multirango.</p> <p>Cuadro 9.57. Funciones de rango</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>lower</code>(  <code>anyrange</code>) . <code>anyelement</code>              Extrae el l\u00edmite inferior del rango ( <code>NULL</code>si el rango est\u00e1 vac\u00edo o el l\u00edmite inferior es infinito).               <code>lower(numrange(1.1,2.2))</code>- <code>upper</code>(  <code>anyrange</code>) . <code>anyelement</code>              Extrae el l\u00edmite superior de la gama ( <code>NULL</code>si el rango est\u00e1 vac\u00edo o el l\u00edmite superior es infinito).               <code>upper(numrange(1.1,2.2))</code>- <code>isempty</code>(  <code>anyrange</code>) . <code>boolean</code>              Est\u00e1 vac\u00eda el campo?               <code>isempty(numrange(1.1,2.2))</code>- <code>lower_inc</code>(  <code>anyrange</code>) . <code>boolean</code>              Es el l\u00edmite inferior del rango inclusivo?               <code>lower_inc(numrange(1.1,2.2))</code>- <code>upper_inc</code>(  <code>anyrange</code>) . <code>boolean</code>              Es el l\u00edmite superior del rango inclusivo?               <code>upper_inc(numrange(1.1,2.2))</code>- <code>lower_inf</code>(  <code>anyrange</code>) . <code>boolean</code>              Es el l\u00edmite inferior del rango infinito?               <code>lower_inf('(,)'::daterange)</code>- <code>upper_inf</code>(  <code>anyrange</code>) . <code>boolean</code>              Es el l\u00edmite superior del rango infinito?               <code>upper_inf('(,)'::daterange)</code>- <code>range_merge</code>( <code>anyrange</code>,  <code>anyrange</code>) . <code>anyrange</code>              Caluta el rango m\u00e1s peque\u00f1o que incluye ambos rangos dados.               <code>range_merge('[1,2)'::int4range, '[3,4)'::int4range)</code>- <p>Cuadro 9.58. Funciones multiarreglas</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>lower</code>(  <code>anymultirange</code>) . <code>anyelement</code>              Extrae el l\u00edmite inferior del multirango ( <code>NULL</code>si el multirango est\u00e1 vac\u00edo o el l\u00edmite inferior es infinito).               <code>lower('{[1.1,2.2)}'::nummultirange)</code>- <code>upper</code>(  <code>anymultirange</code>) . <code>anyelement</code>              Extrae el l\u00edmite superior del multirango ( <code>NULL</code>si el multirango est\u00e1 vac\u00edo o el l\u00edmite superior es infinito).               <code>upper('{[1.1,2.2)}'::nummultirange)</code>- <code>isempty</code>(  <code>anymultirange</code>) . <code>boolean</code>              Est\u00e1 el multirango vac\u00edo?               <code>isempty('{[1.1,2.2)}'::nummultirange)</code>- <code>lower_inc</code>(  <code>anymultirange</code>) . <code>boolean</code>              Es el l\u00edmite inferior del multirango incluido?               <code>lower_inc('{[1.1,2.2)}'::nummultirange)</code>- <code>upper_inc</code>(  <code>anymultirange</code>) . <code>boolean</code>              Es el l\u00edmite superior del multirano incluido?               <code>upper_inc('{[1.1,2.2)}'::nummultirange)</code>- <code>lower_inf</code>(  <code>anymultirange</code>) . <code>boolean</code>              Es el l\u00edmite inferior del multirango infinito?               <code>lower_inf('{(,)}'::datemultirange)</code>- <code>upper_inf</code>(  <code>anymultirange</code>) . <code>boolean</code>              Es el l\u00edmite superior del multirano infinito?               <code>upper_inf('{(,)}'::datemultirange)</code>- <code>range_merge</code>(  <code>anymultirange</code>) . <code>anyrange</code>              Cale el rango m\u00e1s peque\u00f1o que incluye todo el multirango.               <code>range_merge('{[1,2), [3,4)}'::int4multirange)</code>- <code>multirange</code>(  <code>anyrange</code>) . <code>anymultirange</code>              Devuelve un multirango que contiene s\u00f3lo el rango dado.               <code>multirange('[1,2)'::int4range)</code>- <code>unnest</code>(  <code>anymultirange</code>) . <code>setof anyrange</code>              Expande un multirango en un conjunto de rangos. Los rangos se leen en orden de almacenamiento (ascending).               <code>unnest('{[1,2), [3,4)}'::int4multirange)</code>-              <code>[1,2) [3,4)</code> <p>El <code>lower_inc</code>, <code>upper_inc</code>, <code>lower_inf</code>, y  <code>upper_inf</code>funciona todo retorno falso para un rango vac\u00edo o multiorden.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/21.-Funciones%20agregadas/","title":"21.-Funciones agregadas","text":"<p>Aggregate functions compute a single result from a set of input values. The built-in general-purpose aggregate functions are listed in Table 9.59 while statistical aggregates are in Table 9.60. The built-in within-group ordered-set aggregate functions are listed in Table 9.61 while the built-in within-group hypothetical-set ones are in Table 9.62. Grouping operations, which are closely related to aggregate functions, are listed in Table 9.63. The special syntax considerations for aggregate functions are explained in Section 4.2.7. Consult Section 2.7 for additional introductory information.</p> <p>Aggregate functions that support Partial Mode are eligible to participate in various optimizations, such as parallel aggregation.</p> <p>Table 9.59. General-Purpose Aggregate Functions</p> Function              Description Partial Mode <code>any_value</code> ( <code>anyelement</code> ) \u2192 <code>*</code>same as input type<code>*</code>              Returns an arbitrary value from the non-null input values. Yes <code>array_agg</code> ( <code>anynonarray</code> ) \u2192 <code>anyarray</code>              Collects all the input values, including nulls, into an array. Yes <code>array_agg</code> ( <code>anyarray</code> ) \u2192 <code>anyarray</code>              Concatenates all the input arrays into an array of one  higher dimension. (The inputs must all have the same dimensionality, and cannot be empty or null.) Yes <code>avg</code> ( <code>smallint</code> ) \u2192 <code>numeric</code> <code>avg</code> ( <code>integer</code> ) \u2192 <code>numeric</code> <code>avg</code> ( <code>bigint</code> ) \u2192 <code>numeric</code> <code>avg</code> ( <code>numeric</code> ) \u2192 <code>numeric</code> <code>avg</code> ( <code>real</code> ) \u2192 <code>double precision</code> <code>avg</code> ( <code>double precision</code> ) \u2192 <code>double precision</code> <code>avg</code> ( <code>interval</code> ) \u2192 <code>interval</code>              Computes the average (arithmetic mean) of all the non-null input values. Yes <code>bit_and</code> ( <code>smallint</code> ) \u2192 <code>smallint</code> <code>bit_and</code> ( <code>integer</code> ) \u2192 <code>integer</code> <code>bit_and</code> ( <code>bigint</code> ) \u2192 <code>bigint</code> <code>bit_and</code> ( <code>bit</code> ) \u2192 <code>bit</code>              Computes the bitwise AND of all non-null input values. Yes <code>bit_or</code> ( <code>smallint</code> ) \u2192 <code>smallint</code> <code>bit_or</code> ( <code>integer</code> ) \u2192 <code>integer</code> <code>bit_or</code> ( <code>bigint</code> ) \u2192 <code>bigint</code> <code>bit_or</code> ( <code>bit</code> ) \u2192 <code>bit</code>              Computes the bitwise OR of all non-null input values. Yes <code>bit_xor</code> ( <code>smallint</code> ) \u2192 <code>smallint</code> <code>bit_xor</code> ( <code>integer</code> ) \u2192 <code>integer</code> <code>bit_xor</code> ( <code>bigint</code> ) \u2192 <code>bigint</code> <code>bit_xor</code> ( <code>bit</code> ) \u2192 <code>bit</code>              Computes the bitwise exclusive OR of all non-null input values. Can be useful as a checksum for an unordered set of values. Yes <code>bool_and</code> ( <code>boolean</code> ) \u2192 <code>boolean</code>              Returns true if all non-null input values are true, otherwise false. Yes <code>bool_or</code> ( <code>boolean</code> ) \u2192 <code>boolean</code>              Returns true if any non-null input value is true, otherwise false. Yes <code>count</code> ( <code>*</code> ) \u2192 <code>bigint</code>              Computes the number of input rows. Yes <code>count</code> ( <code>\"any\"</code> ) \u2192 <code>bigint</code>              Computes the number of input rows in which the input value is not null. Yes <code>every</code> ( <code>boolean</code> ) \u2192 <code>boolean</code>              This is the SQL standard's equivalent to <code>bool_and</code>. Yes <code>json_agg</code> ( <code>anyelement</code> ) \u2192 <code>json</code> <code>jsonb_agg</code> ( <code>anyelement</code> ) \u2192 <code>jsonb</code>              Collects all the input values, including nulls, into a JSON array. Values are converted to JSON as per <code>to_json</code> or <code>to_jsonb</code>. No <code>json_objectagg</code> ( [ { <code>key_expression</code> { <code>VALUE</code> ':' } <code>value_expression</code> } ] [ { <code>NULL</code> <code>json_object_agg</code> ( <code>key</code> <code>\"any\"</code>, <code>value</code> <code>\"any\"</code> ) \u2192 <code>json</code> <code>jsonb_object_agg</code> ( <code>key</code> <code>\"any\"</code>, <code>value</code> <code>\"any\"</code> ) \u2192 <code>jsonb</code>              Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per <code>to_json</code> or <code>to_jsonb</code>. Values can be null, but keys cannot. No <code>json_object_agg_strict</code> ( <code>key</code> <code>\"any\"</code>, <code>value</code> <code>\"any\"</code> ) \u2192 <code>json</code> <code>jsonb_object_agg_strict</code> ( <code>key</code> <code>\"any\"</code>, <code>value</code> <code>\"any\"</code> ) \u2192 <code>jsonb</code>              Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per <code>to_json</code> or <code>to_jsonb</code>. The <code>key</code> can not be null. If the <code>value</code> is null then the entry is skipped, No <code>json_object_agg_unique</code> ( <code>key</code> <code>\"any\"</code>, <code>value</code> <code>\"any\"</code> ) \u2192 <code>json</code> <code>jsonb_object_agg_unique</code> ( <code>key</code> <code>\"any\"</code>, <code>value</code> <code>\"any\"</code> ) \u2192 <code>jsonb</code>              Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per <code>to_json</code> or <code>to_jsonb</code>. Values can be null, but keys cannot. If there is a duplicate key an error is thrown. No <code>json_arrayagg</code> ( [ <code>value_expression</code> ] [ <code>ORDER BY</code> <code>sort_expression</code> ] [ { <code>NULL</code> <code>ABSENT</code> } <code>ON NULL</code> ] [ <code>RETURNING</code> <code>data_type</code> [ <code>FORMAT JSON</code> [ <code>ENCODING UTF8</code> ] ] ])              Behaves in the same way as <code>json_array</code> but as an aggregate function so it only takes one <code>value_expression</code> parameter. If <code>ABSENT ON NULL</code> is specified, any NULL values are omitted. If <code>ORDER BY</code> is specified, the elements will appear in the array in that order rather than in the input order.              <code>SELECT json_arrayagg(v) FROM (VALUES(2),(1)) t(v)</code> \u2192 <code>[2, 1]</code> <code>json_object_agg_unique_strict</code> ( <code>key</code> <code>\"any\"</code>, <code>value</code> <code>\"any\"</code> ) \u2192 <code>json</code> <code>jsonb_object_agg_unique_strict</code> ( <code>key</code> <code>\"any\"</code>, <code>value</code> <code>\"any\"</code> ) \u2192 <code>jsonb</code>              Collects all the key/value pairs into a JSON object. Key arguments are coerced to text; value arguments are converted as per <code>to_json</code> or <code>to_jsonb</code>. The <code>key</code> can not be null. If the <code>value</code> is null then the entry is skipped. If there is a duplicate key an error is thrown. No <code>max</code> ( <code>see text</code> ) \u2192 <code>*</code>same as input type<code>*</code>              Computes the maximum of the non-null input values. Available for any numeric, string, date/time, or enum type, as well as <code>inet</code>, <code>interval</code>, <code>money</code>, <code>oid</code>, <code>pg_lsn</code>, <code>tid</code>, <code>xid8</code>, and arrays of any of these types. Yes <code>min</code> ( <code>see text</code> ) \u2192 <code>*</code>same as input type<code>*</code>              Computes the minimum of the non-null input values. Available for any numeric, string, date/time, or enum type, as well as <code>inet</code>, <code>interval</code>, <code>money</code>, <code>oid</code>, <code>pg_lsn</code>, <code>tid</code>, <code>xid8</code>, and arrays of any of these types. Yes <code>range_agg</code> ( <code>value</code> <code>anyrange</code> ) \u2192 <code>anymultirange</code> <code>range_agg</code> ( <code>value</code> <code>anymultirange</code> ) \u2192 <code>anymultirange</code>              Computes the union of the non-null input values. No <code>range_intersect_agg</code> ( <code>value</code> <code>anyrange</code> ) \u2192 <code>anyrange</code> <code>range_intersect_agg</code> ( <code>value</code> <code>anymultirange</code> ) \u2192 <code>anymultirange</code>              Computes the intersection of the non-null input values. No <code>json_agg_strict</code> ( <code>anyelement</code> ) \u2192 <code>json</code> <code>jsonb_agg_strict</code> ( <code>anyelement</code> ) \u2192 <code>jsonb</code>              Collects all the input values, skipping nulls, into a JSON array. Values are converted to JSON as per <code>to_json</code> or <code>to_jsonb</code>. No <code>string_agg</code> ( <code>value</code> <code>text</code>, <code>delimiter</code> <code>text</code> ) \u2192 <code>text</code> <code>string_agg</code> ( <code>value</code> <code>bytea</code>, <code>delimiter</code> <code>bytea</code> ) \u2192 <code>bytea</code>              Concatenates the non-null input values into a string. Each value after the first is preceded by the corresponding <code>delimiter</code> (if it's not null). Yes <code>sum</code> ( <code>smallint</code> ) \u2192 <code>bigint</code> <code>sum</code> ( <code>integer</code> ) \u2192 <code>bigint</code> <code>sum</code> ( <code>bigint</code> ) \u2192 <code>numeric</code> <code>sum</code> ( <code>numeric</code> ) \u2192 <code>numeric</code> <code>sum</code> ( <code>real</code> ) \u2192 <code>real</code> <code>sum</code> ( <code>double precision</code> ) \u2192 <code>double precision</code> <code>sum</code> ( <code>interval</code> ) \u2192 <code>interval</code> <code>sum</code> ( <code>money</code> ) \u2192 <code>money</code>              Computes the sum of the non-null input values. Yes <code>xmlagg</code> ( <code>xml</code> ) \u2192 <code>xml</code>              Concatenates the non-null XML input values (see Section 9.15.1.7). No <p>It should be noted that except for <code>count</code>, these functions return a null value when no rows are selected. In particular, <code>sum</code> of no rows returns null, not zero as one might expect, and <code>array_agg</code> returns null rather than an empty array when there are no input rows. The <code>coalesce</code> function can be used to substitute zero or an empty array for null when necessary.</p> <p>The aggregate functions <code>array_agg</code>, <code>json_agg</code>, <code>jsonb_agg</code>, <code>json_agg_strict</code>, <code>jsonb_agg_strict</code>, <code>json_object_agg</code>, <code>jsonb_object_agg</code>, <code>json_object_agg_strict</code>, <code>jsonb_object_agg_strict</code>, <code>json_object_agg_unique</code>, <code>jsonb_object_agg_unique</code>, <code>json_object_agg_unique_strict</code>, <code>jsonb_object_agg_unique_strict</code>, <code>string_agg</code>, and <code>xmlagg</code>, as well as similar user-defined aggregate functions, produce  meaningfully different result values depending on the order of the input values. This ordering is unspecified by default, but can be controlled  by writing an <code>ORDER BY</code> clause within the aggregate call, as shown in Section 4.2.7. Alternatively, supplying the input values from a sorted subquery will usually work. For example:</p> <pre><code>SELECT xmlagg(x) FROM (SELECT x FROM test ORDER BY y DESC) AS tab;\n</code></pre> <p>Beware that this approach can fail if the outer query level  contains additional processing, such as a join, because that might cause the subquery's output to be reordered before the aggregate is computed.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/21.-Funciones%20agregadas/#note","title":"Note","text":"<p>The boolean aggregates <code>bool_and</code> and <code>bool_or</code> correspond to the standard SQL aggregates <code>every</code> and <code>any</code> or <code>some</code>. PostgreSQL supports <code>every</code>, but not <code>any</code> or <code>some</code>, because there is an ambiguity built into the standard syntax:</p> <pre><code>SELECT b1 = ANY((SELECT b2 FROM t2 ...)) FROM t1 ...;\n</code></pre> <p>Here <code>ANY</code> can be considered either  as introducing a subquery, or as being an aggregate function, if the  subquery returns one row with a Boolean value. Thus the standard name  cannot be given to these aggregates.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/21.-Funciones%20agregadas/#note_1","title":"Note","text":"<p>Users accustomed to working with other SQL database management systems might be disappointed by the performance of the <code>count</code> aggregate when it is applied to the entire table. A query like:</p> <pre><code>SELECT count(*) FROM sometable;\n</code></pre> <p>will require effort proportional to the size of the table: PostgreSQL will need to scan either the entire table or the entirety of an index that includes all rows in the table.</p> <p>Table 9.60 shows aggregate functions typically used in statistical analysis.  (These are separated out merely to avoid cluttering the listing of  more-commonly-used aggregates.) Functions shown as accepting <code>numeric_type</code> are available for all the types <code>smallint</code>, <code>integer</code>, <code>bigint</code>, <code>numeric</code>, <code>real</code>, and <code>double precision</code>. Where the description mentions <code>N</code>, it means the number of input rows for which all the input expressions  are non-null. In all cases, null is returned if the computation is  meaningless, for example when <code>N</code> is zero.</p> <p>Table 9.60. Aggregate Functions for Statistics</p> Function              Description Partial Mode <code>corr</code> ( <code>Y</code> <code>double precision</code>, <code>X</code> <code>double precision</code> ) \u2192 <code>double precision</code>              Computes the correlation coefficient. Yes <code>covar_pop</code> ( <code>Y</code> <code>double precision</code>, <code>X</code> <code>double precision</code> ) \u2192 <code>double precision</code>              Computes the population covariance. Yes <code>covar_samp</code> ( <code>Y</code> <code>double precision</code>, <code>X</code> <code>double precision</code> ) \u2192 <code>double precision</code>              Computes the sample covariance. Yes <code>regr_avgx</code> ( <code>Y</code> <code>double precision</code>, <code>X</code> <code>double precision</code> ) \u2192 <code>double precision</code>              Computes the average of the independent variable, <code>sum(*</code>X<code>*)/*</code>N<code>*</code>. Yes <code>regr_avgy</code> ( <code>Y</code> <code>double precision</code>, <code>X</code> <code>double precision</code> ) \u2192 <code>double precision</code>              Computes the average of the dependent variable, <code>sum(*</code>Y<code>*)/*</code>N<code>*</code>. Yes <code>regr_count</code> ( <code>Y</code> <code>double precision</code>, <code>X</code> <code>double precision</code> ) \u2192 <code>bigint</code>              Computes the number of rows in which both inputs are non-null. Yes <code>regr_intercept</code> ( <code>Y</code> <code>double precision</code>, <code>X</code> <code>double precision</code> ) \u2192 <code>double precision</code>              Computes the y-intercept of the least-squares-fit linear equation determined by the (<code>X</code>, <code>Y</code>) pairs. Yes <code>regr_r2</code> ( <code>Y</code> <code>double precision</code>, <code>X</code> <code>double precision</code> ) \u2192 <code>double precision</code>              Computes the square of the correlation coefficient. Yes <code>regr_slope</code> ( <code>Y</code> <code>double precision</code>, <code>X</code> <code>double precision</code> ) \u2192 <code>double precision</code>              Computes the slope of the least-squares-fit linear equation determined by the (<code>X</code>, <code>Y</code>) pairs. Yes <code>regr_sxx</code> ( <code>Y</code> <code>double precision</code>, <code>X</code> <code>double precision</code> ) \u2192 <code>double precision</code>              Computes the \u201csum of squares\u201d of the independent variable, <code>sum(*</code>X<code>*^2) - sum(*</code>X<code>*)^2/*</code>N<code>*</code>. Yes <code>regr_sxy</code> ( <code>Y</code> <code>double precision</code>, <code>X</code> <code>double precision</code> ) \u2192 <code>double precision</code>              Computes the \u201csum of products\u201d of independent times dependent variables, <code>sum(*</code>X<code>***</code>Y<code>*) - sum(*</code>X<code>*) * sum(*</code>Y<code>*)/*</code>N<code>*</code>. Yes <code>regr_syy</code> ( <code>Y</code> <code>double precision</code>, <code>X</code> <code>double precision</code> ) \u2192 <code>double precision</code>              Computes the \u201csum of squares\u201d of the dependent variable, <code>sum(*</code>Y<code>*^2) - sum(*</code>Y<code>*)^2/*</code>N<code>*</code>. Yes <code>stddev</code> ( <code>numeric_type</code> ) \u2192 <code>double precision</code> for <code>real</code> or <code>double precision</code>, otherwise <code>numeric</code>              This is a historical alias for <code>stddev_samp</code>. Yes <code>stddev_pop</code> ( <code>numeric_type</code> ) \u2192 <code>double precision</code> for <code>real</code> or <code>double precision</code>, otherwise <code>numeric</code>              Computes the population standard deviation of the input values. Yes <code>stddev_samp</code> ( <code>numeric_type</code> ) \u2192 <code>double precision</code> for <code>real</code> or <code>double precision</code>, otherwise <code>numeric</code>              Computes the sample standard deviation of the input values. Yes <code>variance</code> ( <code>numeric_type</code> ) \u2192 <code>double precision</code> for <code>real</code> or <code>double precision</code>, otherwise <code>numeric</code>              This is a historical alias for <code>var_samp</code>. Yes <code>var_pop</code> ( <code>numeric_type</code> ) \u2192 <code>double precision</code> for <code>real</code> or <code>double precision</code>, otherwise <code>numeric</code>              Computes the population variance of the input values (square of the population standard deviation). Yes <code>var_samp</code> ( <code>numeric_type</code> ) \u2192 <code>double precision</code> for <code>real</code> or <code>double precision</code>, otherwise <code>numeric</code>              Computes the sample variance of the input values (square of the sample standard deviation). Yes <p>Table 9.61 shows some aggregate functions that use the ordered-set aggregate syntax. These functions are sometimes referred to as \u201cinverse distribution\u201d functions. Their aggregated input is introduced by <code>ORDER BY</code>, and they may also take a direct argument that is not aggregated, but is computed only once. All these functions  ignore null values in their aggregated input. For those that take a <code>fraction</code> parameter, the fraction value must be between 0 and 1; an error is thrown if not. However, a null <code>fraction</code> value simply produces a null result.</p> <p>Table 9.61. Ordered-Set Aggregate Functions</p> Function              Description Partial Mode <code>mode</code> () <code>WITHIN GROUP</code> ( <code>ORDER BY</code> <code>anyelement</code> ) \u2192 <code>anyelement</code>              Computes the mode, the most  frequent value of the aggregated argument (arbitrarily choosing the  first one if there are multiple equally-frequent values). The aggregated argument must be of a sortable type. No <code>percentile_cont</code> ( <code>fraction</code> <code>double precision</code> ) <code>WITHIN GROUP</code> ( <code>ORDER BY</code> <code>double precision</code> ) \u2192 <code>double precision</code> <code>percentile_cont</code> ( <code>fraction</code> <code>double precision</code> ) <code>WITHIN GROUP</code> ( <code>ORDER BY</code> <code>interval</code> ) \u2192 <code>interval</code>              Computes the continuous percentile, a value corresponding to the specified <code>fraction</code> within the ordered set of aggregated argument values. This will interpolate between adjacent input items if needed. No <code>percentile_cont</code> ( <code>fractions</code> <code>double precision[]</code> ) <code>WITHIN GROUP</code> ( <code>ORDER BY</code> <code>double precision</code> ) \u2192 <code>double precision[]</code> <code>percentile_cont</code> ( <code>fractions</code> <code>double precision[]</code> ) <code>WITHIN GROUP</code> ( <code>ORDER BY</code> <code>interval</code> ) \u2192 <code>interval[]</code>              Computes multiple continuous percentiles. The result is an array of the same dimensions as the <code>fractions</code> parameter, with each non-null element replaced by the (possibly interpolated) value corresponding to that percentile. No <code>percentile_disc</code> ( <code>fraction</code> <code>double precision</code> ) <code>WITHIN GROUP</code> ( <code>ORDER BY</code> <code>anyelement</code> ) \u2192 <code>anyelement</code>              Computes the discrete percentile, the first value within the ordered set of aggregated argument values  whose position in the ordering equals or exceeds the specified <code>fraction</code>. The aggregated argument must be of a sortable type. No <code>percentile_disc</code> ( <code>fractions</code> <code>double precision[]</code> ) <code>WITHIN GROUP</code> ( <code>ORDER BY</code> <code>anyelement</code> ) \u2192 <code>anyarray</code>              Computes multiple discrete percentiles. The result is an array of the same dimensions as the <code>fractions</code> parameter, with each non-null element replaced by the input value  corresponding to that percentile. The aggregated argument must be of a  sortable type. No <p>Each of the \u201chypothetical-set\u201d aggregates listed in Table 9.62 is associated with a window function of the same name defined in Section 9.22. In each case, the aggregate's result is the value that the associated window function would have returned for the \u201chypothetical\u201d row constructed from <code>args</code>, if such a row had been added to the sorted group of rows represented by the <code>sorted_args</code>. For each of these functions, the list of direct arguments given in <code>args</code> must match the number and types of the aggregated arguments given in <code>sorted_args</code>. Unlike most built-in aggregates, these aggregates are not strict, that  is they do not drop input rows containing nulls. Null values sort  according to the rule specified in the <code>ORDER BY</code> clause.</p> <p>Table 9.62. Hypothetical-Set Aggregate Functions</p> Function              Description Partial Mode <code>rank</code> ( <code>args</code> ) <code>WITHIN GROUP</code> ( <code>ORDER BY</code> <code>sorted_args</code> ) \u2192 <code>bigint</code>              Computes the rank of the hypothetical row, with gaps; that is, the row number of the first row in its peer group. No <code>dense_rank</code> ( <code>args</code> ) <code>WITHIN GROUP</code> ( <code>ORDER BY</code> <code>sorted_args</code> ) \u2192 <code>bigint</code>              Computes the rank of the hypothetical row, without gaps; this function effectively counts peer groups. No <code>percent_rank</code> ( <code>args</code> ) <code>WITHIN GROUP</code> ( <code>ORDER BY</code> <code>sorted_args</code> ) \u2192 <code>double precision</code>              Computes the relative rank of the hypothetical row, that is (<code>rank</code> - 1) / (total rows - 1). The value thus ranges from 0 to 1 inclusive. No <code>cume_dist</code> ( <code>args</code> ) <code>WITHIN GROUP</code> ( <code>ORDER BY</code> <code>sorted_args</code> ) \u2192 <code>double precision</code>              Computes the cumulative distribution, that is (number  of rows preceding or peers with hypothetical row) / (total rows). The  value thus ranges from 1/<code>N</code> to 1. No <p>Table 9.63. Grouping Operations</p> Function              Description <code>GROUPING</code> ( <code>group_by_expression(s)</code> ) \u2192 <code>integer</code>              Returns a bit mask indicating which <code>GROUP BY</code> expressions are not included in the current grouping set. Bits are  assigned with the rightmost argument corresponding to the  least-significant bit; each bit is 0 if the corresponding expression is  included in the grouping criteria of the grouping set generating the  current result row, and 1 if it is not included. <p>The grouping operations shown in Table 9.63 are used in conjunction with grouping sets (see Section 7.2.4) to distinguish result rows. The arguments to the <code>GROUPING</code> function are not actually evaluated, but they must exactly match expressions given in the <code>GROUP BY</code> clause of the associated query level. For example:</p> <pre><code>=&gt; SELECT * FROM items_sold;\n make  | model | sales\n-------+-------+-------\n Foo   | GT    |  10\n Foo   | Tour  |  20\n Bar   | City  |  15\n Bar   | Sport |  5\n(4 rows)\n\n=&gt; SELECT make, model, GROUPING(make,model), sum(sales) FROM items_sold GROUP BY ROLLUP(make,model);\n make  | model | grouping | sum\n-------+-------+----------+-----\n Foo   | GT    |        0 | 10\n Foo   | Tour  |        0 | 20\n Bar   | City  |        0 | 15\n Bar   | Sport |        0 | 5\n Foo   |       |        1 | 30\n Bar   |       |        1 | 20\n       |       |        3 | 50\n(7 rows)\n</code></pre> <p>Here, the <code>grouping</code> value <code>0</code> in the first four rows shows that those have been grouped normally, over both the grouping columns. The value <code>1</code> indicates that <code>model</code> was not grouped by in the next-to-last two rows, and the value <code>3</code> indicates that neither <code>make</code> nor <code>model</code> was grouped by in the last row (which therefore is an aggregate over all the input rows).</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/22.-Funciones%20de%20ventanas/","title":"22.-Funciones de ventanas","text":"<p>Window functions provide the ability to perform calculations across sets of rows that are related to the current query row. See Section 3.5 for an introduction to this feature, and Section 4.2.8 for syntax details.</p> <p>The built-in window functions are listed in Table 9.64. Note that these functions must be invoked using window function syntax, i.e., an <code>OVER</code> clause is required.</p> <p>In addition to these functions, any built-in or user-defined  ordinary aggregate (i.e., not ordered-set or hypothetical-set  aggregates) can be used as a window function; see Section 9.21 for a list of the built-in aggregates. Aggregate functions act as window functions only when an <code>OVER</code> clause follows the call; otherwise they act as plain aggregates and return a single row for the entire set.</p> <p>Table 9.64. General-Purpose Window Functions</p> Function              Description <code>row_number</code> () \u2192 <code>bigint</code>              Returns the number of the current row within its partition, counting from 1. <code>rank</code> () \u2192 <code>bigint</code>              Returns the rank of the current row, with gaps; that is, the <code>row_number</code> of the first row in its peer group. <code>dense_rank</code> () \u2192 <code>bigint</code>              Returns the rank of the current row, without gaps; this function effectively counts peer groups. <code>percent_rank</code> () \u2192 <code>double precision</code>              Returns the relative rank of the current row, that is (<code>rank</code> - 1) / (total partition rows - 1). The value thus ranges from 0 to 1 inclusive. <code>cume_dist</code> () \u2192 <code>double precision</code>              Returns the cumulative distribution, that is (number of partition rows preceding or peers with current row) / (total partition  rows). The value thus ranges from 1/<code>N</code> to 1. <code>ntile</code> ( <code>num_buckets</code> <code>integer</code> ) \u2192 <code>integer</code>              Returns an integer ranging from 1 to the argument value, dividing the partition as equally as possible. <code>lag</code> ( <code>value</code> <code>anycompatible</code> [, <code>offset</code> <code>integer</code> [, <code>default</code> <code>anycompatible</code> ]] ) \u2192 <code>anycompatible</code>              Returns <code>value</code> evaluated at the row that is <code>offset</code> rows before the current row within the partition; if there is no such row, instead returns <code>default</code> (which must be of a type compatible with <code>value</code>). Both <code>offset</code> and <code>default</code> are evaluated with respect to the current row. If omitted, <code>offset</code> defaults to 1 and <code>default</code> to <code>NULL</code>. <code>lead</code> ( <code>value</code> <code>anycompatible</code> [, <code>offset</code> <code>integer</code> [, <code>default</code> <code>anycompatible</code> ]] ) \u2192 <code>anycompatible</code>              Returns <code>value</code> evaluated at the row that is <code>offset</code> rows after the current row within the partition; if there is no such row, instead returns <code>default</code> (which must be of a type compatible with <code>value</code>). Both <code>offset</code> and <code>default</code> are evaluated with respect to the current row. If omitted, <code>offset</code> defaults to 1 and <code>default</code> to <code>NULL</code>. <code>first_value</code> ( <code>value</code> <code>anyelement</code> ) \u2192 <code>anyelement</code>              Returns <code>value</code> evaluated at the row that is the first row of the window frame. <code>last_value</code> ( <code>value</code> <code>anyelement</code> ) \u2192 <code>anyelement</code>              Returns <code>value</code> evaluated at the row that is the last row of the window frame. <code>nth_value</code> ( <code>value</code> <code>anyelement</code>, <code>n</code> <code>integer</code> ) \u2192 <code>anyelement</code>              Returns <code>value</code> evaluated at the row that is the <code>n</code>'th row of the window frame (counting from 1); returns <code>NULL</code> if there is no such row. <p>All of the functions listed in Table 9.64 depend on the sort ordering specified by the <code>ORDER BY</code> clause of the associated window definition. Rows that are not distinct when considering only the <code>ORDER BY</code> columns are said to be peers. The four ranking functions (including <code>cume_dist</code>) are defined so that they give the same answer for all rows of a peer group.</p> <p>Note that <code>first_value</code>, <code>last_value</code>, and <code>nth_value</code> consider only the rows within the \u201cwindow frame\u201d, which by default contains the rows from the start of the partition  through the last peer of the current row. This is likely to give  unhelpful results for <code>last_value</code> and sometimes also <code>nth_value</code>. You can redefine the frame by adding a suitable frame specification (<code>RANGE</code>, <code>ROWS</code> or <code>GROUPS</code>) to the <code>OVER</code> clause. See Section 4.2.8 for more information about frame specifications.</p> <p>When an aggregate function is used as a window function, it  aggregates over the rows within the current row's window frame. An  aggregate used with <code>ORDER BY</code> and the default window frame definition produces a \u201crunning sum\u201d type of behavior, which may or may not be what's wanted. To obtain aggregation over the whole partition, omit <code>ORDER BY</code> or use <code>ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING</code>. Other frame specifications can be used to obtain other effects.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/22.-Funciones%20de%20ventanas/#note","title":"Note","text":"<p>The SQL standard defines a <code>RESPECT NULLS</code> or <code>IGNORE NULLS</code> option for <code>lead</code>, <code>lag</code>, <code>first_value</code>, <code>last_value</code>, and <code>nth_value</code>. This is not implemented in PostgreSQL: the behavior is always the same as the standard's default, namely <code>RESPECT NULLS</code>. Likewise, the standard's <code>FROM FIRST</code> or <code>FROM LAST</code> option for <code>nth_value</code> is not implemented: only the default <code>FROM FIRST</code> behavior is supported. (You can achieve the result of <code>FROM LAST</code> by reversing the <code>ORDER BY</code> ordering.)</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/25.-Establecer%20funciones%20de%20retorno/","title":"25.-Establecer funciones de retorno","text":"<p>This section describes functions that possibly return more than one  row. The most widely used functions in this class are series generating  functions, as detailed in Table 9.65 and Table 9.66. Other, more specialized set-returning functions are described elsewhere in this manual. See Section 7.2.1.4 for ways to combine multiple set-returning functions.</p> <p>Table 9.65. Series Generating Functions</p> Function              Description <code>generate_series</code> ( <code>start</code> <code>integer</code>, <code>stop</code> <code>integer</code> [, <code>step</code> <code>integer</code> ] ) \u2192 <code>setof integer</code> <code>generate_series</code> ( <code>start</code> <code>bigint</code>, <code>stop</code> <code>bigint</code> [, <code>step</code> <code>bigint</code> ] ) \u2192 <code>setof bigint</code> <code>generate_series</code> ( <code>start</code> <code>numeric</code>, <code>stop</code> <code>numeric</code> [, <code>step</code> <code>numeric</code> ] ) \u2192 <code>setof numeric</code>              Generates a series of values from <code>start</code> to <code>stop</code>, with a step size of <code>step</code>. <code>step</code> defaults to 1. <code>generate_series</code> ( <code>start</code> <code>timestamp</code>, <code>stop</code> <code>timestamp</code>, <code>step</code> <code>interval</code> ) \u2192 <code>setof timestamp</code> <code>generate_series</code> ( <code>start</code> <code>timestamp with time zone</code>, <code>stop</code> <code>timestamp with time zone</code>, <code>step</code> <code>interval</code> [, <code>timezone</code> <code>text</code> ] ) \u2192 <code>setof timestamp with time zone</code>              Generates a series of values from <code>start</code> to <code>stop</code>, with a step size of <code>step</code>. In the timezone-aware form, times of day and daylight-savings  adjustments are computed according to the time zone named by the <code>timezone</code> argument, or the current TimeZone setting if that is omitted. <p>When <code>step</code> is positive, zero rows are returned if <code>start</code> is greater than <code>stop</code>. Conversely, when <code>step</code> is negative, zero rows are returned if <code>start</code> is less than <code>stop</code>. Zero rows are also returned if any input is <code>NULL</code>. It is an error for <code>step</code> to be zero. Some examples follow:</p> <pre><code>SELECT * FROM generate_series(2,4);\n generate_series\n-----------------\n               2\n               3\n               4\n(3 rows)\n\nSELECT * FROM generate_series(5,1,-2);\n generate_series\n-----------------\n               5\n               3\n               1\n(3 rows)\n\nSELECT * FROM generate_series(4,3);\n generate_series\n-----------------\n(0 rows)\n\nSELECT generate_series(1.1, 4, 1.3);\n generate_series\n-----------------\n             1.1\n             2.4\n             3.7\n(3 rows)\n\n-- this example relies on the date-plus-integer operator:\nSELECT current_date + s.a AS dates FROM generate_series(0,14,7) AS s(a);\n   dates\n------------\n 2004-02-05\n 2004-02-12\n 2004-02-19\n(3 rows)\n\nSELECT * FROM generate_series('2008-03-01 00:00'::timestamp,\n                              '2008-03-04 12:00', '10 hours');\n   generate_series\n---------------------\n 2008-03-01 00:00:00\n 2008-03-01 10:00:00\n 2008-03-01 20:00:00\n 2008-03-02 06:00:00\n 2008-03-02 16:00:00\n 2008-03-03 02:00:00\n 2008-03-03 12:00:00\n 2008-03-03 22:00:00\n 2008-03-04 08:00:00\n(9 rows)\n\n-- this example assumes that TimeZone is set to UTC; note the DST transition:\nSELECT * FROM generate_series('2001-10-22 00:00 -04:00'::timestamptz,\n                              '2001-11-01 00:00 -05:00'::timestamptz,\n                              '1 day'::interval, 'America/New_York');\n    generate_series\n------------------------\n 2001-10-22 04:00:00+00\n 2001-10-23 04:00:00+00\n 2001-10-24 04:00:00+00\n 2001-10-25 04:00:00+00\n 2001-10-26 04:00:00+00\n 2001-10-27 04:00:00+00\n 2001-10-28 04:00:00+00\n 2001-10-29 05:00:00+00\n 2001-10-30 05:00:00+00\n 2001-10-31 05:00:00+00\n 2001-11-01 05:00:00+00\n(11 rows)\n</code></pre> <p>Table 9.66. Subscript Generating Functions</p> Function              Description <code>generate_subscripts</code> ( <code>array</code> <code>anyarray</code>, <code>dim</code> <code>integer</code> ) \u2192 <code>setof integer</code>              Generates a series comprising the valid subscripts of the <code>dim</code>'th dimension of the given array. <code>generate_subscripts</code> ( <code>array</code> <code>anyarray</code>, <code>dim</code> <code>integer</code>, <code>reverse</code> <code>boolean</code> ) \u2192 <code>setof integer</code>              Generates a series comprising the valid subscripts of the <code>dim</code>'th dimension of the given array. When <code>reverse</code> is true, returns the series in reverse order. <p><code>generate_subscripts</code> is a convenience  function that generates the set of valid subscripts for the specified  dimension of the given array. Zero rows are returned for arrays that do  not have the requested dimension, or if any input is <code>NULL</code>. Some examples follow:</p> <pre><code>-- basic usage:\nSELECT generate_subscripts('{NULL,1,NULL,2}'::int[], 1) AS s;\n s\n---\n 1\n 2\n 3\n 4\n(4 rows)\n\n-- presenting an array, the subscript and the subscripted\n-- value requires a subquery:\nSELECT * FROM arrays;\n         a\n--------------------\n {-1,-2}\n {100,200,300}\n(2 rows)\n\nSELECT a AS array, s AS subscript, a[s] AS value\nFROM (SELECT generate_subscripts(a, 1) AS s, a FROM arrays) foo;\n     array     | subscript | value\n---------------+-----------+-------\n {-1,-2}       |         1 |    -1\n {-1,-2}       |         2 |    -2\n {100,200,300} |         1 |   100\n {100,200,300} |         2 |   200\n {100,200,300} |         3 |   300\n(5 rows)\n\n-- unnest a 2D array:\nCREATE OR REPLACE FUNCTION unnest2(anyarray)\nRETURNS SETOF anyelement AS $$\nselect $1[i][j]\n   from generate_subscripts($1,1) g1(i),\n        generate_subscripts($1,2) g2(j);\n$$ LANGUAGE sql IMMUTABLE;\nCREATE FUNCTION\nSELECT * FROM unnest2(ARRAY[[1,2],[3,4]]);\n unnest2\n---------\n       1\n       2\n       3\n       4\n(4 rows)\n</code></pre> <p>When a function in the <code>FROM</code> clause is suffixed by <code>WITH ORDINALITY</code>, a <code>bigint</code> column is appended to the function's output column(s), which starts  from 1 and increments by 1 for each row of the function's output. This  is most useful in the case of set returning functions such as <code>unnest()</code>.</p> <pre><code>-- set returning function WITH ORDINALITY:\nSELECT * FROM pg_ls_dir('.') WITH ORDINALITY AS t(ls,n);\n       ls        | n\n-----------------+----\n pg_serial       |  1\n pg_twophase     |  2\n postmaster.opts |  3\n pg_notify       |  4\n postgresql.conf |  5\n pg_tblspc       |  6\n logfile         |  7\n base            |  8\n postmaster.pid  |  9\n pg_ident.conf   | 10\n global          | 11\n pg_xact         | 12\n pg_snapshots    | 13\n pg_multixact    | 14\n PG_VERSION      | 15\n pg_wal          | 16\n pg_hba.conf     | 17\n pg_stat_tmp     | 18\n pg_subtrans     | 19\n(19 rows)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/28.-Funciones%20de%20disparadores/","title":"28.-Funciones de disparadores","text":"<p>Mientras que muchos usos de los desencadenantes implican funciones desencadenantes escritas por el usuario, PostgreSQL proporciona algunas funciones de gatillo incorporadas que se pueden  utilizar directamente en desencadenantes definidos por el usuario. Estos se resumen en el cuadro 9.103. (Existen funciones adicionales de activaci\u00f3n incorporadas, que aplican  limitaciones clave externas y limitaciones de los \u00edndices diferidos.  Aqu\u00ed no est\u00e1n documentados, ya que los usuarios no necesitan usarlos  directamente.)</p> <p>Para obtener m\u00e1s informaci\u00f3n sobre la creaci\u00f3n de desencadenantes, consulte CREATE TRIGGER.</p> <p>Cuadro 9.103. Funciones desencaje desencaje construido</p> Funci\u00f3n              Descripci\u00f3n              Usaje ejemplo <code>suppress_redundant_updates_trigger</code>() <code>trigger</code>              Suprime las operaciones de actualizaci\u00f3n de nada. Vea abajo para m\u00e1s detalles.              <code>CREATE TRIGGER ... suppress_redundant_updates_trigger()</code> <code>tsvector_update_trigger</code>() <code>trigger</code>              Actualiza autom\u00e1ticamente una  <code>tsvector</code>columna de la columna de documento de texto plano asociado (s). La  configuraci\u00f3n de b\u00fasqueda de texto a usar se especifica por su nombre  como argumento desencadenante. Para m\u00e1s detalles v\u00e9ase               <code>CREATE TRIGGER ... tsvector_update_trigger(tsvcol, 'pg_catalog.swedish', title, body)</code> <code>tsvector_update_trigger_column</code>() <code>trigger</code>              Actualiza autom\u00e1ticamente una  <code>tsvector</code>columna de la columna de documento de texto plano asociado (s). La  configuraci\u00f3n de b\u00fasqueda de texto a utilizar se toma de una  <code>regconfig</code>columna de la tabla. Para m\u00e1s detalles v\u00e9ase               <code>CREATE TRIGGER ... tsvector_update_trigger_column(tsvcol, tsconfigcol, title, body)</code> <p>El  <code>suppress_redundant_updates_trigger</code>funci\u00f3n, cuando se aplica a nivel de filas  <code>BEFORE UPDATE</code>El desencadenante, evitar\u00e1 que cualquier actualizaci\u00f3n que no cambie  realmente los datos en la fila tenga lugar. Esto an\u00fae el comportamiento  normal que siempre realiza una actualizaci\u00f3n de fila f\u00edsica  independientemente de si los datos han cambiado o no. (Este  comportamiento normal hace que las actualizaciones se ejecuten m\u00e1s  r\u00e1pido, ya que no se requiere ning\u00fan control, y tambi\u00e9n es \u00fatil en  ciertos casos.)</p> <p>Idealmente, deber\u00edas evitar ejecutar actualizaciones que en  realidad no cambian los datos en el registro. Las actualizaciones de  Redundant pueden costar un tiempo innecesario considerable,  especialmente si hay muchos \u00edndices para alterar, y espacio en las filas muertas que eventualmente tendr\u00e1 que ser aspirado. Sin embargo,  detectar tales situaciones en el c\u00f3digo del cliente no siempre es f\u00e1cil, o incluso posible, y escribir expresiones para detectarlas puede ser  propenso a errores. Una alternativa es usar <code>suppress_redundant_updates_trigger</code>, que se saltar\u00e1 las actualizaciones que no cambian los datos. Sin  embargo, deber\u00edas usar esto con cuidado. El desencadenante toma un  tiempo peque\u00f1o pero no trivial para cada registro, por lo que si la  mayor\u00eda de los registros afectados por las actualizaciones realmente  cambian, el uso de este disparador har\u00e1 que las actualizaciones se  ejecuten m\u00e1s lentamente en promedio.</p> <p>El  <code>suppress_redundant_updates_trigger</code>funci\u00f3n se puede a\u00f1adir a una tabla como esta:</p> <pre><code>CREATE TRIGGER z-min-update\nAntes de ACTA DE Actualizaci\u00f3n sobre el nombre de mesa\nPARA EACH ROW EXECUTE FUNECTE suppress.redundant.updates.trigger ();\n</code></pre> <p>En la mayor\u00eda de los casos, es necesario disparar este gatillo  \u00faltimo para cada fila, para que no anuncien otros disparadores que  podr\u00edan desear alterar la fila. Teniendo en cuenta que desencadenante el fuego en el orden de adentro, por lo tanto elegir\u00eda un nombre  desencadenante que viene despu\u00e9s del nombre de cualquier otro disparador que pueda tener en la mesa. (Por lo tanto el prefijo de  en el ejemplo.)</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/04.-Operadores%20y%20Funciones%20de%20cadena/","title":"Index","text":"<p>This section describes functions and operators for examining and  manipulating string values. Strings in this context include values of  the types <code>character</code>, <code>character varying</code>, and <code>text</code>. Except where noted, these functions and operators are declared to accept and return type <code>text</code>. They will interchangeably accept <code>character varying</code> arguments. Values of type <code>character</code> will be converted to <code>text</code> before the function or operator is applied, resulting in stripping any trailing spaces in the <code>character</code> value.</p> <p>SQL defines some string functions that use key words, rather than commas, to separate arguments. Details are in Table 9.9. PostgreSQL also provides versions of these functions that use the regular function invocation syntax (see Table 9.10).</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/04.-Operadores%20y%20Funciones%20de%20cadena/#note","title":"Note","text":"<p>The string concatenation operator (<code>||</code>) will accept non-string input, so long as at least one input is of string type, as shown in Table 9.9. For other cases, inserting an explicit coercion to <code>text</code> can be used to have non-string input accepted.</p> <p>Table 9.9. SQL String Functions and Operators</p> Function/Operator              Description              Example(s) <code>text</code> <code>||</code> <code>text</code> \u2192 <code>text</code>              Concatenates the two strings.              <code>'Post' || 'greSQL'</code> \u2192 <code>PostgreSQL</code> <code>text</code> <code>||</code> <code>anynonarray</code> \u2192 <code>text</code> <code>anynonarray</code> <code>||</code> <code>text</code> \u2192 <code>text</code>              Converts the non-string input to text, then  concatenates the two strings. (The non-string input cannot be of an  array type, because that would create ambiguity with the array <code>||</code> operators. If you want to concatenate an array's text equivalent, cast it to <code>text</code> explicitly.)              <code>'Value: ' || 42</code> \u2192 <code>Value: 42</code> <code>btrim</code> ( <code>string</code> <code>text</code> [, <code>characters</code> <code>text</code> ] ) \u2192 <code>text</code>              Removes the longest string containing only characters in <code>characters</code> (a space by default) from the start and end of <code>string</code>.              <code>btrim('xyxtrimyyx', 'xyz')</code> \u2192 <code>trim</code> <code>text</code> <code>IS</code> [<code>NOT</code>] [<code>form</code>] <code>NORMALIZED</code> \u2192 <code>boolean</code>              Checks whether the string is in the specified Unicode normalization form. The optional <code>form</code> key word specifies the form: <code>NFC</code> (the default), <code>NFD</code>, <code>NFKC</code>, or <code>NFKD</code>. This expression can only be used when the server encoding is <code>UTF8</code>. Note that checking for normalization using this expression is often  faster than normalizing possibly already normalized strings.              <code>U&amp;'\\0061\\0308bc' IS NFD NORMALIZED</code> \u2192 <code>t</code> <code>bit_length</code> ( <code>text</code> ) \u2192 <code>integer</code>              Returns number of bits in the string (8 times the <code>octet_length</code>).              <code>bit_length('jose')</code> \u2192 <code>32</code> <code>char_length</code> ( <code>text</code> ) \u2192 <code>integer</code> <code>character_length</code> ( <code>text</code> ) \u2192 <code>integer</code>              Returns number of characters in the string.              <code>char_length('jos\u00e9')</code> \u2192 <code>4</code> <code>lower</code> ( <code>text</code> ) \u2192 <code>text</code>              Converts the string to all lower case, according to the rules of the database's locale.              <code>lower('TOM')</code> \u2192 <code>tom</code> <code>lpad</code> ( <code>string</code> <code>text</code>, <code>length</code> <code>integer</code> [, <code>fill</code> <code>text</code> ] ) \u2192 <code>text</code>              Extends the <code>string</code> to length <code>length</code> by prepending the characters <code>fill</code> (a space by default). If the <code>string</code> is already longer than <code>length</code> then it is truncated (on the right).              <code>lpad('hi', 5, 'xy')</code> \u2192 <code>xyxhi</code> <code>ltrim</code> ( <code>string</code> <code>text</code> [, <code>characters</code> <code>text</code> ] ) \u2192 <code>text</code>              Removes the longest string containing only characters in <code>characters</code> (a space by default) from the start of <code>string</code>.              <code>ltrim('zzzytest', 'xyz')</code> \u2192 <code>test</code> <code>normalize</code> ( <code>text</code> [, <code>form</code> ] ) \u2192 <code>text</code>              Converts the string to the specified Unicode normalization form. The optional <code>form</code> key word specifies the form: <code>NFC</code> (the default), <code>NFD</code>, <code>NFKC</code>, or <code>NFKD</code>. This function can only be used when the server encoding is <code>UTF8</code>.              <code>normalize(U&amp;'\\0061\\0308bc', NFC)</code> \u2192 <code>U&amp;'\\00E4bc'</code> <code>octet_length</code> ( <code>text</code> ) \u2192 <code>integer</code>              Returns number of bytes in the string.              <code>octet_length('jos\u00e9')</code> \u2192 <code>5</code> (if server encoding is UTF8) <code>octet_length</code> ( <code>character</code> ) \u2192 <code>integer</code>              Returns number of bytes in the string. Since this version of the function accepts type <code>character</code> directly, it will not strip trailing spaces.              <code>octet_length('abc '::character(4))</code> \u2192 <code>4</code> <code>overlay</code> ( <code>string</code> <code>text</code> <code>PLACING</code> <code>newsubstring</code> <code>text</code> <code>FROM</code> <code>start</code> <code>integer</code> [ <code>FOR</code> <code>count</code> <code>integer</code> ] ) \u2192 <code>text</code>              Replaces the substring of <code>string</code> that starts at the <code>start</code>'th character and extends for <code>count</code> characters with <code>newsubstring</code>. If <code>count</code> is omitted, it defaults to the length of <code>newsubstring</code>.              <code>overlay('Txxxxas' placing 'hom' from 2 for 4)</code> \u2192 <code>Thomas</code> <code>position</code> ( <code>substring</code> <code>text</code> <code>IN</code> <code>string</code> <code>text</code> ) \u2192 <code>integer</code>              Returns first starting index of the specified <code>substring</code> within <code>string</code>, or zero if it's not present.              <code>position('om' in 'Thomas')</code> \u2192 <code>3</code> <code>rpad</code> ( <code>string</code> <code>text</code>, <code>length</code> <code>integer</code> [, <code>fill</code> <code>text</code> ] ) \u2192 <code>text</code>              Extends the <code>string</code> to length <code>length</code> by appending the characters <code>fill</code> (a space by default). If the <code>string</code> is already longer than <code>length</code> then it is truncated.              <code>rpad('hi', 5, 'xy')</code> \u2192 <code>hixyx</code> <code>rtrim</code> ( <code>string</code> <code>text</code> [, <code>characters</code> <code>text</code> ] ) \u2192 <code>text</code>              Removes the longest string containing only characters in <code>characters</code> (a space by default) from the end of <code>string</code>.              <code>rtrim('testxxzx', 'xyz')</code> \u2192 <code>test</code> <code>substring</code> ( <code>string</code> <code>text</code> [ <code>FROM</code> <code>start</code> <code>integer</code> ] [ <code>FOR</code> <code>count</code> <code>integer</code> ] ) \u2192 <code>text</code>              Extracts the substring of <code>string</code> starting at the <code>start</code>'th character if that is specified, and stopping after <code>count</code> characters if that is specified. Provide at least one of <code>start</code> and <code>count</code>.              <code>substring('Thomas' from 2 for 3)</code> \u2192 <code>hom</code> <code>substring('Thomas' from 3)</code> \u2192 <code>omas</code> <code>substring('Thomas' for 2)</code> \u2192 <code>Th</code> <code>substring</code> ( <code>string</code> <code>text</code> <code>FROM</code> <code>pattern</code> <code>text</code> ) \u2192 <code>text</code>              Extracts the first substring matching POSIX regular expression; see Section 9.7.3.              <code>substring('Thomas' from '...$')</code> \u2192 <code>mas</code> <code>substring</code> ( <code>string</code> <code>text</code> <code>SIMILAR</code> <code>pattern</code> <code>text</code> <code>ESCAPE</code> <code>escape</code> <code>text</code> ) \u2192 <code>text</code> <code>substring</code> ( <code>string</code> <code>text</code> <code>FROM</code> <code>pattern</code> <code>text</code> <code>FOR</code> <code>escape</code> <code>text</code> ) \u2192 <code>text</code>              Extracts the first substring matching SQL regular expression; see Section 9.7.2. The first form has been specified since SQL:2003; the second form was only in SQL:1999 and should be considered obsolete.              <code>substring('Thomas' similar '%#\"o_a#\"_' escape '#')</code> \u2192 <code>oma</code> <code>trim</code> ( [ <code>LEADING</code> <code>trim</code> ( [ <code>LEADING</code> <code>upper</code> ( <code>text</code> ) \u2192 <code>text</code>              Converts the string to all upper case, according to the rules of the database's locale.              <code>upper('tom')</code> \u2192 <code>TOM</code> <p>Additional string manipulation functions and operators are available and are listed in Table 9.10. (Some of these are used internally to implement the SQL-standard string functions listed in Table 9.9.) There are also pattern-matching operators, which are described in Section 9.7, and operators for full-text search, which are described in Chapter 12.</p> <p>Table 9.10. Other String Functions and Operators</p> Function/Operator              Description              Example(s) <code>text</code> <code>^@</code> <code>text</code> \u2192 <code>boolean</code>              Returns true if the first string starts with the second string (equivalent to the <code>starts_with()</code> function).              <code>'alphabet' ^@ 'alph'</code> \u2192 <code>t</code> <code>ascii</code> ( <code>text</code> ) \u2192 <code>integer</code>              Returns the numeric code of the first character of the argument. In UTF8 encoding, returns the Unicode code point of the character. In other multibyte encodings, the argument must be an ASCII character.              <code>ascii('x')</code> \u2192 <code>120</code> <code>chr</code> ( <code>integer</code> ) \u2192 <code>text</code>              Returns the character with the given code. In UTF8 encoding the argument is treated as a Unicode code point. In other multibyte encodings the argument must designate an ASCII character. <code>chr(0)</code> is disallowed because text data types cannot store that character.              <code>chr(65)</code> \u2192 <code>A</code> <code>concat</code> ( <code>val1</code> <code>\"any\"</code> [, <code>val2</code> <code>\"any\"</code> [, ...] ] ) \u2192 <code>text</code>              Concatenates the text representations of all the arguments. NULL arguments are ignored.              <code>concat('abcde', 2, NULL, 22)</code> \u2192 <code>abcde222</code> <code>concat_ws</code> ( <code>sep</code> <code>text</code>, <code>val1</code> <code>\"any\"</code> [, <code>val2</code> <code>\"any\"</code> [, ...] ] ) \u2192 <code>text</code>              Concatenates all but the first argument, with  separators. The first argument is used as the separator string, and  should not be NULL. Other NULL arguments are ignored.              <code>concat_ws(',', 'abcde', 2, NULL, 22)</code> \u2192 <code>abcde,2,22</code> <code>format</code> ( <code>formatstr</code> <code>text</code> [, <code>formatarg</code> <code>\"any\"</code> [, ...] ] ) \u2192 <code>text</code>              Formats arguments according to a format string; see Section 9.4.1. This function is similar to the C function <code>sprintf</code>.              <code>format('Hello %s, %1$s', 'World')</code> \u2192 <code>Hello World, World</code> <code>initcap</code> ( <code>text</code> ) \u2192 <code>text</code>              Converts the first letter of each word to upper case  and the rest to lower case. Words are sequences of alphanumeric  characters separated by non-alphanumeric characters.              <code>initcap('hi THOMAS')</code> \u2192 <code>Hi Thomas</code> <code>left</code> ( <code>string</code> <code>text</code>, <code>n</code> <code>integer</code> ) \u2192 <code>text</code>              Returns first <code>n</code> characters in the string, or when <code>n</code> is negative, returns all but last <code>length</code> ( <code>text</code> ) \u2192 <code>integer</code>              Returns the number of characters in the string.              <code>length('jose')</code> \u2192 <code>4</code> <code>md5</code> ( <code>text</code> ) \u2192 <code>text</code>              Computes the MD5 hash of the argument, with the result written in hexadecimal.              <code>md5('abc')</code> \u2192 <code>900150983cd24fb0d6963f7d28e17f72</code> <code>parse_ident</code> ( <code>qualified_identifier</code> <code>text</code> [, <code>strict_mode</code> <code>boolean</code> <code>DEFAULT</code> <code>true</code> ] ) \u2192 <code>text[]</code>              Splits <code>qualified_identifier</code> into an array of identifiers, removing any quoting of individual  identifiers. By default, extra characters after the last identifier are  considered an error; but if the second parameter is <code>false</code>, then such extra characters are ignored. (This behavior is useful for  parsing names for objects like functions.) Note that this function does  not truncate over-length identifiers. If you want truncation you can  cast the result to <code>name[]</code>.              <code>parse_ident('\"SomeSchema\".someTable')</code> \u2192 <code>{SomeSchema,sometable}</code> <code>pg_client_encoding</code> ( ) \u2192 <code>name</code>              Returns current client encoding name.              <code>pg_client_encoding()</code> \u2192 <code>UTF8</code> <code>quote_ident</code> ( <code>text</code> ) \u2192 <code>text</code>              Returns the given string suitably quoted to be used as an identifier in an SQL statement string. Quotes are added only if necessary (i.e., if the  string contains non-identifier characters or would be case-folded).  Embedded quotes are properly doubled. See also Example 43.1.              <code>quote_ident('Foo bar')</code> \u2192 <code>\"Foo bar\"</code> <code>quote_literal</code> ( <code>text</code> ) \u2192 <code>text</code>              Returns the given string suitably quoted to be used as a string literal in an SQL statement string. Embedded single-quotes and backslashes are properly doubled. Note that <code>quote_literal</code> returns null on null input; if the argument might be null, <code>quote_nullable</code> is often more suitable. See also Example 43.1.              <code>quote_literal(E'O\\'Reilly')</code> \u2192 <code>'O''Reilly'</code> <code>quote_literal</code> ( <code>anyelement</code> ) \u2192 <code>text</code>              Converts the given value to text and then quotes it as a literal. Embedded single-quotes and backslashes are properly doubled.              <code>quote_literal(42.5)</code> \u2192 <code>'42.5'</code> <code>quote_nullable</code> ( <code>text</code> ) \u2192 <code>text</code>              Returns the given string suitably quoted to be used as a string literal in an SQL statement string; or, if the argument is null, returns <code>NULL</code>. Embedded single-quotes and backslashes are properly doubled. See also Example 43.1.              <code>quote_nullable(NULL)</code> \u2192 <code>NULL</code> <code>quote_nullable</code> ( <code>anyelement</code> ) \u2192 <code>text</code>              Converts the given value to text and then quotes it as a literal; or, if the argument is null, returns <code>NULL</code>. Embedded single-quotes and backslashes are properly doubled.              <code>quote_nullable(42.5)</code> \u2192 <code>'42.5'</code> <code>regexp_count</code> ( <code>string</code> <code>text</code>, <code>pattern</code> <code>text</code> [, <code>start</code> <code>integer</code> [, <code>flags</code> <code>text</code> ] ] ) \u2192 <code>integer</code>              Returns the number of times the POSIX regular expression <code>pattern</code> matches in the <code>string</code>; see Section 9.7.3.              <code>regexp_count('123456789012', '\\d\\d\\d', 2)</code> \u2192 <code>3</code> <code>regexp_instr</code> ( <code>string</code> <code>text</code>, <code>pattern</code> <code>text</code> [, <code>start</code> <code>integer</code> [, <code>N</code> <code>integer</code> [, <code>endoption</code> <code>integer</code> [, <code>flags</code> <code>text</code> [, <code>subexpr</code> <code>integer</code> ] ] ] ] ] ) \u2192 <code>integer</code>              Returns the position within <code>string</code> where the <code>N</code>'th match of the POSIX regular expression <code>pattern</code> occurs, or zero if there is no such match; see Section 9.7.3.              <code>regexp_instr('ABCDEF', 'c(.)(..)', 1, 1, 0, 'i')</code> \u2192 <code>3</code> <code>regexp_instr('ABCDEF', 'c(.)(..)', 1, 1, 0, 'i', 2)</code> \u2192 <code>5</code> <code>regexp_like</code> ( <code>string</code> <code>text</code>, <code>pattern</code> <code>text</code> [, <code>flags</code> <code>text</code> ] ) \u2192 <code>boolean</code>              Checks whether a match of the POSIX regular expression <code>pattern</code> occurs within <code>string</code>; see Section 9.7.3.              <code>regexp_like('Hello World', 'world$', 'i')</code> \u2192 <code>t</code> <code>regexp_match</code> ( <code>string</code> <code>text</code>, <code>pattern</code> <code>text</code> [, <code>flags</code> <code>text</code> ] ) \u2192 <code>text[]</code>              Returns substrings within the first match of the POSIX regular expression <code>pattern</code> to the <code>string</code>; see Section 9.7.3.              <code>regexp_match('foobarbequebaz', '(bar)(beque)')</code> \u2192 <code>{bar,beque}</code> <code>regexp_matches</code> ( <code>string</code> <code>text</code>, <code>pattern</code> <code>text</code> [, <code>flags</code> <code>text</code> ] ) \u2192 <code>setof text[]</code>              Returns substrings within the first match of the POSIX regular expression <code>pattern</code> to the <code>string</code>, or substrings within all such matches if the <code>g</code> flag is used; see Section 9.7.3.              <code>regexp_matches('foobarbequebaz', 'ba.', 'g')</code> \u2192              <code>{bar} {baz}</code> <code>regexp_replace</code> ( <code>string</code> <code>text</code>, <code>pattern</code> <code>text</code>, <code>replacement</code> <code>text</code> [, <code>start</code> <code>integer</code> ] [, <code>flags</code> <code>text</code> ] ) \u2192 <code>text</code>              Replaces the substring that is the first match to the POSIX regular expression <code>pattern</code>, or all such matches if the <code>g</code> flag is used; see Section 9.7.3.              <code>regexp_replace('Thomas', '.[mN]a.', 'M')</code> \u2192 <code>ThM</code> <code>regexp_replace</code> ( <code>string</code> <code>text</code>, <code>pattern</code> <code>text</code>, <code>replacement</code> <code>text</code>, <code>start</code> <code>integer</code>, <code>N</code> <code>integer</code> [, <code>flags</code> <code>text</code> ] ) \u2192 <code>text</code>              Replaces the substring that is the <code>N</code>'th match to the POSIX regular expression <code>pattern</code>, or all such matches if <code>N</code> is zero; see Section 9.7.3.              <code>regexp_replace('Thomas', '.', 'X', 3, 2)</code> \u2192 <code>ThoXas</code> <code>regexp_split_to_array</code> ( <code>string</code> <code>text</code>, <code>pattern</code> <code>text</code> [, <code>flags</code> <code>text</code> ] ) \u2192 <code>text[]</code>              Splits <code>string</code> using a POSIX regular expression as the delimiter, producing an array of results; see Section 9.7.3.              <code>regexp_split_to_array('hello world', '\\s+')</code> \u2192 <code>{hello,world}</code> <code>regexp_split_to_table</code> ( <code>string</code> <code>text</code>, <code>pattern</code> <code>text</code> [, <code>flags</code> <code>text</code> ] ) \u2192 <code>setof text</code>              Splits <code>string</code> using a POSIX regular expression as the delimiter, producing a set of results; see Section 9.7.3.              <code>regexp_split_to_table('hello world', '\\s+')</code> \u2192              <code>hello world</code> <code>regexp_substr</code> ( <code>string</code> <code>text</code>, <code>pattern</code> <code>text</code> [, <code>start</code> <code>integer</code> [, <code>N</code> <code>integer</code> [, <code>flags</code> <code>text</code> [, <code>subexpr</code> <code>integer</code> ] ] ] ] ) \u2192 <code>text</code>              Returns the substring within <code>string</code> that matches the <code>N</code>'th occurrence of the POSIX regular expression <code>pattern</code>, or <code>NULL</code> if there is no such match; see Section 9.7.3.              <code>regexp_substr('ABCDEF', 'c(.)(..)', 1, 1, 'i')</code> \u2192 <code>CDEF</code> <code>regexp_substr('ABCDEF', 'c(.)(..)', 1, 1, 'i', 2)</code> \u2192 <code>EF</code> <code>repeat</code> ( <code>string</code> <code>text</code>, <code>number</code> <code>integer</code> ) \u2192 <code>text</code>              Repeats <code>string</code> the specified <code>number</code> of times.              <code>repeat('Pg', 4)</code> \u2192 <code>PgPgPgPg</code> <code>replace</code> ( <code>string</code> <code>text</code>, <code>from</code> <code>text</code>, <code>to</code> <code>text</code> ) \u2192 <code>text</code>              Replaces all occurrences in <code>string</code> of substring <code>from</code> with substring <code>to</code>.              <code>replace('abcdefabcdef', 'cd', 'XX')</code> \u2192 <code>abXXefabXXef</code> <code>reverse</code> ( <code>text</code> ) \u2192 <code>text</code>              Reverses the order of the characters in the string.              <code>reverse('abcde')</code> \u2192 <code>edcba</code> <code>right</code> ( <code>string</code> <code>text</code>, <code>n</code> <code>integer</code> ) \u2192 <code>text</code>              Returns last <code>n</code> characters in the string, or when <code>n</code> is negative, returns all but first <code>split_part</code> ( <code>string</code> <code>text</code>, <code>delimiter</code> <code>text</code>, <code>n</code> <code>integer</code> ) \u2192 <code>text</code>              Splits <code>string</code> at occurrences of <code>delimiter</code> and returns the <code>n</code>'th field (counting from one), or when <code>n</code> is negative, returns the <code>starts_with</code> ( <code>string</code> <code>text</code>, <code>prefix</code> <code>text</code> ) \u2192 <code>boolean</code>              Returns true if <code>string</code> starts with <code>prefix</code>.              <code>starts_with('alphabet', 'alph')</code> \u2192 <code>t</code> <code>string_to_array</code> ( <code>string</code> <code>text</code>, <code>delimiter</code> <code>text</code> [, <code>null_string</code> <code>text</code> ] ) \u2192 <code>text[]</code>              Splits the <code>string</code> at occurrences of <code>delimiter</code> and forms the resulting fields into a <code>text</code> array. If <code>delimiter</code> is <code>NULL</code>, each character in the <code>string</code> will become a separate element in the array. If <code>delimiter</code> is an empty string, then the <code>string</code> is treated as a single field. If <code>null_string</code> is supplied and is not <code>NULL</code>, fields matching that string are replaced by <code>NULL</code>. See also <code>array_to_string</code>.              <code>string_to_array('xx~~yy~~zz', '~~', 'yy')</code> \u2192 <code>{xx,NULL,zz}</code> <code>string_to_table</code> ( <code>string</code> <code>text</code>, <code>delimiter</code> <code>text</code> [, <code>null_string</code> <code>text</code> ] ) \u2192 <code>setof text</code>              Splits the <code>string</code> at occurrences of <code>delimiter</code> and returns the resulting fields as a set of <code>text</code> rows. If <code>delimiter</code> is <code>NULL</code>, each character in the <code>string</code> will become a separate row of the result. If <code>delimiter</code> is an empty string, then the <code>string</code> is treated as a single field. If <code>null_string</code> is supplied and is not <code>NULL</code>, fields matching that string are replaced by <code>NULL</code>.              <code>string_to_table('xx~^~yy~^~zz', '~^~', 'yy')</code> \u2192              <code>xx NULL zz</code> <code>strpos</code> ( <code>string</code> <code>text</code>, <code>substring</code> <code>text</code> ) \u2192 <code>integer</code>              Returns first starting index of the specified <code>substring</code> within <code>string</code>, or zero if it's not present. (Same as <code>position(*</code>substring<code>* in *</code>string<code>*)</code>, but note the reversed argument order.)              <code>strpos('high', 'ig')</code> \u2192 <code>2</code> <code>substr</code> ( <code>string</code> <code>text</code>, <code>start</code> <code>integer</code> [, <code>count</code> <code>integer</code> ] ) \u2192 <code>text</code>              Extracts the substring of <code>string</code> starting at the <code>start</code>'th character, and extending for <code>count</code> characters if that is specified. (Same as <code>substring(*</code>string<code>* from *</code>start<code>* for *</code>count<code>*)</code>.)              <code>substr('alphabet', 3)</code> \u2192 <code>phabet</code> <code>substr('alphabet', 3, 2)</code> \u2192 <code>ph</code> <code>to_ascii</code> ( <code>string</code> <code>text</code> ) \u2192 <code>text</code> <code>to_ascii</code> ( <code>string</code> <code>text</code>, <code>encoding</code> <code>name</code> ) \u2192 <code>text</code> <code>to_ascii</code> ( <code>string</code> <code>text</code>, <code>encoding</code> <code>integer</code> ) \u2192 <code>text</code>              Converts <code>string</code> to ASCII from another encoding, which may be identified by name or number. If <code>encoding</code> is omitted the database encoding is assumed (which in practice is the  only useful case). The conversion consists primarily of dropping  accents. Conversion is only supported from <code>LATIN1</code>, <code>LATIN2</code>, <code>LATIN9</code>, and <code>WIN1250</code> encodings. (See the unaccent module for another, more flexible solution.)              <code>to_ascii('Kar\u00e9l')</code> \u2192 <code>Karel</code> <code>to_hex</code> ( <code>integer</code> ) \u2192 <code>text</code> <code>to_hex</code> ( <code>bigint</code> ) \u2192 <code>text</code>              Converts the number to its equivalent hexadecimal representation.              <code>to_hex(2147483647)</code> \u2192 <code>7fffffff</code> <code>translate</code> ( <code>string</code> <code>text</code>, <code>from</code> <code>text</code>, <code>to</code> <code>text</code> ) \u2192 <code>text</code>              Replaces each character in <code>string</code> that matches a character in the <code>from</code> set with the corresponding character in the <code>to</code> set. If <code>from</code> is longer than <code>to</code>, occurrences of the extra characters in <code>from</code> are deleted.              <code>translate('12345', '143', 'ax')</code> \u2192 <code>a2x5</code> <code>unistr</code> ( <code>text</code> ) \u2192 <code>text</code>              Evaluate escaped Unicode characters in the argument. Unicode characters can be specified as <code>\\*</code>XXXX<code>*</code> (4 hexadecimal digits), <code>\\+*</code>XXXXXX<code>*</code> (6 hexadecimal digits), <code>\\u*</code>XXXX<code>*</code> (4 hexadecimal digits), or <code>\\U*</code>XXXXXXXX<code>*</code> (8 hexadecimal digits). To specify a backslash, write two backslashes. All other characters are taken literally.              If the server encoding is not UTF-8, the Unicode code  point identified by one of these escape sequences is converted to the  actual server encoding; an error is reported if that's not possible.              This function provides a (non-standard) alternative to string constants with Unicode escapes (see Section 4.1.2.3).              <code>unistr('d\\0061t\\+000061')</code> \u2192 <code>data</code> <code>unistr('d\\u0061t\\U00000061')</code> \u2192 <code>data</code> <p>The <code>concat</code>, <code>concat_ws</code> and <code>format</code> functions are variadic, so it is possible to pass the values to be concatenated or formatted as an array marked with the <code>VARIADIC</code> keyword (see Section 38.5.6). The array's elements are treated as if they were separate ordinary  arguments to the function. If the variadic array argument is NULL, <code>concat</code> and <code>concat_ws</code> return NULL, but <code>format</code> treats a NULL as a zero-element array.</p> <p>See also the aggregate function <code>string_agg</code> in Section 9.21, and the functions for converting between strings and the <code>bytea</code> type in Table 9.13.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/04.-Operadores%20y%20Funciones%20de%20cadena/01.-Formatos/","title":"01.-Formatos","text":"<p>The function <code>format</code> produces output formatted according to a format string, in a style similar to the C function <code>sprintf</code>.</p> <pre><code>format(formatstr text [, formatarg \"any\" [, ...] ])\n</code></pre> <p><code>formatstr</code> is a format  string that specifies how the result should be formatted. Text in the  format string is copied directly to the result, except where format specifiers are used. Format specifiers act as placeholders in the string, defining how subsequent function arguments should be formatted and inserted into the result. Each <code>formatarg</code>  argument is converted to text according to the usual output rules for  its data type, and then formatted and inserted into the result string  according to the format specifier(s).</p> <p>Format specifiers are introduced by a <code>%</code> character and have the form</p> <pre><code>%[position][flags][width]type\n</code></pre> <p>where the component fields are:</p> <ul> <li><code>position</code> (optional)</li> </ul> <p>\u200b          A string of the form <code>*</code>n<code>*$</code> where <code>n</code> is the index of the argument to print. Index 1 means the first argument after <code>formatstr</code>. If the <code>position</code> is omitted, the default is to use the next argument in sequence.        </p> <ul> <li><code>flags</code> (optional)</li> </ul> <p>\u200b          Additional options controlling how the format specifier's  output is formatted. Currently the only supported flag is a minus sign (<code>-</code>) which will cause the format specifier's output to be left-justified. This has no effect unless the <code>width</code> field is also specified.        </p> <ul> <li><code>width</code> (optional)</li> </ul> <p>\u200b          Specifies the minimum number of characters to use to display the format specifier's output.  The output is padded on the left or right (depending on the <code>-</code> flag) with spaces as needed to fill the width. A too-small width does  not cause truncation of the output, but is simply ignored. The width may be specified using any of the following: a positive integer; an  asterisk (<code>*</code>) to use the next function argument as the width; or a string of the form <code>**</code>n<code>*$</code> to use the <code>n</code>th function argument as the width.          If the width comes from a function argument, that argument  is consumed before the argument that is used for the format specifier's  value. If the width argument is negative, the result is left aligned (as if the <code>-</code> flag had been specified) within a field of length <code>abs</code>(<code>width</code>).        </p> <ul> <li><code>type</code> (required)</li> </ul> <p>\u200b          The type of format conversion to use to produce the format specifier's output. The following types are supported:                                                    <code>s</code> formats the argument value as a simple string. A null value is treated as an empty string.                                            <code>I</code> treats the argument  value as an SQL identifier, double-quoting it if necessary. It is an  error for the value to be null (equivalent to <code>quote_ident</code>).                                            <code>L</code> quotes the argument value as an SQL literal. A null value is displayed as the string <code>NULL</code>, without quotes (equivalent to <code>quote_nullable</code>).                                            </p> <p>In addition to the format specifiers described above, the special sequence <code>%%</code> may be used to output a literal <code>%</code> character.</p> <p>Here are some examples of the basic format conversions:</p> <pre><code>SELECT format('Hello %s', 'World');\nResult: Hello World\n\nSELECT format('Testing %s, %s, %s, %%', 'one', 'two', 'three');\nResult: Testing one, two, three, %\n\nSELECT format('INSERT INTO %I VALUES(%L)', 'Foo bar', E'O\\'Reilly');\nResult: INSERT INTO \"Foo bar\" VALUES('O''Reilly')\n\nSELECT format('INSERT INTO %I VALUES(%L)', 'locations', 'C:\\Program Files');\nResult: INSERT INTO locations VALUES('C:\\Program Files')\n</code></pre> <p>Here are examples using <code>width</code> fields and the <code>-</code> flag:</p> <pre><code>SELECT format('|%10s|', 'foo');\nResult: |       foo|\n\nSELECT format('|%-10s|', 'foo');\nResult: |foo       |\n\nSELECT format('|%*s|', 10, 'foo');\nResult: |       foo|\n\nSELECT format('|%*s|', -10, 'foo');\nResult: |foo       |\n\nSELECT format('|%-*s|', 10, 'foo');\nResult: |foo       |\n\nSELECT format('|%-*s|', -10, 'foo');\nResult: |foo       |\n</code></pre> <p>These examples show use of <code>position</code> fields:</p> <pre><code>SELECT format('Testing %3$s, %2$s, %1$s', 'one', 'two', 'three');\nResult: Testing three, two, one\n\nSELECT format('|%*2$s|', 'foo', 10, 'bar');\nResult: |       bar|\n\nSELECT format('|%1$*2$s|', 'foo', 10, 'bar');\nResult: |       foo|\n</code></pre> <p>Unlike the standard C function <code>sprintf</code>, PostgreSQL's <code>format</code> function allows format specifiers with and without <code>position</code> fields to be mixed in the same format string. A format specifier without a <code>position</code> field always uses the next argument after the last argument consumed. In addition, the <code>format</code> function does not require all function arguments to be used in the format string. For example:</p> <pre><code>SELECT format('Testing %3$s, %2$s, %s', 'one', 'two', 'three');\nResult: Testing three, two, three\n</code></pre> <p>The <code>%I</code> and <code>%L</code> format specifiers are particularly useful for safely constructing dynamic SQL statements. See Example 43.1.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/","title":"Index","text":"<p>Hay tres enfoques separados para la coincidencia de patrones proporcionado por PostgreSQL: el tradicional   SQL<code>LIKE</code>operador, el m\u00e1s reciente  <code>SIMILAR TO</code>operador (a\u00f1adido en SQL:1999), y POSIX- expresiones regulares. Aparte de lo b\u00e1sico, esta cadena coincide con este patr\u00f3n? - los operadores, las funciones est\u00e1n disponibles para extraer o  reemplazar subcadeaciones coincidentes y para dividir una cadena en  lugares que coinc\u00edan.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/#tip","title":"Tip","text":"<p>Si tiene necesidades de emparesiones que van m\u00e1s all\u00e1 de esto,  considere escribir una funci\u00f3n definida por el usuario en Perl o Tcl.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/#precaucion","title":"Precauci\u00f3n","text":"<p>Si bien la mayor\u00eda de las b\u00fasquedas de expresi\u00f3n regulares se  pueden ejecutar muy r\u00e1pidamente, se pueden inventar expresiones  regulares que toman cantidades arbitrarias de tiempo y memoria para  procesar. Tenga cuidado de aceptar patrones de b\u00fasqueda de expresi\u00f3n  regular de fuentes hostiles. Si usted debe hacerlo, es recomendable  imponer una declaraci\u00f3n de tiempo de tiempo.</p> <p>B\u00fasquedas usando  <code>SIMILAR TO</code>los patrones tienen los mismos riesgos para la seguridad, desde  <code>SIMILAR TO</code>proporciona muchas de las mismas capacidades que POSIX- expresiones regulares.</p> <p><code>LIKE</code>Las b\u00fasquedas, siendo mucho m\u00e1s simples que las otras dos opciones, son m\u00e1s seguras de usar con fuentes de patrones posiblemente hostiles.</p> <p>Los operadores de los tres tipos que coinciden con el patr\u00f3n no  soportan las recopilaciones no deterministas. Si es necesario, aplique  una recopilaci\u00f3n diferente a la expresi\u00f3n para trabajar en torno a esta  limitaci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/01.-LIKE/","title":"01.-LIKE","text":"<pre><code> stringLIKE  pattern[ESCAPE escape-character]\n stringNO LIKE  pattern[ESCAPE escape-character]\n</code></pre> <p>El  <code>LIKE</code>expresi\u00f3n devuelve cierto si el  <code>string</code>coincide con el suministro <code>pattern</code>. (Como se esperaba,  <code>NOT LIKE</code>expresi\u00f3n devuelve false si  <code>LIKE</code>vuelve verdad, y viceversa. Una expresi\u00f3n equivalente es <code>NOT (*</code>string<code>* LIKE *</code>pattern<code>*)</code>.)</p> <p>Si  <code>pattern</code>no contiene signos o subrayados por ciento, entonces el patr\u00f3n s\u00f3lo representa la cuerda misma; en ese caso  <code>LIKE</code>act\u00faa como el operador es igual. Un subrayado (<code>_</code>) en  <code>pattern</code>representa (locas) cualquier personaje; un signo del porcentaje (<code>%</code>) coincide con cualquier secuencia de cero o m\u00e1s caracteres.</p> <p>Algunos ejemplos:</p> <pre><code>'abc' LIKE 'abc' true\n'abc' LIKE 'a%' true\n'abc' LIKE 'b' verdad\n'abc' LIKE 'c' falso\n</code></pre> <p><code>LIKE</code>emparejarse siempre cubre toda la cuerda. Por lo tanto, si se desea que coinja con  una secuencia en cualquier lugar dentro de una cadena, el patr\u00f3n debe  comenzar y terminar con un signo del porcentaje.</p> <p>Para igualar un signo literal o por ciento sin coincidir con otros personajes, el car\u00e1cter respectivo en  <code>pattern</code>debe ir precedida por el car\u00e1cter de escape. El car\u00e1cter de escape  predeterminado es la reacci\u00f3n, pero uno diferente se puede seleccionar  mediante el uso de la  <code>ESCAPE</code>cl\u00e1usula. Para coincidir con el propio personaje de escape, escribe dos personajes de escape.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/01.-LIKE/#nota","title":"Nota","text":"<p>Si tienes apagado est\u00e1ndar, cualquier barranco que escribas en constantes literales de cuerda tendr\u00e1 que ser duplicado. Para m\u00e1s informaci\u00f3n v\u00e9ase .</p> <p>Tambi\u00e9n es posible seleccionar ning\u00fan personaje de escape escribiendo <code>ESCAPE ''</code>. Esto desactiva efectivamente el mecanismo de escape, lo que hace  imposible apagar el significado especial de subrayado y por ciento  signos en el patr\u00f3n.</p> <p>De acuerdo con el est\u00e1ndar SQL, omitiendo  <code>ESCAPE</code>significa que no hay car\u00e1cter de escape (en lugar de incueste al incumplimiento de una barra) y una longitud cero  <code>ESCAPE</code>el valor est\u00e1 desautorizado. El comportamiento de PostgreSQL en este sentido es, por lo tanto, ligeramente no est\u00e1ndar.</p> <p>La palabra clave  <code>ILIKE</code>se puede usar en lugar de  <code>LIKE</code>para hacer el caso de la coincidencia de acuerdo con el lugar activo. Esto no est\u00e1 en el  SQLest\u00e1ndar, pero es una extensi\u00f3n de PostgreSQL.</p> <p>El operador  <code>~~</code>es equivalente a <code>LIKE</code>, y  <code>~~*</code>corresponde a <code>ILIKE</code>. Tambi\u00e9n los hay  <code>!~~</code>y  <code>!~~*</code>los operadores que representan  <code>NOT LIKE</code>y <code>NOT ILIKE</code>, respectivamente. Todos estos operadores son PostgreSQL -espec\u00edfica. Usted puede ver estos nombres de los operadores en  <code>EXPLAIN</code>salida y lugares similares, ya que el analizador se traduce en realidad  <code>LIKE</code>Y a estos operadores.</p> <p>Las frases <code>LIKE</code>, <code>ILIKE</code>, <code>NOT LIKE</code>, y  <code>NOT ILIKE</code>se tratan generalmente como operadores en PostgreSQLla sintaxis PostgreSQL; por ejemplo, pueden ser utilizados en   <code>expression</code><code>operator</code>CUALQUIER (<code>subquery</code>) las construcciones, aunque una  <code>ESCAPE</code>la cl\u00e1usula no se puede incluir all\u00ed. En algunos casos oscuros puede ser  necesario utilizar los nombres del operador subyacente en su lugar.</p> <p>Tambi\u00e9n vea el operador de inicios con  <code>^@</code>y las correspondientes  <code>starts_with()</code>funci\u00f3n, que son \u00fatiles en los casos en los que simplemente se necesita un comienzo de una cadena.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/02.-SIMILAR%20TO%20Regular%20Expressions/","title":"02.-SIMILAR TO Regular Expressions","text":"<pre><code> stringSIMILAR A  pattern[ESCAPE escape-character]\n stringNO SIMILAR A  pattern[ESCAPE escape-character]\n</code></pre> <p>El  <code>SIMILAR TO</code>El operador devuelve verdadero o falso dependiendo de si su patr\u00f3n coincide con la cuerda dada. Es similar a <code>LIKE</code>, excepto que interpreta el patr\u00f3n usando la definici\u00f3n de la serie SQL  de una expresi\u00f3n regular. Las expresiones regulares de SQL son un cruce  curioso entre  <code>LIKE</code>notaci\u00f3n y notaci\u00f3n de expresi\u00f3n regular com\u00fan (POSIX).</p> <p>Como <code>LIKE</code>, el  <code>SIMILAR TO</code>El operador s\u00f3lo tiene \u00e9xito si su patr\u00f3n coincide con toda la cadena;  esto es diferente del comportamiento com\u00fan de expresi\u00f3n regular donde el patr\u00f3n puede coincidir con cualquier parte de la cadena. Tambi\u00e9n como <code>LIKE</code>,  <code>SIMILAR TO</code>usos  <code>_</code>y  <code>%</code>como personajes comod\u00edn que denotan un solo car\u00e1cter y cualquier cadena, respectivamente (estos son comparables a  <code>.</code>y  <code>.*</code>en expresiones regulares POSIX).</p> <p>Adem\u00e1s de estas instalaciones prestadas de <code>LIKE</code>,  <code>SIMILAR TO</code>apoya estos metacaractos de apretando patrones tomados de expresiones regulares POSIX:</p> <ul> <li><code>|</code>denota alternancia (ya de dos alternativas).</li> <li><code>*</code>denota repetici\u00f3n de la \u00edtem cero o m\u00e1s veces anterior.</li> <li><code>+</code>denota la repetici\u00f3n del \u00edtem anterior una o m\u00e1s veces.</li> <li><code>?</code>denota la repetici\u00f3n del \u00edtem cero anterior o una vez.</li> <li><code>{</code><code>m</code><code>}</code>denota la repetici\u00f3n del art\u00edculo anterior exactamente  <code>m</code>veces.</li> <li><code>{</code><code>m</code><code>,}</code>denota la repetici\u00f3n del art\u00edculo anterior  <code>m</code>o m\u00e1s veces.</li> <li><code>{</code><code>m</code><code>,</code><code>n</code><code>}</code>denota la repetici\u00f3n del art\u00edculo anterior al menos  <code>m</code>y no m\u00e1s que  <code>n</code>veces.</li> <li>Parentheses  <code>()</code>se puede utilizar para agrupar los elementos en un solo elemento l\u00f3gico.</li> <li>Una expresi\u00f3n de corchetes  <code>[...]</code>especifica una clase de caracteres, al igual que en las expresiones regulares de POSIX.</li> </ul> <p>Observe que el per\u00edodo (<code>.</code>) no es un metacar\u00e1cter para <code>SIMILAR TO</code>.</p> <p>Al igual que con <code>LIKE</code>, una barra de inhabilitar el significado especial de cualquiera de estos metacar\u00e1ntos. Un car\u00e1cter de escape diferente se puede especificar con <code>ESCAPE</code>, o la capacidad de escape puede desactivarse escribiendo <code>ESCAPE ''</code>.</p> <p>De acuerdo con el est\u00e1ndar SQL, omitiendo  <code>ESCAPE</code>significa que no hay car\u00e1cter de escape (en lugar de incueste al incumplimiento de una barra) y una longitud cero  <code>ESCAPE</code>el valor est\u00e1 desautorizado. El comportamiento de PostgreSQL en este sentido es, por lo tanto, ligeramente no est\u00e1ndar.</p> <p>Otra extensi\u00f3n no est\u00e1ndar es que siguiendo el car\u00e1cter de escape con una letra o un d\u00edgito proporciona acceso a las secuencias de escape definidas para expresiones regulares POSIX; v\u00e9ase el cuadro 9.20, Tabla 9.21 y Cuadro 9.22 infra.</p> <p>Algunos ejemplos:</p> <pre><code>'abc' SIMILAR A 'abc' true\n'abc' SIMILAR A 'a' falso\n\"abc\" SIMILAR TO '% (b\u00e1d)%\" true\n'abc' SIMILAR A '(b.c)%' falso\n'-abc-' SIMILAR TO '%-mabc-M%' truetrue\n'xabcy' SIMILAR A \"%-mabc-M%\" false\n</code></pre> <p>El  <code>substring</code>funci\u00f3n con tres par\u00e1metros proporciona la extracci\u00f3n de una subcadenaci\u00f3n que  coincide con un patr\u00f3n de expresi\u00f3n regular SQL. La funci\u00f3n se puede  escribir de acuerdo con la sintaxis est\u00e1ndar de SQL:</p> <pre><code>substring (en forma de stringsimilar  patternescapes escape-character)\n</code></pre> <p>o utilizando la ya obsoleta sintaxis SQL:1999:</p> <pre><code>substring (en relaci\u00f3n con las stringde  patternpara escape-character)\n</code></pre> <p>o como funci\u00f3n de tres argumentos:</p> <pre><code>substring (en lo que seca (string, pattern, escape-character)\n</code></pre> <p>Al igual que con <code>SIMILAR TO</code>, el patr\u00f3n especificado debe coincidir con toda la cadena de datos, o de lo contrario la funci\u00f3n falla y devuelve null. Para indicar la parte  del patr\u00f3n para la que la sub-cadeing de datos coincidentes es de  inter\u00e9s, el patr\u00f3n debe contener dos ocurreciones del car\u00e1cter de escape seguida de una doble cotizaci\u00f3n (<code>\"</code>). El texto que coincide con la parte del patr\u00f3n entre estos separadores se devuelve cuando el partido tiene \u00e9xito.</p> <p>Los separadores de escape-doble-cuota en realidad dividen <code>substring</code>patr\u00f3n de las tres expresiones regulares independientes; por ejemplo, una barra vertical (<code>|</code>) en cualquiera de las tres secciones afecta \u00fanicamente a esa secci\u00f3n.  Adem\u00e1s, la primera y tercera de estas expresiones regulares se definen  para que coincido con la menor cantidad posible de texto, no la m\u00e1s  grande, cuando hay alguna ambiguedad sobre cu\u00e1nto de la cadena de datos  coincide con qu\u00e9 patr\u00f3n. (En el lenguaje POSIX, las expresiones  regulares primera y tercera se ven obligadas a no ser avaradas.)</p> <p>Como extensi\u00f3n al est\u00e1ndar SQL, PostgreSQL permite que haya un separador de escape-doble-cot, en cuyo caso la  tercera expresi\u00f3n regular se toma como vac\u00eda; o ning\u00fan separador, en  cuyo caso las primeras y terceras expresiones regulares se toman como  vac\u00edas.</p> <p>Algunos ejemplos, con  <code>#\"</code>delimitando la cadena de retorno:</p> <pre><code>substring ('foobar' similar '%'o-b'\"%'\"%'\" oob\nsubstring ('foobar' similar 'A'o-b\"%'\"\" %1 \") NULL\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/03.-Expresiones%20Regulares%20POSIX/","title":"Index","text":"<p>El cuadro 9.16 enumera los operadores disponibles para la coincidencia de patrones utilizando expresiones regulares POSIX.</p> <p>Cuadro 9.16. Operadores de partido de expresi\u00f3n regular</p> Operadora                Descripci\u00f3n                Ejemplos (s) <code>text``~``text</code>- <code>boolean</code>                La cuerda coincide con la expresi\u00f3n regular, caso sensiblemente                 <code>'thomas' ~ 't.*ma'</code>- <code>text``~*``text</code>- <code>boolean</code>                La cuerda coincide con la expresi\u00f3n regular, caso insensiblemente                 <code>'thomas' ~* 'T.*ma'</code>- <code>text``!~``text</code>- <code>boolean</code>                Cada no coincide con la expresi\u00f3n regular, caso sensiblemente                 <code>'thomas' !~ 't.*max'</code>- <code>text``!~*``text</code>- <code>boolean</code>                Cada no coincide con la expresi\u00f3n regular, insensiblemente                 <code>'thomas' !~* 'T.*ma'</code>- <p>POSIXlas expresiones regulares proporcionan un medio m\u00e1s potente para la combinaci\u00f3n de patrones que el  <code>LIKE</code>y  <code>SIMILAR TO</code>operadores. Muchas herramientas Unix como <code>egrep</code>, <code>sed</code>, o  <code>awk</code>utilizar un lenguaje que coinija un patr\u00f3n que sea similar al descrito aqu\u00ed.</p> <p>Una expresi\u00f3n regular es una secuencia de caracteres que es una definici\u00f3n abreviada de un conjunto de cuerdas (un conjunto regular). Se dice que una cadena coincide con una expresi\u00f3n regular si es un  miembro del conjunto regular descrito por la expresi\u00f3n regular. Al igual que con <code>LIKE</code>, los caracteres de patr\u00f3n coinciden exactamente con caracteres de cadena a menos que sean caracteres especiales en el lenguaje de expresi\u00f3n  regular, pero las expresiones regulares utilizan diferentes caracteres  especiales que  <code>LIKE</code>- S\u00ed. A diferencia de  <code>LIKE</code>patrones, una expresi\u00f3n regular se permite que coinzca en cualquier lugar dentro  de una cadena, a menos que la expresi\u00f3n regular est\u00e9 expl\u00edcitamente  anclada al principio o al final de la cuerda.</p> <p>Algunos ejemplos:</p> <pre><code>'abcd' - 'bc' verdad\n'abcd' \"a.c\" true \"-\" punto coincide con cualquier personaje\n\"abcd\" \"a\".  *repite el elemento de patr\u00f3n anterior\n\"abcd\" \"\"\" verdad \"  |OR, grupo de par\u00e9ntesis\n'abcd' - \"A\" verdad  ^Ancla para empezar la cuerda\n\"abcd\" \"\" \"\" falso\" coincidir\u00eda excepto por anclaje\n</code></pre> <p>El  POSIXEl lenguaje patr\u00f3n se describe con mucho mayor detalle a continuaci\u00f3n.</p> <p>El  <code>substring</code>funci\u00f3n con dos par\u00e1metros, <code>substring(*</code>string<code>* from *</code>pattern<code>*)</code>, proporciona la extracci\u00f3n de una subcadeing que coincide con un patr\u00f3n  de expresi\u00f3n regular POSIX. Devuelve nula si no hay coincidencia, de lo  contrario la primera parte del texto que coin\u00eda con el patr\u00f3n. Pero si  el patr\u00f3n contiene alg\u00fan par\u00e9ntesis, la parte del texto que coin\u00eda con  la primera subexpresi\u00f3n entre par\u00e9ntesis (la que entre par\u00e9ntesis deja  primero) es devuelta. Puede poner par\u00e9ntesis alrededor de toda la  expresi\u00f3n si desea usar par\u00e9ntesis dentro de ella sin desencadenar esta  excepci\u00f3n. Si necesita par\u00e9ntesis en el patr\u00f3n antes de la subexpresi\u00f3n  que desea extraer, consulte los par\u00e9ntesis no de captura descritos a  continuaci\u00f3n.</p> <p>Algunos ejemplos:</p> <pre><code>substring('foobar' de 'o.b') oob\nsubstring ('foobar' de 'o(.)b') o\n</code></pre> <p>El  <code>regexp_count</code>funci\u00f3n cuenta el n\u00famero de lugares donde un patr\u00f3n de expresi\u00f3n regular POSIX coincide con una cadena. Tiene la sintaxis <code>regexp_count</code>(<code>string</code>,  <code>pattern</code>[,  <code>start</code>[,  <code>flags</code>]]].  <code>pattern</code>se busca en <code>string</code>, normalmente desde el principio de la cuerda, pero si el  <code>start</code>El par\u00e1metro se proporciona entonces a partir de ese \u00edndice de caracteres. El  <code>flags</code>El par\u00e1metro es una cadena de texto opcional que contiene cero o m\u00e1s  banderas de letras simples que cambian el comportamiento de la funci\u00f3n.  Por ejemplo, incluyendo  <code>i</code>en  <code>flags</code>especifica la correspondencia insensible a los casos. Las banderas apoyadas se describen en el .</p> <p>Algunos ejemplos:</p> <pre><code>reexp\u00e1dolos ('ABCABCAXYaxy', 'A.')          3\nreexp\u00e1doto ('ABCABCAXYaxy', 'A.', 1, 'i') 4\n</code></pre> <p>El  <code>regexp_instr</code>funci\u00f3n devuelve la posici\u00f3n de partida o final de la <code>N</code>'th match de un patr\u00f3n de expresi\u00f3n regular POSIX a una cadena, o cero si no hay tal coincidencia. Tiene la sintaxis <code>regexp_instr</code>(<code>string</code>,  <code>pattern</code>[,  <code>start</code>[,  <code>N</code>[,  <code>endoption</code>[,  <code>flags</code>[,  <code>subexpr</code>]]]]]]].).  <code>pattern</code>se busca en <code>string</code>, normalmente desde el principio de la cuerda, pero si el  <code>start</code>El par\u00e1metro se proporciona entonces a partir de ese \u00edndice de caracteres. Si  <code>N</code>se especifica entonces la <code>N</code>La coincidencia del patr\u00f3n se encuentra, de lo contrario el primer partido se encuentra. Si el  <code>endoption</code>El par\u00e1metro se omite o se especifica como cero, la funci\u00f3n devuelve la  posici\u00f3n del primer car\u00e1cter del partido. De lo contrario,  <code>endoption</code>debe ser una, y la funci\u00f3n devuelve la posici\u00f3n del personaje despu\u00e9s del partido. El  <code>flags</code>El par\u00e1metro es una cadena de texto opcional que contiene cero o m\u00e1s  banderas de letras simples que cambian el comportamiento de la funci\u00f3n.  Las banderas apoyadas se describen en el . Para un patr\u00f3n que contenga subexpresiones entre par\u00e9ntesis,  <code>subexpr</code>es un entero que indica qu\u00e9 subexpresi\u00f3n es de inter\u00e9s: el resultado  identifica la posici\u00f3n de la subcadenaci\u00f3n que coincide con esa  subexpresi\u00f3n. Las subexpresiones est\u00e1n numeradas en el orden de sus  principales par\u00e9ntesis. Cuando  <code>subexpr</code>se omite o cero, el resultado identifica la posici\u00f3n de todo el partido  independientemente de las subexpresiones entre par\u00e9ntesis.</p> <p>Algunos ejemplos:</p> <pre><code>reexp-instr ('n\u00famero de tu calle, cremallera de la ciudad, FR', ',]', 1, 2)\n                                   23\nregexp-instr ('ABCDEFGHI', '(c...o.o.', 1, 1, 0, 'i', 2)\n                                   6\n</code></pre> <p>El  <code>regexp_like</code>funci\u00f3n comprueba si la coincidencia de un patr\u00f3n de expresi\u00f3n regular de POSIX ocurre dentro de una cadena, devolviendo booleano true o falso. Tiene  la sintaxis <code>regexp_like</code>(<code>string</code>,  <code>pattern</code>[,  <code>flags</code>] ]). El  <code>flags</code>El par\u00e1metro es una cadena de texto opcional que contiene cero o m\u00e1s  banderas de letras simples que cambian el comportamiento de la funci\u00f3n.  Las banderas apoyadas se describen en el . Esta funci\u00f3n tiene los mismos resultados que la  <code>~</code>operador si no se especifican banderas. Si tan solo la  <code>i</code>la bandera se especifica, tiene los mismos resultados que la  <code>~*</code>operador.</p> <p>Algunos ejemplos:</p> <pre><code>regexp-like('Hello Mundo', 'mundo') falso\nreexp-like('Hello Mundo', 'mundo', 'i') cierto\n</code></pre> <p>El  <code>regexp_match</code>funci\u00f3n devuelve un array de texto de subcadeing (s) a juego dentro de la  primera coincidencia de un patr\u00f3n de expresi\u00f3n regular POSIX a una  cadena. Tiene la sintaxis <code>regexp_match</code>(<code>string</code>,  <code>pattern</code>[,  <code>flags</code>] ]). Si no hay coincidencia, el resultado es <code>NULL</code>. Si se encuentra una coincidencia, y la  <code>pattern</code>no contiene subexpresiones entre par\u00e9ntesis, luego el resultado es un  array de texto de un solo elemento que contiene la subcadenaci\u00f3n que  coincide con todo el patr\u00f3n. Si se encuentra una coincidencia, y la  <code>pattern</code>contiene subexpresiones entre par\u00e9ntesis, entonces el resultado es un conjunto de texto que <code>n</code>El elemento es la subcarra que se corresponde con el <code>n</code>Supresi\u00f3n entre par\u00e9ntesis de la  <code>pattern</code>(sin contar - no capturar par\u00e9ntesis; ver abajo para m\u00e1s detalles). El  <code>flags</code>El par\u00e1metro es una cadena de texto opcional que contiene cero o m\u00e1s  banderas de letras simples que cambian el comportamiento de la funci\u00f3n.  Las banderas apoyadas se describen en el .</p> <p>Algunos ejemplos:</p> <pre><code>SELECT regexp-match('foobarbequebaz', 'bar.*que');\n regexp-match\n--------------\n B\u00e1rbaraca.\n(1 fila)\n\nSELECT regexp-match('foobarbequebaz', '(bar)(beque)');\n regexp-match\n--------------\n Bar, aque.\n(1 fila)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/03.-Expresiones%20Regulares%20POSIX/#tip","title":"Tip","text":"<p>En el caso com\u00fan en el que s\u00f3lo quieres toda la substring o  <code>NULL</code>para no coincidir, la mejor soluci\u00f3n es usar <code>regexp_substr()</code>. Sin embargo,  <code>regexp_substr()</code>solo existe en PostgreSQL versi\u00f3n 15 y m\u00e1s. Cuando se trabaja en versiones anteriores, puede extraer el primer elemento de <code>regexp_match()</code>Resultado, por ejemplo:</p> <pre><code>SELECT (regexp-match('foobarbequebaz', 'bar.*que'))[1];\n regexp-match\n--------------\n barbacoa\n(1 fila)\n</code></pre> <p>El  <code>regexp_matches</code>funci\u00f3n devuelve un conjunto de conjuntos de texto de subcadeings de  coincidencias dentro de los partidos de un patr\u00f3n de expresi\u00f3n regular  POSIX a una cadena. Tiene la misma sintaxis que <code>regexp_match</code>. Esta funci\u00f3n no devuelve filas si no hay partido, una fila si hay un partido y el  <code>g</code>la bandera no se da, o  <code>N</code>filas si las hay  <code>N</code>cerdos y la  <code>g</code>La bandera se da. Cada fila devuelta es un array de texto que contiene  toda la subcadenaci\u00f3n empareja o las sub-cuerdas que coinciden con  subexpresiones entre par\u00e9ntesis de la <code>pattern</code>, tal como se describe anteriormente para <code>regexp_match</code>.  <code>regexp_matches</code>acepta todas las banderas que aparecen en la , m\u00e1s  <code>g</code>bandera que le ordena devolver todos los partidos, no solo el primero.</p> <p>Algunos ejemplos:</p> <pre><code>SELECT regexp-matches ('foo', 'no all\u00ed');\n regexp-matches\n----------------\n(0 filas)\n\nSELECT regexp-matches ('foobarbequebazilbarfbonk', '(b[-b])(b[-b])', 'g');\n regexp-matches\n----------------\n Bar, aque.\n Barzil, Barf.\n(2 filas)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/03.-Expresiones%20Regulares%20POSIX/#tip_1","title":"Tip","text":"<p>En la mayor\u00eda de los casos  <code>regexp_matches()</code>debe utilizarse con la  <code>g</code>bandera, ya que si solo quieres el primer partido, es m\u00e1s f\u00e1cil y m\u00e1s eficiente de usar <code>regexp_match()</code>. Sin embargo,  <code>regexp_match()</code>solo existe en PostgreSQL versi\u00f3n 10 y up. Cuando se trabaja en versiones anteriores, un truco com\u00fan es colocar un  <code>regexp_matches()</code>llamada en una subseleccione, por ejemplo:</p> <pre><code>SELECT col1, (SELECT regexp-matches(col2, '(bar)(beque))) De la pesta\u00f1a;\n</code></pre> <p>Esto produce una matriz de texto si hay una coincidencia, o  <code>NULL</code>si no, lo mismo que  <code>regexp_match()</code>lo har\u00eda. Sin la subseleccionada, esta consulta no producir\u00eda ninguna  salida para las filas de mesa sin una coincidencia, que normalmente no  es el comportamiento deseado.</p> <p>El  <code>regexp_replace</code>funci\u00f3n proporciona sustituci\u00f3n de nuevo texto por subcadenas que coincidan con los patrones de expresi\u00f3n regulares de POSIX. Tiene la sintaxis <code>regexp_replace</code>(<code>source</code>, <code>pattern</code>,  <code>replacement</code>[,  <code>start</code>[,  <code>N</code>]] [,  <code>flags</code>] ]). (Aviso que  <code>N</code>no puede especificarse a menos que  <code>start</code>es, pero  <code>flags</code>puede darse en cualquier caso.) El  <code>source</code>cuerda se devuelve sin cambios si no hay coincidencia con el <code>pattern</code>. Si hay una coincidencia, la  <code>source</code>cuerda se devuelve con el  <code>replacement</code>cuerda sustituida por la subcader\u00eda a juego. El  <code>replacement</code>cuerdas pueden contener <code>\\</code><code>n</code>, d\u00f3nde  <code>n</code>es de 1 a 9, para indicar que la substring fuente que coincida con la <code>n</code>'se debe insertar la subexpresi\u00f3n entre par\u00e9ntesis del patr\u00f3n, y puede contener  <code>\\&amp;</code>indicar que se debe insertar la subcadena que coincida con todo el patr\u00f3n. Escribir  <code>\\\\</code>si necesita poner una reacci\u00f3n literal en el texto de reemplazo.  <code>pattern</code>se busca en <code>string</code>, normalmente desde el principio de la cuerda, pero si el  <code>start</code>El par\u00e1metro se proporciona entonces a partir de ese \u00edndice de caracteres. Por defecto, s\u00f3lo se reemplaza el primer partido del patr\u00f3n. Si  <code>N</code>se especifica y es mayor que cero, luego el <code>N</code>'La coincidencia del patr\u00f3n se reemplaza. Si el  <code>g</code>se da bandera, o si  <code>N</code>se especifica y es cero, luego todos los partidos en o despu\u00e9s de la  <code>start</code>se sustituye la posici\u00f3n. (El  <code>g</code>bandera es ignorada cuando  <code>N</code>se especifica.) El  <code>flags</code>El par\u00e1metro es una cadena de texto opcional que contiene cero o m\u00e1s  banderas de letras simples que cambian el comportamiento de la funci\u00f3n.  Bandas apoyadas (aunque no <code>g</code>) se describen en el cuadro 9.24.</p> <p>Algunos ejemplos:</p> <pre><code>reexp-replace( 'foobarbaz', 'b.', 'X')\n                                   fooXbaz\nregex-replace( 'foobarbaz', 'b.', 'X', 'g')\n                                   fooXX\nreexp-replace( 'foobarbaz', 'b(...', 'X-1Y', 'g')\n                                   fooXarYXazY\nreexp-replace('A PostgreSQL function', 'a-e-i-o'u', 'X', 1, 0, 'i')\n                                   X PXstgrXSQL fXnctXXn\nreexp-replace('A PostgreSQL function', 'a-e-i-o'u', 'X', 1, 3, 'i')\n                                   Una funci\u00f3n de PostgrXSQL\n</code></pre> <p>El  <code>regexp_split_to_table</code>funci\u00f3n divide una cadena usando un patr\u00f3n de expresi\u00f3n regular POSIX como delimitador. Tiene la sintaxis <code>regexp_split_to_table</code>(<code>string</code>,  <code>pattern</code>[,  <code>flags</code>] ]). Si no hay coincidencia con el <code>pattern</code>, la funci\u00f3n devuelve el <code>string</code>. Si hay al menos un partido, para cada partido devuelve el texto desde  el final del \u00faltimo partido (o el comienzo de la cuerda) hasta el  comienzo del partido. Cuando no hay m\u00e1s partidos, devuelve el texto  desde el final del \u00faltimo partido hasta el final de la cuerda. El  <code>flags</code>El par\u00e1metro es una cadena de texto opcional que contiene cero o m\u00e1s  banderas de letras simples que cambian el comportamiento de la funci\u00f3n.  <code>regexp_split_to_table</code>soporta las banderas descritas en la Tabla 9.24.</p> <p>El  <code>regexp_split_to_array</code>funci\u00f3n se comporta igual que <code>regexp_split_to_table</code>, excepto que  <code>regexp_split_to_array</code>devuelve su resultado como una serie de <code>text</code>. Tiene la sintaxis <code>regexp_split_to_array</code>(<code>string</code>,  <code>pattern</code>[,  <code>flags</code>] ]). Los par\u00e1metros son los mismos que para <code>regexp_split_to_table</code>.</p> <p>Algunos ejemplos:</p> <pre><code>SELECT foo De regexp-split-to-table (el zozoxo marr\u00f3n r\u00e1pido salta sobre el perro perezoso\", 's') AS foo;\n  foo\n------\n el\n r\u00e1pido\n marr\u00f3n\n zozor\u00f3n\n saltos\n sobre\n el\n perezoso\n perro\n(9 filas)\n\nSELECT regexp.split-to-array ('el zozor\u00f3n marr\u00f3n r\u00e1pido salta sobre el perro perezoso', 's');\n              regexp.split-to-array\n-------------------------------------------------------------\n - El,quick,brown,fox,jumps,over, el,elzy, perroja.\n(1 fila)\n\nSELECT foo FROM regexp.split-to-table ('el zozoco marr\u00f3n r\u00e1pido', 's*') AS foo;\n foo\n-----\n t\n h\n e\n q\n u\n - I\n c\n k\n b\n r\n o\n w\n n\n f\n o\n x\n(16 filas)\n</code></pre> <p>Como demuestra el \u00faltimo ejemplo, las funciones de divisi\u00f3n de  regexp ignoran los partidos de longitud cero que ocurren al principio o  al final de la cuerda o inmediatamente despu\u00e9s de un partido anterior.  Esto es contrario a la definici\u00f3n estricta de la correspondencia de  regexp que es implementada por las otras funciones de regexp, pero  generalmente es el comportamiento m\u00e1s conveniente en la pr\u00e1ctica. Otros  sistemas de software como Perl utilizan definiciones similares.</p> <p>El  <code>regexp_substr</code>funci\u00f3n devuelve la substring que coincide con un patr\u00f3n de expresi\u00f3n regular POSIX, o  <code>NULL</code>si no hay coincidencia. Tiene la sintaxis <code>regexp_substr</code>(<code>string</code>,  <code>pattern</code>[,  <code>start</code>[,  <code>N</code>[,  <code>flags</code>[,  <code>subexpr</code>]]]]].).  <code>pattern</code>se busca en <code>string</code>, normalmente desde el principio de la cuerda, pero si el  <code>start</code>El par\u00e1metro se proporciona entonces a partir de ese \u00edndice de caracteres. Si  <code>N</code>se especifica entonces la <code>N</code>El partido del patr\u00f3n se devuelve, de lo contrario se devuelve el primer partido. El  <code>flags</code>El par\u00e1metro es una cadena de texto opcional que contiene cero o m\u00e1s  banderas de letras simples que cambian el comportamiento de la funci\u00f3n.  Las banderas apoyadas se describen en el . Para un patr\u00f3n que contenga subexpresiones entre par\u00e9ntesis,  <code>subexpr</code>es un entero que indica qu\u00e9 subexpresi\u00f3n es de inter\u00e9s: el resultado es la subcadenaci\u00f3n que coincide con esa subexpresi\u00f3n. Las subexpresiones  est\u00e1n numeradas en el orden de sus principales par\u00e9ntesis. Cuando  <code>subexpr</code>se omite o cero, el resultado es todo el partido independientemente de las subexpresiones entre par\u00e9ntesis.</p> <p>Algunos ejemplos:</p> <pre><code>reexp-substr( 'n\u00famero de tu calle, cremallera de la ciudad, FR', ',', 1, 2)\n                                    la ciudad cremallera\nregexp-substr('ABCDEFGHI', '(c...'.', 1, 1, 'i', 2)\n                                   FGH\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/03.-Expresiones%20Regulares%20POSIX/01.-Detalles%20de%20la%20Expresi%C3%B3n%20Regular/","title":"01.-Detalles de la Expresi\u00f3n Regular","text":"<p>Las expresiones regulares de PostgreSQL se implementan usando un paquete de software escrito por Henry Spencer. Gran parte de la descripci\u00f3n de las expresiones regulares a  continuaci\u00f3n se copia literalmente de su manual.</p> <p>Expresiones regulares (REs), tal como se define en  POSIX1003.2, vienen en dos formas:extended REs o EREs (aproximadamente los de <code>egrep</code>), y b\u00e1sico REs o BREs (aproximadamente los de <code>ed</code>). PostgreSQL soporta ambos formularios, y tambi\u00e9n implementa algunas extensiones que no est\u00e1n en el est\u00e1ndar POSIX, pero se han utilizado ampliamente debido a su disponibilidad en lenguajes de programaci\u00f3n como Perl y Tcl. REel uso de estas extensiones no POSIX se llaman avanzadas REs o AREen esta documentaci\u00f3n. Los ARE son casi un superset exacto de los ERE,  pero los BRE tienen varias incompatibilidades notariales (as\u00ed como mucho m\u00e1s limitadas). Primero describimos los formularios ARE y ERE,  se\u00f1alando caracter\u00edsticas que se aplican s\u00f3lo a los ERE, y luego  describimos c\u00f3mo los BRE difieren.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/03.-Expresiones%20Regulares%20POSIX/01.-Detalles%20de%20la%20Expresi%C3%B3n%20Regular/#nota","title":"Nota","text":"<p>PostgreSQL siempre presume inicialmente que una expresi\u00f3n regular sigue las reglas de los ERE. Sin embargo, las normas m\u00e1s limitadas de ERE o BRE pueden  elegirse preaperando una opci\u00f3n integrada al patr\u00f3n de la RE, como se describe en la secci\u00f3n 9.7.3.4. Esto puede ser \u00fatil para la compatibilidad con las aplicaciones que esperan exactamente la  POSIXNormas 1003.2.</p> <p>Una expresi\u00f3n regular se define como una o m\u00e1s ramas, separadas por <code>|</code>. Cotea con todo lo que coincide con una de las ramas.</p> <p>Una rama es cero o m\u00e1s \u00e1tomos o restricciones cuantificados, concatenados. Coiniza un partido para el primero, seguido de un partido para el segundo, etc.; una rama vac\u00eda coincide con la cuerda vac\u00eda.</p> <p>Un \u00e1tomo cuantificado es un \u00e1tomo posiblemente seguido de un solo cuantificador. Sin un cuantificador, coincide con un partido para el \u00e1tomo. Con un  cuantificador, puede igualar alg\u00fan n\u00famero de partidos del \u00e1tomo. Un \u00e1tomo puede ser cualquiera de las posibilidades que se muestran en la Tabla 9.17. Los posibles cuantificadores y sus significados se muestran en la Tabla 9.18.</p> <p>Una restricci\u00f3n coincide con una cadena vac\u00eda, pero coincide s\u00f3lo cuando se cumplen  condiciones espec\u00edficas. Se puede utilizar una restricci\u00f3n donde se  podr\u00eda utilizar un \u00e1tomo, excepto que no puede ser seguido por un  cuantificador. Las simples limitaciones se muestran en el cuadro 9.19; algunas restricciones m\u00e1s se describen m\u00e1s tarde.</p> <p>Cuadro 9.17. \u00c1tomos de expresi\u00f3n regular</p> \u00c1toma Descripci\u00f3n <code>(</code><code>re</code><code>)</code> (D\u00f3nde  <code>re</code>es cualquier expresi\u00f3n regular) coincide con un partido para <code>re</code>, con el partido se\u00f1alado para la posible presentaci\u00f3n de informes <code>(?:</code><code>re</code><code>)</code> como arriba, pero el partido no se se\u00f1ala para informar (a non-capturingun conjunto de par\u00e9ntesis sin capturar) (AREs solamente) <code>.</code> coincide con cualquier personaje <code>[</code><code>chars</code><code>]</code> una expresi\u00f3n de par\u00e9ntesis, que coinpare cualquiera de los  <code>chars</code>(ver secci\u00f3n 9.7.3.2 para m\u00e1s detalles) <code>\\</code><code>k</code> (D\u00f3nde  <code>k</code>es un personaje no alfanum\u00e9rico) coincide con ese personaje tomado como un personaje ordinario, por ejemplo,  <code>\\\\</code>coincide con un car\u00e1cter de reacci\u00f3n <code>\\</code><code>c</code> d\u00f3nde  <code>c</code>es alfanum\u00e9rico (posiblemente seguido por otros personajes) es una escapatoria, v\u00e9ase la Secci\u00f3n 9.7.3.3 (s\u00f3lo los AREs; en EREs y BREs, este partido <code>c</code>) <code>{</code> cuando seguido por un personaje que no sea un d\u00edgito, coincide con el car\u00e1cter de la corbata izquierda <code>{</code>; cuando es seguido por un d\u00edgito, es el comienzo de un  <code>bound</code>(ver m\u00e1s adelante) <code>x</code> d\u00f3nde  <code>x</code>es un solo personaje sin otro significado, coincide con ese car\u00e1cter <p>Una RE no puede terminar con una reacci\u00f3n (<code>\\</code>).</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/03.-Expresiones%20Regulares%20POSIX/01.-Detalles%20de%20la%20Expresi%C3%B3n%20Regular/#nota_1","title":"Nota","text":"<p>Si tienes apagado est\u00e1ndar, cualquier barranco que escribas en constantes literales de cuerda tendr\u00e1 que ser duplicado. Para m\u00e1s informaci\u00f3n v\u00e9ase .</p> <p>Cuadro 9.18. Cuantificadores regulares de la expresi\u00f3n</p> Cuantificador Coinciden <code>*</code> una secuencia de 0 o m\u00e1s coincidencias del \u00e1tomo <code>+</code> una secuencia de 1 o m\u00e1s coincidencias del \u00e1tomo <code>?</code> una secuencia de 0 o 1 coincidencias del \u00e1tomo <code>{</code><code>m</code><code>}</code> una secuencia de exactamente  <code>m</code>partidos del \u00e1tomo <code>{</code><code>m</code><code>,}</code> una secuencia de  <code>m</code>o m\u00e1s coincidencias del \u00e1tomo <code>{</code><code>m</code><code>,</code><code>n</code><code>}</code> una secuencia de  <code>m</code>a trav\u00e9s  <code>n</code>(todo incluido) las coincidencias del \u00e1tomo;  <code>m</code>no puede superar <code>n</code> <code>*?</code> versi\u00f3n no codificada de <code>*</code> <code>+?</code> versi\u00f3n no codificada de <code>+</code> <code>??</code> versi\u00f3n no codificada de <code>?</code> <code>{</code><code>m</code><code>}?</code> versi\u00f3n no codificada de <code>{</code><code>m</code><code>}</code> <code>{</code><code>m</code><code>,}?</code> versi\u00f3n no codificada de <code>{</code><code>m</code><code>,}</code> <code>{</code><code>m</code><code>,</code><code>n</code><code>}?</code> versi\u00f3n no codificada de <code>{</code><code>m</code><code>,</code><code>n</code><code>}</code> <p>Los formularios que utilizan  <code>{</code><code>...</code><code>}</code>se conocen como l\u00edmites. Los n\u00fameros  <code>m</code>y  <code>n</code>dentro de un encuaderecido se encime con los n\u00fameros enteros decimales no firmados con valores permisibles de 0 a 255 inclusive.</p> <p>Los cuantificadores no codidos (disponible s\u00f3lo en AREs) coinciden con las mismas posibilidades que sus correspondientes hom\u00f3logos normales (avarosos), pero prefieren el n\u00famero m\u00e1s peque\u00f1o en lugar del mayor n\u00famero de partidos. V\u00e9ase la secci\u00f3n 9.7.3.5 para m\u00e1s detalles.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/03.-Expresiones%20Regulares%20POSIX/01.-Detalles%20de%20la%20Expresi%C3%B3n%20Regular/#nota_2","title":"Nota","text":"<p>Un cuantificador no puede seguir inmediatamente otro cuantificador, por ejemplo,  <code>**</code>no es inv\u00e1lido. Un cuantificador no puede comenzar una expresi\u00f3n o subexpresi\u00f3n o seguir  <code>^</code>o o <code>|</code>.</p> <p>Cuadro 9.19. Respresi\u00f3n regular restricciones</p> Restricci\u00f3n Descripci\u00f3n <code>^</code> partidos al principio de la cuerda <code>$</code> partidos al final de la cuerda <code>(?=</code><code>re</code><code>)</code> mirada positiva coincide en cualquier punto en el que un partido de substring  <code>re</code>comienza (s\u00f3lo los AREs) <code>(?!</code><code>re</code><code>)</code> mirada negativa frente a partidos en ning\u00fan momento en el que ninguna substring coin\u00e1ndote  <code>re</code>comienza (s\u00f3lo los AREs) <code>(?&lt;=</code><code>re</code><code>)</code> mirada positiva detr\u00e1s de los partidos en cualquier momento en el que una coincidencia de la substring  <code>re</code>finales (s\u00f3lo losAREs) <code>(?&lt;!</code><code>re</code><code>)</code> mirada negativa detr\u00e1s de los partidos en cualquier momento en el que ninguna substring coin\u00e1ndote  <code>re</code>finales (s\u00f3lo losAREs) <p>Las restricciones de mirada y mirada detr\u00e1s de las restricciones no pueden contener referencias hacia atr\u00e1s (ver Secci\u00f3n 9.7.3.3), y todos los par\u00e9ntesis dentro de ellos se consideran no-captura.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/03.-Expresiones%20Regulares%20POSIX/02.-Expresiones%20de%20Bracket/","title":"02.-Expresiones de Bracket","text":"<p>Una expresi\u00f3n de par\u00e9ntesis es una lista de caracteres encerrados en <code>[]</code>. Normalmente coincide con cualquier personaje de la lista (pero vea m\u00e1s abajo). Si la lista comienza con <code>^</code>, coincide con cualquier personaje que no sea del resto de la lista. Si dos caracteres de la lista est\u00e1n separados por <code>-</code>, esta es abreviatura para toda la gama de caracteres entre esos dos (incluido) en la secuencia de cocoteo, por ejemplo,  <code>[0-9]</code>en  ASCIIcoincide con cualquier d\u00edgito decimal. Es ilegal que dos rangos compartan un punto final, por ejemplo, <code>a-c-e</code>. Las cordilleras son muy dependientes de la secuenciaci\u00f3n, por lo que los programas port\u00e1tiles deben evitar depender de ellos.</p> <p>Incluir un literal  <code>]</code>en la lista, que sea el primer personaje (despu\u00e9s <code>^</code>, si se utiliza). Incluir un literal <code>-</code>, que sea el primer o \u00faltimo personaje, o el segundo punto de un rango. Para usar un literal  <code>-</code>como el primer punto final de un rango, encerrarlo en  <code>[.</code>y  <code>.]</code>para que sea un elemento de recopilaci\u00f3n (ver m\u00e1s abajo). Con la excepci\u00f3n de estos caracteres, algunas combinaciones usando  <code>[</code>(ver los p\u00e1rrafos siguientes), y escapa (s\u00f3lo los CONARE), todos los dem\u00e1s  caracteres especiales pierden su importancia especial dentro de una  expresi\u00f3n entre corchetes. En particular,  <code>\\</code>no es especial cuando se sigue las reglas de ERE o BRE, aunque es especial (como introducir una fuga) en los ERE.</p> <p>Dentro de una expresi\u00f3n de par\u00e9ntesis, un elemento de  recopilaci\u00f3n (un car\u00e1cter, una secuencia de m\u00faltiples caracteres que se  recopila como si fuera un solo personaje, o un nombre de coco-secuencia  para cualquiera de ellos) encerrado en  <code>[.</code>y  <code>.]</code>representa la secuencia de caracteres de ese elemento de recopilaci\u00f3n. La  secuencia se trata como un \u00fanico elemento de la lista de la expresi\u00f3n de par\u00e9ntesis. Esto permite que una expresi\u00f3n de soporte que contiene un  elemento de coleccionar de m\u00faltiples caracteres se ajuste a m\u00e1s de un  personaje, por ejemplo, si la secuencia de cocoteo incluye un  <code>ch</code>El elemento de cotejar, luego el RE  <code>[[.ch.]]*c</code>coincide con los primeros cinco personajes de <code>chchcc</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/03.-Expresiones%20Regulares%20POSIX/02.-Expresiones%20de%20Bracket/#nota","title":"Nota","text":"<p>PostgreSQL actualmente no soporta elementos de recopilaci\u00f3n de m\u00faltiples  caracteres. Esta informaci\u00f3n describe un posible comportamiento futuro.</p> <p>Dentro de una expresi\u00f3n de corchetes, un elemento de cocoteo encerrado en  <code>[=</code>y  <code>=]</code>es una clase de equivalencia, de pie para las secuencias de caracteres de todos los elementos de  recopilaci\u00f3n equivalentes a ese, inclus\u00e1ndose a s\u00ed mismo. (Si no hay  otros elementos de recopilaci\u00f3n equivalentes, el tratamiento es como si  los delimitadores encerrados fueran  <code>[.</code>y <code>.]</code>.) Por ejemplo, si  <code>o</code>y  <code>^</code>son los miembros de una clase de equivalencia, entonces <code>[[=o=]]</code>, <code>[[=^=]]</code>, y  <code>[o^]</code>todos son sin\u00f3nimos. Una clase de equivalencia no puede ser un punto final de un rango.</p> <p>Dentro de una expresi\u00f3n de par\u00e9ntesis, el nombre de una clase de caracteres encerrado en  <code>[:</code>y  <code>:]</code>representa la lista de todos los personajes pertenecientes a esa clase. Una clase  de caracteres no se puede utilizar como punto final de un rango. El  POSIXLa norma define estos nombres de la clase de caracteres:  <code>alnum</code>(letras y d\u00edgitos num\u00e9ricos),  <code>alpha</code>(cartas),  <code>blank</code>(espacio y pesta\u00f1a),  <code>cntrl</code>(personajes de control),  <code>digit</code>(digitales num\u00e9ricos),  <code>graph</code>(personajes impresos excepto espacio),  <code>lower</code>(tecter\u00edsticas de la zona baja),  <code>print</code>(personajes imprimibles, incluido el espacio),  <code>punct</code>(puntuaci\u00f3n),  <code>space</code>(cualquier espacio blanco),  <code>upper</code>(cartas de hasta-\u00faper), y  <code>xdigit</code>(digitales dehexadecimal). El comportamiento de estas clases de caracteres  est\u00e1ndar es generalmente consistente en todas las plataformas para  caracteres en el conjunto ASCII de 7 bits. Si se considera que un  car\u00e1cter no A partir de la CASII pertenece a una de estas clases depende de la cocoteaci\u00f3n que se utilice para la funci\u00f3n u operador de expresi\u00f3n regular (ver Secci\u00f3n 24.2), o por defecto en la base de datos.  <code>LC_CTYPE</code>locale (v\u00e9ase la secci\u00f3n 24.1). La clasificaci\u00f3n de caracteres no-ASCII puede variar de acuerdo con  plataformas incluso en lugares de nombre similar. (Pero el  <code>C</code>locale nunca considera que ning\u00fan personaje no ASCII pertenezca a ninguna de  estas clases.) Adem\u00e1s de estas clases de caracteres est\u00e1ndar, PostgreSQL define la  <code>word</code>clase de personajes, que es lo mismo que  <code>alnum</code>m\u00e1s el subrayado (<code>_</code>) car\u00e1cter, y  <code>ascii</code>clase de caracteres, que contiene exactamente el conjunto ASCII de 7 bits.</p> <p>Hay dos casos especiales de expresiones entre corchetes: las expresiones entre corchetes  <code>[[:&lt;:]]</code>y  <code>[[:&gt;:]]</code>son limitaciones, que coinciden con las cuerdas vac\u00edas al principio y al  final de una palabra respectivamente. Una palabra se define como una  secuencia de caracteres de palabras que no est\u00e1 ni precedido ni seguido  por personajes de palabras. Una palabra de car\u00e1cter es cualquier  personaje perteneciente a la  <code>word</code>clase de personajes, es decir, cualquier letra, d\u00edgito o subrayado. Se trata de una extensi\u00f3n, compatible con  POSIX1003.2, y debe utilizarse con precauci\u00f3n en un software destinado a ser  port\u00e1tiles a otros sistemas. Las fugas de restricci\u00f3n descritas a  continuaci\u00f3n suelen ser preferibles; no son m\u00e1s est\u00e1ndar, pero son m\u00e1s  f\u00e1ciles de escribir.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/03.-Expresiones%20Regulares%20POSIX/03.-Expresiones%20Regulares%20de%20Escape/","title":"03.-Expresiones Regulares de Escape","text":"<p>Los escapes son secuencias especiales que comienzan con  <code>\\</code>seguido de un personaje alfanum\u00e9rico. Las escapadas vienen en varias  variedades: entrada de personajes, abreviatura de clase, escapes de  restricciones y referencias de espalda. A  <code>\\</code>seguida de un car\u00e1cter alfanum\u00e9rico pero no constituir una fuga v\u00e1lida es  ilegal en los ERE. En los ERE, no hay escapadas: fuera de una expresi\u00f3n  de par\u00e9ntesis, un  <code>\\</code>seguido por un personaje alfanum\u00e9rico simplemente representa ese personaje como un personaje ordinario, y dentro de una expresi\u00f3n de corchetes,  <code>\\</code>es un personaje ordinario. (Esta \u00faltima es la \u00fanica incompatibilidad real entre los ERE y los ERE.)</p> <p>Existen fugas de entrada de car\u00e1cter para facilitar la especificaci\u00f3n de la no impresi\u00f3n y otros personajes inconvenientes en las RE. Se muestran en la Tabla 9.20.</p> <p>Los escapes de clase-corto y las escapadas proporcionan abreviatura para ciertas clases de car\u00e1cter com\u00fan. Se muestran en la Tabla 9.21.</p> <p>Una restricci\u00f3n es una restricci\u00f3n, que coincide con la cuerda vac\u00eda si se cumplen  condiciones espec\u00edficas, escritas como escape. Se muestran en la Tabla 9.22.</p> <p>Una referencia de espalda (<code>\\</code><code>n</code>) coincide con la misma cadena emparedecido por la anterior subexpresi\u00f3n monoheseada especificada por el n\u00famero  <code>n</code>(v\u00e9ase el cuadro 9.23). Por ejemplo,  <code>([bc])\\1</code>partidos  <code>bb</code>o o  <code>cc</code>pero no  <code>bc</code>o o <code>cb</code>. La subexpresi\u00f3n debe preceder por completo a la referencia de atr\u00e1s en  la RE. Las subexpresiones est\u00e1n numeradas en el orden de sus principales par\u00e9ntesis. Los par\u00e9ntesis no captando no definen subexpresiones. La  referencia de atr\u00e1s considera s\u00f3lo los caracteres de cuerda emparecidos  por la subexpresi\u00f3n referenciada, no cualquier restricci\u00f3n contenida en  ella. Por ejemplo,  <code>(^\\d)\\1</code>coincidir\u00e1 <code>22</code>.</p> <p>Cuadro 9.20. Expresi\u00f3n regular-entraciones fugas</p> Escapar Descripci\u00f3n <code>\\a</code> de alerta (caja), como en C <code>\\b</code> el espacio trasero, como en C <code>\\B</code> sin\u00f3nimo de reacci\u00f3n (<code>\\</code>) para ayudar a reducir la necesidad de duplicaci\u00f3n de la reacci\u00f3n <code>\\c</code><code>X</code> (D\u00f3nde  <code>X</code>es cualquier car\u00e1cter) el car\u00e1cter cuyo orden bajo 5 bits son los mismos que los de <code>X</code>, y cuyos otros bits son todos cero <code>\\e</code> el car\u00e1cter cuyo nombre de secuenciaci\u00f3n es <code>ESC</code>, o en su defecto, el car\u00e1cter con valor octal <code>033</code> <code>\\f</code> pienso en la alimentaci\u00f3n, como en C <code>\\n</code> nueva l\u00ednea, como en C <code>\\r</code> retorno de vag\u00f3n, como en C <code>\\t</code> pesta\u00f1a horizontal, como en C <code>\\u</code><code>wxyz</code> (D\u00f3nde  <code>wxyz</code>es exactamente cuatro d\u00edgitos hexadecimales) el car\u00e1cter cuyo valor hexadecimal es <code>0x</code><code>wxyz</code> <code>\\U</code><code>stuvwxyz</code> (D\u00f3nde  <code>stuvwxyz</code>es exactamente ocho d\u00edgitos hexadecimales) el car\u00e1cter cuyo valor hexadecimal es <code>0x</code><code>stuvwxyz</code> <code>\\v</code> pesta\u00f1a vertical, como en C <code>\\x</code><code>hhh</code> (D\u00f3nde  <code>hhh</code>es cualquier secuencia de d\u00edgitos hexadecimales) el car\u00e1cter cuyo valor hexadecimal es  <code>0x</code><code>hhh</code>(un solo car\u00e1cter sin importar cu\u00e1ntos d\u00edgitos hexadeciales se utilicen) <code>\\0</code> el car\u00e1cter cuyo valor sea  <code>0</code>(el bydo null) <code>\\</code><code>xy</code> (D\u00f3nde  <code>xy</code>es exactamente dos d\u00edgitos octales, y no es una referencia tras de fondo) el car\u00e1cter cuyo valor octal es <code>0</code><code>xy</code> <code>\\</code><code>xyz</code> (D\u00f3nde  <code>xyz</code>es exactamente tres d\u00edgitos octales, y no es una referencia tras de fondo) el car\u00e1cter cuyo valor octal es <code>0</code><code>xyz</code> <p>Los d\u00edgitos hexadeciales son <code>0</code>- -<code>9</code>, <code>a</code>- -<code>f</code>, y <code>A</code>- -<code>F</code>. Los d\u00edgitos de Octal son <code>0</code>- -<code>7</code>.</p> <p>Las fugas de entrada de caracteres num\u00e9ricos que especifican  valores fuera del rango ASCII (0o127) tienen significados dependientes  de la codificaci\u00f3n de la base de datos. Cuando la codificaci\u00f3n es UTF-8, los valores de escape son equivalentes a los puntos de c\u00f3digo Unicode,  por ejemplo  <code>\\u1234</code>el car\u00e1cter <code>U+1234</code>. Para otras codificaciones multibyte, las fugas de entrada de caracteres generalmente s\u00f3lo especifican la concatenaci\u00f3n de los valores de byte  para el personaje. Si el valor de escape no se corresponde con ning\u00fan  car\u00e1cter legal en la codificaci\u00f3n de la base de datos, no se plantear\u00e1  ning\u00fan error, pero nunca coincidir\u00e1 con ning\u00fan dato.</p> <p>Los escapes de entrada de personajes se toman siempre como personajes ordinarios. Por ejemplo,  <code>\\135</code>es  <code>]</code>en ASCII, pero  <code>\\135</code>no termina una expresi\u00f3n entre corchetes.</p> <p>Cuadro 9.21 Expresi\u00f3n regular de escapes de clase decoraci\u00f3n</p> Escapar Descripci\u00f3n <code>\\d</code> coincide con cualquier d\u00edgito, como <code>[[:digit:]]</code> <code>\\s</code> coincide con cualquier car\u00e1cter de espacio blanco, como <code>[[:space:]]</code> <code>\\w</code> coincide con cualquier car\u00e1cter de palabra, como <code>[[:word:]]</code> <code>\\D</code> coincide con cualquier no d\u00edgito, como <code>[^[:digit:]]</code> <code>\\S</code> coincide con cualquier car\u00e1cter no-espacial, como <code>[^[:space:]]</code> <code>\\W</code> coincide con cualquier car\u00e1cter que no es palabra, como <code>[^[:word:]]</code> <p>Las fugas de clase-shorthand tambi\u00e9n funcionan entre  par\u00e9ntesis, aunque las definiciones mostrasadas anteriormente no son  totalmente v\u00e1lidas en ese contexto. Por ejemplo,  <code>[a-c\\d]</code>es equivalente a <code>[a-c[:digit:]]</code>.</p> <p>Cuadro 9.22. Exposencia de expresi\u00f3n regular Escapes</p> Escapar Descripci\u00f3n <code>\\A</code> partidos s\u00f3lo al principio de la cadena (ver Secci\u00f3n 9.7.3.5 para c\u00f3mo esto difiere de <code>^</code>) <code>\\m</code> partidos s\u00f3lo al principio de una palabra <code>\\M</code> partidos s\u00f3lo al final de una palabra <code>\\y</code> partidos s\u00f3lo al principio o al final de una palabra <code>\\Y</code> partidos s\u00f3lo en un punto que no es el principio o el final de una palabra <code>\\Z</code> coincidencias s\u00f3lo al final de la cadena (ver Secci\u00f3n 9.7.3.5 para c\u00f3mo esto difiere de <code>$</code>) <p>Una palabra se define como en la especificaci\u00f3n de  <code>[[:&lt;:]]</code>y  <code>[[:&gt;:]]</code>- A arriba. Las fugas de restricciones son ilegales dentro de las expresiones entre corchetes.</p> <p>Cuadro 9.23. Referencias de la expresi\u00f3n regular</p> Escapar Descripci\u00f3n <code>\\</code><code>m</code> (D\u00f3nde  <code>m</code>es un d\u00edgito no cero) una referencia posterior a la <code>m</code>La subexpresi\u00f3n <code>\\</code><code>mnn</code> (D\u00f3nde  <code>m</code>es un d\u00edgito no cero, y  <code>nn</code>es algunos d\u00edgitos m\u00e1s, y el valor decimal  <code>mnn</code>no es mayor que el n\u00famero de par\u00e9ntesis de captura de cierre vistos hasta ahora) una referencia atr\u00e1s a la <code>mnn</code>La subexpresi\u00f3n"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/03.-Expresiones%20Regulares%20POSIX/03.-Expresiones%20Regulares%20de%20Escape/#nota","title":"Nota","text":"<p>Hay una ambiguedad inherente entre las fugas de entrada de  car\u00e1cter octal y las referencias de espalda, que se resuelve por los  siguientes heur\u00edsticos, como se insinu\u00f3 en arriba. Un cero de primera  direcci\u00f3n siempre indica una fuga octal. Un solo d\u00edgito no-cero, no  seguido de otro d\u00edgito, siempre se toma como una referencia de espalda.  Una secuencia de varios d\u00edgitos que no comienza con un cero se toma como referencia tras la espalda si viene despu\u00e9s de una subexpresi\u00f3n  adecuada (es decir, el n\u00famero est\u00e1 en el rango legal para una referencia trasero), y de lo contrario se toma como octal.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/03.-Expresiones%20Regulares%20POSIX/04.-P%C3%A1rrafo.%20La%20expresi%C3%B3n%20REgular%20Metasyntax/","title":"04.-P\u00e1rrafo. La expresi\u00f3n REgular Metasyntax","text":"<p>Adem\u00e1s de la sintaxis principal descrita anteriormente, hay algunas  formas especiales y servicios sint\u00e1cticos diversos disponibles.</p> <p>Una RE puede comenzar con uno de los dos prefijos de director especiales. Si una RE comienza con <code>***:</code>El resto de la RE se toma como un ERE. (Esto normalmente no tiene efecto en PostgreSQL, ya que se supone que los RE son AREs; pero tiene un efecto si el ERE o modo BRE hab\u00eda sido especificado por el  <code>flags</code>par\u00e1metro a una funci\u00f3n de regex.) Si una RE comienza con <code>***=</code>, el resto de la RE se toma como una cadena literal, con todos los personajes considerados caracteres ordinarios.</p> <p>Un SON puede comenzar con opciones incrustados: una secuencia  <code>(?</code><code>xyz</code><code>)</code>(D\u00f3nde  <code>xyz</code>es uno o m\u00e1s caracteres alfab\u00e9ticos) especifica opciones que afectan al  resto de la RE. Estas opciones an\u00fanse de las opciones previamente  determinadas - en particular, pueden anular el comportamiento de la  sensibilidad de caso que implica un operador de regex, o  <code>flags</code>par\u00e1metro a una funci\u00f3n de regex. Las letras de opci\u00f3n disponibles se muestran en el cuadro 9.24. Tenga en cuenta que estas mismas letras de opci\u00f3n se utilizan en el  <code>flags</code>par\u00e1metros de las funciones de regex.</p> <p>Cuadro 9.24. ERE cartas de la Opci\u00f3n enma de aqu\u00ed</p> Opci\u00f3n Descripci\u00f3n <code>b</code> El resto de RE es un BRE <code>c</code> coincidencias sensibles a los casos (tipo de operador de sobrearridas) <code>e</code> El resto de la RE es un ERE <code>i</code> coincidencias sensibles a los casos (v\u00e9ase ) (tipo de operador de anulaci\u00f3n) <code>m</code> sin\u00f3nimo hist\u00f3rico de <code>n</code> <code>n</code> adecuaci\u00f3n sensible a la nueva l\u00ednea (v\u00e9ase ) <code>p</code> adecuaci\u00f3n parcial sensible a la nueva l\u00ednea (v\u00e9ase la secci\u00f3n 9.7.3.5) <code>q</code> El resto de RE es una \u201cquoted\u201dcadena literal, todos los caracteres ordinarios <code>s</code> coincidencias no sensibles a la l\u00ednea (por defecto) <code>t</code> sintaxis apretada (por defecto; v\u00e9ase m\u00e1s abajo) <code>w</code> weirdnueva inversa parcialmente sensible a la l\u00ednea (irra) que coin\u00e1cea (ver secci\u00f3n 9.7.3.5) <code>x</code> sintaxis ampliada (v\u00e9ase m\u00e1s abajo) <p>Opciones empotradas entran en vigor en el  <code>)</code>Terminando la secuencia. S\u00f3lo pueden aparecer al comienzo de un ERE (despu\u00e9s de la  <code>***:</code>director si lo hay).</p> <p>Adem\u00e1s de la sintaxis de RE habitual (apretada), en la que todos los caracteres son significativos, hay una sintaxis ampliada, disponible especificando la  <code>x</code>opci\u00f3n. En la sintaxis expandida, los caracteres del espacio blanco en la RE  son ignorados, al igual que todos los personajes entre un  <code>#</code>y la siguiente nueva l\u00ednea (o el final de la RE). Esto permite el p\u00e1rrafo y el comentario de una RE compleja. Hay tres excepciones a esa regla  b\u00e1sica:</p> <ul> <li>un car\u00e1cter de espacio blanco o  <code>#</code>precedida de  <code>\\</code>se mantiene</li> <li>espacio blanco o  <code>#</code>dentro de una expresi\u00f3n de corchetes se mantiene</li> <li>el espacio blanco y los comentarios no pueden aparecer dentro de s\u00edmbolos de m\u00faltiples caracteres, tales como <code>(?:</code></li> </ul> <p>Para ello, los personajes del espacio blanco est\u00e1n en blanco, pesta\u00f1a, newline, y cualquier car\u00e1cter que pertenezca a la  <code>space</code>clase de personajes.</p> <p>Finalmente, en un ARE, expresiones externas de corchetes, la secuencia  <code>(?#</code><code>ttt</code><code>)</code>(D\u00f3nde  <code>ttt</code>es cualquier texto que no contenga un <code>)</code>) es un comentario, completamente ignorado. Una vez m\u00e1s, esto no est\u00e1  permitido entre los caracteres de s\u00edmbolos multi-car\u00e1cter, como <code>(?:</code>. Tales comentarios son m\u00e1s un artefacto hist\u00f3rico que una instalaci\u00f3n  \u00fatil, y su uso se desprecaba; utilizar la sintaxis expandida en su  lugar.</p> <p>Ninguna de estas extensiones met\u00e1stasis est\u00e1 disponible si una  <code>***=</code>El director ha precisado que la entrada del usuario se trata como una cadena literal m\u00e1s que como RE.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/03.-Expresiones%20Regulares%20POSIX/05.-Reglas%20de%20partido%20de%20Expresiones%20Regulares/","title":"05.-Reglas de partido de Expresiones Regulares","text":"<p>En el caso de que un RE pudiera igualar a m\u00e1s de una cuerda dada, el  RE coincide con el que empieza temprano en la cuerda. Si el RE pudiera  igualar m\u00e1s de una substring a partir de ese momento, se tomar\u00e1 el  partido m\u00e1s largo posible o el partido m\u00e1s corto posible, dependiendo de si el RE es codi\u00f3dizado o no codi\u00f3tido.</p> <p>Si una RE es cod\u00eda o no est\u00e1 determinada por las siguientes reglas:</p> <ul> <li>La mayor\u00eda de los \u00e1tomos, y todas las restricciones, no  tienen atributo de avaricia (porque no pueden igualar las cantidades  variables de texto de todos modos).</li> <li>A\u00f1adir los par\u00e9ntesis alrededor de una RE no cambia su avaricia.</li> <li>Un \u00e1tomo cuantificado con un cuantificador de repetici\u00f3n fija ( <code>{</code><code>m</code><code>}</code>o o <code>{</code><code>m</code><code>}?</code>) tiene la misma avaricia (posiblemente ninguna) que el \u00e1tomo en s\u00ed.</li> <li>Un \u00e1tomo cuantificado con otros cuantificados de otros cuantificados normales (incluyendo  <code>{</code><code>m</code><code>,</code><code>n</code><code>}</code>con  <code>m</code>igual a <code>n</code>) es codi\u00f3vilo (prefiere el partido m\u00e1s largo).</li> <li>Un \u00e1tomo cuantificado con un cuantificador no codido (incluyendo  <code>{</code><code>m</code><code>,</code><code>n</code><code>}?</code>con  <code>m</code>igual a <code>n</code>) no es codi\u00f3dica (preferenca m\u00e1s corto partido).</li> <li>Una rama, es decir, una RE que no tiene un nivel superior  <code>|</code>operadora tiene la misma avaricia que el primer \u00e1tomo cuantificado en \u00e9l que tiene un atributo de codicia.</li> <li>Una RE que consta de dos o m\u00e1s ramas conectadas por la  <code>|</code>El operador siempre es codi\u00f3gre.</li> </ul> <p>Las reglas anteriores asocian atributos de codiceds no s\u00f3lo con \u00e1tomos cuantificados individuales, sino con ramas y RE enteros que  contienen \u00e1tomos cuantificados. Lo que eso significa es que la  coincidencia se hace de tal manera que la rama, o RE entero, coince con  la substring m\u00e1s larga o corta posible en su conjunto. Una vez determinada la duraci\u00f3n de todo el partido, la parte de la  misma que coincide con cualquier subexpresi\u00f3n en particular se determina sobre la base del atributo de la codesidad de esa subexpresi\u00f3n, con  subexpresiones que comienzan antes en el RE teniendo prioridad sobre las que comienzan m\u00e1s tarde.</p> <p>Un ejemplo de lo que esto significa:</p> <pre><code>SELECT SUBSTRING ('XY1234Z', 'Y*([0-9]-1,3-) ');\nResultado: \n123SELECT SUBSTRING ('XY1234Z', 'Y*?([0-9]-1,3o)');\nResultado: \n</code></pre> <p>En el primer caso, la RE en su conjunto es codiciada porque  <code>Y*</code>es codiciada. Puede igualar a partir de la <code>Y</code>, y coincide con la cuerda m\u00e1s larga posible a partir de all\u00ed, es decir, <code>Y123</code>. La salida es la parte entre par\u00e9ntesis de eso, o <code>123</code>. En el segundo caso, la RE en su conjunto no es avaro porque  <code>Y*?</code>no es codiciada. Puede igualar a partir de la <code>Y</code>, y coincide con la cuerda m\u00e1s corta posible a partir de all\u00ed, es decir, <code>Y1</code>. La subexpresi\u00f3n  <code>[0-9]{1,3}</code>es codicia, pero no puede cambiar la decisi\u00f3n en cuanto a la duraci\u00f3n  general del partido; por lo que se ve obligado a igualar s\u00f3lo <code>1</code>.</p> <p>En resumen, cuando un RE contiene subexpresiones tanto avaros  como no avaros, la longitud total de la coincidencia es tan larga como  sea posible o lo m\u00e1s corta posible, de acuerdo con el atributo asignado a toda la RE. Los atributos asignados a las subexpresiones s\u00f3lo afectan  la cantidad de ese acuerdo que se les permite comer - en relaci\u00f3n entre s\u00ed.</p> <p>Los cuantificadores  <code>{1,1}</code>y  <code>{1,1}?</code>se puede utilizar para forzar la codagre o no a la codacia,  respectivamente, en una subexpresi\u00f3n o un todo un RE. Esto es \u00fatil  cuando se necesita todo el RE para tener un atributo de avaricia  diferente de lo que se deduce de sus elementos. Como ejemplo, supongamos que estamos tratando de separar una cuerda que contiene algunos d\u00edgitos en los d\u00edgitos y las partes antes y despu\u00e9s de ellas. Podr\u00edamos  intentar hacerlo as\u00ed:</p> <pre><code>SELECT regexp-match('abc01234xyz', '(.*)(.*) ';\nResultado: {abc0123,4,xyz}\n</code></pre> <p>Eso no funcion\u00f3: el primero  <code>.*</code>es codiciado para que coma tanto como pueda, dejando el  <code>\\d+</code>para igualar en el \u00faltimo lugar posible, el \u00faltimo d\u00edgito. Podr\u00edamos intentar arreglarlo haci\u00e9ndolo no codiciado:</p> <pre><code>SELECT regexp-match('abc01234xyz', '(.*?)(.*)');\nResultado: {abc,0,\"\"}\n</code></pre> <p>Eso tampoco funcion\u00f3, porque ahora el RE en su conjunto no es  codi\u00f3z y as\u00ed termina el partido general lo antes posible. Podemos  conseguir lo que queremos forzando a la RE en su conjunto a ser cod\u00eda:</p> <pre><code>SELECT regexp-match('abc01234xyz', '(?:(.*?)(.d.)(.*)) -1,1');\nResultado: {abc,01234,xyz}\n</code></pre> <p>El control de la coditud general del RE por separado de la  coditud de sus componentes permite una gran flexibilidad en el manejo de patrones de longitud variable.</p> <p>Al decidir qu\u00e9 es un partido m\u00e1s largo o m\u00e1s corto, la longitud de partido se mide en caracteres, no en elementos de recopilaci\u00f3n. Una  cuerda vac\u00eda se considera m\u00e1s larga que no coincide en absoluto. Por  ejemplo:  <code>bb*</code>coincide con los tres personajes medios de <code>abbbc</code>;  <code>(week|wee)(night|knights)</code>coincide con los diez personajes de <code>weeknights</code>; cuando  <code>(.*).*</code>se iguala contra  <code>abc</code>la subexpresi\u00f3n entre par\u00e9ntesis coincide con los tres caracteres; y cuando  <code>(a*)*</code>se iguala contra  <code>bc</code>Tanto todo el RE como la subexpresi\u00f3n entre par\u00e9ntesis coinciden con una cuerda vac\u00eda.</p> <p>Si se especifica la coincidencia independiente de casos, el  efecto es tanto como si todas las distinciones de caso hubieran  desaparecido del alfabeto. Cuando un alfab\u00e9tico que existe en m\u00faltiples  casos aparece como un car\u00e1cter ordinario fuera de una expresi\u00f3n de  corchetes, se transforma efectivamente en una expresi\u00f3n de par\u00e9ntesis  que contiene ambos casos, por ejemplo,  <code>x</code>se convierte <code>[xX]</code>. Cuando aparece dentro de una expresi\u00f3n de corchetes, todos los  hom\u00f3logos de la misma se a\u00f1aden a la expresi\u00f3n entre corchetes, por  ejemplo,  <code>[x]</code>se convierte  <code>[xX]</code>y  <code>[^x]</code>se convierte <code>[^xX]</code>.</p> <p>Si se especifica la coincidencia sensible a la nueva l\u00ednea,  <code>.</code>y de corchetes de expresiones usando  <code>^</code>nunca coincidir\u00e1 con el nuevo car\u00e1cter (por lo que los partidos no cruzar\u00e1n  l\u00edneas a menos que el RE incluya expl\u00edcitamente una nueva l\u00ednea) y  <code>^</code>y  <code>$</code>coincidir\u00e1 con la cuerda vac\u00eda despu\u00e9s y antes de una nueva l\u00ednea respectivamente, adem\u00e1s de igualar al principio y al final de la cuerda,  respectivamente. Pero los ERE se escapan  <code>\\A</code>y  <code>\\Z</code>seguir igualando solo el inicio o el final de la cuerdaonly. Adem\u00e1s, las abreviasas de la clase de personajes  <code>\\D</code>y  <code>\\W</code>coincidir\u00e1 con una nueva l\u00ednea independientemente de este modo. (Antes de PostgreSQL 14, no coinf\u00edan con nuevas l\u00edneas cuando se encontraban en modo sensible a la nueva l\u00ednea. Escribir  <code>[^[:digit:]]</code>o o  <code>[^[:word:]]</code>para conseguir el viejo comportamiento.)</p> <p>Si se especifica la coincidencia parcial sensible a la nueva l\u00ednea, esto afecta  <code>.</code>y las expresiones de par\u00e9ntesis como con una combinaci\u00f3n sensible a la nueva l\u00ednea, pero no  <code>^</code>y <code>$</code>.</p> <p>Si se especifica la coincidencia parcial parcial sensible a la nueva l\u00ednea, esto afecta  <code>^</code>y  <code>$</code>como con una combinaci\u00f3n sensible a la nueva l\u00ednea, pero no  <code>.</code>y las expresiones de entre corchetes. Esto no es muy \u00fatil, pero se proporciona para la simetr\u00eda.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/03.-Expresiones%20Regulares%20POSIX/06.-L%C3%ADmites%20y%20compatibilidad/","title":"06.-L\u00edmites y compatibilidad","text":"<p>No se impone ning\u00fan l\u00edmite particular a la duraci\u00f3n de las RE en esta aplicaci\u00f3n. Sin embargo, los programas destinados a ser altamente  port\u00e1tiles no deben emplear REs m\u00e1s de 256 bytes, ya que una  implementaci\u00f3n compatible con POSIX puede negarse a aceptar tales REs.</p> <p>La \u00fanica caracter\u00edstica de los ERE que en realidad es incompatible con los ERE de POSIX es que  <code>\\</code>no pierde su significado especial dentro de las expresiones de entre  corchetes. Todas las dem\u00e1s caracter\u00edsticas de ARE utilizan sintaxis que  es ilegal o tiene efectos indefinidos o no especificados en los ERE  POSIX;  <code>***</code>Sintaxis de los directores tambi\u00e9n est\u00e1 fuera de la sintaxis POSIX tanto para BRE como para EREs.</p> <p>Muchas de las extensiones de ARE se toman prestadas de Perl,  pero algunas han sido cambiadas para limpiarlas, y algunas extensiones  de Perl no est\u00e1n presentes. Incompatibilidades de nota incluyen <code>\\b</code>, <code>\\B</code>, la falta de un tratamiento especial para una nueva l\u00ednea de  seguimiento, la adici\u00f3n de expresiones de par\u00e9ntesis complementadas a  las cosas afectadas por la coincidencia sensible a la nueva l\u00ednea, las  restricciones sobre los par\u00e9ntesis y las referencias de espalda en las  restricciones de mirada/locucha detr\u00e1s de las restricciones, y la  sem\u00e1ntica m\u00e1s larga/m\u00e1s corta (en lugar de la primera coincidencia)  sem\u00e1ntica coincidente.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/03.-Expresiones%20Regulares%20POSIX/07.-Expresiones%20Regulares%20b%C3%A1sicas/","title":"07.-Expresiones Regulares b\u00e1sicas","text":"<p>Los BRE se diferencian de los ERE en varios aspectos. En BREs, <code>|</code>, <code>+</code>, y  <code>?</code>son caracteres ordinarios y no hay equivalente para su funcionalidad. Los delimitadores para los l\u00edmites son  <code>\\{</code>y <code>\\}</code>, con  <code>{</code>y  <code>}</code>por s\u00ed mismos caracteres ordinarios. Los par\u00e9ntesis para subexpresiones anidados son  <code>\\(</code>y <code>\\)</code>, con  <code>(</code>y  <code>)</code>por s\u00ed mismos caracteres ordinarios.  <code>^</code>es un car\u00e1cter ordinario excepto al principio de la RE o al comienzo de una subexpresi\u00f3n entre par\u00e9ntesis,  <code>$</code>es un car\u00e1cter ordinario excepto al final de la RE o al final de una subexpresi\u00f3n entre par\u00e9ntesis, y  <code>*</code>es un car\u00e1cter ordinario si aparece al principio de la RE o al comienzo de una subexpresi\u00f3n entre par\u00e9ntesis (despu\u00e9s de un posible liderazgo <code>^</code>). Por \u00faltimo, las referencias de un solo d\u00edgito est\u00e1n disponibles, y  <code>\\&lt;</code>y  <code>\\&gt;</code>son sin\u00f3nimos para  <code>[[:&lt;:]]</code>y  <code>[[:&gt;:]]</code>respectivamente; no hay otras fugas disponibles en BREs.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/07.-Emparejado%20de%20patrones/03.-Expresiones%20Regulares%20POSIX/08.-Diferencias%20de%20SQL%20est%C3%A1ndar%20y%20XQuery/","title":"08.-Diferencias de SQL est\u00e1ndar y XQuery","text":"<p>Desde SQL:2008, el est\u00e1ndar SQL incluye operadores de expresi\u00f3n  regulares y funciones que realizan la coincidencia de patrones de  acuerdo con el est\u00e1ndar de expresi\u00f3n regular XQuery:</p> <ul> <li><code>LIKE_REGEX</code></li> <li><code>OCCURRENCES_REGEX</code></li> <li><code>POSITION_REGEX</code></li> <li><code>SUBSTRING_REGEX</code></li> <li><code>TRANSLATE_REGEX</code></li> </ul> <p>PostgreSQL no aplica actualmente estos operadores y funciones. Puede obtener  funcionalidad aproximadamente equivalente en cada caso como se muestra  en la Tabla 9.25. (Se han omitido en este cuadro las cl\u00e1usulas opcionales de ambas partes.)</p> <p>Cuadro 9.25. Funciones de expresi\u00f3n regular Equivalencias</p> SQL est\u00e1ndar PostgreSQL <code>*</code>string<code>* LIKE_REGEX *</code>pattern<code>*</code> <code>regexp_like(*</code>string<code>*, *</code>pattern<code>*)</code>o o <code>OCCURRENCES_REGEX(*</code>pattern<code>* IN *</code>string<code>*)</code> <code>regexp_count(*</code>string<code>*, *</code>pattern<code>*)</code> <code>POSITION_REGEX(*</code>pattern<code>* IN *</code>string<code>*)</code> <code>regexp_instr(*</code>string<code>*, *</code>pattern<code>*)</code> <code>SUBSTRING_REGEX(*</code>pattern<code>* IN *</code>string<code>*)</code> <code>regexp_substr(*</code>string<code>*, *</code>pattern<code>*)</code> <code>TRANSLATE_REGEX(*</code>pattern<code>* IN *</code>string<code>* WITH *</code>replacement<code>*)</code> <code>regexp_replace(*</code>string<code>*, *</code>pattern<code>*, *</code>replacement<code>*)</code> <p>Las funciones de expresi\u00f3n regulares similares a las  proporcionadas por PostgreSQL tambi\u00e9n est\u00e1n disponibles en varias otras  implementaciones de SQL, mientras que las funciones est\u00e1ndar de SQL no  se aplican tan ampliamente. Algunos de los detalles de la sintaxis de  expresi\u00f3n regular probablemente difieran en cada implementaci\u00f3n.</p> <p>Los operadores y funciones est\u00e1ndar SQL utilizan expresiones  regulares XQuery, que est\u00e1n bastante cerca de la sintaxis ARE descrita  anteriormente. Las diferencias notables entre la caracter\u00edstica de  expresi\u00f3n regular existente basada en POSIX y las expresiones regulares  de XQuery incluyen:</p> <ul> <li>La resta de clase de caracteres XQuery no es compatible.  Un ejemplo de esta caracter\u00edstica es el uso de los siguientes para que  coinf\u00e1cenas s\u00f3lo en ingl\u00e9s: <code>[a-z-[aeiou]]</code>.</li> <li>XQuery clase de personajes abreviatura <code>\\c</code>, <code>\\C</code>, <code>\\i</code>, y  <code>\\I</code>no est\u00e1n respaldados.</li> <li>XQuery elementos de la clase de caracteres usando  <code>\\p{UnicodeProperty}</code>o el inverso  <code>\\P{UnicodeProperty}</code>no est\u00e1n respaldados.</li> <li>POSIX interpreta clases de caracteres como  <code>\\w</code>(ver Tabla 9.21) seg\u00fan el lugar prevaleciente (que se puede controlar mediante la fijaci\u00f3n de un  <code>COLLATE</code>cl\u00e1usula al operador o funci\u00f3n). XQuery especifica estas clases por referencia a las propiedades de car\u00e1cter Unicode, por lo que el comportamiento  equivalente se obtiene s\u00f3lo con un lugare que sigue las reglas de  Unicode.</li> <li>El est\u00e1ndar SQL (no XQuery en s\u00ed) intenta atender m\u00e1s variantes de la l\u00ednea nueva que el POSIX. Las opciones de empareja sensibles a la nueva l\u00ednea descritas anteriormente s\u00f3lo tienen en cuenta ASCII NL (<code>\\n</code>) para ser una l\u00ednea nueva, pero SQL nos har\u00eda tratar CR (<code>\\r</code>), CRLF (<code>\\r\\n</code>) (una nueva l\u00ednea al estilo de Windows), y algunos personajes solo  Unicode como LINE SEPARATOR (U-2028) como nuevas l\u00edneas tambi\u00e9n. En  particular,  <code>.</code>y  <code>\\s</code>debe contar  <code>\\r\\n</code>como un personaje no dos seg\u00fan SQL.</li> <li>De los escapes de entrada de caracteres descritos en la Tabla 9.20, XQuery soporta solamente <code>\\n</code>, <code>\\r</code>, y <code>\\t</code>.</li> <li>XQuery no apoya el  <code>[:*</code>name<code>*:]</code>sintaxis para las clases de caracteres dentro de las expresiones de bracket.</li> <li>XQuery no tiene mirada o de detr\u00e1s de las restricciones, ni ninguno de los escapes de restricci\u00f3n descritos en la Tabla 9.22.</li> <li>Los formularios de met\u00e1stasis descrito en  no existen en XQuery.</li> <li>Las letras de la bandera de expresi\u00f3n regulares definidas por XQuery est\u00e1n relacionadas pero no las mismas que las letras de  opci\u00f3n para POSIX (Tabla 9.24). Mientras que el  <code>i</code>y  <code>q</code>las opciones se comportan igual, otros no:</li> <li>XQuery's  <code>s</code>(perseguir que el punto coincida con la nueva l\u00ednea) y  <code>m</code>(que se permite  <code>^</code>y  <code>$</code>para que coincida con l\u00edneas nuevas) las banderas proporcionan acceso a los mismos comportamientos que el de POSIX <code>n</code>,  <code>p</code>y  <code>w</code>banderas, pero no coinciden con el comportamiento de POSIX's  <code>s</code>y  <code>m</code>banderas. Tenga en cuenta que la l\u00ednea de puntos-mateches-newline es el comportamiento predeterminado en POSIX pero no XQuery.</li> <li>XQuery's  <code>x</code>(Espacia blanca de ignore en patr\u00f3n) la bandera de la bandera de modo expandido de POSIX. POSIX's  <code>x</code>la bandera tambi\u00e9n permite  <code>#</code>para comenzar un comentario en el patr\u00f3n, y POSIX no ignorar\u00e1 un car\u00e1cter de espacio en blanco despu\u00e9s de una reacci\u00f3n.</li> </ul>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/09.-Funciones%20y%20Operadores%20de%20Fecha-Hora/","title":"Index","text":"<p>En el cuadro 9.33 se indican las funciones disponibles para el procesamiento de la  fecha/precio, con detalles que aparecen en las subsecciones siguientes. La Tabla 9.32 ilustra los comportamientos de los operadores de aritm\u00e9tica b\u00e1sica (<code>+</code>, <code>*</code>, etc.). Para las funciones de formatizaci\u00f3n, v\u00e9ase la secci\u00f3n 9.8. Usted debe estar familiarizado con la informaci\u00f3n de antecedentes sobre los tipos de datos fecha/hora de la Secci\u00f3n 8.5.</p> <p>Adem\u00e1s, los operadores de comparaci\u00f3n habituales que se muestran en el  est\u00e1n disponibles para los tipos de fecha/hora. Las fechas y marcas  (con o sin huso horario) son comparables, mientras que los tiempos (con o sin zona horaria) y los intervalos s\u00f3lo pueden compararse con otros  valores del mismo tipo de datos. Al comparar una marca de tiempo sin  zona horaria con una marca de tiempo con huso horario, se supone que el  valor anterior se da en el huso horario especificado por el par\u00e1metro de configuraci\u00f3n de TimeZone, y se gira a UTC para compararlo con el segundo valor (que ya est\u00e1 en  UTC internamente). Del mismo modo, se supone que un valor de fecha  representa la medianoche en el  <code>TimeZone</code>zona al compararlo con una marca de tiempo.</p> <p>Todas las funciones y operadores descritos a continuaci\u00f3n que se llevan  <code>time</code>o o  <code>timestamp</code>entradas en realidad vienen en dos variantes: una que toma  <code>time with time zone</code>o o <code>timestamp with time zone</code>, y uno que toma  <code>time without time zone</code>o o <code>timestamp without time zone</code>. Para la brevedad, estas variantes no se muestran por separado. Tambi\u00e9n, el  <code>+</code>y  <code>*</code>los operadores vienen en parejas conmutadoras (por ejemplo, ambos    <code>date``+``integer</code>y   <code>integer``+``date</code>); s\u00f3lo mostramos uno de cada uno de esos pares.</p> <p>Cuadro 9.32. Operadores de fechas/ohora</p> Operadora              Descripci\u00f3n              Ejemplos (s) <code>date``+``integer</code>- <code>date</code>              A\u00f1adir varios d\u00edas a una fecha               <code>date '2001-09-28' + 7</code>- <code>date``+``interval</code>- <code>timestamp</code>              A\u00f1adir un intervalo a una fecha               <code>date '2001-09-28' + interval '1 hour'</code>- <code>date``+``time</code>- <code>timestamp</code>              A\u00f1adir un tiempo de d\u00eda a una fecha               <code>date '2001-09-28' + time '03:00'</code>- <code>interval``+``interval</code>- <code>interval</code>              A\u00f1adir intervalos               <code>interval '1 day' + interval '1 hour'</code>- <code>timestamp``+``interval</code>- <code>timestamp</code>              A\u00f1adir un intervalo a una marca de tiempo               <code>timestamp '2001-09-28 01:00' + interval '23 hours'</code>- <code>time``+``interval</code>- <code>time</code>              A\u00f1adir un intervalo a una hora               <code>time '01:00' + interval '3 hours'</code>- <code>-``interval</code>- <code>interval</code>              Negate un intervalo               <code>- interval '23 hours'</code>- <code>date``-``date</code>- <code>integer</code>              Resta las fechas, produciendo el n\u00famero de d\u00edas transcurridos               <code>date '2001-10-01' - date '2001-09-28'</code>- <code>date``-``integer</code>- <code>date</code>              Resta varios d\u00edas a partir de una fecha               <code>date '2001-10-01' - 7</code>- <code>date``-``interval</code>- <code>timestamp</code>              Resta un intervalo de una fecha               <code>date '2001-09-28' - interval '1 hour'</code>- <code>time``-``time</code>- <code>interval</code>              Tiempos de sutracci\u00f3n               <code>time '05:00' - time '03:00'</code>- <code>time``-``interval</code>- <code>time</code>              Resta un intervalo de un tiempo               <code>time '05:00' - interval '2 hours'</code>- <code>timestamp``-``interval</code>- <code>timestamp</code>              Resta un intervalo de una marca de tiempo               <code>timestamp '2001-09-28 23:00' - interval '23 hours'</code>- <code>interval``-``interval</code>- <code>interval</code>              Inter intervalos de sutracci\u00f3n               <code>interval '1 day' - interval '1 hour'</code>- <code>timestamp``-``timestamp</code>- <code>interval</code>              Sutembres de tiempo (convertir intervalos de 24 horas en d\u00edas, de manera similar a <code>justify_hours()</code>)               <code>timestamp '2001-09-29 03:00' - timestamp '2001-07-27 12:00'</code>- <code>interval``*``double precision</code>- <code>interval</code>              Multiply un intervalo por un escalar               <code>interval '1 second' * 900</code>-                <code>interval '1 day' * 21</code>-                <code>interval '1 hour' * 3.5</code>- <code>interval``/``double precision</code>- <code>interval</code>              Divide un intervalo por un escalar               <code>interval '1 hour' / 1.5</code>- <p>Cuadro 9.33. Fecha/Funciona las funciones del tiempo</p> Funci\u00f3n              Descripci\u00f3n              Ejemplos (s) <code>age</code>( <code>timestamp</code>,  <code>timestamp</code>) . <code>interval</code>              Resta los argumentos, produciendo un symbolicresultado simb\u00f3lico que utiliza a\u00f1os y meses, en lugar de s\u00f3lo d\u00edas               <code>age(timestamp '2001-04-10', timestamp '1957-06-13')</code>- <code>age</code>(  <code>timestamp</code>) .               Sustracto desactivar de  <code>current_date</code>(a medianoche)               <code>age(timestamp '1957-06-13')</code>- <code>clock_timestamp</code>() <code>timestamp with time zone</code>              Fecha y hora actuales (cambios durante la ejecuci\u00f3n de la declaraci\u00f3n); v\u00e9ase la secci\u00f3n 9.9.5 <code>clock_timestamp()</code>- <code>current_date</code>- <code>date</code>              Fecha actual; v\u00e9ase la secci\u00f3n 9.9.5 <code>current_date</code>- <code>current_time</code>- <code>time with time zone</code>              Hora actual del d\u00eda; v\u00e9ase la secci\u00f3n 9.9.5 <code>current_time</code>- <code>current_time</code>(  <code>integer</code>) .               Hora actual del d\u00eda, con precisi\u00f3n limitada; v\u00e9ase la secci\u00f3n 9.9.5 <code>current_time(2)</code>- <code>current_timestamp</code>- <code>timestamp with time zone</code>              Fecha y hora actuales (inicio de la transacci\u00f3n actual); v\u00e9ase la secci\u00f3n 9.9.5 <code>current_timestamp</code>- <code>current_timestamp</code>(  <code>integer</code>) .               Fecha y hora actuales (inicio de la transacci\u00f3n actual), con precisi\u00f3n limitada; v\u00e9ase la secci\u00f3n 9.9.5 <code>current_timestamp(0)</code>- <code>date_add</code>( <code>timestamp with time zone</code>,  <code>interval</code>[,  <code>text</code>] . <code>timestamp with time zone</code>              A\u00f1adir un  <code>interval</code>a a <code>timestamp with time zone</code>, horas de comcomputaci\u00f3n de ajustes de ahorro de luz diurna de acuerdo  con el huso horario nombrado por el tercer argumento, o la configuraci\u00f3n actual de TimeZone si se omite. La forma con dos argumentos es equivalente a la    <code>timestamp with time zone``+``interval</code>operador.               <code>date_add('2021-10-31 00:00:00+02'::timestamptz, '1 day'::interval, 'Europe/Warsaw')</code>- <code>date_bin</code>( <code>interval</code>, <code>timestamp</code>,  <code>timestamp</code>) .               Entrada de la papel en el intervalo especificado alineado con el origen especificado; v\u00e9ase la secci\u00f3n 9.9.3 <code>date_bin('15 minutes', timestamp '2001-02-16 20:38:40', timestamp '2001-02-16 20:05:00')</code>- <code>date_part</code>( <code>text</code>,  <code>timestamp</code>) . <code>double precision</code>              Obs\u00fare el subcampo de marca de tiempo (equivalente a <code>extract</code>); v\u00e9ase la secci\u00f3n 9.9.1 <code>date_part('hour', timestamp '2001-02-16 20:38:40')</code>- <code>date_part</code>( <code>text</code>,  <code>interval</code>) .               Obste subcampo de intervalo (equivalente a <code>extract</code>); v\u00e9ase la secci\u00f3n 9.9.1 <code>date_part('month', interval '2 years 3 months')</code>- <code>date_subtract</code>( <code>timestamp with time zone</code>,  <code>interval</code>[,  <code>text</code>] . <code>timestamp with time zone</code>              Sustrador  <code>interval</code>de a <code>timestamp with time zone</code>, horas de comcomputaci\u00f3n de ajustes de ahorro de luz diurna de acuerdo  con el huso horario nombrado por el tercer argumento, o la configuraci\u00f3n actual de TimeZone si se omite. La forma con dos argumentos es equivalente a la    <code>timestamp with time zone``-``interval</code>operador.               <code>date_subtract('2021-11-01 00:00:00+01'::timestamptz, '1 day'::interval, 'Europe/Warsaw')</code>- <code>date_trunc</code>( <code>text</code>,  <code>timestamp</code>) . <code>timestamp</code>              Truncate a precisi\u00f3n especificada; v\u00e9ase la Secci\u00f3n 9.9.2 <code>date_trunc('hour', timestamp '2001-02-16 20:38:40')</code>- <code>date_trunc</code>( <code>text</code>, <code>timestamp with time zone</code>,  <code>text</code>) .               Truncate a precisi\u00f3n especificada en el huso horario especificado; v\u00e9ase la secci\u00f3n 9.9.2 <code>date_trunc('day', timestamptz '2001-02-16 20:38:40+00', 'Australia/Sydney')</code>- <code>date_trunc</code>( <code>text</code>,  <code>interval</code>) .               Truncate a precisi\u00f3n especificada; v\u00e9ase la Secci\u00f3n 9.9.2 <code>date_trunc('hour', interval '2 days 3 hours 40 minutes')</code>- <code>extract</code>(    <code>field</code><code>from``timestamp</code>) . <code>numeric</code>              Obs\u00fabese de tiempoampeado de subcampo; vea Secci\u00f3n 9.9.1 <code>extract(hour from timestamp '2001-02-16 20:38:40')</code>- <code>extract</code>(    <code>field</code><code>from``interval</code>) . <code>numeric</code>              Obste subcampo del intervalo; vea Secci\u00f3n 9.9.1 <code>extract(month from interval '2 years 3 months')</code>- <code>isfinite</code>(  <code>date</code>) . <code>boolean</code>              Prueba de fecha finita (no/infinito)               <code>isfinite(date '2001-02-16')</code>- <code>isfinite</code>(  <code>timestamp</code>) .               Prueba de la marca de tiempo finito (no/infinito)               <code>isfinite(timestamp 'infinity')</code>- <code>isfinite</code>(  <code>interval</code>) .               Prueba para el intervalo finito (actualmente siempre true)               <code>isfinite(interval '4 hours')</code>- <code>justify_days</code>(  <code>interval</code>) . <code>interval</code>              Ajuste de intervalo para que los per\u00edodos de tiempo de 30 d\u00edas se representen como meses               <code>justify_days(interval '35 days')</code>- <code>justify_hours</code>(  <code>interval</code>) . <code>interval</code>              Ajuste de los intervalos para que los per\u00edodos de tiempo de 24 horas se representen como d\u00edas               <code>justify_hours(interval '27 hours')</code>- <code>justify_interval</code>(  <code>interval</code>) . <code>interval</code>              Ajuste el intervalo de uso  <code>justify_days</code>y <code>justify_hours</code>, con ajustes adicionales de se\u00f1al               <code>justify_interval(interval '1 mon -1 hour')</code>- <code>localtime</code>- <code>time</code>              Hora actual del d\u00eda; v\u00e9ase la secci\u00f3n 9.9.5 <code>localtime</code>- <code>localtime</code>(  <code>integer</code>) .               Hora actual del d\u00eda, con precisi\u00f3n limitada; v\u00e9ase la secci\u00f3n 9.9.5 <code>localtime(0)</code>- <code>localtimestamp</code>- <code>timestamp</code>              Fecha y hora actuales (inicio de la transacci\u00f3n actual); v\u00e9ase la secci\u00f3n 9.9.5 <code>localtimestamp</code>- <code>localtimestamp</code>(  <code>integer</code>) .               Fecha y hora actuales (inicio de la transacci\u00f3n actual), con precisi\u00f3n limitada; v\u00e9ase la secci\u00f3n 9.9.5 <code>localtimestamp(2)</code>- <code>make_date</code>(  <code>year</code><code>int</code>,  <code>month</code><code>int</code>,   <code>day</code><code>int</code>) . <code>date</code>              Crear una fecha de los campos de a\u00f1o, mes y d\u00eda (a\u00f1os negativos significan BC)               <code>make_date(2013, 7, 15)</code>- <code>make_interval</code>( [   <code>years</code><code>int</code>[,   <code>months</code><code>int</code>[,   <code>weeks</code><code>int</code>[,   <code>days</code><code>int</code>[,   <code>hours</code><code>int</code>[,   <code>mins</code><code>int</code>[,   <code>secs</code><code>double precision</code>]]]]]]]]]] ) <code>interval</code>              Crear intervalo de a\u00f1os, meses, semanas, d\u00edas, horas,  minutos y segundos campos, cada uno de los cuales puede predeterminar a  cero               <code>make_interval(days =&gt; 10)</code>- <code>make_time</code>(  <code>hour</code><code>int</code>,  <code>min</code><code>int</code>,   <code>sec</code><code>double precision</code>) . <code>time</code>              Crear tiempo a partir de campos de hora, minuto y segundos               <code>make_time(8, 15, 23.5)</code>- <code>make_timestamp</code>(  <code>year</code><code>int</code>,  <code>month</code><code>int</code>,  <code>day</code><code>int</code>,  <code>hour</code><code>int</code>,  <code>min</code><code>int</code>,   <code>sec</code><code>double precision</code>) . <code>timestamp</code>              Crear estampado de tiempo a partir de los campos a\u00f1o, mes, d\u00eda, hora, minuto y segundos (los a\u00f1os negativos significan BC)               <code>make_timestamp(2013, 7, 15, 8, 15, 23.5)</code>- <code>make_timestamptz</code>(  <code>year</code><code>int</code>,  <code>month</code><code>int</code>,  <code>day</code><code>int</code>,  <code>hour</code><code>int</code>,  <code>min</code><code>int</code>,   <code>sec</code><code>double precision</code>[,   <code>timezone</code><code>text</code>] . <code>timestamp with time zone</code>              Cree estampado de tiempo con hundi/h\u00fangido a partir del a\u00f1o, mes, d\u00eda, hora, minuto y segundo campos (los a\u00f1os negativos  significan BC). Si  <code>timezone</code>no se especifica, se utiliza el huso horario actual; los ejemplos asumen que el huso horario de la sesi\u00f3n es <code>Europe/London</code> <code>make_timestamptz(2013, 7, 15, 8, 15, 23.5)</code>-                <code>make_timestamptz(2013, 7, 15, 8, 15, 23.5, 'America/New_York')</code>- <code>now</code>() <code>timestamp with time zone</code>              Fecha y hora actuales (inicio de la transacci\u00f3n actual); v\u00e9ase la secci\u00f3n 9.9.5 <code>now()</code>- <code>statement_timestamp</code>() <code>timestamp with time zone</code>              Fecha y hora actuales (inicio de la presente declaraci\u00f3n); v\u00e9ase la secci\u00f3n 9.9.5 <code>statement_timestamp()</code>- <code>timeofday</code>() <code>text</code>              Fecha y hora actuales (como <code>clock_timestamp</code>, pero como un  <code>text</code>en la secci\u00f3n 9.9.5 <code>timeofday()</code>- <code>transaction_timestamp</code>() <code>timestamp with time zone</code>              Fecha y hora actuales (inicio de la transacci\u00f3n actual); v\u00e9ase la secci\u00f3n 9.9.5 <code>transaction_timestamp()</code>- <code>to_timestamp</code>(  <code>double precision</code>) . <code>timestamp with time zone</code>              Convertir Unaix epoch (segundos desde 1970-01-01 00:00:00-00) a marca de tiempo con hunidad               <code>to_timestamp(1284352323)</code>- <p>Adem\u00e1s de estas funciones, el SQL  <code>OVERLAPS</code>Se admite a operador:</p> <pre><code>(start1, end1) OVERLAPS (start2, end2)\n(start1, length1) OVERLAPS (start2, length2)\n</code></pre> <p>Esta expresi\u00f3n se produce verdadera cuando se superponen dos  per\u00edodos de tiempo (definidos por sus puntos finales), falsos cuando no  se superponen. Los endpoints se pueden especificar como pares de fechas, horarios o sellos de tiempo; o como fecha, hora o sello de tiempo  seguido de un intervalo. Cuando se proporciona un par de valores, el  comienzo o el final se puede escribir primero;  <code>OVERLAPS</code>toma autom\u00e1ticamente el valor anterior del par como el comienzo. Cada  per\u00edodo de tiempo se considera que representa el intervalo semiabierto     <code>start</code><code>&lt;=</code><code>time</code><code>&lt;</code><code>end</code>A menos que  <code>start</code>y  <code>end</code>son iguales en cuyo caso representa ese instante de una sola vez. Esto  significa, por ejemplo, que dos per\u00edodos de tiempo con s\u00f3lo un punto  final en com\u00fan no se superponen.</p> <pre><code>SELECT (DATE '2001-02-16', FECHA '2001-12-21') OVERLAPS\n       (DATE '2001-10-30', FECHA '2002-10-30');\nResultado: \ntrueSELECT (DATE '2001-02-16', INTERVAL '100 days') OVERLAPS\n       (DATE '2001-10-30', FECHA '2002-10-30');\nResultado: \nfalseSELECT (DATE '2001-10-29', FECHA '2001-10-30') OVERLAPS\n       (DATE '2001-10-30', FECHA '2001-10-31');\nResultado: \nSELECT (DATE '2001-10-30', FECHA '2001-10-30') OVERLAPS\n       (DATE '2001-10-30', FECHA '2001-10-31');\n\n</code></pre> <p>Al a\u00f1adir un  <code>interval</code>valor a (o restando un  <code>interval</code>valor de) a  <code>timestamp</code>o o  <code>timestamp with time zone</code>valor, los meses, d\u00edas y microsegundos campos de la  <code>interval</code>El valor se maneja a su vez. En primer lugar, un campo de campo no dentro  de meses o decrementa la fecha de la marca de tiempo por el n\u00famero  indicado de meses, manteniendo el d\u00eda del mes el mismo a menos que  pasara el final del nuevo mes, en cuyo caso se utiliza el \u00faltimo d\u00eda de  ese mes. (Por ejemplo, el 31 de marzo m\u00e1s 1 mes se convierte en el 30 de abril, pero el 31 de marzo m\u00e1s 2 meses se convierte en mayo 31.) A  continuaci\u00f3n, los d\u00edas de los d\u00edas avancen o decrepen la fecha de la  marca de tiempo por el n\u00famero indicado de d\u00edas. En estos dos pasos la  hora local del d\u00eda se mantiene igual. Por \u00faltimo, si hay un campo de  microsegundos no cero, se a\u00f1ade o se resta literalmente. Cuando se hace  aritm\u00e9tica en un  <code>timestamp with time zone</code>valor en un huso horario que reconoce DST, esto significa que a\u00f1adir o restar (digiera)  <code>interval '1 day'</code>no necesariamente tiene el mismo resultado que a\u00f1adir o restar <code>interval '24 hours'</code>. Por ejemplo, con la zona horaria de sesi\u00f3n fijada en <code>America/Denver</code>:</p> <pre><code>de tiempo SELECT con zona horaria '2005-04-02 12:00-07' Intervalo '1 d\u00eda';\nResultado: \n2005-04-03 12:00:00-06De la zona horaria de SELECT con zona horaria '2005-04-02 12:00-07' intervalo '24 horas';\nResultado: \n</code></pre> <p>Esto sucede porque una hora se salt\u00f3 debido a un cambio en el horario de verano en  <code>2005-04-03 02:00:00</code>en zona horaria <code>America/Denver</code>.</p> <p>Tenga en cuenta que puede haber ambiguedad en el  <code>months</code>campo devuelto por  <code>age</code>porque los meses diferentes tienen diferentes n\u00fameros de d\u00edas. El enfoque PostgreSQL utiliza el mes desde el principio de las dos fechas al calcular los meses parciales. Por ejemplo,  <code>age('2004-06-01', '2004-04-30')</code>utiliza abril para ceder <code>1 mon 1 day</code>, mientras que el uso de Mayo ceder\u00eda  <code>1 mon 2 days</code>porque mayo tiene 31 d\u00edas, mientras que abril tiene s\u00f3lo 30.</p> <p>La sutracci\u00f3n de fechas y marcas de tiempo tambi\u00e9n puede ser  compleja. Una forma conceptualmente simple de realizar la resta es  convertir cada valor en un n\u00famero de segundos usando <code>EXTRACT(EPOCH FROM ...)</code>, entonces restar los resultados; esto produce el n\u00famero de segundos entre los dos valores. Esto se ajustar\u00e1 para el n\u00famero de d\u00edas en cada  mes, cambios en la zona horaria y ajustes de horarios de verano.  Sutracci\u00f3n de los valores de fecha o de marca de horario con el<code>-</code>El operador devuelve el n\u00famero de d\u00edas (24 horas) y horas/minutos/segundos entre los valores, haciendo los mismos ajustes. El  <code>age</code>funci\u00f3n devuelve a\u00f1os, meses, d\u00edas y horas/minutos/segundos, realizando resta  de campo por campo y luego ajustando para valores de campo negativos.  Las siguientes consultas ilustran las diferencias en estos enfoques. Los resultados de la muestra se produjeron con <code>timezone = 'US/Eastern'</code>; hay un cambio de horario de verano entre las dos fechas utilizadas:</p> <pre><code>SELECT EXTRACT(EPOCH FROM timestamptz '2013-07-01 12:00:00') -\n       EXTRACT(EPOCH FROM timestamptz '2013-03-01 12:00:00');\nResult: 10537200.000000\nSELECT (EXTRACT(EPOCH FROM timestamptz '2013-07-01 12:00:00') -\n        EXTRACT(EPOCH FROM timestamptz '2013-03-01 12:00:00'))\n        / 60 / 60 / 24;\nResult: 121.9583333333333333\nSELECT timestamptz '2013-07-01 12:00:00' - timestamptz '2013-03-01 12:00:00';\nResult: 121 days 23:00:00\nSELECT age(timestamptz '2013-07-01 12:00:00', timestamptz '2013-03-01 12:00:00');\nResult: 4 mons\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/09.-Funciones%20y%20Operadores%20de%20Fecha-Hora/01.-EXTRACT%2C%20date_part/","title":"01.-EXTRACT, date_part","text":"<pre><code>EXTRACT ( fieldDe los DE source)\n</code></pre> <p>El  <code>extract</code>funci\u00f3n recupera subcampos como a\u00f1o o hora a partir de los valores de fecha/hora.  <code>source</code>debe ser una expresi\u00f3n de valor del tipo <code>timestamp</code>, <code>time</code>, o <code>interval</code>. (Expresiones de tipo  <code>date</code>se eligen a  <code>timestamp</code>y por lo tanto tambi\u00e9n se puede utilizar.)  <code>field</code>es un identificador o cadena que selecciona qu\u00e9 campo extraer del valor de origen. El  <code>extract</code>funci\u00f3n devuelve los valores de tipo <code>numeric</code>. Los siguientes son nombres de campo v\u00e1lidos:</p> <ul> <li><code>century</code></li> </ul> <p>\u200b          El siglo          <code>SELECT EXTRACT (CENTURY DE TIMESTAMP '2000-12-16 12:21:13'); *Resultado:*  20SELECT EXTRACT (CENTURY DE TIMESTAMP '2001-02-16 20:38:40'); *Resultado:*</code>          El primer siglo comienza en 0001-01-01 00:00:00 d.C.,  aunque no lo sab\u00edan en ese momento. Esta definici\u00f3n se aplica a todos  los pa\u00edses del calendario gregoriano. No hay un siglo 0, se va del siglo -1 al siglo 1. Si no est\u00e1 de acuerdo con esto, por favor escriba su  queja a: Papa, Catedral Saint-Peter de Roma, Vaticano.        </p> <ul> <li><code>day</code></li> </ul> <p>\u200b          Para  <code>timestamp</code>valores, el campo del d\u00eda (del mes) (1o31) , para  <code>interval</code>valores, el n\u00famero de d\u00edas          <code>EXTRATC DE SELECT (DAY DE TIMESTAMP '2001-02-16 20:38:40'); *Resultado:*  16SELECT EXTRACT (DACCION DE INTERVAL '40 d\u00edas 1 minuto'); *Resultado:*</code> </p> <ul> <li><code>decade</code></li> </ul> <p>\u200b          El campo del a\u00f1o dividido por 10          <code>SELECT EXTRACT (DECADE OF TIMESTAMP '2001-02-16 20:38:40'); *Resultado:* 200</code> </p> <ul> <li><code>dow</code></li> </ul> <p>\u200b          El d\u00eda de la semana como domingo (<code>0</code>) al s\u00e1bado (<code>6</code>)          <code>SELECT EXTRACT (DOW OF TIMESTAMP '2001-02-16 20:38:40'); *Resultado:* 5</code>          Tenga en cuenta que <code>extract</code>el d\u00eda de la semana de la numeraci\u00f3n difiere del  <code>to_char(..., 'D')</code>funci\u00f3n.        </p> <ul> <li><code>doy</code></li> </ul> <p>\u200b          El d\u00eda del a\u00f1o (1o365/366)          <code>SELECT EXTRACT (DOY OF TIMESTAMP '2001-02-16 20:38:40'); *Resultado:* 47</code> </p> <ul> <li><code>epoch</code></li> </ul> <p>\u200b          Para  <code>timestamp with time zone</code>valores, el n\u00famero de segundos desde 1970-01-01 00:00:00 UTC (negativo para las marcas de tiempo anteriores); para  <code>date</code>y  <code>timestamp</code>valores, el n\u00famero nominal de segundos desde 1970-01-01 00:00:00, sin tener en  cuenta las reglas de horario o salvamento de luz; para  <code>interval</code>valores, el n\u00famero total de segundos en el intervalo          <code>EXTRATO DE SELECT (EPOCH OF TIMESTAMP CON TIEMPO ZONE '2001-02-16 20:38:40.12-08'); *Resultado:*  982384720.120000SELECT EXTRACT (EPOCH OF TIMESTAMP '2001-02-16 20:38:40.12'); *Resultado:*  982355920.120000EXTRACT SELECT (EPOCH FROM INTERVAL '5 d\u00edas 3 horas');</code>          Puede convertir un valor de \u00e9poca de nuevo a  <code>timestamp with time zone</code>con <code>to_timestamp</code>:          <code>SELECT to-timestamp (9892384720.12); *Resultado:* 2001-02-17 04:38:40.12+00</code>          Cuidado con que se aplica  <code>to_timestamp</code>a una \u00e9poca extra\u00edda de un  <code>date</code>o o  <code>timestamp</code>el valor podr\u00eda producir un resultado enga\u00f1oso: el resultado asumir\u00e1  efectivamente que el valor original se hab\u00eda dado en UTC, lo que podr\u00eda  no ser el caso.        </p> <ul> <li><code>hour</code></li> </ul> <p>\u200b          El campo de horas (0-23)          <code>SELECT EXTRACT (HOR DE TIMESTAMP '2001-02-16 20:38:40'); *Resultado:* 20</code> </p> <ul> <li><code>isodow</code></li> </ul> <p>\u200b          El d\u00eda de la semana como lunes (<code>1</code>) hasta el domingo (<code>7</code>)          <code>SELECT EXTRACT (ISODOW DE TIMESTAMP '2001-02-18 20:38:40'); *Resultado:* 7</code>          Esto es id\u00e9ntico a  <code>dow</code>Excepto el domingo. Esto coincide con el  ISO8601 d\u00eda de la semana de numeraci\u00f3n.        </p> <ul> <li><code>isoyear</code></li> </ul> <p>\u200b          El  ISO8601 a\u00f1o de n\u00famero de la semana en que la fecha cae (no aplicable a intervalos)          <code>EXTRATO EXTRATO DE SELECT (ISOYEAR DE FECHA '2006-01-01'); *Resultado:*  2005EXTRACT DE SELECT (ISOYEAR de FECHA '2006-01-02'); *Resultado:*</code>          Cada uno  ISO8601 semana-n\u00famero a\u00f1o comienza con el lunes de la semana que contiene el 4  de enero, por lo que a principios de enero o finales de diciembre el  ISOa\u00f1o puede ser diferente del a\u00f1o gregoriano. Ver el  <code>week</code>campo para m\u00e1s informaci\u00f3n.          Este campo no est\u00e1 disponible en versiones de PostgreSQL antes de 8.3.        </p> <ul> <li><code>julian</code></li> </ul> <p>\u200b          La fecha de Julian correspondiente a la fecha o la marca de tiempo (no aplicable a los  intervalos). Las marcas que no son locales de medianoche resultan en un  valor fraccional. V\u00e9ase la secci\u00f3n B.7 para m\u00e1s informaci\u00f3n.          <code>SELECT EXTRACT (JULIAN DE FECHA '2006-01-01'); *Resultado:*  2453737SELECT EXTRACT (JULIAN DE TIMESTAMP '2006-01-01 12:00'); *Resultado:*</code> </p> <ul> <li><code>microseconds</code></li> </ul> <p>\u200b          El campo de segundos, incluyendo partes fraccionarias, se  multiplic\u00f3 por 1 000 000; tenga en cuenta que esto incluye segundos  completos          <code>SELECT EXTRACT (MICROSECONDS DE TIEMPO '17:12:28.5'); *Resultado:* 28500000</code> </p> <ul> <li><code>millennium</code></li> </ul> <p>\u200b          El milenio          <code>SELECT EXTRACT (MILLENNIUM DE TIMESTAMP '2001-02-16 20:38:40'); *Resultado:* 3</code>          Los a\u00f1os en el 1900 est\u00e1n en el segundo milenio. El tercer milenio comenz\u00f3 el 1 de enero de 2001.        </p> <ul> <li><code>milliseconds</code></li> </ul> <p>\u200b          El campo de segundos, incluyendo piezas fraccionarias, se  multiplic\u00f3 por 1000. Tenga en cuenta que esto incluye segundos  completos.          <code>SELECT EXTRACT (MILLISECONDS DE TIEMPO '17:12:28.5'); *Resultado:* 28500.000</code> </p> <ul> <li><code>minute</code></li> </ul> <p>\u200b          El campo de minutos (0-59)          <code>SELECT EXTRACT (MINUTE DE TIMESTAMP '2001-02-16 20:38:40'); *Resultado:* 38</code> </p> <ul> <li><code>month</code></li> </ul> <p>\u200b          Para  <code>timestamp</code>valores, el n\u00famero del mes dentro del a\u00f1o (1o-12 , para  <code>interval</code>valores, el n\u00famero de meses, modulo 12 (0-11)          <code>SELECT EXTRACT (MONTH OF TIMESTAMP '2001-02-16 20:38:40'); *Resultado:*  2SELECT EXTRACT (MONTH FROM INTERVAL '2 a\u00f1os 3 meses'); *Resultado:*  3SELECT EXTRACT (MONTH FROM INTERVAL '2 a\u00f1os 13 meses');</code> </p> <ul> <li><code>quarter</code></li> </ul> <p>\u200b          El cuarto del a\u00f1o en que se encuentra la fecha          <code>SELECT EXTRACT (QUARTER DE TIMESTAMP '2001-02-16 20:38:40'); *Resultado:* 1</code> </p> <ul> <li><code>second</code></li> </ul> <p>\u200b          El campo de segundos, incluyendo cualquier segundo fraccionamiento          <code>SELECT EXTRACT (SECOND OF TIMESTAMP '2001-02-16 20:38:40'); *Resultado:*  40.000000EXTRATO EXTRATO (SECOND OF TIME '17:12:28.5'); *Resultado:*</code> </p> <ul> <li><code>timezone</code></li> </ul> <p>\u200b          La zona horaria se compens\u00f3 de UTC, medida en segundos. Los valores positivos corresponden a husos horarios al este de UTC, valores negativos a zonas al oeste de UTC. (T\u00e9cnicamente, PostgreSQL no usa UTC porque los segundos de salto no se manejan.)        </p> <ul> <li><code>timezone_hour</code></li> </ul> <p>\u200b          El componente horaria de la zona horaria se compens\u00f3        </p> <ul> <li><code>timezone_minute</code></li> </ul> <p>\u200b          El componente minuto del huso horario compensado        </p> <ul> <li><code>week</code></li> </ul> <p>\u200b          El n\u00famero de la  ISO8601 semana de la semana del a\u00f1o. Por definici\u00f3n, las semanas ISO comienzan  los lunes y la primera semana de un a\u00f1o contiene el 4 de enero de ese  a\u00f1o. Es decir, el primer jueves de un a\u00f1o es en la semana 1 de ese a\u00f1o.          En el sistema de numeraci\u00f3n de semanas ISO, es posible que  las fechas de principios de enero sean parte de la semana 52 o 53 del  a\u00f1o anterior, y para las fechas de finales de diciembre sea parte de la  primera semana del pr\u00f3ximo a\u00f1o. Por ejemplo,  <code>2005-01-01</code>es parte de la 53a semana del a\u00f1o 2004, y  <code>2006-01-01</code>es parte de la semana 52 del a\u00f1o 2005, mientras que  <code>2012-12-31</code>es parte de la primera semana de 2013. Se recomienda usar el  <code>isoyear</code>campo junto con  <code>week</code>para obtener resultados consistentes.          <code>EXTRATO DE SELECT (CETA DE TIMESTAMP '2001-02-16 20:38:40'); *Resultado:* 7</code> </p> <ul> <li><code>year</code></li> </ul> <p>\u200b          El campo del a\u00f1o. Ten en cuenta que no hay <code>0 AD</code>, tan restando  <code>BC</code>a\u00f1os a partir de  <code>AD</code>Los a\u00f1os deben hacerse con cuidado.          <code>SELECT EXTRACT (AYen DE TIMESTAMP '2001-02-16 20:38:40'); *Resultado:* 2001</code> </p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/09.-Funciones%20y%20Operadores%20de%20Fecha-Hora/01.-EXTRACT%2C%20date_part/#nota","title":"Nota","text":"<p>Cuando el valor de entrada es de infinidad,  <code>extract</code>devoluciones/-Infinito para campos que aumentan mon\u00f3\u00f3nicamente (<code>epoch</code>, <code>julian</code>, <code>year</code>, <code>isoyear</code>, <code>decade</code>, <code>century</code>, y <code>millennium</code>). Para otros campos, NULL es devuelto. Versiones PostgreSQL antes de que 9.6 devolviera cero para todos los casos de entrada infinita.</p> <p>El  <code>extract</code>funci\u00f3n est\u00e1 destinada principalmente a la transformaci\u00f3n computacional. Para  los valores de fecha/hora de formato para visualizaci\u00f3n, v\u00e9ase la secci\u00f3n 9.8.</p> <p>El  <code>date_part</code>funci\u00f3n se modela en el Ingres tradicional equivalente a la SQL-funci\u00f3n est\u00e1ndar <code>extract</code>:</p> <pre><code>fecha.parto (en lo que seca\"field', source)\n</code></pre> <p>Tenga en cuenta que aqu\u00ed el  <code>field</code>El par\u00e1metro tiene que ser un valor de cuerda, no un nombre. Los nombres de campo v\u00e1lidos para  <code>date_part</code>son los mismos que para <code>extract</code>. Por razones hist\u00f3ricas, el  <code>date_part</code>funci\u00f3n devuelve los valores de tipo <code>double precision</code>. Esto puede resultar en una p\u00e9rdida de precisi\u00f3n en ciertos usos. Usando  <code>extract</code>se recomienda en su lugar.</p> <pre><code>SELECT date.part('day', TIMESTAMP '2001-02-16 20:38:40');\nResultado: \n\n16SELECT date.part('hour', INTERVAL '4 horas 3 minutos');\nResultado: \n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/09.-Funciones%20y%20Operadores%20de%20Fecha-Hora/02.-date_trunc/","title":"02.-date_trunc","text":"<p>La funci\u00f3n  <code>date_trunc</code>es conceptualmente similar a la  <code>trunc</code>funci\u00f3n para los n\u00fameros.</p> <pre><code>date.trunc (field,  source[,  time_zone])\n</code></pre> <p><code>source</code>es una expresi\u00f3n de valor del tipo <code>timestamp</code>, <code>timestamp with time zone</code>, o <code>interval</code>. (Valores de tipo  <code>date</code>y  <code>time</code>se eligen autom\u00e1ticamente a  <code>timestamp</code>o o <code>interval</code>, respectivamente.)  <code>field</code>selecciones a las que se selecciona la precisi\u00f3n para truncar el valor de entrada. El valor de retorno es igualmente de tipo <code>timestamp</code>, <code>timestamp with time zone</code>, o <code>interval</code>, y tiene todos los campos que son menos significativos que el seleccionado fijado a cero (o uno, para el d\u00eda y el mes).</p> <p>Valores v\u00e1lidos para  <code>field</code>son:</p> <code>microseconds</code> <code>milliseconds</code> <code>second</code> <code>minute</code> <code>hour</code> <code>day</code> <code>week</code> <code>month</code> <code>quarter</code> <code>year</code> <code>decade</code> <code>century</code> <code>millennium</code> <p>Cuando el valor de entrada es de tipo <code>timestamp with time zone</code>, la truncamiento se realiza con respecto a un huso horario determinado; por ejemplo, la truncamiento de  <code>day</code>produce un valor que es medianoche en esa zona. Por defecto, la truncamiento se hace con respecto a la configuraci\u00f3n actual de TimeZone, pero la opcional  <code>time_zone</code>El argumento puede proporcionarse para especificar un huso horario  diferente. El nombre del huso horario puede especificarse de cualquiera  de las formas descritas en la secci\u00f3n 8.5.3.</p> <p>No se puede especificar un huso horario al procesar  <code>timestamp without time zone</code>o o  <code>interval</code>aportes. Estos siempre se toman a la cara.</p> <p>Ejemplos (asumiendo que el huso horario local es <code>America/New_York</code>):</p> <pre><code>SELECT date.trunc('hour', TIMESTAMP '2001-02-16 20:38:40');\nResultado: \n\n2001-02-16 20:00:00SELECT date.trunc('year', TIMESTAMP '2001-02-16 20:38:40');\nResultado: \n\n2001-01-01 00:00:00SELECT date.trunc('d\u00eda', TIMESTAMP CON TIEMPO ZONE '2001-02-16 20:38:40-00');\nResultado: \n\n2001-02-16 00:00:00-05SELECT date.trunc('day', TIMESTAMP CON TIEMPO ZONE '2001-02-16 20:38:40-00', 'Australia/Sydney');\n\n\nSELECT date.trunc('hour', INTERVAL '3 d\u00edas 02:47:33');\n\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/09.-Funciones%20y%20Operadores%20de%20Fecha-Hora/03.-date_bin/","title":"03.-date_bin","text":"<p>La funci\u00f3n  <code>date_bin</code>Papeleras El sello de tiempo de entrada en el intervalo especificado (la zancada) alineado con un origen especificado.</p> <pre><code>fecha.bin (stride, source, origin)\n</code></pre> <p><code>source</code>es una expresi\u00f3n de valor del tipo  <code>timestamp</code>o o <code>timestamp with time zone</code>. (Valor de tipo  <code>date</code>se elenco autom\u00e1ticamente a <code>timestamp</code>.)  <code>stride</code>es una expresi\u00f3n de valor del tipo <code>interval</code>. El valor de retorno es igualmente de tipo  <code>timestamp</code>o o <code>timestamp with time zone</code>, y marca el comienzo de la papelera en la que el  <code>source</code>est\u00e1 encerrado.</p> <p>Ejemplos:</p> <pre><code>SELECT date.bin(15 minutes', TIMESTAMP '2020-02-11 15:44:17', TIMESTAMP '2001-01-01');\nResultado: \n\n2020-02-11 15:30:00SELECT date.bin ('15 minutes', TIMESTAMP '2020-02-11 15:44:17', TIMESTAMP '2001-01-01 00:02:30');\nResultado: \n</code></pre> <p>En el caso de unidades completas (1 minuto, 1 hora, etc.), da el mismo resultado que el an\u00e1logo  <code>date_trunc</code>Ll\u00e1mese, pero la diferencia es que  <code>date_bin</code>puede truncar a un intervalo arbitrario.</p> <p>El  <code>stride</code>El intervalo debe ser mayor de cero y no puede contener unidades de mes o m\u00e1s.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/09.-Funciones%20y%20Operadores%20de%20Fecha-Hora/04.-AT%20TIME%20ZONE/","title":"04.-AT TIME ZONE","text":"<p>El  <code>AT TIME ZONE</code>el operador convierte el sello de tiempo sin huso horario en/a partir de sello de tiempo con hunida del tiempo, y  <code>time with time zone</code>valores a diferentes husos horarios. La Tabla 9.34 muestra sus variantes.</p> <p>Cuadro 9.34.  <code>AT TIME ZONE</code>Variantes</p> Operadora                Descripci\u00f3n                Ejemplos (s) <code>timestamp without time zone``AT TIME ZONE</code><code>zone</code>- <code>timestamp with time zone</code>                Convierte el sello de tiempo dado sin huso horario a sello de tiempo con huso horario, suponiendo que el valor dado est\u00e1 en la zona horaria nombrada.                 <code>timestamp '2001-02-16 20:38:40' at time zone 'America/Denver'</code>- <code>timestamp with time zone``AT TIME ZONE</code><code>zone</code>- <code>timestamp without time zone</code>                Convierte sello de tiempo con huso horario a sello de tiempo sin huso horario, ya que el tiempo aparecer\u00eda en esa zona.                 <code>timestamp with time zone '2001-02-16 20:38:40-05' at time zone 'America/Denver'</code>- <code>time with time zone``AT TIME ZONE</code><code>zone</code>- <code>time with time zone</code>                Convierte el tiempo con hueso en una nueva zona horaria. Dado que no se suministi\u00f3 una fecha,  se utiliza la compensaci\u00f3n UTC actualmente activa para la zona de  destino nombrada.                 <code>time with time zone '05:34:17-05' at time zone 'UTC'</code>- <p>En estas expresiones, la zona horaria deseada  <code>zone</code>puede especificarse como un valor de texto (por ejemplo, <code>'America/Los_Angeles'</code>) o como intervalo (por ejemplo, <code>INTERVAL '-08:00'</code>). En el caso del texto, se puede especificar un nombre de zona horaria en cualquiera de las formas descritas en la secci\u00f3n 8.5.3. El caso del intervalo s\u00f3lo es \u00fatil para las zonas que tienen  compensaciones fijas de UTC, por lo que no es muy com\u00fan en la pr\u00e1ctica.</p> <p>Ejemplos (asumiendo que la configuraci\u00f3n actual de la Zona de Tiempo es <code>America/Los_Angeles</code>):</p> <pre><code>SELECT TIMESTAMP '2001-02-16 20:38:40' EN TIEMPO ZONE 'America/Denver';\nResultado: \n\n2001-02-16 19:38:40-08SELECT TIMESTAMP CON TIEMPO ZONE '2001-02-16 20:38:40-05' EN TIEMPO ZONE 'America/Denver';\nResultado: \n\n2001-02-16 18:38:40SELECT TIMESTAMP '2001-02-16 20:38:40' EN TIEMPO ZONE 'Asia/Tokyo' AT TIME ZONE 'America/Chicago';\n\n</code></pre> <p>El primer ejemplo a\u00f1ade un huso horario a un valor que le falta, y muestra el valor utilizando la corriente  <code>TimeZone</code>configuraci\u00f3n. El segundo ejemplo cambia el sello de tiempo con el valor de la zona  horaria al huso horario especificado, y devuelve el valor sin zona  horaria. Esto permite el almacenamiento y la visualizaci\u00f3n de valores  diferentes de la corriente  <code>TimeZone</code>configuraci\u00f3n. El tercer ejemplo convierte el tiempo de Tokio a la hora de Chicago.</p> <p>La funci\u00f3n  <code>timezone(*</code>zone<code>*, *</code>timestamp<code>*)</code>es equivalente a la construcci\u00f3n conforme con SQL <code>*</code>timestamp<code>* AT TIME ZONE *</code>zone<code>*</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/09.-Funciones%20y%20Operadores%20de%20Fecha-Hora/05.-Fecha-Hora%20en%20curso/","title":"05.-Fecha-Hora en curso","text":"<p>PostgreSQL proporciona una serie de funciones que devuelven los valores  relacionados con la fecha y hora actuales. Estos SQL-est\u00e1ndar funcionan  todos los valores de rendimiento basados en la hora de inicio de la  transacci\u00f3n actual:</p> <pre><code>CURRENT-DATE\nCURRENT-TIME\nCURRENT-TIMESTAMP\nCURRENT-TIME (precision)\nCURRENT-TIMESTAMP (precision)\nLOCALTIME\nLOCALTIMESTAMP\nLOCALTIME (precision)\nLOCALTIMESTAMP (precision)\n</code></pre> <p><code>CURRENT_TIME</code>y  <code>CURRENT_TIMESTAMP</code>ofrecer valores con huso horario;  <code>LOCALTIME</code>y  <code>LOCALTIMESTAMP</code>entregar valores sin huso horario.</p> <p><code>CURRENT_TIME</code>, <code>CURRENT_TIMESTAMP</code>, <code>LOCALTIME</code>, y  <code>LOCALTIMESTAMP</code>opcionalmente puede tomar un par\u00e1metro de precisi\u00f3n, lo que hace que el resultado sea redondeado a tantos d\u00edgitos fraccionados en el campo de segundos. Sin  un par\u00e1metro de precisi\u00f3n, el resultado se da a la m\u00e1xima precisi\u00f3n  disponible.</p> <p>Algunos ejemplos:</p> <pre><code>SELECT CURRENT-TIME;\nResultado: \n\n14:39:53.662522-05SELECT CURRENT-DATE;\nResultado: \n\n2019-12-23SELECT CURRENT-TIMESTAMP;\nResultado: \n\n2019-12-23 14:39:53.662522-05SELECT CURRENT-TIMESTAMP (2);\n\n\nSELECT LOCALTIMESTAMP;\n\n</code></pre> <p>Dado que estas funciones devuelven la hora de inicio de la  transacci\u00f3n actual, sus valores no cambian durante la transacci\u00f3n. Esto  se considera una caracter\u00edstica: la intenci\u00f3n es permitir que una sola  transacci\u00f3n tenga una noci\u00f3n consistente del currenttiempo actual, de modo que las m\u00faltiples modificaciones dentro de la misma transacci\u00f3n llevan el mismo sello de tiempo.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/09.-Funciones%20y%20Operadores%20de%20Fecha-Hora/05.-Fecha-Hora%20en%20curso/#nota","title":"Nota","text":"<p>Otros sistemas de bases de datos podr\u00edan avanzar con m\u00e1s frecuencia.</p> <p>PostgreSQL tambi\u00e9n proporciona funciones que devuelve la hora de inicio de la  declaraci\u00f3n actual, as\u00ed como el momento actual real en el instante en  que se llama la funci\u00f3n. La lista completa de las funciones de tiempo  est\u00e1ndar no SQL es:</p> <pre><code>trans.timestamp ()\nstatement.timestamp()\nreloj-timestamp()\ntiempo del d\u00eda ()\nahora ()\n</code></pre> <p><code>transaction_timestamp()</code>es equivalente a <code>CURRENT_TIMESTAMP</code>, pero se nombra para reflejar claramente lo que devuelve.  <code>statement_timestamp()</code>devuelve la hora de inicio de la declaraci\u00f3n actual (m\u00e1s espec\u00edficamente, el  momento de recepci\u00f3n del \u00faltimo mensaje de comando del cliente).  <code>statement_timestamp()</code>y  <code>transaction_timestamp()</code>devolver el mismo valor durante el primer comando de una transacci\u00f3n, pero podr\u00eda diferir durante los comandos posteriores.  <code>clock_timestamp()</code>devuelve el tiempo actual, y por lo tanto su valor cambia incluso dentro de un solo comando SQL.  <code>timeofday()</code>es una funci\u00f3n hist\u00f3rica de PostgreSQL. Como <code>clock_timestamp()</code>, devuelve el tiempo actual, pero como un formato  <code>text</code>cuerda en vez de  <code>timestamp with time zone</code>valor.  <code>now()</code>es un PostgreSQL tradicional equivalente a <code>transaction_timestamp()</code>.</p> <p>Todos los tipos de datos de fecha/hora tambi\u00e9n aceptan el valor literal especial  <code>now</code>especificar la fecha y hora actuales (una vez m\u00e1s, interpretados como la hora de  inicio de la transacci\u00f3n). As\u00ed pues, los tres siguientes devuelven el  mismo resultado:</p> <pre><code>SELECT CURRENT-TIMESTAMP;\nSELECT ahora ();\nSELECT TIMESTAMP 'ahora'; -- pero vea la punta abajo\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/09.-Funciones%20y%20Operadores%20de%20Fecha-Hora/05.-Fecha-Hora%20en%20curso/#tip","title":"Tip","text":"<p>No utilice el tercer formulario al especificar un valor a evaluar m\u00e1s adelante, por ejemplo en un  <code>DEFAULT</code>cl\u00e1usula para una columna de tabla. El sistema se convertir\u00e1  <code>now</code>a a  <code>timestamp</code>tan pronto como la constante se analiza, de modo que cuando se necesita el  valor predeterminado, se utilice el tiempo de la creaci\u00f3n de la tabla.  Los dos primeros formularios no ser\u00e1n evaluados hasta que se utilice el  valor predeterminado, porque se trata de llamadas de funci\u00f3n. As\u00ed le  dar\u00e1n el comportamiento deseado de incumplimiento al tiempo de inserci\u00f3n de fila. (V\u00e9ase tambi\u00e9n la secci\u00f3n 8.5.1.4.)</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/09.-Funciones%20y%20Operadores%20de%20Fecha-Hora/06.-Execuci%C3%B3n%20atrasada/","title":"06.-Execuci\u00f3n atrasada","text":"<p>Las siguientes funciones est\u00e1n disponibles para retrasar la ejecuci\u00f3n del proceso del servidor:</p> <pre><code>pg.sle doep (  double precision)\npg.leepfor (  interval)\npg.leep-untile (  timestamp with time zone)\n</code></pre> <p><code>pg_sleep</code>hace que el proceso de la sesi\u00f3n actual duerma hasta que haya transcurrido  el n\u00famero dado de segundos. Se pueden especificar retrasos de segundos  fraccionados.  <code>pg_sleep_for</code>es una funci\u00f3n de conveniencia para permitir que el tiempo de sue\u00f1o se especifique como un <code>interval</code>.  <code>pg_sleep_until</code>es una funci\u00f3n de conveniencia para cuando se desea un tiempo de despertar espec\u00edfico. Por ejemplo:</p> <pre><code>SELECT pg-sleep(1.5);\nSELECT pg-sleep.para ('5 minutos');\nSELECT pg.sleep-untile('tomorrow 03:00');\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/09.-Funciones%20y%20Operadores%20de%20Fecha-Hora/06.-Execuci%C3%B3n%20atrasada/#nota","title":"Nota","text":"<p>La resoluci\u00f3n efectiva del intervalo de sue\u00f1o es espec\u00edfica de  la plataforma; 0,01 segundos es un valor com\u00fan. El retraso del sue\u00f1o  ser\u00e1 al menos el tiempo que se especifique. Puede ser m\u00e1s largo  dependiendo de factores como la carga del servidor. En particular,  <code>pg_sleep_until</code>no est\u00e1 garantizado que se despierte exactamente en el momento especificado, pero no se despertar\u00e1 antes.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/09.-Funciones%20y%20Operadores%20de%20Fecha-Hora/06.-Execuci%C3%B3n%20atrasada/#advertencia","title":"Advertencia","text":"<p>Aseg\u00farese de que su sesi\u00f3n no aguante m\u00e1s cerrase de lo necesario al llamar  <code>pg_sleep</code>o sus variantes. De lo contrario, otras sesiones podr\u00edan tener que esperar a su proceso de sue\u00f1o, ralentizar todo el sistema.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/","title":"Index","text":"<p>Las funciones y expresiones de funci\u00f3n descritas en esta secci\u00f3n operan sobre valores de tipo <code>xml</code>. V\u00e9ase la secci\u00f3n 8.13 para obtener informaci\u00f3n sobre la  <code>xml</code>tipo. Las expresiones funci\u00f3n  <code>xmlparse</code>y  <code>xmlserialize</code>para la conversi\u00f3n a e-tipo  <code>xml</code>est\u00e1n documentados all\u00ed, no en esta secci\u00f3n.</p> <p>El uso de la mayor\u00eda de estas funciones requiere que PostgreSQL se haya construido con <code>configure --with-libxml</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/04.-Mapeo%20de%20tablas%20a%20XML/","title":"04.-Mapeo de tablas a XML","text":"<p>Las siguientes  funciones mapean el contenido de las tablas relacionales con los valores XML. Pueden ser considerados como funcionalidad de exportaci\u00f3n XML:</p> <pre><code> table_to_xml(  tableregclass,  nullsboolean,\n                tableforestboolean,   targetnstext) . \n xmlquery_to_xml(  querytext,  nullsboolean,\n                tableforestboolean,   targetnstext) . \n xmlcursor_to_xml(  cursorrefcursor,  countinteger,  nullsboolean,\n                 tableforestboolean,   targetnstext) . xml\n</code></pre> <p><code>table_to_xml</code>Mapea el contenido de la mesa nombrada, pas\u00f3 como par\u00e1metro <code>table</code>. El  <code>regclass</code>Tipo acepta tablas de identificaci\u00f3n de cadenas usando la notaci\u00f3n habitual, incluyendo la calificaci\u00f3n de esquema opcional y comillas dobles (para m\u00e1s detalles, vea ).  <code>query_to_xml</code>ejecuta la consulta cuyo texto se pasa como par\u00e1metro  <code>query</code>y mapea el conjunto de resultados.  <code>cursor_to_xml</code>obtiene el n\u00famero indicado de filas del cursor especificado por el par\u00e1metro . Esta variante se recomienda si las tablas grandes tienen que ser  mapeadas, porque el valor de resultado se construye en la memoria por  cada funci\u00f3n.</p> <p>Si  <code>tableforest</code>es falso, entonces el documento XML resultante se ve as\u00ed:</p> <pre><code>- Nombre de mesa.\n  - .. ..o de \u00e9rrato.\n    .columnname1.data/columnname1\n    Columnname2-data/columnname2\n  -/ pela.\n\n  - .. ..o de \u00e9rrato.\n    ...\n  -/ pela.\n\n  ...\n-/nombre de mesa.\n</code></pre> <p>Si  <code>tableforest</code>es cierto, el resultado es un fragmento de contenido XML que se ve as\u00ed:</p> <pre><code>- Nombre de mesa.\n  .columnname1.data/columnname1\n  Columnname2-data/columnname2\n-/nombre de mesa.\n\n- Nombre de mesa.\n  ...\n-/nombre de mesa.\n\n...\n</code></pre> <p>Si no hay nombre de tabla disponible, es decir, al mapear una consulta o un cursor, la cadena  <code>table</code>se utiliza en el primer formato,  <code>row</code>en el segundo formato.</p> <p>La elecci\u00f3n entre estos formatos depende del usuario. El primer  formato es un documento XML adecuado, que ser\u00e1 importante en muchas  aplicaciones. El segundo formato tiende a ser m\u00e1s \u00fatil en el  <code>cursor_to_xml</code>funci\u00f3n si los valores de resultado se volver\u00e1n a ensamblos en un documento m\u00e1s adelante. Las funciones para producir contenido XML discutidos  anteriormente, en particular <code>xmlelement</code>, se puede utilizar para alterar los resultados al gusto.</p> <p>Los valores de datos se mapean de la misma manera que se describe para la funci\u00f3n  <code>xmlelement</code>- A continuaci\u00f3n.</p> <p>El par\u00e1metro  <code>nulls</code>determina si los valores nulos deben incluirse en la salida. Si es cierto, los  valores nulos en las columnas se representan como:</p> <pre><code>.columnname xsi:nil=\"true\"/\n</code></pre> <p>d\u00f3nde  <code>xsi</code>es el prefijo de espacio de nombre XML para XML Schema Instance. Se  a\u00f1adir\u00e1 una declaraci\u00f3n de espacio de nombres apropiada al valor de  resultado. Si las columnas falsas que contienen valores nulos se omiten  simplemente de la salida.</p> <p>El par\u00e1metro  <code>targetns</code>especifica el espacio de nombre XML deseado del resultado. Si no se quiere un  espacio de nombres en particular, se debe pasar una cuerda vac\u00eda.</p> <p>Las siguientes funciones devuelve los documentos de esquema XML  que describen las asignaciones realizadas por las funciones  correspondientes anteriormente:</p> <pre><code> table_to_xmlschema(  tableregclass,  nullsboolean,\n                      tableforestboolean,   targetnstext) . \n xmlquery_to_xmlschema(  querytext,  nullsboolean,\n                      tableforestboolean,   targetnstext) . \n xmlcursor_to_xmlschema(  cursorrefcursor,  nullsboolean,\n                       tableforestboolean,   targetnstext) . xml\n</code></pre> <p>Es esencial que se pasen los mismos par\u00e1metros para obtener asignaciones de datos XML coincidente y documentos de esquema XML.</p> <p>Las siguientes funciones producen asignaciones de datos XML y el  correspondiente esquema XML en un documento (o bosque), enlazados.  Pueden ser \u00fatiles cuando se quieren resultados autocontenidos y de  autodescriptores:</p> <pre><code> table_to_xml_and_xmlschema(  tableregclass,  nullsboolean,\n                              tableforestboolean,   targetnstext) . \n xmlquery_to_xml_and_xmlschema(  querytext,  nullsboolean,\n                              tableforestboolean,   targetnstext) . xml\n</code></pre> <p>Adem\u00e1s, se dispone de las siguientes funciones para producir  mapas an\u00e1logos de esquemas enteros o de toda la base de datos actual:</p> <pre><code> schema_to_xml(  schemaname,  nullsboolean,\n                 tableforestboolean,   targetnstext) . \n xmlschema_to_xmlschema(  schemaname,  nullsboolean,\n                       tableforestboolean,   targetnstext) . \n xmlschema_to_xml_and_xmlschema(  schemaname,  nullsboolean,\n                               tableforestboolean,   targetnstext) . \n\n xmldatabase_to_xml(  nullsboolean,\n                   tableforestboolean,   targetnstext) . \n xmldatabase_to_xmlschema(  nullsboolean,\n                         tableforestboolean,   targetnstext) . \n xmldatabase_to_xml_and_xmlschema(  nullsboolean,\n                                 tableforestboolean,   targetnstext) . xml\n</code></pre> <p>Estas funciones ignoran tablas que no son legibles por el usuario actual. Las funciones de toda la base de datos ignoran adem\u00e1s esquemas  que el usuario actual no tiene  <code>USAGE</code>(mirar) privilegio para.</p> <p>Tenga en cuenta que estos potencialmente producen una gran  cantidad de datos, que necesita ser construido en la memoria. Al  solicitar mapas de contenido de grandes esquemas o bases de datos,  podr\u00eda valer la pena considerar la asignaci\u00f3n de las tablas por  separado, posiblemente incluso a trav\u00e9s de un cursor.</p> <p>El resultado de una asignaci\u00f3n de contenido de esquemas se ve as\u00ed:</p> <pre><code>El nombre.\n\nCuadro de mesa\n\nmapas\n\n...\n\n-/schemaname.\n</code></pre> <p>donde el formato de una asignaci\u00f3n de tablas depende de la  <code>tableforest</code>par\u00e1metro como se explic\u00f3 anteriormente.</p> <p>El resultado de una cartograf\u00eda de contenido de la base de datos se ve as\u00ed:</p> <pre><code>- Nombre.\n\nNombre.\n  ...\n-/schema1name.\n\nNombre.\n  ...\n-/schema2name.\n\n...\n\n-/nombre.\n</code></pre> <p>donde el mapeo del esquema es como arriba.</p> <p>Como ejemplo de la utilizaci\u00f3n de la salida producida por estas funciones, Ejemplo 9.1 muestra una hoja de estilo XSLT que convierte la salida de  <code>table_to_xml_and_xmlschema</code>a un documento HTML que contiene una interpretaci\u00f3n tabular de los datos  de la tabla. De manera similar, los resultados de estas funciones se  pueden convertir en otros formatos basados en XML.</p> <p>Ejemplo 9.1. Hoja de estilo XSLT para la conversi\u00f3n de salida SQL/XML a HTML</p> <pre><code>-?xml versi\u00f3n=\"1.0\"?\nXsl:stylesheet version=\"1.0\"\n    xmlns:xsl=http://www.w3.org/1999/XSL/Transform\"\n    xmlns:xsd=http://www.w3.org/2001/XMLSchema\"\n    xmlns=\"http://www.w3.org/1999/xhtml\"\n-\n\n  M\u00e9todo de salida:output/xml\"\n      doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\n      doctype-public=\"-//W3C/DTD XHTML 1.0 Estricto//EN\"\n      sembres=\"s\u00ed\"/\n\n  .xsl:template match=\"/*\"\n    .xsl:variable name=\"schema\" select=\"//xsd:schema\"/\n    .xsl:variable nombre=\"tabletypename\"\n                  select=\"$schema/xsd:elelement[-name=name=(current())]]/-type\"/-\n    .xsl:variable nombre= \"rowtypename\"\n                  select=\"$quima/xsd:complexType[-name=$tabletypename]/xsd:sequence/xsd:element[-name='row']/-type\"/-\n\n    Hablemos.\n      - Cabeza.\n        \"title-xsl:value-of select=\"name(())\"/--title\n      -/cabeza.\n      -Cuidado.\n        - Estable.\n          - T.\n            xsl:for-each select=\"$\"$schema/xsd:complexType[-name=$rowtypename]/xsd:sequence/xsd:elelement/-name\"\n              Exsl:value-of select=\".\n            */xsl: for-each\".\n          -/tr.\n\n          xsl: para-each select=\"row\"\n            - T.\n              xsl:for-each select=\"*\"\n                \"/td.xsl:value-of select=\"/-/td.\n              */xsl: for-each\".\n            -/tr.\n          */xsl: for-each\".\n        -/ mesa.\n      - / cuerpo.\n    -/html.\n  */xsl:template\".\n\n*/xsl:stylesheet.\n</code></pre> <p>[8] Un resultado que contiene m\u00e1s de un nodo de elemento en el nivel  superior, o texto no blanco fuera de un elemento, es un ejemplo de forma de contenido. Un resultado de XPath no puede ser de ninguna de las dos  formas, por ejemplo, si devuelve un nodo de atributo seleccionado del  elemento que lo contiene. Tal resultado se pondr\u00e1 en forma de contenido  con cada uno de esos nodos desautorizado reemplazados por su valor de  cadena, tal como se define para el XPath 1.0  <code>string</code>funci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/01.-Generando%20Contenido%20XML.md/","title":"Index","text":"<p>Un conjunto de funciones y expresiones similares a las funciones est\u00e1  disponible para producir contenido XML a partir de datos SQL. Como tal,  son especialmente adecuados para formatear los resultados de las  consultas en documentos XML para su procesamiento en aplicaciones de  clientes.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/01.-Generando%20Contenido%20XML.md/01.-xmlcomment/","title":"01.-xmlcomment","text":"<pre><code> xmlcomment(  text) . xml\n</code></pre> <p>La funci\u00f3n  <code>xmlcomment</code>crea un valor XML que contiene un comentario XML con el texto especificado como contenido. El texto no puede contener<code>--</code>O termina con un<code>-</code>De lo contrario, el constructo resultante no ser\u00eda un comentario XML v\u00e1lido. Si el argumento es nulo, el resultado es nulo.</p> <p>Ejemplo:</p> <pre><code>SELECT xmlcomment ('hello');\n\n  xmlcoment\n--------------\n -----Hola--\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/01.-Generando%20Contenido%20XML.md/02.-xmlconcat/","title":"02.-xmlconcat","text":"<pre><code> xmlconcat(  xml[, ...] ) . xml\n</code></pre> <p>La funci\u00f3n  <code>xmlconcat</code>Concateniza una lista de valores XML individuales para crear un solo valor que  contenga un fragmento de contenido XML. Se omiten los valores nulos; el  resultado es s\u00f3lo nulo si no hay argumentos no nulos.</p> <p>Ejemplo:</p> <pre><code>SELECT xmlconcat ('Aabc/o', 'bar-foo-/bar-bar');\n\n      xmlconcat\n----------------------\n Ababc/bar-foo./bar.\n</code></pre> <p>Las declaraciones XML, si est\u00e1n presentes, se combinan de la  siguiente manera. Si todos los valores argumentales tienen la misma  declaraci\u00f3n de versi\u00f3n XML, esa versi\u00f3n se utiliza en el resultado, de  lo contrario no se usa ninguna versi\u00f3n. Si todos los valores  argumentales tienen el valor de la declaraci\u00f3n independiente, s\u00ed, entonces ese valor se utiliza en el resultado. Si todos los valores  argumentales tienen un valor de declaraci\u00f3n independiente y al menos uno es \u201cno\u201d\"no\", entonces eso se utiliza en el resultado. De lo contrario, el resultado  no tendr\u00e1 una declaraci\u00f3n independiente. Si se determina que el  resultado requiere una declaraci\u00f3n independiente pero sin declaraci\u00f3n de versi\u00f3n, se utilizar\u00e1 una declaraci\u00f3n de versi\u00f3n con la versi\u00f3n 1.0  porque XML requiere una declaraci\u00f3n XML para contener una declaraci\u00f3n de versi\u00f3n. Las declaraciones de codificaci\u00f3n son ignoradas y eliminadas  en todos los casos.</p> <p>Ejemplo:</p> <pre><code>SELECT xmlconcat('?xml version=1.1\"?-foo/-', 'oxml version=\"1\".1\" standalone=\"no\"?--bar/o');\n\n             xmlconcat\n------------------------------------\n -?xml version=\"1.1\"?-foo/-bar/-\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/01.-Generando%20Contenido%20XML.md/03.-xmlelement/","title":"03.-xmlelement","text":"<pre><code> xmlelement(   NAMEname[,  XMLATTRIBUTES(  attvalue[   ASattname] [, ...] ) ] [,  content[, ...]] ) . xml\n</code></pre> <p>El  <code>xmlelement</code>la expresi\u00f3n produce un elemento XML con el nombre, atributos y contenido dados. El  <code>name</code>y  <code>attname</code>Los elementos que se muestran en la sintaxis son identificadores simples, no valores. El  <code>attvalue</code>y  <code>content</code>Los elementos son expresiones, que pueden producir cualquier tipo de datos PostgreSQL. El argumento (s) dentro  <code>XMLATTRIBUTES</code>generar atributos del elemento XML; el  <code>content</code>valor(s) se concaten\u00f3 para formar su contenido.</p> <p>Ejemplos:</p> <pre><code>SELECT xmlelement (nombre foo);\n\n xmlelement\n-----------\n \"Cfoo/\"\n\nSELECT xmlelement(name foo, xmlattributes ('xyz' como barra));\n\n    xmlelement\n---------------------\n \"\"xyz\"/*\n\nSELECT xmlelement(name foo, xmlattributes(actualdate as bar), 'cont', 'ent');\n\n             xmlelement\n--------------------------------------\n \"2007-01-26\"-content-/foo.\n</code></pre> <p>Los nombres de elemento y atributo que no son nombres XML  v\u00e1lidos se escapan reemplazando los caracteres ofensor por la secuencia <code>_x*</code>HHHH<code>*_</code>, d\u00f3nde  <code>HHHH</code>es el c\u00f3digo de Unicode del personaje en la notaci\u00f3n hexadecimal. Por ejemplo:</p> <pre><code>SELECT xmlelement (nombre \"foo$bar\", xmlattributes ('xyz' como \"a&amp;b\"));\n\n            xmlelement\n----------------------------------\n .foo.x0024-bar ax0026-b=\"xyz\"/\n</code></pre> <p>No ser\u00e1 necesario especificar un nombre de atributo expl\u00edcito  si el valor del atributo es una referencia de columna, en cuyo caso el  nombre de la columna se utilizar\u00e1 como nombre de atributo por defecto.  En otros casos, el atributo debe recibir un nombre expl\u00edcito. As\u00ed que  este ejemplo es v\u00e1lido:</p> <pre><code>Prueba de Tiza CREATE (un xml, b xml);\nSELECT xmlelement(no test, xmlattributes(a, b)) DESDE ensayo;\n</code></pre> <p>Pero no son:</p> <pre><code>SELECT xmlelement(no test, xmlattributes ('constante'), a, b) DES de prueba;\nSELECT xmlelement(no test, xmlattributes(func(a, b))) DESDE la prueba;\n</code></pre> <p>El contenido de elemento, si se especifica, se formatear\u00e1 seg\u00fan su tipo de datos. Si el contenido es en s\u00ed mismo de tipo <code>xml</code>, se pueden construir documentos XML complejos. Por ejemplo:</p> <pre><code>SELECT xmlelement(name foo, xmlattributes ('xyz' como bar),\n                            xmlelement(no abc),\n                            xmlcomment ('test'),\n                            xmlelement(no xyz));\n\n                  xmlelement\n--------------------------------------------------------------------------\n - .foo barra=\"xyz\"-abc/---test-xyz/-/foo.\n</code></pre> <p>El contenido de otros tipos se formatear\u00e1 en datos v\u00e1lidos de  caracteres XML. Esto significa en particular que los personajes, y y se  convertir\u00e1n en entidades. Datos binarios (tipo de datos <code>bytea</code>) estar\u00e1 representada en la base64 o en la codificaci\u00f3n hexazal, dependiendo de la configuraci\u00f3n del par\u00e1metro de configuraci\u00f3n xmlbinary. Se espera que el comportamiento particular para los tipos de datos  individuales evolucione con el fin de alinear las asignaciones  PostgreSQL con las especificadas en SQL:2006 y posterior, como se  discute en la Secci\u00f3n D.3.1.3.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/01.-Generando%20Contenido%20XML.md/04.-xmlforest/","title":"04.-xmlforest","text":"<pre><code> xmlforest(  content[   ASname] [, ...] ) . xml\n</code></pre> <p>El  <code>xmlforest</code>expresi\u00f3n produce un bosque XML (sequencia) de elementos usando los nombres y contenido dados. En cuanto a <code>xmlelement</code>, cada uno  <code>name</code>debe ser un simple identificador, mientras que el  <code>content</code>Las expresiones pueden tener cualquier tipo de datos.</p> <p>Ejemplos:</p> <pre><code>SELECT xmlforest ('abc' AS foo, barra de 123 AS);\n\n          xmlforest\n-----------------------------\n \"Nombre*abc-/foo-bar*123*/bar*\n\n\nSELECT xmlforest(table, column-name)\nDe la informaci\u00f3n.schema.columns\nD\u00f3nde se indique el tablero = 'pg-catalog';\n\n                                xmlforest\n---------------------------------------------------------------------------------\n .table.name.pg.authid/table.name. .column.name. denombre. de la columnas de nombre.\n .table.name.pg.authid/table.name. .column.name.rolsuper./column.name.\n ...\n</code></pre> <p>Como se ve en el segundo ejemplo, el nombre del elemento puede  omitirse si el valor de contenido es una referencia de columna, en cuyo  caso el nombre de la columna se utiliza por defecto. De lo contrario, se debe especificar un nombre.</p> <p>Los nombres de lose elementales que no son nombres XML v\u00e1lidos se escapan como se muestra para  <code>xmlelement</code>- A arriba. Del mismo modo, se escapan los datos de contenido para hacer contenido XML v\u00e1lido, a menos que ya sea de tipo <code>xml</code>.</p> <p>Tenga en cuenta que los bosques XML no son documentos XML  v\u00e1lidos si consisten en m\u00e1s de un elemento, por lo que podr\u00eda ser \u00fatil  envolver  <code>xmlforest</code>expresiones en <code>xmlelement</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/01.-Generando%20Contenido%20XML.md/05.-xmlpi/","title":"05.-xmlpi","text":"<pre><code> xmlpi(   NAMEname[,  content] . xml\n</code></pre> <p>El  <code>xmlpi</code>expresi\u00f3n crea una instrucci\u00f3n de procesamiento XML. En cuanto a <code>xmlelement</code>, el  <code>name</code>debe ser un simple identificador, mientras que el  <code>content</code>la expresi\u00f3n puede tener cualquier tipo de datos. El <code>content</code>, si est\u00e1 presente, no debe contener la secuencia de caracteres <code>?&gt;</code>.</p> <p>Ejemplo:</p> <pre><code>SELECT xmlpi(no php, 'echo \"mundo de holo\";);\n\n            xmlpi\n-----------------------------\n ?php echo de \"holo mundo\";??\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/01.-Generando%20Contenido%20XML.md/06.-xmlroot/","title":"06.-xmlroot","text":"<pre><code> xmlroot( xml,  VERSION-text-NO VALUE- [,  STANDALONE-YES-NO-NO VALUE* ] . xml\n</code></pre> <p>El  <code>xmlroot</code>expresi\u00f3n altera las propiedades del nodo ra\u00edz de un valor XML. Si se especifica  una versi\u00f3n, sustituye el valor de la declaraci\u00f3n de versi\u00f3n del nodo  ra\u00edz; si se especifica una configuraci\u00f3n independiente, sustituye el  valor de la declaraci\u00f3n independiente del nodo de ra\u00edz.</p> <pre><code>SELECT xmlroot(xmlparse(document '?xml version=1.1\"??.content-abc-/content'),\n               versi\u00f3n '1.0', independiente s\u00ed);\n\n                xmlroot\n----------------------------------------\n -?xml version=\"1.0\" standalone=\"s\u00ed\"?\n \"content\"/content.\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/01.-Generando%20Contenido%20XML.md/07.-xmlagg/","title":"07.-xmlagg","text":"<pre><code> xmlagg(  xml) . xml\n</code></pre> <p>La funci\u00f3n  <code>xmlagg</code>es, a diferencia de las otras funciones descritas aqu\u00ed, una funci\u00f3n  agregada. Concatena los valores de entrada a la llamada de funci\u00f3n  agregada, al igual que  <code>xmlconcat</code>lo hace, excepto que la concatenaci\u00f3n ocurre a trav\u00e9s de las filas en lugar de a trav\u00e9s de expresiones en una sola fila. V\u00e9ase la secci\u00f3n 9.21 para informaci\u00f3n adicional sobre las funciones agregadas.</p> <p>Ejemplo:</p> <pre><code>Prueba de Tizaje CREATE (y int, x xml);\nINSERT INTO prueba VALUES (1, 'Efoo.abc-/foo-/foo-');\nINSERT INTO prueba VALUES (2, 'Ebar/o');\nSELECT xmlagg(x) DESDE la prueba;\n        xmlagg\n----------------------\n \"Fe\u00fab\"/foo-bar/*\n</code></pre> <p>Para determinar el orden de la concatenaci\u00f3n, un  <code>ORDER BY</code>la cl\u00e1usula podr\u00e1 a\u00f1adirse a la llamada agregada, seg\u00fan se describe en la secci\u00f3n 4.2.7. Por ejemplo:</p> <pre><code>SELECT xmlagg (x ORDE BY y DESC) DES del ensayo;\n        xmlagg\n----------------------\n -bar/-foo.abc-/foo*\n</code></pre> <p>El siguiente enfoque no est\u00e1ndar sol\u00eda recomendarse en versiones anteriores, y puede ser \u00fatil en casos espec\u00edficos:</p> <pre><code>SELECT xmlagg(x) DESDE (SELECT * DESDE Prueba ORDE BY y DESC) Pesta\u00f1a AS;\n        xmlagg\n----------------------\n - B\u00e1rbara/foo.abc./foo.\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/02.-Predicados%20XML/","title":"Index","text":"<p>Las expresiones descritas en esta secci\u00f3n comprueban las propiedades de  <code>xml</code>valores.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/02.-Predicados%20XML/01.-IS%20DOCUMENT/","title":"01.-IS DOCUMENT","text":"<pre><code>  xmlIS DOCUMENT- boolean\n</code></pre> <p>La expresi\u00f3n  <code>IS DOCUMENT</code>Devuelve cierto si el argumento XML valor es un documento XML adecuado, falso si no lo es (es decir, es un fragmento de contenido), o nulo si el  argumento es nulo. V\u00e9ase la secci\u00f3n 8.13 sobre la diferencia entre documentos y fragmentos de contenido.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/02.-Predicados%20XML/02.-IS%20NOT%20DOCUMENT/","title":"02.-IS NOT DOCUMENT","text":"<pre><code>  xmlIS NOT DOCUMENT- boolean\n</code></pre> <p>La expresi\u00f3n  <code>IS NOT DOCUMENT</code>devuelve falsa si el argumento XML valor es un documento XML adecuado, cierto si no lo es (es decir, es un fragmento de contenido), o nulo si el  argumento es nulo.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/02.-Predicados%20XML/03.-XMLEXISTS/","title":"03.-XMLEXISTS","text":"<pre><code> XMLEXISTS(   textPASSING[ BY-REF-VALUE-]  xml[ BY-REF-VALUE) . boolean\n</code></pre> <p>La funci\u00f3n  <code>xmlexists</code>eval\u00faa una expresi\u00f3n XPath 1.0 (el primer argumento), con el valor XML pasado  como su elemento contextual. La funci\u00f3n devuelve falsa si el resultado  de esa evaluaci\u00f3n produce un nodo vac\u00edo, cierto si produce alg\u00fan otro  valor. La funci\u00f3n devuelve nula si alg\u00fan argumento es nulo. Un valor no  nulo pasado como elemento de contexto debe ser un documento XML, no un  fragmento de contenido o cualquier valor no XML.</p> <p>Ejemplo:</p> <pre><code>SELECT xmlexists('//town[text() = 'Toronto'']' PASSING BY VALUE '.towns.town.Toronto-/town-Ottawa-/town-/town-/towns');\n\n xmlexistas\n-----------\n t\n(1 fila)\n</code></pre> <p>El  <code>BY REF</code>y  <code>BY VALUE</code>Las cl\u00e1usulas se aceptan en PostgreSQL, pero se ignoran, como se discute en la Secci\u00f3n D.3.2.</p> <p>En el est\u00e1ndar SQL, el  <code>xmlexists</code>la funci\u00f3n eval\u00faa una expresi\u00f3n en el idioma XML Query, pero PostgreSQL permite s\u00f3lo una expresi\u00f3n XPath 1.0, como se discute en la Secci\u00f3n D.3.1.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/02.-Predicados%20XML/04.-xml_is_well_formed/","title":"04.-xml_is_well_formed","text":"<pre><code> xml_is_well_formed(  text) . \n booleanxml_is_well_formed_document(  text) . \n booleanxml_is_well_formed_content(  text) . boolean\n</code></pre> <p>Estas funciones comprueban si a  <code>text</code>La cadena representa XML bien formada, devolviendo un resultado booleano.  <code>xml_is_well_formed_document</code>comprueban un documento bien formado, mientras que  <code>xml_is_well_formed_content</code>comprueban el contenido bien formado.  <code>xml_is_well_formed</code>hace el primero si el par\u00e1metro de configuraci\u00f3n de xmloption est\u00e1 configurado para <code>DOCUMENT</code>, o este \u00faltimo si est\u00e1 listo para <code>CONTENT</code>. Esto significa que  <code>xml_is_well_formed</code>es \u00fatil para ver si un elenco simple para escribir  <code>xml</code>tendr\u00e1 \u00e9xito, mientras que las otras dos funciones son \u00fatiles para ver si las variantes correspondientes de  <code>XMLPARSE</code>lo lograr\u00e1.</p> <p>Ejemplos:</p> <pre><code>SET xmloption TO DOCUMENT;\nSELECT xml-is-well-formed (');\n xml.is.well.formed\n---------------------\n f\n(1 fila)\n\nSELECT xml-is-well-formed('abc/o');\n xml.is.well.formed\n---------------------\n t\n(1 fila)\n\nSET xmloption TO CONTENT;\nSELECT xml-is-well-formed('abc');\n xml.is.well.formed\n---------------------\n t\n(1 fila)\n\nSELECT xml-is-well-formed-document(''-pg:foo xmlns:pg=\"http://postgresql.org/stuff\"---bar-/pg:foo');\n xml.is-well-formed.document\n-----------------------------\n t\n(1 fila)\n\nSELECT xml.is-well-formed-document('-pg:foo xmlns:pg=\"http://postgresql.org/stuff\"--ba--b-/my:foo');\n xml.is-well-formed.document\n-----------------------------\n f\n(1 fila)\n</code></pre> <p>El \u00faltimo ejemplo muestra que los controles incluyen si los espacios de nombres est\u00e1n correctamente emparecidos.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/03.-Procesado%20XML/","title":"Index","text":"<p>A procesar los valores del tipo de datos <code>xml</code>, PostgreSQL ofrece las funciones  <code>xpath</code>y <code>xpath_exists</code>, que eval\u00faan las expresiones XPath 1.0, y la  <code>XMLTABLE</code>funci\u00f3n de la mesa.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/03.-Procesado%20XML/01.-xpath/","title":"01.-xpath","text":"<pre><code> xpath(  xpathtext,   xmlxml[,   nsarraytext[]] . xml[]\n</code></pre> <p>La funci\u00f3n  <code>xpath</code>eval\u00faa la expresi\u00f3n XPath 1.0  <code>xpath</code>(dado como texto) contra el valor XML <code>xml</code>. Devuelve una matriz de valores XML correspondientes al conjunto de  nodos producido por la expresi\u00f3n XPath. Si la expresi\u00f3n XPath devuelve  un valor escalar en lugar de un nodo-set, se devuelve un array de un  solo elemento.</p> <p>El segundo argumento debe ser un documento XML bien formado. En particular, debe tener un solo elemento de nodo de ra\u00edz.</p> <p>El tercer argumento opcional de la funci\u00f3n es una variedad de  asignaciones de espacio de nombres. Esta matriz debe ser un  bidimensional  <code>text</code>array con la longitud del segundo eje es igual a 2 (es decir, debe ser una  matriz de arrays, cada uno de los cuales consta de exactamente 2  elementos). El primer elemento de cada entrada de array es el nombre de  espacio de nombres (alias), el segundo el URI de espacio de nombres. No  se requiere que los alias proporcionados en este array sean los mismos  que los que se utilizan en el propio documento XML (en otras palabras,  tanto en el documento XML como en el  <code>xpath</code>contexto de funci\u00f3n, los alias son locales).</p> <p>Ejemplo:</p> <pre><code>SELECT xpath('/my:a/text()', 'Emi:a xmlns:my=\"http://example.com\"est-/mi:a',\n             ARRAY[ARRAY['mi', 'http://example.com']]);\n\n xpath\n-------\n - Es el \u00faltimo.\n(1 fila)\n</code></pre> <p>Para tratar los espacios de nombres predeterminados (an\u00f3nimos), haz algo como esto:</p> <pre><code>SELECT xpath('//mydefns:b/text(() ', 'a xmlns='http://example.com\"-b-test-/b-/a',\n             ARRAY['mydefns', 'http://example.com']);\n\n xpath\n-------\n - Es el \u00faltimo.\n(1 fila)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/03.-Procesado%20XML/02.-xpath_exists/","title":"02.-xpath_exists","text":"<pre><code> xpath_exists(  xpathtext,   xmlxml[,   nsarraytext[]] . boolean\n</code></pre> <p>La funci\u00f3n  <code>xpath_exists</code>es una forma especializada de la  <code>xpath</code>funci\u00f3n. En lugar de devolver los valores XML individuales que satisfacen la  expresi\u00f3n XPath 1.0, esta funci\u00f3n devuelve un booleano indicando si la  consulta fue satisfecha o no (espec\u00edcamente, si produjo alg\u00fan valor que  no sea un nodo-set vac\u00edo). Esta funci\u00f3n es equivalente a la  <code>XMLEXISTS</code>predicate, excepto que tambi\u00e9n ofrece soporte para un argumento de asignaci\u00f3n de espacio de nombres.</p> <p>Ejemplo:</p> <pre><code>SELECT xpath-exists('/my:a/text()', 'Emi:a xmlns:my=\"http://example.com\"-test-/mi:a',\n                     ARRAY[ARRAY['mi', 'http://example.com']]);\n\n xpath-exists\n--------------\n t\n(1 fila)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/03.-Procesado%20XML/03.-XMLTABLE/","title":"03.-XMLTABLE","text":"<pre><code> XMLTABLE(\n    [  XMLNAMESPACES(    namespace_uriASnamespace_name[, ...] ), ]\n      row_expressionPASSING[ BY-REF-VALUE-]  document_expression[ BY-REF-VALUE-]\n      COLUMNSname-  type[ PATHcolumn_expression] [ DEFAULTdefault_expression] [ NOT NULL- NULL]\n                  -  FOR ORDINALITY-\n            [, ...]\n) . setof record\n</code></pre> <p>El  <code>xmltable</code>expresi\u00f3n produce una tabla basada en un valor XML, un filtro XPath para extraer  filas y un conjunto de definiciones de columna. Aunque se asiente  sint\u00e1cticamente a una funci\u00f3n, s\u00f3lo puede aparecer como una tabla en una consulta  <code>FROM</code>cl\u00e1usula.</p> <p>La opcional  <code>XMLNAMESPACES</code>cl\u00e1usula da una lista separada por comas de definiciones de espacio de nombres, donde cada una  <code>namespace_uri</code>es a  <code>text</code>expresi\u00f3n y cada uno  <code>namespace_name</code>es un simple identificador. Especifica los espacios de nombres XML  utilizados en el documento y sus alias. Actualmente no admite una  especificaci\u00f3n de espacio de nombres predeterminada.</p> <p>Los necesarios  <code>row_expression</code>argument es una expresi\u00f3n XPath 1.0 (dado como <code>text</code>) que se eval\u00faa, pasando el valor XML  <code>document_expression</code>como su elemento de contexto, para obtener un conjunto de nodos XML. Estos nodos son los que  <code>xmltable</code>se transforma en filas de salida. No se producir\u00e1n filas si el  <code>document_expression</code>es nula, ni si la  <code>row_expression</code>produce un nodo vac\u00edo o cualquier valor que no sea un nodo.</p> <p><code>document_expression</code>proporciona el tema contextual para la <code>row_expression</code>. Debe ser un documento XML bien formado; fragmentos/bosques no son aceptados. El  <code>BY REF</code>y  <code>BY VALUE</code>cl\u00e1usulas son aceptadas pero ignoradas, como se indica en la Secci\u00f3n D.3.2.</p> <p>En el est\u00e1ndar SQL, el  <code>xmltable</code>funci\u00f3n eval\u00faa las expresiones en el lenguaje XML Consultary, pero PostgreSQL permite s\u00f3lo expresiones XPath 1.0, como se discute en la Secci\u00f3n D.3.1.</p> <p>Los necesarios  <code>COLUMNS</code>la cl\u00e1usula especifica las (s) de columnas que se producir\u00e1n en la tabla  de salida. Consulte el resumen de sintaxis de arriba para el formato. Se requiere un nombre para cada columna, al igual que un tipo de datos (a  menos  <code>FOR ORDINALITY</code>se especifica, en cuyo caso es el tipo  <code>integer</code>est\u00e1 impl\u00edcito). Las cl\u00e1usulas de ruta, incumplimiento y nulidad son opcionales.</p> <p>Una columna marcada  <code>FOR ORDINALITY</code>se poblar\u00e1 con n\u00fameros de fila, empezando por 1, en el orden de los nodos recuperados de la <code>row_expression</code>el nodo-set de resultados. Como m\u00e1ximo, una columna puede marcarse <code>FOR ORDINALITY</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/15.-Funciones%20XML/03.-Procesado%20XML/03.-XMLTABLE/#nota","title":"Nota","text":"<p>XPath 1.0 no especifica un pedido de nodos en un nodo-set,  por lo que el c\u00f3digo que se basa en un orden particular de los  resultados ser\u00e1 dependiente de la implementaci\u00f3n. Los detalles se pueden encontrar en la secci\u00f3n D.3.1.2.</p> <p>El  <code>column_expression</code>para una columna es una expresi\u00f3n XPath 1.0 que se eval\u00faa para cada fila, con el nodo actual de la  <code>row_expression</code>dar como elemento contextual, encontrar el valor de la columna. Si no  <code>column_expression</code>se da, entonces el nombre de la columna se utiliza como una ruta impl\u00edcita.</p> <p>Si la expresi\u00f3n XPath de una columna devuelve un valor no XML  (que se limita a cadena, booleano o doble en XPath 1.0) y la columna  tiene un tipo PostgreSQL que no sea <code>xml</code>, la columna se establecer\u00e1 como si estuviera asignando la representaci\u00f3n de la cadena del valor al tipo PostgreSQL. (Si el valor es booleano, su representaci\u00f3n de cuerda se toma como  <code>1</code>o o  <code>0</code>si la categor\u00eda de tipo de la columna de salida es num\u00e9rica, de lo contrario  <code>true</code>o o <code>false</code>.)</p> <p>Si la expresi\u00f3n XPath de una columna devuelve un conjunto no vac\u00edo de nodos XML y el tipo PostgreSQL de la columna es <code>xml</code>, se le asignar\u00e1 la columna el resultado de la expresi\u00f3n exactamente, si es de documento o formulario de contenido. [8]</p> <p>Un resultado no XML asignado a un  <code>xml</code>La columna de salida produce contenido, un solo nodo de texto con el valor de cadena del resultado. Un resultado XML asignado a una columna de  cualquier otro tipo puede no tener m\u00e1s que un nodo, o se levanta un  error. Si hay exactamente un nodo, la columna se configurar\u00e1 como si  asignando el valor de cadena del nodo (seg\u00fan se define para el XPath 1.0  <code>string</code>funci\u00f3n) al tipo PostgreSQL.</p> <p>El valor de cadena de un elemento XML es la concatenaci\u00f3n, en  orden de documentos, de todos los nodos de texto contenidos en ese  elemento y sus descendientes. El valor de cadena de un elemento sin  nodos de texto descendientes es una cadena vac\u00eda (no <code>NULL</code>). Cualquiera  <code>xsi:nil</code>Los atributos son ignorados. Tenga en cuenta que el espacio blanco-s\u00f3lo  <code>text()</code>el nodo entre dos elementos no-texto se conserva, y ese espacio en blanco l\u00edder en un  <code>text()</code>El nodo no est\u00e1 aplanado. El XPath 1.0  <code>string</code>funci\u00f3n puede ser consultada para las reglas que definen el valor de cadena de otros tipos de ganglios XML y valores no XML.</p> <p>Las normas de conversi\u00f3n presentadas aqu\u00ed no son exactamente las de la norma SQL, como se examina en la secci\u00f3n D.3.1.3.</p> <p>Si la expresi\u00f3n de la ruta devuelve un nodo vac\u00edo (normalmente, cuando no coin coinja) para una fila dada, la columna se pondr\u00e1 en <code>NULL</code>, a menos que a  <code>default_expression</code>se especifica; entonces se utiliza el valor resultante de la evaluaci\u00f3n de esa expresi\u00f3n.</p> <p>A <code>default_expression</code>, en lugar de ser evaluado inmediatamente cuando  <code>xmltable</code>se llama, se eval\u00faa cada vez que se necesita un defecto para la columna.  Si la expresi\u00f3n califica de estable o inmutable, se puede saltar la  repetici\u00f3n. Esto significa que usted puede utilizar \u00fatilmente funciones  vol\u00e1tiles como  <code>nextval</code>en <code>default_expression</code>.</p> <p>Las columnas pueden estar marcadas <code>NOT NULL</code>. Si el  <code>column_expression</code>para a  <code>NOT NULL</code>la columna no coincide con nada y no hay  <code>DEFAULT</code>o la  <code>default_expression</code>tambi\u00e9n eval\u00faa a null, se reporta un error.</p> <p>Ejemplos:</p> <pre><code>CREATE TABLE xmldata AS SELECT\nxml $$\n- .\n  R$ id=\"1\"\n    -COUNTRY.ID-AU-/COUNTRY-ID.\n    -COUNTRY.NAME-Australia-/COUNTRY-NAME.\n  -/ROW.\n  R$ id=\"5\"\n    OCOUNTRY.ID-JP/COUNTRY-ID.\n    -COUNTRY-NAME-Japan/COUNTRY-NAME.\n    -PREMIER.NAME-Shinzo Abe/PREMIER-NAME.\n    SIZE unit='sq-mi\"-145935-/SIZE.\n  -/ROW.\n  - ROW id=\"6\"\n    -COUNTRY.ID.Gr./COUNTRY-ID.\n    -COUNTRY-NAME-Singapur/COUNTRY-NAME.\n    SIZE unit='sq'km\".697\"/SIZE.\n  -/ROW.\n-/ROWS.\n$$ Datos del AS;\n\nSELECT xmltable.*\n  De xmldata,\n       XMLTABLE('//ROWS/ROW'\n                Datos de PASSING\n                COLUMNS id int PATH 'id',\n                        ordinalidad PARA ORDINALIDAD,\n                        \"COUNTRY-NAME\" texto,\n                        countryid Texto PATH \"COUNTRY-ID\",\n                        tallasq.km float PATH 'SIZE[-unit = \"sq-km\"]',\n                        tama\u00f1o.Otro texto PATH\n                             \"concat(SIZE[-unit-=sq-km\"], \", SIZE[-unit-=sq-km\"]/-unit) ',\n                        el texto de primer nombre PATH 'PREMIER-NAME' DEFAULT 'no especificado');\n\n id . ordinalidad. COUNTRY.NAME . country.id . tama\u00f1os desq.km . Talla.other . premier.\n-----------------------------------------------------------------------------------------------------\n  1 1 1 Australia, UA, no especificado\n  5 * 2 * Jap\u00f3n JP * 145935 sq-mi * Shinzo Abe *\n  6 3 Singapur SG 697 - No especificado\n</code></pre> <p>El siguiente ejemplo muestra la concatenaci\u00f3n de m\u00faltiples  nodos de texto (), el uso del nombre de la columna como filtro XPath, y  el tratamiento de espacio en blanco, comentarios XML y instrucciones de  procesamiento:</p> <pre><code>CREATE xmlelements de TABLABLEOS\nxml $$\n  - ra\u00edz.\n   Hola-- xyxxz ---2a2?aaaaaaaaaaa? -x-----Bbb.xxx./xCC.\n  -/root.\n$$ Datos del AS;\n\nSELECT xmltable.*\n  DES DE xmlelements, XMLTABLE('/root' Datos PASSING texto del elemento COLUMNS);\n         elemento\n-----------------------\n   Hello2a2 bbbxxxCC\n</code></pre> <p>El siguiente ejemplo ilustra c\u00f3mo el  <code>XMLNAMESPACES</code>La cl\u00e1usula se puede utilizar para especificar una lista de espacios de  nombres utilizados en el documento XML, as\u00ed como en las expresiones  XPath:</p> <pre><code>CON xmldata(datos) AS (VALUES ('\n\"example xmlns=\"http://example.com/myns\" xmlns:B=\"http://example.com/b\"\n item foo=\"1\" B:bar=\"2\"/*\n .item foo=\"3\" B:bar=\"4\"/*\n .item foo=\"4\" B:bar=\"5\"/*\n-/ejemplo'::xml)\n)\nSELECT xmltable.*\n  DESDE XMLTABLE (XMLNAMESPACES)(http://example.com/myns' AS x,\n                              'http://example.com/b' AS \"B\"),\n             '/x:example/x:item'\n                PASSING (DatosSELECT DE xmldata)\n                COLUMNS foo int PATH 'foo',\n                  barra int PATH 'B:bar');\n Flobo\n---------\n   1 1o 2\n   3 x 4\n   4 5\n(3 filas)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/18.-Conditional%20Expressions/","title":"Index","text":"<p>This section describes the SQL-compliant conditional expressions available in PostgreSQL.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/18.-Conditional%20Expressions/#tip","title":"Tip","text":"<p>If your needs go beyond the capabilities of these conditional  expressions, you might want to consider writing a server-side function  in a more expressive programming language.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/18.-Conditional%20Expressions/#note","title":"Note","text":"<p>Although <code>COALESCE</code>, <code>GREATEST</code>, and <code>LEAST</code> are syntactically similar to functions, they are not ordinary functions, and thus cannot be used with explicit <code>VARIADIC</code> array arguments.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/18.-Conditional%20Expressions/01.-CASE/","title":"01.-CASE","text":"<p>The SQL <code>CASE</code> expression is a generic conditional expression, similar to if/else statements in other programming languages:</p> <pre><code>CASE WHEN condition THEN result\n     [WHEN ...]\n     [ELSE result]\nEND\n</code></pre> <p><code>CASE</code> clauses can be used wherever an expression is valid. Each <code>condition</code> is an expression that returns a <code>boolean</code> result. If the condition's result is true, the value of the <code>CASE</code> expression is the <code>result</code> that follows the condition, and the remainder of the <code>CASE</code> expression is not processed. If the condition's result is not true, any subsequent <code>WHEN</code> clauses are examined in the same manner. If no <code>WHEN</code> <code>condition</code> yields true, the value of the <code>CASE</code> expression is the <code>result</code> of the <code>ELSE</code> clause. If the <code>ELSE</code> clause is omitted and no condition is true, the result is null.</p> <p>An example:</p> <pre><code>SELECT * FROM test;\n\n a\n---\n 1\n 2\n 3\n\n\nSELECT a,\n       CASE WHEN a=1 THEN 'one'\n            WHEN a=2 THEN 'two'\n            ELSE 'other'\n       END\n    FROM test;\n\n a | case\n---+-------\n 1 | one\n 2 | two\n 3 | other\n</code></pre> <p>The data types of all the <code>result</code> expressions must be convertible to a single output type. See Section 10.5 for more details.</p> <p>There is a \u201csimple\u201d form of <code>CASE</code> expression that is a variant of the general form above:</p> <pre><code>CASE expression\n    WHEN value THEN result\n    [WHEN ...]\n    [ELSE result]\nEND\n</code></pre> <p>The first <code>expression</code> is computed, then compared to each of the <code>value</code> expressions in the <code>WHEN</code> clauses until one is found that is equal to it. If no match is found, the <code>result</code> of the <code>ELSE</code> clause (or a null value) is returned. This is similar to the <code>switch</code> statement in C.</p> <p>The example above can be written using the simple <code>CASE</code> syntax:</p> <pre><code>SELECT a,\n       CASE a WHEN 1 THEN 'one'\n              WHEN 2 THEN 'two'\n              ELSE 'other'\n       END\n    FROM test;\n\n a | case\n---+-------\n 1 | one\n 2 | two\n 3 | other\n</code></pre> <p>A <code>CASE</code> expression does not evaluate  any subexpressions that are not needed to determine the result. For  example, this is a possible way of avoiding a division-by-zero failure:</p> <pre><code>SELECT ... WHERE CASE WHEN x &lt;&gt; 0 THEN y/x &gt; 1.5 ELSE false END;\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/18.-Conditional%20Expressions/01.-CASE/#note","title":"Note","text":"<p>As described in Section 4.2.14, there are various situations in which subexpressions of an expression  are evaluated at different times, so that the principle that \u201c<code>CASE</code> evaluates only necessary subexpressions\u201d is not ironclad. For example a constant <code>1/0</code> subexpression will usually result in a division-by-zero failure at planning time, even if it's within a <code>CASE</code> arm that would never be entered at run time.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/18.-Conditional%20Expressions/02.-COALESCE/","title":"02.-COALESCE","text":"<pre><code>COALESCE(value [, ...])\n</code></pre> <p>The <code>COALESCE</code> function returns the  first of its arguments that is not null. Null is returned only if all  arguments are null. It is often used to substitute a default value for  null values when data is retrieved for display, for example:</p> <pre><code>SELECT COALESCE(description, short_description, '(none)') ...\n</code></pre> <p>This returns <code>description</code> if it is not null, otherwise <code>short_description</code> if it is not null, otherwise <code>(none)</code>.</p> <p>The arguments must all be convertible to a common data type, which will be the type of the result (see Section 10.5 for details).</p> <p>Like a <code>CASE</code> expression, <code>COALESCE</code> only evaluates the arguments that are needed to determine the result;  that is, arguments to the right of the first non-null argument are not  evaluated. This SQL-standard function provides capabilities similar to <code>NVL</code> and <code>IFNULL</code>, which are used in some other database systems.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/18.-Conditional%20Expressions/03.-NULLIF/","title":"03.-NULLIF","text":"<pre><code>NULLIF(value1, value2)\n</code></pre> <p>The <code>NULLIF</code> function returns a null value if <code>value1</code> equals <code>value2</code>; otherwise it returns <code>value1</code>. This can be used to perform the inverse operation of the <code>COALESCE</code> example given above:</p> <pre><code>SELECT NULLIF(value, '(none)') ...\n</code></pre> <p>In this example, if <code>value</code> is <code>(none)</code>, null is returned, otherwise the value of <code>value</code> is returned.</p> <p>The two arguments must be of comparable types. To be specific, they are compared exactly as if you had written <code>*</code>value1<code>* = *</code>value2<code>*</code>, so there must be a suitable <code>=</code> operator available.</p> <p>The result has the same type as the first argument \u2014 but there is a subtlety. What is actually returned is the first argument of the  implied <code>=</code> operator, and in some cases that will have been promoted to match the second argument's type. For example, <code>NULLIF(1, 2.2)</code> yields <code>numeric</code>, because there is no <code>integer</code> <code>=</code> <code>numeric</code> operator, only <code>numeric</code> <code>=</code> <code>numeric</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/18.-Conditional%20Expressions/04.-GREATEST%20y%20LEAST/","title":"04.-GREATEST y LEAST","text":"<pre><code>GREATEST(value [, ...])\nLEAST(value [, ...])\n</code></pre> <p>The <code>GREATEST</code> and <code>LEAST</code> functions select the largest or smallest value from a list of any  number of expressions. The expressions must all be convertible to a  common data type, which will be the type of the result (see Section 10.5 for details).</p> <p>NULL values in the argument list are ignored. The result will be  NULL only if all the expressions evaluate to NULL. (This is a deviation  from the SQL standard. According to the standard, the return value is  NULL if any argument is NULL. Some other databases behave this way.)</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/23.-Expresiones%20de%20subconsultas/","title":"Index","text":"<p>En esta secci\u00f3n se describe la SQL- expresiones subcoonsulta de conformidad disponibles en PostgreSQL. Todas las formas de expresi\u00f3n documentadas en esta secci\u00f3n devuelve resultados booleanos (fiel/falsso).</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/23.-Expresiones%20de%20subconsultas/01.-EXISTS/","title":"01.-EXISTS","text":"<pre><code>EXISTAS (S.subquery)\n</code></pre> <p>El argumento de  <code>EXISTS</code>es un arbitrario  <code>SELECT</code>declaraci\u00f3n, o subc\u00fagulo. La subcoquer\u00eda se eval\u00faa para determinar si devuelve alguna fila. Si regresa al menos una fila, el resultado de  <code>EXISTS</code>es - verdad - . . . . . . . . . . . . . . . . . . . .  <code>EXISTS</code>es falsofalse.</p> <p>La subcoquer\u00eda puede referirse a variables de la consulta  circundante, que actuar\u00e1 como constantes durante cualquier evaluaci\u00f3n de la subcoquer\u00eda.</p> <p>La subcoquer\u00eda generalmente s\u00f3lo se ejecutar\u00e1 el tiempo  suficiente para determinar si al menos una fila es devuelta, no todo el  camino hasta completar. Es imprable escribir una subcr\u00e1til que tenga  efectos secundarios (como las funciones de secuencia de llamadas); si  los efectos secundarios ocurren podr\u00eda ser impredecible.</p> <p>Dado que el resultado depende s\u00f3lo de si se devuelven alguna  fila, y no del contenido de esas filas, la lista de salida de la  subcoquer\u00eda normalmente no es importante. Una convenci\u00f3n de codificaci\u00f3n com\u00fan es escribir todo  <code>EXISTS</code>pruebas en la forma <code>EXISTS(SELECT 1 WHERE ...)</code>. Sin embargo, hay excepciones a esta regla, tales como subcoquesas que utilizan <code>INTERSECT</code>.</p> <p>Este simple ejemplo es como unirse interior en <code>col2</code>, pero produce como mucho una fila de salida para cada  <code>tab1</code>fila, incluso si hay varios a juego  <code>tab2</code>hileras:</p> <pre><code>SELECT col1\nDe pesta\u00f1a1\nD\u00f3nde EXISTAS (SELECT 1 DESDE pesta\u00f1as 2 DONDE col2 = pesta\u00f1a1.col2);\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/23.-Expresiones%20de%20subconsultas/02.-IN/","title":"02.-IN","text":"<pre><code> expressionIN (subquery)\n</code></pre> <p>El lado derecho es una sublicuidad entre par\u00e9ntesis, que debe  devolver exactamente una columna. La expresi\u00f3n de la izquierda se eval\u00faa y se compara con cada fila del resultado de la subcoquer\u00eda. El  resultado de  <code>IN</code>es cierto si se encuentra una fila de sucario igual. El resultado es falso falsesi no se encuentra ninguna fila igual (incluyendo el caso en el que la subcroner\u00eda no devuelve filas).</p> <p>Tenga en cuenta que si la expresi\u00f3n de la izquierda rinde nulo, o si no hay valores iguales de la derecha y al menos una fila derecha  rinde nulo, el resultado de la  <code>IN</code>La construcci\u00f3n ser\u00e1 nula, no falsa. Esto se ajusta a las reglas normales de SQL para combinaciones booleanas de valores nulos.</p> <p>Al igual que con <code>EXISTS</code>, no es prudente suponer que la subcoquer\u00eda ser\u00e1 evaluada completamente.</p> <pre><code> row_constructorIN (subquery)\n</code></pre> <p>El lado izquierdo de esta forma de  <code>IN</code>es un constructor de filas, como se describe en la Secci\u00f3n 4.2.13. El lado derecho es una subc\u00famena entre par\u00e9ntesis, que debe devolver  exactamente tantas columnas como expresiones en la fila de la izquierda. Las expresiones de la izquierda se eval\u00faan y comparan en l\u00ednea con cada fila del resultado de la subcoche. El resultado de  <code>IN</code>es cierto si se encuentra una fila de succi\u00f3n igual. El resultado es falso falsesi no se encuentra ninguna fila igual (incluyendo el caso en el que la subcroner\u00eda no devuelve filas).</p> <p>Como es habitual, los valores nulos en las filas se combinan por  las reglas normales de las expresiones booleanas de SQL. Dos filas se  consideran iguales si todos sus miembros correspondientes no son  nenulares e iguales; las filas son desiguales si cualquier miembro  correspondiente no son nenulares y desiguales; de lo contrario se  desconoce el resultado de esa comparaci\u00f3n de filas (nula). Si todos los  resultados por fila son desiguales o nulos, con al menos un nulo,  entonces el resultado de  <code>IN</code>es nula.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/23.-Expresiones%20de%20subconsultas/03.-NOT%20IN/","title":"03.-NOT IN","text":"<pre><code> expressionNO IN (subquery)\n</code></pre> <p>El lado derecho es una sublicuidad entre par\u00e9ntesis, que debe  devolver exactamente una columna. La expresi\u00f3n de la izquierda se eval\u00faa y se compara con cada fila del resultado de la subcoquer\u00eda. El  resultado de  <code>NOT IN</code>es \"verdo\" si s\u00f3lo se encuentran filas de subc\u00faleo desiguales (incluyendo el caso  en que la subc\u00falgara no devuelve filas). El resultado es \" false\" si se encuentra alguna fila igual.</p> <p>Tenga en cuenta que si la expresi\u00f3n de la izquierda rinde nulo, o si no hay valores iguales de la derecha y al menos una fila derecha  rinde nulo, el resultado de la  <code>NOT IN</code>La construcci\u00f3n ser\u00e1 nula, no es cierto. Esto se ajusta a las reglas  normales de SQL para combinaciones booleanas de valores nulos.</p> <p>Al igual que con <code>EXISTS</code>, no es prudente suponer que la subcoquer\u00eda ser\u00e1 evaluada completamente.</p> <pre><code> row_constructorNO IN (subquery)\n</code></pre> <p>El lado izquierdo de esta forma de  <code>NOT IN</code>es un constructor de filas, como se describe en la Secci\u00f3n 4.2.13. El lado derecho es una subc\u00famena entre par\u00e9ntesis, que debe devolver  exactamente tantas columnas como expresiones en la fila de la izquierda. Las expresiones de la izquierda se eval\u00faan y comparan en l\u00ednea con cada fila del resultado de la subcoche. El resultado de  <code>NOT IN</code>es \"verd\" si s\u00f3lo se encuentran filas de subc\u00faleo desiguales (incluyendo el caso  en que la subcroner\u00eda no devuelve filas). El resultado es \" false\" si se encuentra alguna fila igual.</p> <p>Como es habitual, los valores nulos en las filas se combinan por  las reglas normales de las expresiones booleanas de SQL. Dos filas se  consideran iguales si todos sus miembros correspondientes no son  nenulares e iguales; las filas son desiguales si cualquier miembro  correspondiente no son nenulares y desiguales; de lo contrario se  desconoce el resultado de esa comparaci\u00f3n de filas (nula). Si todos los  resultados por fila son desiguales o nulos, con al menos un nulo,  entonces el resultado de  <code>NOT IN</code>es nula.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/23.-Expresiones%20de%20subconsultas/04.-ANY-SOME/","title":"04.-ANY-SOME","text":"<pre><code>  expressionoperatorCUALQUIER (subquery)\n  expressionoperatorAlguna (subquery)\n</code></pre> <p>El lado derecho es una sublicuidad entre par\u00e9ntesis, que debe  devolver exactamente una columna. La expresi\u00f3n de la izquierda se eval\u00faa y se compara con cada hilera del resultado de la subcoche utilizando el <code>operator</code>, que debe producir un resultado booleano. El resultado de  <code>ANY</code>es - verdad - si se obtiene alg\u00fan resultado verdadero. El resultado es falso falsesi no se encuentra ning\u00fan resultado real (incluyendo el caso en el que la subcoquer\u00eda no devuelve filas).</p> <p><code>SOME</code>es sin\u00f3nimo de <code>ANY</code>.  <code>IN</code>es equivalente a <code>= ANY</code>.</p> <p>Tenga en cuenta que si no hay \u00e9xitos y al menos una fila de la  derecha cede null para el resultado del operador, el resultado de la  <code>ANY</code>La construcci\u00f3n ser\u00e1 nula, no falsa. Esto se ajusta a las reglas normales de SQL para combinaciones booleanas de valores nulos.</p> <p>Al igual que con <code>EXISTS</code>, no es prudente suponer que la subcoquer\u00eda ser\u00e1 evaluada completamente.</p> <pre><code>  row_constructoroperatorCUALQUIER (subquery)\n  row_constructoroperatorAlguna (subquery)\n</code></pre> <p>El lado izquierdo de esta forma de  <code>ANY</code>es un constructor de filas, como se describe en la Secci\u00f3n 4.2.13. El lado derecho es una subc\u00famena entre par\u00e9ntesis, que debe devolver  exactamente tantas columnas como expresiones en la fila de la izquierda. Las expresiones de la izquierda se eval\u00faan y comparan en l\u00ednea con cada fila del resultado de la subcoquer\u00eda, utilizando el <code>operator</code>. El resultado de  <code>ANY</code>es \" verdad\" - si la comparaci\u00f3n vuelve verdadera para cualquier fila de subquer\u00eda. El resultado es \" false\" si la comparaci\u00f3n devuelve falsamente para cada fila de subcoquer\u00eda  (incluyendo el caso en el que la subcoquer\u00eda no devuelve filas). El  resultado es NULL si no hay comparaci\u00f3n con una fila de subcoche  devuelve la verdad, y al menos una comparaci\u00f3n devuelve NULL.</p> <p>V\u00e9ase la secci\u00f3n 9.24.5 para m\u00e1s detalles sobre el significado de una comparaci\u00f3n de constructores de filas.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/23.-Expresiones%20de%20subconsultas/05.-ALL/","title":"05.-ALL","text":"<pre><code>  expressionoperatorTODOS (subquery)\n</code></pre> <p>El lado derecho es una sublicuidad entre par\u00e9ntesis, que debe  devolver exactamente una columna. La expresi\u00f3n de la izquierda se eval\u00faa y se compara con cada hilera del resultado de la subcoche utilizando el <code>operator</code>, que debe producir un resultado booleano. El resultado de  <code>ALL</code>es \" verdad\" - si todas las filas se producen verdaderas (incluyendo el caso en el que la subcochery no devuelve filas). El resultado es falso falsesi se encuentra alg\u00fan resultado falso. El resultado es NULL si no hay  comparaci\u00f3n con una fila de subcoquer\u00eda devuelve false, y al menos una  comparaci\u00f3n devuelve NULL.</p> <p><code>NOT IN</code>es equivalente a <code>&lt;&gt; ALL</code>.</p> <p>Al igual que con <code>EXISTS</code>, no es prudente suponer que la subcoquer\u00eda ser\u00e1 evaluada completamente.</p> <pre><code>  row_constructoroperatorTODOS (subquery)\n</code></pre> <p>El lado izquierdo de esta forma de  <code>ALL</code>es un constructor de filas, como se describe en la Secci\u00f3n 4.2.13. El lado derecho es una subc\u00famena entre par\u00e9ntesis, que debe devolver  exactamente tantas columnas como expresiones en la fila de la izquierda. Las expresiones de la izquierda se eval\u00faan y comparan en l\u00ednea con cada fila del resultado de la subcoquer\u00eda, utilizando el <code>operator</code>. El resultado de  <code>ALL</code>es \" verdad - si la comparaci\u00f3n devuelve la verdad para todas las filas de sublicuros (incluyendo el caso en el que la subcoquer\u00eda no devuelve filas). El  resultado es falso \u201cfalse\u201dsi la comparaci\u00f3n devuelve falsa para cualquier fila de subcoche. El  resultado es NULL si no hay comparaci\u00f3n con una fila de subcoquer\u00eda  devuelve false, y al menos una comparaci\u00f3n devuelve NULL.</p> <p>V\u00e9ase la secci\u00f3n 9.24.5 para m\u00e1s detalles sobre el significado de una comparaci\u00f3n de constructores de filas.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/23.-Expresiones%20de%20subconsultas/06.-Comparaciones%20de%20una%20sola%20fila/","title":"06.-Comparaciones de una sola fila","text":"<pre><code>  row_constructoroperator(subquery)\n</code></pre> <p>El lado izquierdo es un constructor de filas, como se describe en la Secci\u00f3n 4.2.13. El lado derecho es una subculci\u00f3n entre par\u00e9ntesis, que debe devolver  exactamente tantas columnas como expresiones en la fila izquierda.  Adem\u00e1s, la subcoquer\u00eda no puede devolver m\u00e1s de una fila. (Si devuelve  cero filas, el resultado se toma como nulo.) El lado izquierdo se eval\u00faa y se compara en l\u00ednea con la \u00fanica fila de la subliculos.</p> <p>V\u00e9ase la secci\u00f3n 9.24.5 para m\u00e1s detalles sobre el significado de una comparaci\u00f3n de constructores de filas.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/24.-Comparaciones%20de%20filas%20y%20Array/","title":"Index","text":"<p>En esta secci\u00f3n se describen varias construcciones especializadas para  hacer m\u00faltiples comparaciones entre grupos de valores. Estas formas  est\u00e1n sint\u00e1cticamente relacionadas con las formas subcoquer\u00edas de la  secci\u00f3n anterior, pero no implican subconexicores. Los formularios que  implican subexpresiones de array son extensiones PostgreSQL; el resto SQL- conforme. Todas las formas de expresi\u00f3n documentadas en esta secci\u00f3n devuelve resultados booleanos (fiel/falsso).</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/24.-Comparaciones%20de%20filas%20y%20Array/01.-IN/","title":"01.-IN","text":"<pre><code> expressionIN ( value[, ...])\n</code></pre> <p>El lado derecho es una lista de expresiones entre par\u00e9ntesis. El resultado es \"o verdadero) si el resultado de la expresi\u00f3n de la izquierda es igual a cualquiera  de las expresiones de la derecha. Esta es una notaci\u00f3n de taque de</p> <pre><code> expression= \nvalue1O O o\n expression= \nvalue2O O o\n...\n</code></pre> <p>Tenga en cuenta que si la expresi\u00f3n de la izquierda rinde null, o si no hay valores iguales de la derecha y al menos una expresi\u00f3n de la  derecha rinde nulo, el resultado de la  <code>IN</code>La construcci\u00f3n ser\u00e1 nula, no falsa. Esto se ajusta a las reglas normales de SQL para combinaciones booleanas de valores nulos.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/24.-Comparaciones%20de%20filas%20y%20Array/02.-NOT%20IN/","title":"02.-NOT IN","text":"<pre><code> expressionNO IN ( value[, ...])\n</code></pre> <p>El lado derecho es una lista de expresiones entre par\u00e9ntesis. El resultado es \"o de verdad) si el resultado de la expresi\u00f3n de la izquierda es desigual para todas  las expresiones de la derecha. Esta es una notaci\u00f3n de taque de</p> <pre><code> expression- \nvalue1Y\n expression- \nvalue2Y\n...\n</code></pre> <p>Tenga en cuenta que si la expresi\u00f3n de la izquierda rinde null, o si no hay valores iguales de la derecha y al menos una expresi\u00f3n de la  derecha rinde nulo, el resultado de la  <code>NOT IN</code>La construcci\u00f3n ser\u00e1 nula, no es verdad como se podr\u00eda esperar ingenuo.  Esto se ajusta a las reglas normales de SQL para combinaciones booleanas de valores nulos.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/24.-Comparaciones%20de%20filas%20y%20Array/02.-NOT%20IN/#tip","title":"Tip","text":"<p><code>x NOT IN y</code>es equivalente a  <code>NOT (x IN y)</code>en todos los casos. Sin embargo, los valores nulos son mucho m\u00e1s propensos a tropezar con el novato cuando se trabaja con  <code>NOT IN</code>que cuando se trabaja con <code>IN</code>. Lo mejor es expresar su condici\u00f3n positivamente si es posible.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/24.-Comparaciones%20de%20filas%20y%20Array/03.-ANY-SOME%28arroqueo%29/","title":"03.-ANY-SOME(arroqueo)","text":"<pre><code>  expressionoperatorCUALQUIER (array expression)\n  expressionoperatorAlguna (array expression)\n</code></pre> <p>El lado derecho es una expresi\u00f3n entre par\u00e9ntesis, que debe  producir un valor de matriz. La expresi\u00f3n de la izquierda se eval\u00faa y se compara con cada elemento de la matriz utilizando el <code>operator</code>, que debe producir un resultado booleano. El resultado de  <code>ANY</code>es - verdad - si se obtiene alg\u00fan resultado verdadero. El resultado es falso si no se encuentra ning\u00fan resultado real (incluyendo el caso en el que el array tiene cero elementos).</p> <p>Si la expresi\u00f3n del array produce un array nulo, el resultado de  <code>ANY</code>ser\u00e1 nula. Si la expresi\u00f3n de la izquierda rinde nulo, el resultado de  <code>ANY</code>es normalmente nulo (aunque un operador de comparaci\u00f3n no estricto podr\u00eda  producir un resultado diferente). Adem\u00e1s, si el conjunto de la derecha  contiene elementos nulos y no se obtiene un verdadero resultado de  comparaci\u00f3n, el resultado de  <code>ANY</code>ser\u00e1 nulo, no falso (de nuevo, asumiendo un operador de comparaci\u00f3n  estricta). Esto se ajusta a las reglas normales de SQL para  combinaciones booleanas de valores nulos.</p> <p><code>SOME</code>es sin\u00f3nimo de <code>ANY</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/24.-Comparaciones%20de%20filas%20y%20Array/04.-ALL%28arroqueo%29/","title":"04.-ALL(arroqueo)","text":"<pre><code>  expressionoperatorTODOS (array expression)\n</code></pre> <p>El lado derecho es una expresi\u00f3n entre par\u00e9ntesis, que debe  producir un valor de matriz. La expresi\u00f3n de la izquierda se eval\u00faa y se compara con cada elemento de la matriz utilizando el <code>operator</code>, que debe producir un resultado booleano. El resultado de  <code>ALL</code>es \" verdad - si todas las comparaciones rinden true (incluyendo el caso en que el array tiene cero elementos). El resultado es falso falsesi se encuentra alg\u00fan resultado falso.</p> <p>Si la expresi\u00f3n del array produce un array nulo, el resultado de  <code>ALL</code>ser\u00e1 nula. Si la expresi\u00f3n de la izquierda rinde nulo, el resultado de  <code>ALL</code>es normalmente nulo (aunque un operador de comparaci\u00f3n no estricto podr\u00eda  producir un resultado diferente). Adem\u00e1s, si el conjunto de la derecha  contiene elementos nulos y no se obtiene ning\u00fan resultado de comparaci\u00f3n falsa, el resultado de  <code>ALL</code>ser\u00e1 nulo, no es cierto (otra vez, suponiendo un operador de comparaci\u00f3n  estricto). Esto se ajusta a las reglas normales de SQL para  combinaciones booleanas de valores nulos.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/24.-Comparaciones%20de%20filas%20y%20Array/04.-ALL%28arroqueo%29/#_1","title":"04.-ALL(arroqueo)","text":""},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/24.-Comparaciones%20de%20filas%20y%20Array/05.-Comparaci%C3%B3n%20de%20constructor%20de%20filas/","title":"05.-Comparaci\u00f3n de constructor de filas","text":"<pre><code>row_constructor operator row_constructor\n</code></pre> <p>Cada lado es un constructor de filas, como se describe en la Secci\u00f3n 4.2.13. Los constructores de dos filas deben tener el mismo n\u00famero de campos. Lo dado  <code>operator</code>se aplica a cada par de campos correspondientes. (Dado que los campos  podr\u00edan ser de diferentes tipos, esto significa que un operador  espec\u00edfico diferente podr\u00eda ser seleccionado para cada par.) Todos los  operadores seleccionados deben ser miembros de alguna clase de operador  de \u00e1rbol B, o ser el negador de un  <code>=</code>miembro de una clase de operador de \u00e1rbol B, lo que significa que la  comparaci\u00f3n de constructores de filas s\u00f3lo es posible cuando el  <code>operator</code>es <code>=</code>, <code>&lt;&gt;</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, o <code>&gt;=</code>, o tiene sem\u00e1ntica similar a uno de estos.</p> <p>El  <code>=</code>y  <code>&lt;&gt;</code>Los casos funcionan ligeramente diferente a los dem\u00e1s. Se consideran  iguales dos filas si todos sus miembros correspondientes no son  nie-nulos e iguales; las filas son desiguales si alg\u00fan miembro  correspondiente no son nennudos y desiguales; de lo contrario se  desconoce el resultado de la comparaci\u00f3n de filas (nula).</p> <p>Por el <code>&lt;</code>, <code>&lt;=</code>,  <code>&gt;</code>y  <code>&gt;=</code>casos, los elementos de fila se comparan de izquierda a derecha, deteni\u00e9ndose  tan pronto como se encuentra un par de elementos desiguales o nulos. Si  alguno de estos pares de elementos es nulo, se desconoce el resultado de la comparaci\u00f3n de filas (null); de lo contrario, la comparaci\u00f3n de este par de elementos determina el resultado. Por ejemplo,  <code>ROW(1,2,NULL) &lt; ROW(1,3,0)</code>rinde verdadero, no nulo, porque el tercer par de elementos no se consideran.</p> <pre><code> row_constructorES DISTINCT DE row_constructor\n</code></pre> <p>Esta construcci\u00f3n es similar a una  <code>&lt;&gt;</code>comparaci\u00f3n de filas, pero no rinde nulo por insumos nulos. En cambio, cualquier  valor nulo se considera desigual a (distinto de) cualquier valor no  nulo, y cualquier dos nulos se consideran iguales (no distintos). As\u00ed el resultado ser\u00e1 cierto o falso, nunca nulo.</p> <pre><code> row_constructorNO DISTINCT DESDE row_constructor\n</code></pre> <p>Esta construcci\u00f3n es similar a una  <code>=</code>comparaci\u00f3n de filas, pero no rinde nulo por insumos nulos. En cambio, cualquier  valor nulo se considera desigual a (distinto de) cualquier valor no  nulo, y cualquier dos nulos se consideran iguales (no distintos). As\u00ed el resultado siempre ser\u00e1 verdadero o falso, nunca nulo.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/24.-Comparaciones%20de%20filas%20y%20Array/06.-Comparaci%C3%B3n%20de%20tipo%20compuesto/","title":"06.-Comparaci\u00f3n de tipo compuesto","text":"<pre><code>record operator record\n</code></pre> <p>La especificaci\u00f3n SQL requiere la comparaci\u00f3n en fila para  devolver NULL si el resultado depende de comparar dos valores NULL o un  NULL y un no-NULL. PostgreSQL lo hace s\u00f3lo cuando se comparan los resultados de constructores de dos filas (como en la secci\u00f3n 9.24.5) o comparando un constructor de fila con la salida de una subcualidad (como en la Secci\u00f3n 9.23). En otros contextos en los que se comparan dos valores de tipo  compuesto, se consideran iguales dos valores de campo NULL, y un NULL se considera mayor que un no-NULL. Esto es necesario para tener un  comportamiento de clasificaci\u00f3n e indexaci\u00f3n consistente para tipos  compuestos.</p> <p>Cada lado se eval\u00faa y se comparan en l\u00ednea. Se permiten comparaciones de tipo compuesto cuando el  <code>operator</code>es <code>=</code>, <code>&lt;&gt;</code>, <code>&lt;</code>, <code>&lt;=</code>,  <code>&gt;</code>o o <code>&gt;=</code>, o tiene sem\u00e1ntica similar a uno de estos. (Para ser espec\u00edfico, un  operador puede ser un operador de comparaci\u00f3n de filas si es miembro de  una clase de operador de tipo B, o es el negador de la  <code>=</code>miembro de una clase de operador de \u00e1rbol B.) El comportamiento por defecto de los operadores anteriores es el mismo que para  <code>IS [ NOT ] DISTINCT FROM</code>para los constructores de filas (v\u00e9ase la secci\u00f3n 9.24.5).</p> <p>Para apoyar la correspondencia de las filas que incluyen  elementos sin una clase de operador de \u00e1rbol B predeterminada, los  siguientes operadores se definen para la comparaci\u00f3n de tipo compuesto: <code>*=</code>, <code>*&lt;&gt;</code>, <code>*&lt;</code>, <code>*&lt;=</code>, <code>*&gt;</code>, y <code>*&gt;=</code>. Estos operadores comparan la representaci\u00f3n binaria interna de las dos  filas. Dos filas podr\u00edan tener una representaci\u00f3n binaria diferente a  pesar de que las comparaciones de las dos filas con el operador de  igualdad es cierta. El ordenamiento de las filas en estos operadores de  comparaci\u00f3n es determinista, pero no tiene sentido. Estos operadores se  utilizan internamente para conocerse de las vistas materializadas y  podr\u00edan ser \u00fatiles para otros fines especializados, como la replicaci\u00f3n y la deduplicaci\u00f3n de B-Tree (v\u00e9ase la secci\u00f3n 67.4.3). Sin embargo, no est\u00e1n destinados a ser generalmente \u00fatiles para las consultas de escritura.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/26.Funciones%20y%20operadores%20de%20informaci%C3%B3n%20del%20sistema/","title":"Index","text":"<p>Las funciones descritas en esta secci\u00f3n se utilizan para obtener diversa informaci\u00f3n sobre una instalaci\u00f3n de PostgreSQL.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/26.Funciones%20y%20operadores%20de%20informaci%C3%B3n%20del%20sistema/01.-Funciones%20de%20informaci%C3%B3n%20de%20sesi%C3%B3n/","title":"01.-Funciones de informaci\u00f3n de sesi\u00f3n","text":"<p>En el cuadro 9.67 se indican varias funciones que extraen la informaci\u00f3n de sesi\u00f3n y del sistema.</p> <p>Adem\u00e1s de las funciones enumeradas en esta secci\u00f3n, hay una serie de funciones relacionadas con el sistema de estad\u00edsticas que tambi\u00e9n  proporcionan informaci\u00f3n del sistema. Para m\u00e1s informaci\u00f3n v\u00e9ase .</p> <p>Cuadro 9.67. Funciones de informaci\u00f3n de sesi\u00f3n</p> Funci\u00f3n                Descripci\u00f3n <code>current_catalog</code>- <code>name</code> <code>current_database</code>() <code>name</code>                Devuelve el nombre de la base de datos actual. (Las bases de datos se llaman cat\u00e1logos en el est\u00e1ndar SQL, por lo que  <code>current_catalog</code>es la orta\u00f1o est\u00e1ndar.) <code>current_query</code>() <code>text</code>                Devuelve el texto de la consulta actualmente  ejecutada, seg\u00fan lo presentado por el cliente (que podr\u00eda contener m\u00e1s  de una declaraci\u00f3n). <code>current_role</code>- <code>name</code>                Esto equivale a <code>current_user</code>. <code>current_schema</code>- <code>name</code> <code>current_schema</code>()                 Devuelve el nombre del esquema que es primero en la  ruta de b\u00fasqueda (o un valor nulo si la ruta de b\u00fasqueda est\u00e1 vac\u00eda).  Este es el esquema que se utilizar\u00e1 para cualquier tabla u otros objetos nombrados que se crean sin especificar un esquema de destino. <code>current_schemas</code>(   <code>include_implicit</code><code>boolean</code>) . <code>name[]</code>                Devuelve una matriz de los nombres de todos los  esquemas actualmente en la ruta de b\u00fasqueda efectiva, en su orden  prioritario. (S\u00edems en el actual entorno de b\u00fasqueda-path que no se corresponden con esquemas existentes y buscables se omiten.) Si el argumento booleano es <code>true</code>, entonces esquemas del sistema de b\u00fasqueda impl\u00edcita - tales como  <code>pg_catalog</code>se incluyen en el resultado. <code>current_user</code>- <code>name</code>                Devuelve el nombre de usuario del contexto de ejecuci\u00f3n actual. <code>inet_client_addr</code>() <code>inet</code>                Devuelve la direcci\u00f3n IP del cliente actual, o  <code>NULL</code>si la conexi\u00f3n actual es a trav\u00e9s de un enchute Unix-domain. <code>inet_client_port</code>() <code>integer</code>                Devuelve el n\u00famero de puerto IP del cliente actual, o  <code>NULL</code>si la conexi\u00f3n actual es a trav\u00e9s de un enchute Unix-domain. <code>inet_server_addr</code>() <code>inet</code>                Devuelve la direcci\u00f3n IP en la que el servidor acept\u00f3 la conexi\u00f3n actual, o  <code>NULL</code>si la conexi\u00f3n actual es a trav\u00e9s de un enchute Unix-domain. <code>inet_server_port</code>() <code>integer</code>                Devuelve el n\u00famero de puerto IP en el que el servidor acept\u00f3 la conexi\u00f3n actual, o  <code>NULL</code>si la conexi\u00f3n actual es a trav\u00e9s de un enchute Unix-domain. <code>pg_backend_pid</code>() <code>integer</code>                Devuelve el ID de proceso del proceso del servidor conectada a la sesi\u00f3n actual. <code>pg_blocking_pids</code>(  <code>integer</code>) . <code>integer[]</code>                Devuelve una matriz de ID de proceso (s) de las  sesiones que est\u00e1n bloqueando el proceso del servidor con el ID de  proceso especificado de adquisici\u00f3n de una cerramiento, o una matriz  vac\u00eda si no existe tal proceso de servidor o no est\u00e1 bloqueado.                Un proceso de servidor bloquea otro si mantiene un  bloqueo que entra en conflicto con la solicitud de bloqueo del proceso  bloqueado (bloqueo duro), o est\u00e1 esperando una cerradura que entrar\u00eda en conflicto con la solicitud de bloqueo del proceso bloqueado y est\u00e1 por  delante de ella en la cola de espera (bloqueo suave). Cuando se utilizan consultas paralelas el resultado siempre enumera identificaciones de  proceso de consulta con el cliente (es decir,  <code>pg_backend_pid</code>resultados) incluso si la cerradura real es mantenida o esperada por un proceso de  trabajador infantil. Como resultado de ello, puede haber PIDs duplicados en el resultado. Tambi\u00e9n tenga en cuenta que cuando una transacci\u00f3n  preparada mantenga una cerradura conflictiva, estar\u00e1 representada por un ID de proceso cero.                Las llamadas frecuentes a esta funci\u00f3n podr\u00edan tener  alg\u00fan impacto en el desempe\u00f1o de la base de datos, porque necesita  acceso exclusivo al estado compartido del administrador de bloqueo por  un corto tiempo. <code>pg_conf_load_time</code>() <code>timestamp with time zone</code>                Devuelve el momento en que los archivos de  configuraci\u00f3n del servidor fueron cargados por \u00faltima vez. Si la sesi\u00f3n  actual estaba viva en ese momento, este ser\u00e1 el momento en que la sesi\u00f3n en s\u00ed rele\u00ed los archivos de configuraci\u00f3n (por lo que la lectura  variar\u00e1 un poco en sesiones diferentes). De lo contrario es el momento  en que el proceso de postmaster relee los archivos de configuraci\u00f3n. <code>pg_current_logfile</code>( [  <code>text</code>] . <code>text</code>                Devuelve el nombre de la ruta del archivo de registro actualmente en uso por el coleccionador de registro. La ruta incluye el directorio log-directory y el nombre del archivo de registro individual. El resultado es  <code>NULL</code>si el coleccionista de tala est\u00e1 deshabilitado. Cuando existen varios archivos de registro, cada uno en un formato diferente,  <code>pg_current_logfile</code>sin un argumento devuelve la ruta del archivo que tiene el primer formato encontrado en la lista ordenada: <code>stderr</code>, <code>csvlog</code>, <code>jsonlog</code>.  <code>NULL</code>se devuelve si ning\u00fan archivo de registro tiene alguno de estos formatos.  Para solicitar informaci\u00f3n sobre un formato de archivo de registro  espec\u00edfico, suminisgue ya sea <code>csvlog</code>,  <code>jsonlog</code>o o  <code>stderr</code>como valor del par\u00e1metro opcional. El resultado es  <code>NULL</code>si el formato de registro solicitado no est\u00e1 configurado en log-destination. El resultado refleja el contenido de la  <code>current_logfiles</code>Archivo. <code>pg_my_temp_schema</code>() <code>oid</code>                Devuelve la OID del esquema temporal de la sesi\u00f3n  actual, o cero si no tiene ninguno (porque no ha creado ninguna tabla  temporal). <code>pg_is_other_temp_schema</code>(  <code>oid</code>) . <code>boolean</code>                Devuelve cierto si la OID dada es la OID del esquema  temporal de otra sesi\u00f3n. (Esto puede ser \u00fatil, por ejemplo, para excluir las tablas temporales de otras sesiones de una pantalla del cat\u00e1logo.) <code>pg_jit_available</code>() <code>boolean</code>                Devuelve cierto si a  JITLa extensi\u00f3n del compilador est\u00e1 disponible (ver Cap\u00edtulo 32) y el par\u00e1metro de configuraci\u00f3n de jit se establece en <code>on</code>. <code>pg_listening_channels</code>() <code>setof text</code>                Devuelve el conjunto de nombres de los canales de notificaci\u00f3n asincr\u00f3nica que la sesi\u00f3n actual est\u00e1 escuchando. <code>pg_notification_queue_usage</code>() <code>double precision</code>                Devuelve la fracci\u00f3n (0o1) del tama\u00f1o m\u00e1ximo de la  cola de notificaci\u00f3n asincr\u00f3nica que est\u00e1 ocupada actualmente por  notificaciones que est\u00e1n a la espera de ser procesada. Vea LISTEN y NOTIFY para m\u00e1s informaci\u00f3n. <code>pg_postmaster_start_time</code>() <code>timestamp with time zone</code>                Devuelve el tiempo en que el servidor comenz\u00f3. <code>pg_safe_snapshot_blocking_pids</code>(  <code>integer</code>) . <code>integer[]</code>                Devuelve una matriz de ID(s) del proceso de las  sesiones que est\u00e1n bloqueando el proceso del servidor con el ID de  proceso especificado de adquirir una instant\u00e1nea segura, o una matriz  vac\u00eda si no hay tal proceso de servidor o no est\u00e1 bloqueado.                Una sesi\u00f3n de ejecuci\u00f3n de  <code>SERIALIZABLE</code>transacci\u00f3n bloquea a  <code>SERIALIZABLE READ ONLY DEFERRABLE</code>la adquisici\u00f3n de una instant\u00e1nea hasta que \u00e9sta determine que es seguro evitar tomar cualquier cerra candado predicado. V\u00e9ase la secci\u00f3n 13.2.3 para m\u00e1s informaci\u00f3n sobre las transacciones en serie y deferrables.                Las llamadas frecuentes a esta funci\u00f3n podr\u00edan tener  alg\u00fan impacto en el desempe\u00f1o de la base de datos, porque necesita  acceso al estado compartido del administrador de bloqueo predicado por  un corto tiempo. <code>pg_trigger_depth</code>() <code>integer</code>                Devuelve el nivel actual de anidaci\u00f3n de los desencadenantes PostgreSQL (0 si no se llama, directa o indirectamente, desde el interior de un disparador). <code>session_user</code>- <code>name</code>                Devuelve el nombre del usuario de la sesi\u00f3n. <code>system_user</code>- <code>text</code>                Devuelve el m\u00e9todo de autenticaci\u00f3n y la identidad  (si la hay) que el usuario present\u00f3 durante el ciclo de autenticaci\u00f3n  antes de que se les asignara una funci\u00f3n de base de datos. Est\u00e1  representada como  <code>auth_method:identity</code>o o  <code>NULL</code>si el usuario no ha sido autenticado (por ejemplo, si se ha utilizado la autenticaci\u00f3n de confianza). <code>user</code>- <code>name</code>                Esto equivale a <code>current_user</code>. <code>version</code>() <code>text</code>                Devuelve una cadena que describe la versi\u00f3n del servidor PostgreSQL. Tambi\u00e9n puede obtener esta informaci\u00f3n de server-version, o para una versi\u00f3n legible por m\u00e1quina use server.version.num. Los desarrolladores de software deben usar  <code>server_version_num</code>(disponible desde 8.2) o  <code>PQserverVersion</code>en lugar de analizar la versi\u00f3n de texto."},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/26.Funciones%20y%20operadores%20de%20informaci%C3%B3n%20del%20sistema/01.-Funciones%20de%20informaci%C3%B3n%20de%20sesi%C3%B3n/#nota","title":"Nota","text":"<p><code>current_catalog</code>, <code>current_role</code>, <code>current_schema</code>, <code>current_user</code>, <code>session_user</code>, y  <code>user</code>tener un estatus sint\u00e1ctica especial en SQL: deben ser llamados sin par\u00e9ntesis. En PostgreSQL, los par\u00e9ntesis se pueden usar opcionalmente con <code>current_schema</code>, pero no con los otros.</p> <p>El  <code>session_user</code>es normalmente el usuario que inici\u00f3 la conexi\u00f3n actual de la base de  datos; pero los superusuarios pueden cambiar esta configuraci\u00f3n con SET SESIONES AUTHORIZATION. El  <code>current_user</code>es el identificador del usuario que es aplicable para la comprobaci\u00f3n de  permisos. Normalmente es igual al usuario de la sesi\u00f3n, pero se puede  cambiar con SET ROLE. Tambi\u00e9n cambia durante la ejecuci\u00f3n de funciones con el atributo <code>SECURITY DEFINER</code>. En Unix parlance, el usuario de sesi\u00f3n es el usuario real y el usuario actual es el usuario eficaz.  <code>current_role</code>y  <code>user</code>son sin\u00f3nimos para <code>current_user</code>. (El est\u00e1ndar SQL establece una distinci\u00f3n entre  <code>current_role</code>y <code>current_user</code>, pero PostgreSQL no, ya que unifica a los usuarios y roles en un solo tipo de entidad.)</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/26.Funciones%20y%20operadores%20de%20informaci%C3%B3n%20del%20sistema/010.-Funciones%20de%20datos%20de%20control/","title":"010.-Funciones de datos de control","text":"<p>Las funciones que se muestran en el cuadro 9.84 la informaci\u00f3n impresa inicializada durante <code>initdb</code>, como la versi\u00f3n del cat\u00e1logo. Tambi\u00e9n muestran informaci\u00f3n sobre la  tala de escritura y el procesamiento de puntos de control. Esta  informaci\u00f3n es a nivel de todo el grupo, no es espec\u00edfica de ninguna  base de datos. Estas funciones proporcionan la mayor parte de la misma  informaci\u00f3n, de la misma fuente, que la aplicaci\u00f3n pg-controldata.</p> <p>Cuadro 9.84. Funciones de datos de control</p> Funci\u00f3n                Descripci\u00f3n <code>pg_control_checkpoint</code>() <code>record</code>                Devuelve la informaci\u00f3n sobre el estado actual de control, como se muestra en el cuadro 9.85. <code>pg_control_system</code>() <code>record</code>                Devuelve la informaci\u00f3n sobre el estado actual del archivo de control, como se muestra en la Tabla 9.86. <code>pg_control_init</code>() <code>record</code>                Devuelve la informaci\u00f3n sobre el estado de inicializaci\u00f3n del cl\u00faster, como se muestra en la Tabla 9.87. <code>pg_control_recovery</code>() <code>record</code>                Devuelve la informaci\u00f3n sobre el estado de recuperaci\u00f3n, como se muestra en la Tabla 9.88. <p>Cuadro 9.85.  <code>pg_control_checkpoint</code>Columnas de salida</p> Nombre de la columna Tipo de datos <code>checkpoint_lsn</code> <code>pg_lsn</code> <code>redo_lsn</code> <code>pg_lsn</code> <code>redo_wal_file</code> <code>text</code> <code>timeline_id</code> <code>integer</code> <code>prev_timeline_id</code> <code>integer</code> <code>full_page_writes</code> <code>boolean</code> <code>next_xid</code> <code>text</code> <code>next_oid</code> <code>oid</code> <code>next_multixact_id</code> <code>xid</code> <code>next_multi_offset</code> <code>xid</code> <code>oldest_xid</code> <code>xid</code> <code>oldest_xid_dbid</code> <code>oid</code> <code>oldest_active_xid</code> <code>xid</code> <code>oldest_multi_xid</code> <code>xid</code> <code>oldest_multi_dbid</code> <code>oid</code> <code>oldest_commit_ts_xid</code> <code>xid</code> <code>newest_commit_ts_xid</code> <code>xid</code> <code>checkpoint_time</code> <code>timestamp with time zone</code> <p>Cuadro 9.86.  <code>pg_control_system</code>Columnas de salida</p> Nombre de la columna Tipo de datos <code>pg_control_version</code> <code>integer</code> <code>catalog_version_no</code> <code>integer</code> <code>system_identifier</code> <code>bigint</code> <code>pg_control_last_modified</code> <code>timestamp with time zone</code> <p>Cuadro 9.87.  <code>pg_control_init</code>Columnas de salida</p> Nombre de la columna Tipo de datos <code>max_data_alignment</code> <code>integer</code> <code>database_block_size</code> <code>integer</code> <code>blocks_per_segment</code> <code>integer</code> <code>wal_block_size</code> <code>integer</code> <code>bytes_per_wal_segment</code> <code>integer</code> <code>max_identifier_length</code> <code>integer</code> <code>max_index_columns</code> <code>integer</code> <code>max_toast_chunk_size</code> <code>integer</code> <code>large_object_chunk_size</code> <code>integer</code> <code>float8_pass_by_value</code> <code>boolean</code> <code>data_page_checksum_version</code> <code>integer</code> <p>Cuadro 9.88.  <code>pg_control_recovery</code>Columnas de salida</p> Nombre de la columna Tipo de datos <code>min_recovery_end_lsn</code> <code>pg_lsn</code> <code>min_recovery_end_timeline</code> <code>integer</code> <code>backup_start_lsn</code> <code>pg_lsn</code> <code>backup_end_lsn</code> <code>pg_lsn</code> <code>end_of_backup_record_required</code> <code>boolean</code>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/26.Funciones%20y%20operadores%20de%20informaci%C3%B3n%20del%20sistema/02.-Acceso%20Funciones%20de%20investigaci%C3%B3n%20de%20Privilege/","title":"02.-Acceso Funciones de investigaci\u00f3n de Privilege","text":"<p>En el cuadro 9.68 se enumeran las funciones que permiten la consulta de los privilegios de acceso a objetos de acceso program\u00e1ticamente. (Ver Secci\u00f3n 5.7 para m\u00e1s informaci\u00f3n sobre privilegios.) En estas funciones, el usuario cuyos privilegios se est\u00e1n indagando pueden ser especificados por su  nombre o por OID (<code>pg_authid</code>.<code>oid</code>), o si el nombre se da como  <code>public</code>entonces se comprueban los privilegios del pseudo-rol de la PUBLICa. Tambi\u00e9n, el  <code>user</code>argument puede omitirse por completo, en cuyo caso el  <code>current_user</code>se supone. El objeto que se est\u00e1 inquirindo puede especificarse por nombre o por OID, tambi\u00e9n. Al especificar por nombre, se puede incluir un  nombre de esquema si procede. El privilegio de acceso de inter\u00e9s se  especifica por una cadena de texto, que debe evaluar a una de las  palabras clave de privilegio apropiadas para el tipo del objeto (por  ejemplo, <code>SELECT</code>). Opcionalmente,  <code>WITH GRANT OPTION</code>se puede a\u00f1adir a un tipo de privilegio para probar si el privilegio se  mantiene con la opci\u00f3n de subvenci\u00f3n. Adem\u00e1s, los tipos de privilegios  m\u00faltiples pueden ser listados separados por comas, en cuyo caso el  resultado ser\u00e1 cierto si se mantiene alguno de los privilegios  enumerados. (El caso de la cuerda del privilegio no es significativo, y  se permite el espacio blanco extra entre, pero no dentro de los nombres  de privilegio.) Algunos ejemplos:</p> <pre><code>SELECT has.table.privilege ('myschema.mytable', 'seleccionado');\nSELECT has.table.privilege ('joe', 'mitable', 'INSERT, SELECT CON OPTION GRANT');\n</code></pre> <p>Cuadro 9.68. Acceso Funciones de investigaci\u00f3n de Privilege</p> Funci\u00f3n                Descripci\u00f3n <code>has_any_column_privilege</code>( [   <code>user</code><code>name</code>o o <code>oid</code>, ]   <code>table</code><code>text</code>o o <code>oid</code>,   <code>privilege</code><code>text</code>) . <code>boolean</code>                El usuario tiene privilegio para alguna columna de  tabla? Esto tiene \u00e9xito si el privilegio se mantiene para toda la tabla, o si hay una concesi\u00f3n a nivel de columna del privilegio por al menos  una columna. Tipos de privilegios permitidos son <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, y <code>REFERENCES</code>. <code>has_column_privilege</code>( [   <code>user</code><code>name</code>o o <code>oid</code>, ]   <code>table</code><code>text</code>o o <code>oid</code>,   <code>column</code><code>text</code>o o <code>smallint</code>,   <code>privilege</code><code>text</code>) . <code>boolean</code>                El usuario tiene privilegio para la columna de tabla  especificada? Esto tiene \u00e9xito si el privilegio se mantiene para toda la tabla, o si hay una concesi\u00f3n a nivel de columna del privilegio para la columna. La columna puede especificarse por nombre o n\u00famero de atributo (<code>pg_attribute</code>.<code>attnum</code>). Tipos de privilegios permitidos son <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, y <code>REFERENCES</code>. <code>has_database_privilege</code>( [   <code>user</code><code>name</code>o o <code>oid</code>, ]   <code>database</code><code>text</code>o o <code>oid</code>,   <code>privilege</code><code>text</code>) . <code>boolean</code>                El usuario tiene privilegio para la base de datos? Tipos de privilegios permitidos son <code>CREATE</code>, <code>CONNECT</code>, <code>TEMPORARY</code>, y  <code>TEMP</code>(que es equivalente a <code>TEMPORARY</code>). <code>has_foreign_data_wrapper_privilege</code>( [   <code>user</code><code>name</code>o o <code>oid</code>, ]   <code>fdw</code><code>text</code>o o <code>oid</code>,   <code>privilege</code><code>text</code>) . <code>boolean</code>                El usuario tiene privilegio para el envoltorio de datos extranjeros? El \u00fanico tipo de privilegio permitido es <code>USAGE</code>. <code>has_function_privilege</code>( [   <code>user</code><code>name</code>o o <code>oid</code>, ]   <code>function</code><code>text</code>o o <code>oid</code>,   <code>privilege</code><code>text</code>) . <code>boolean</code>                El usuario tiene privilegio para la funci\u00f3n? El \u00fanico tipo de privilegio permitido es <code>EXECUTE</code>.                Al especificar una funci\u00f3n por nombre en lugar de por OID, la entrada permitida es la misma que para el  <code>regprocedure</code>Tipo de datos (v\u00e9ase la secci\u00f3n 8.19). Un ejemplo es:                <code>SELECT tiene la funci\u00f3n.privilege ('joeuser', 'myfunc(int, text)', 'ejecuta');</code> <code>has_language_privilege</code>( [   <code>user</code><code>name</code>o o <code>oid</code>, ]   <code>language</code><code>text</code>o o <code>oid</code>,   <code>privilege</code><code>text</code>) . <code>boolean</code>                El usuario tiene privilegio para el lenguaje? El \u00fanico tipo de privilegio permitido es <code>USAGE</code>. <code>has_parameter_privilege</code>( [   <code>user</code><code>name</code>o o <code>oid</code>, ]  <code>parameter</code><code>text</code>,   <code>privilege</code><code>text</code>) . <code>boolean</code>                El usuario tiene privilegio para el par\u00e1metro de  configuraci\u00f3n? El nombre del par\u00e1metro es insensible a caso. Tipos de  privilegios permitidos son  <code>SET</code>y <code>ALTER SYSTEM</code>. <code>has_schema_privilege</code>( [   <code>user</code><code>name</code>o o <code>oid</code>, ]   <code>schema</code><code>text</code>o o <code>oid</code>,   <code>privilege</code><code>text</code>) . <code>boolean</code>                El usuario tiene privilegio para el esquema? Tipos de privilegios permitidos son  <code>CREATE</code>y <code>USAGE</code>. <code>has_sequence_privilege</code>( [   <code>user</code><code>name</code>o o <code>oid</code>, ]   <code>sequence</code><code>text</code>o o <code>oid</code>,   <code>privilege</code><code>text</code>) . <code>boolean</code>                El usuario tiene privilegio para la secuencia? Tipos de privilegios permitidos son <code>USAGE</code>, <code>SELECT</code>, y <code>UPDATE</code>. <code>has_server_privilege</code>( [   <code>user</code><code>name</code>o o <code>oid</code>, ]   <code>server</code><code>text</code>o o <code>oid</code>,   <code>privilege</code><code>text</code>) . <code>boolean</code>                El usuario tiene privilegio para el servidor extranjero? El \u00fanico tipo de privilegio permitido es <code>USAGE</code>. <code>has_table_privilege</code>( [   <code>user</code><code>name</code>o o <code>oid</code>, ]   <code>table</code><code>text</code>o o <code>oid</code>,   <code>privilege</code><code>text</code>) . <code>boolean</code>                El usuario tiene privilegio para la mesa? Tipos de privilegios permitidos son <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>TRUNCATE</code>, <code>REFERENCES</code>, y <code>TRIGGER</code>. <code>has_tablespace_privilege</code>( [   <code>user</code><code>name</code>o o <code>oid</code>, ]   <code>tablespace</code><code>text</code>o o <code>oid</code>,   <code>privilege</code><code>text</code>) . <code>boolean</code>                El usuario tiene privilegios para el espacio de mesa? El \u00fanico tipo de privilegio permitido es <code>CREATE</code>. <code>has_type_privilege</code>( [   <code>user</code><code>name</code>o o <code>oid</code>, ]   <code>type</code><code>text</code>o o <code>oid</code>,   <code>privilege</code><code>text</code>) . <code>boolean</code>                El usuario tiene privilegio para el tipo de datos? El \u00fanico tipo de privilegio permitido es <code>USAGE</code>. Al especificar un tipo por nombre en lugar de por OID, la entrada permitida es la misma que para el  <code>regtype</code>Tipo de datos (v\u00e9ase la secci\u00f3n 8.19). <code>pg_has_role</code>( [   <code>user</code><code>name</code>o o <code>oid</code>, ]   <code>role</code><code>text</code>o o <code>oid</code>,   <code>privilege</code><code>text</code>) . <code>boolean</code>                El usuario tiene privilegio para el rol? Tipos de privilegios permitidos son <code>MEMBER</code>, <code>USAGE</code>, y <code>SET</code>.  <code>MEMBER</code>denota la membres\u00eda directa o indirecta en la funci\u00f3n sin tener en cuenta qu\u00e9 privilegios espec\u00edficos pueden conferirse.  <code>USAGE</code>denota si los privilegios del papel est\u00e1n inmediatamente disponibles sin hacerlo <code>SET ROLE</code>, mientras que  <code>SET</code>denota si es posible cambiar el papel utilizando el  <code>SET ROLE</code>comando. Esta funci\u00f3n no permite el caso especial de la configuraci\u00f3n  <code>user</code>a <code>public</code>, porque el pseudo-rol p\u00fablico nunca puede ser un miembro de papeles reales. <code>row_security_active</code>(   <code>table</code><code>text</code>o o  <code>oid</code>) . <code>boolean</code>                Es la seguridad a nivel de fila activa para la tabla especificada en el contexto del usuario actual y el entorno actual? <p>El cuadro 9.69 muestra los operadores disponibles para la  <code>aclitem</code>tipo, que es la representaci\u00f3n de cat\u00e1logo de privilegios de acceso. Consulte la secci\u00f3n 5.7 para obtener informaci\u00f3n sobre c\u00f3mo leer los valores de privilegio de acceso.</p> <p>Cuadro 9.69.  <code>aclitem</code>Operadores</p> Operadora                Descripci\u00f3n                Ejemplos (s) <code>aclitem``=``aclitem</code>- <code>boolean</code>                Son <code>aclitem</code>es igual? (Avisa de ese tipo  <code>aclitem</code>Carece del conjunto habitual de operadores de comparaci\u00f3n; s\u00f3lo tiene igualdad. A su vez,  <code>aclitem</code>Los arrays s\u00f3lo pueden compararse para la igualdad.)                 <code>'calvin=r*w/hobbes'::aclitem = 'calvin=r*w*/hobbes'::aclitem</code>- <code>aclitem[]``@&gt;``aclitem</code>- <code>boolean</code>                La matriz contiene los privilegios especificados? (Esto es cierto si hay una entrada de array que coin conformidad con el <code>aclitem</code>'s concesionario y otorgante, y tiene al menos el conjunto especificado de privilegios.)                 <code>'{calvin=r*w/hobbes,hobbes=r*w*/postgres}'::aclitem[] @&gt; 'calvin=r*/hobbes'::aclitem</code>- <code>aclitem[]``~``aclitem</code>- <code>boolean</code>                Este es un alias desprecado para <code>@&gt;</code>.                 <code>'{calvin=r*w/hobbes,hobbes=r*w*/postgres}'::aclitem[] ~ 'calvin=r*/hobbes'::aclitem</code>- <p>El cuadro 9.70 muestra algunas funciones adicionales para gestionar la  <code>aclitem</code>tipo.</p> <p>Cuadro 9.70.  <code>aclitem</code>Funciones</p> Funci\u00f3n                Descripci\u00f3n <code>acldefault</code>(  <code>type</code><code>\"char\"</code>,   <code>ownerId</code><code>oid</code>) . <code>aclitem[]</code>                Construye un  <code>aclitem</code>array que mantiene los privilegios de acceso predeterminado para un objeto de tipo  <code>type</code>perteneciente al papel con OID <code>ownerId</code>. Esto representa los privilegios de acceso que se asumir\u00e1n cuando la  entrada ACL de un objeto sea nula. (Los privilegios de acceso  predeterminados se describen en la Secci\u00f3n 5.7.) El  <code>type</code>par\u00e1metro debe ser de 'c' para <code>COLUMN</code>, 'r' para  <code>TABLE</code>y objetos de mesa, 's' para <code>SEQUENCE</code>, 'd' para <code>DATABASE</code>, 'f' para  <code>FUNCTION</code>o o <code>PROCEDURE</code>, 'I' para <code>LANGUAGE</code>, 'L' para <code>LARGE OBJECT</code>, 'n' para <code>SCHEMA</code>, 'p' para <code>PARAMETER</code>, 't' para <code>TABLESPACE</code>, 'F' para <code>FOREIGN DATA WRAPPER</code>, 'S' para <code>FOREIGN SERVER</code>, o 'T' para  <code>TYPE</code>o o <code>DOMAIN</code>. <code>aclexplode</code>(  <code>aclitem[]</code>) .  <code>setof record</code>(  <code>grantor</code><code>oid</code>,  <code>grantee</code><code>oid</code>,  <code>privilege_type</code><code>text</code>,   <code>is_grantable</code><code>boolean</code>)                Devuelve el  <code>aclitem</code>array como un conjunto de filas. Si el concesionario es el pseudo-rol PUBLIC, est\u00e1 representado por cero en el  <code>grantee</code>columnas. Cada privilegio concedido est\u00e1 representado como <code>SELECT</code>, <code>INSERT</code>, etc (ver Tabla 5.1 para una lista completa). Tenga en cuenta que cada privilegio se rompa  como una fila separada, por lo que s\u00f3lo una palabra clave aparece en el  <code>privilege_type</code>columnas. <code>makeaclitem</code>(  <code>grantee</code><code>oid</code>,  <code>grantor</code><code>oid</code>,  <code>privileges</code><code>text</code>,   <code>is_grantable</code><code>boolean</code>) . <code>aclitem</code>                Construya un  <code>aclitem</code>con las propiedades dadas.  <code>privileges</code>es una lista separada por comas de nombres de privilegios como <code>SELECT</code>, <code>INSERT</code>, etc., todos los cuales se establecen en el resultado. (El caso de la  cuerda del privilegio no es significativo, y se permite el espacio  blanco extra entre, pero no dentro de los nombres de privilegio.)"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/26.Funciones%20y%20operadores%20de%20informaci%C3%B3n%20del%20sistema/03.-Funciones%20de%20investigaci%C3%B3n%20de%20visibilidad%20de%20esquema/","title":"03.-Funciones de investigaci\u00f3n de visibilidad de esquema","text":"<p>La Tabla 9.71 muestra funciones que determinan si un determinado objeto es visible en la ruta de b\u00fasqueda del esquema actual. Por ejemplo, se dice que una tabla es visible si su esquema que contiene est\u00e1 en la ruta de b\u00fasqueda y ninguna tabla del mismo nombre aparece m\u00e1s temprano en la ruta de  b\u00fasqueda. Esto equivale a la afirmaci\u00f3n de que la tabla puede ser  referenciada por su nombre sin la calificaci\u00f3n expl\u00edcita de esquema.  As\u00ed, para enumerar los nombres de todas las tablas visibles:</p> <pre><code>SELECT renombre FROM pg.class WHERE pg.table.is.visible (oid);\n</code></pre> <p>Para funciones y operadores, se dice que un objeto en la ruta de b\u00fasqueda es visible si no hay ning\u00fan objeto del mismo nombre y los tipos de datos de argumento (s) antes en la ruta. Para las clases de operador y las familias, se  consideran tanto el nombre como el m\u00e9todo de acceso al \u00edndice asociado.</p> <p>Cuadro 9.71. Funciones de investigaci\u00f3n de visibilidad de esquema</p> Funci\u00f3n                Descripci\u00f3n <code>pg_collation_is_visible</code>(   <code>collation</code><code>oid</code>) . <code>boolean</code>                Es visible la cocolaci\u00f3n en la ruta de b\u00fasqueda? <code>pg_conversion_is_visible</code>(   <code>conversion</code><code>oid</code>) . <code>boolean</code>                Es visible la conversi\u00f3n en la ruta de b\u00fasqueda? <code>pg_function_is_visible</code>(   <code>function</code><code>oid</code>) . <code>boolean</code>                Es la funci\u00f3n visible en la ruta de b\u00fasqueda? (Esto tambi\u00e9n funciona para procedimientos y agregados.) <code>pg_opclass_is_visible</code>(   <code>opclass</code><code>oid</code>) . <code>boolean</code>                Es visible la clase de operador en la ruta de b\u00fasqueda? <code>pg_operator_is_visible</code>(   <code>operator</code><code>oid</code>) . <code>boolean</code>                Es visible el operador en la ruta de b\u00fasqueda? <code>pg_opfamily_is_visible</code>(   <code>opclass</code><code>oid</code>) . <code>boolean</code>                Es visible la familia de los operadores en la ruta de b\u00fasqueda? <code>pg_statistics_obj_is_visible</code>(   <code>stat</code><code>oid</code>) . <code>boolean</code>                Es visible el objeto de estad\u00edstica en la ruta de b\u00fasqueda? <code>pg_table_is_visible</code>(   <code>table</code><code>oid</code>) . <code>boolean</code>                Es visible la mesa en la ruta de b\u00fasqueda? (Esto  funciona para todo tipo de relaciones, incluyendo vistas, vistas  materializadas, \u00edndices, secuencias y tablas extranjeras.) <code>pg_ts_config_is_visible</code>(   <code>config</code><code>oid</code>) . <code>boolean</code>                Es visible la configuraci\u00f3n de b\u00fasqueda de texto en la ruta de b\u00fasqueda? <code>pg_ts_dict_is_visible</code>(   <code>dict</code><code>oid</code>) . <code>boolean</code>                Es visible el diccionario de b\u00fasqueda de texto en la ruta de b\u00fasqueda? <code>pg_ts_parser_is_visible</code>(   <code>parser</code><code>oid</code>) . <code>boolean</code>                Es visible el analizador de b\u00fasqueda de texto en la ruta de b\u00fasqueda? <code>pg_ts_template_is_visible</code>(   <code>template</code><code>oid</code>) . <code>boolean</code>                Es visible la plantilla de b\u00fasqueda de texto en la ruta de b\u00fasqueda? <code>pg_type_is_visible</code>(   <code>type</code><code>oid</code>) . <code>boolean</code>                Es el tipo (o dominio) visible en la ruta de b\u00fasqueda? <p>Todas estas funciones requieren OIDs de objetos para identificar  el objeto a revisar. Si desea probar un objeto por su nombre, es  conveniente utilizar los tipos de alias OID (<code>regclass</code>, <code>regtype</code>, <code>regprocedure</code>, <code>regoperator</code>, <code>regconfig</code>, o <code>regdictionary</code>), por ejemplo:</p> <pre><code>SELECT pg.type.is.visible('myschema.widget'::regtype);\n</code></pre> <p>Tenga en cuenta que no tendr\u00eda mucho sentido probar un nombre de  tipo no calificado de este tipo de esta manera - si el nombre puede ser  reconocido en absoluto, debe ser visible.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/26.Funciones%20y%20operadores%20de%20informaci%C3%B3n%20del%20sistema/04.-Funciones%20de%20informaci%C3%B3n%20cat%C3%A1logo%20del%20sistema/","title":"04.-Funciones de informaci\u00f3n cat\u00e1logo del sistema","text":"<p>El cuadro 9.72 enumera las funciones que extraen informaci\u00f3n de los cat\u00e1logos de sistemas.</p> <p>Cuadro 9.72. Funciones de informaci\u00f3n cat\u00e1logo del sistema</p> Funci\u00f3n                Descripci\u00f3n <code>format_type</code>(  <code>type</code><code>oid</code>,   <code>typemod</code><code>integer</code>) . <code>text</code>                Devuelve el nombre SQL para un tipo de datos que se  identifica por su tipo OID y posiblemente por un modificador de tipo.  Pase NULL para el modificador de tipo si no se conoce un modificador  espec\u00edfico. <code>pg_char_to_encoding</code>(   <code>encoding</code><code>name</code>) . <code>integer</code>                Convierte la denominaci\u00f3n de codificaci\u00f3n  suministrada en un n\u00famero entero que representa el identificador interno utilizado en algunas tablas de cat\u00e1logo del sistema. Retorno  <code>-1</code>si se proporciona un nombre de codificaci\u00f3n desconocido. <code>pg_encoding_to_char</code>(   <code>encoding</code><code>integer</code>) . <code>name</code>                Convierte el n\u00famero entero utilizado como el  identificador interno de una codificaci\u00f3n en algunas tablas de cat\u00e1logos de sistemas en una cadena legible por humanos. Devuelve una cadena  vac\u00eda si se proporciona un n\u00famero de codificaci\u00f3n inv\u00e1lido. <code>pg_get_catalog_foreign_keys</code>()  <code>setof record</code>(  <code>fktable</code><code>regclass</code>,  <code>fkcols</code><code>text[]</code>,  <code>pktable</code><code>regclass</code>,  <code>pkcols</code><code>text[]</code>,  <code>is_array</code><code>boolean</code>,   <code>is_opt</code><code>boolean</code>)                Devuelve un conjunto de registros que describen las  relaciones de claves extranjeras que existen dentro de los cat\u00e1logos del sistema PostgreSQL. El  <code>fktable</code>la columna contiene el nombre del cat\u00e1logo de referencias, y el  <code>fkcols</code>la columna contiene los nombres de la columna de referencia (s). Del mismo modo, la  <code>pktable</code>la columna contiene el nombre del cat\u00e1logo referenciado, y el  <code>pkcols</code>la columna contiene el nombre de las columnas de referencia. Si  <code>is_array</code>es cierto, la \u00faltima columna de referencia es un array, cada uno de cuyos  elementos debe coincidir con alguna entrada en el cat\u00e1logo referenciado. Si  <code>is_opt</code>es cierto, se permite que la columna de referencia (s) contenga ceros en lugar de una referencia v\u00e1lida. <code>pg_get_constraintdef</code>(   <code>constraint</code><code>oid</code>[,   <code>pretty</code><code>boolean</code>] . <code>text</code>                Reconstruye el comando creador para una restricci\u00f3n.  (Esta es una reconstrucci\u00f3n descompilada, no el texto original del  comando.) <code>pg_get_expr</code>(  <code>expr</code><code>pg_node_tree</code>,   <code>relation</code><code>oid</code>[,   <code>pretty</code><code>boolean</code>] . <code>text</code>                Decompila la forma interna de una expresi\u00f3n  almacenada en los cat\u00e1logos del sistema, como el valor predeterminado de una columna. Si la expresi\u00f3n podr\u00eda contener Vars, especifique el OID  de la relaci\u00f3n a la que se refieren como el segundo par\u00e1metro; si no se  espera Vars, pasar cero es suficiente. <code>pg_get_functiondef</code>(   <code>func</code><code>oid</code>) . <code>text</code>                Reconstruye el comando creador para una funci\u00f3n o  procedimiento. (Esta es una reconstrucci\u00f3n descompilada, no el texto  original del comando.) El resultado es un completo  <code>CREATE OR REPLACE FUNCTION</code>o o  <code>CREATE OR REPLACE PROCEDURE</code>declaraci\u00f3n. <code>pg_get_function_arguments</code>(   <code>func</code><code>oid</code>) . <code>text</code>                Reconstruye la lista de argumentos de una funci\u00f3n o procedimiento, en la forma en que tendr\u00eda que aparecer en  <code>CREATE FUNCTION</code>(incluyendo los valores por defecto). <code>pg_get_function_identity_arguments</code>(   <code>func</code><code>oid</code>) . <code>text</code>                Reconstruye la lista de argumentos necesaria para  identificar una funci\u00f3n o procedimiento, en la forma en que tendr\u00eda que  aparecer dentro de comandos como <code>ALTER FUNCTION</code>. Esta forma omite valores por defecto. <code>pg_get_function_result</code>(   <code>func</code><code>oid</code>) . <code>text</code>                Reconstruye el  <code>RETURNS</code>cl\u00e1usula de una funci\u00f3n, en la forma en que tendr\u00eda que aparecer en <code>CREATE FUNCTION</code>. Retorno  <code>NULL</code>para un procedimiento. <code>pg_get_indexdef</code>(   <code>index</code><code>oid</code>[,  <code>column</code><code>integer</code>,   <code>pretty</code><code>boolean</code>] . <code>text</code>                Reconstruye el comando de creaci\u00f3n para un \u00edndice.  (Esta es una reconstrucci\u00f3n descompilada, no el texto original del  comando.) Si  <code>column</code>se suministra y no es cero, s\u00f3lo se reconstruye la definici\u00f3n de esa columna. <code>pg_get_keywords</code>()  <code>setof record</code>(  <code>word</code><code>text</code>,  <code>catcode</code><code>\"char\"</code>,  <code>barelabel</code><code>boolean</code>,  <code>catdesc</code><code>text</code>,   <code>baredesc</code><code>text</code>)                Devuelve un conjunto de registros que describen las palabras clave SQL reconocidas por el servidor. El  <code>word</code>la columna contiene la palabra clave. El  <code>catcode</code>la columna contiene un c\u00f3digo de categor\u00eda:  <code>U</code>para una palabra clave sin reservas,  <code>C</code>para una palabra clave que puede ser un nombre de columna,  <code>T</code>para una palabra clave que puede ser un tipo o nombre de funci\u00f3n, o  <code>R</code>para una palabra clave totalmente reservada. El  <code>barelabel</code>la columna contiene  <code>true</code>si la palabra clave se puede utilizar como una bareetiqueta de columna desnuda en  <code>SELECT</code>listas, o  <code>false</code>si s\u00f3lo se puede utilizar despu\u00e9s de <code>AS</code>. El  <code>catdesc</code>La columna contiene una cadena posiblemente localizada que describe la categor\u00eda de la palabra clave. El  <code>baredesc</code>La columna contiene una cadena posiblemente localizada que describe el estado de la etiqueta de columna de la palabra clave. <code>pg_get_partkeydef</code>(   <code>table</code><code>oid</code>) . <code>text</code>                Reconstruye la definici\u00f3n de la clave de partici\u00f3n de una tabla dividida, en el formulario que tendr\u00eda en el  <code>PARTITION BY</code>cl\u00e1usula de <code>CREATE TABLE</code>. (Esta es una reconstrucci\u00f3n descompilada, no el texto original del comando.) <code>pg_get_ruledef</code>(   <code>rule</code><code>oid</code>[,   <code>pretty</code><code>boolean</code>] . <code>text</code>                Reconstruye el comando creador para una regla. (Esta es una reconstrucci\u00f3n descompilada, no el texto original del comando.) <code>pg_get_serial_sequence</code>(  <code>table</code><code>text</code>,   <code>column</code><code>text</code>) . <code>text</code>                Devuelve el nombre de la secuencia asociada a una  columna, o NULL si no se asocia ninguna secuencia con la columna. Si la  columna es una columna de identidad, la secuencia asociada es la  secuencia creada internamente para esa columna. Para columnas creadas  utilizando uno de los tipos de serie (<code>serial</code>, <code>smallserial</code>, <code>bigserial</code>), es la secuencia creada para la definici\u00f3n de columna en serie. En este  \u00faltimo caso, la asociaci\u00f3n puede ser modificada o eliminada con <code>ALTER SEQUENCE OWNED BY</code>. (Esta funci\u00f3n probablemente deber\u00eda haber sido llamada <code>pg_get_owned_sequence</code>; su nombre actual refleja el hecho de que hist\u00f3ricamente se ha utilizado con columnas de tipo serie.) El primer par\u00e1metro es un nombre de mesa  con esquema opcional, y el segundo par\u00e1metro es un nombre de columna.  Debido a que el primer par\u00e1metro potencialmente contiene tanto nombres  de esquema como de tabla, se analiza por las reglas SQL usuales, lo que  significa que est\u00e1 encasillas abajo por defecto. El segundo par\u00e1metro,  siendo s\u00f3lo un nombre de columna, es tratado literalmente y tambi\u00e9n su  caso se ha conservado. El resultado se formatea adecuadamente para pasar a las funciones de secuencia (ver Secci\u00f3n 9.17).                Un uso t\u00edpico es en la lectura del valor actual de la secuencia para una identidad o columna de serie, por ejemplo:                <code>SELECT currval(pg.get.serial-sequence('sometable', 'id'));</code> <code>pg_get_statisticsobjdef</code>(   <code>statobj</code><code>oid</code>) . <code>text</code>                Reconstruye el comando creador para un objeto de  estad\u00edsticas extendido. (Esta es una reconstrucci\u00f3n descompilada, no el  texto original del comando.) <code>pg_get_triggerdef</code>(   <code>trigger</code><code>oid</code>[,   <code>pretty</code><code>boolean</code>] . <code>text</code>                Reconstruye el comando creador para un disparador. (Esta es una reconstrucci\u00f3n descompilada, no el texto original del comando.) <code>pg_get_userbyid</code>(   <code>role</code><code>oid</code>) . <code>name</code>                Devuelve el nombre de un rol dado su OID. <code>pg_get_viewdef</code>(   <code>view</code><code>oid</code>[,   <code>pretty</code><code>boolean</code>] . <code>text</code>                Reconstruye el subyacente  <code>SELECT</code>comando para una vista o vista materializada. (Esta es una reconstrucci\u00f3n descompilada, no el texto original del comando.) <code>pg_get_viewdef</code>(  <code>view</code><code>oid</code>,   <code>wrap_column</code><code>integer</code>) . <code>text</code>                Reconstruye el subyacente  <code>SELECT</code>comando para una vista o vista materializada. (Esta es una reconstrucci\u00f3n  descompilada, no el texto original del comando.) En esta forma de la  funci\u00f3n, la impresi\u00f3n bonita siempre est\u00e1 activada, y las largas colas  se envolven para tratar de mantenerlas m\u00e1s cortas que el n\u00famero  especificado de columnas. <code>pg_get_viewdef</code>(   <code>view</code><code>text</code>[,   <code>pretty</code><code>boolean</code>] . <code>text</code>                Reconstruye el subyacente  <code>SELECT</code>Comando para una vista o vista materializada, trabajando desde un nombre  textual para la vista en lugar de su OID. (Esto se desprecated; use la  variante OID en su lugar.) <code>pg_index_column_has_property</code>(  <code>index</code><code>regclass</code>,  <code>column</code><code>integer</code>,   <code>property</code><code>text</code>) . <code>boolean</code>                Prueba si una columna de \u00edndice tiene la propiedad nombrada. Las propiedades de las columnas de \u00edndice com\u00fan se enumeran en la . (Tenga en cuenta que los m\u00e9todos de acceso a la extensi\u00f3n pueden  definir nombres de propiedades adicionales para sus \u00edndices.)  <code>NULL</code>se devuelta si el nombre de la propiedad no se conoce o no se aplica al  objeto en particular, o si el n\u00famero OID o columna no identifica un  objeto v\u00e1lido. <code>pg_index_has_property</code>(  <code>index</code><code>regclass</code>,   <code>property</code><code>text</code>) . <code>boolean</code>                Prueba si un \u00edndice tiene la propiedad nombrada. Las propiedades del \u00edndice com\u00fan se enumeran en la Tabla 9.74. (Tenga en cuenta que los m\u00e9todos de acceso a la extensi\u00f3n pueden  definir nombres de propiedades adicionales para sus \u00edndices.)  <code>NULL</code>se devuelta si el nombre de la propiedad no se conoce o no se aplica al  objeto en particular, o si la OID no identifica un objeto v\u00e1lido. <code>pg_indexam_has_property</code>(  <code>am</code><code>oid</code>,   <code>property</code><code>text</code>) . <code>boolean</code>                Prueba si un m\u00e9todo de acceso \u00edndice tiene la propiedad nombrada. Las propiedades del m\u00e9todo de acceso se enumeran en la Tabla 9.75.  <code>NULL</code>se devuelta si el nombre de la propiedad no se conoce o no se aplica al  objeto en particular, o si la OID no identifica un objeto v\u00e1lido. <code>pg_options_to_table</code>(   <code>options_array</code><code>text[]</code>) .  <code>setof record</code>(  <code>option_name</code><code>text</code>,   <code>option_value</code><code>text</code>)                Devuelve el conjunto de opciones de almacenamiento representadas por un valor de <code>pg_class</code>. <code>reloptions</code>o o <code>pg_attribute</code>.<code>attoptions</code>. <code>pg_settings_get_flags</code>(   <code>guc</code><code>text</code>) . <code>text[]</code>                Devuelve una matriz de las banderas asociadas con el GUC dado, o  <code>NULL</code>si no existe. El resultado es una matriz vac\u00eda si el GUC existe pero no hay banderas que mostrar. S\u00f3lo se exponen las banderas m\u00e1s \u00fatiles enumeradas en . <code>pg_tablespace_databases</code>(   <code>tablespace</code><code>oid</code>) . <code>setof oid</code>                Devuelve el conjunto de OIDs de bases de datos que  tienen objetos almacenados en el espacio de mesa especificado. Si esta  funci\u00f3n devuelve cualquier fila, el espacio de mesa no est\u00e1 vac\u00edo y no  se puede dejar caer. Para identificar los objetos espec\u00edficos que pueban el espacio de tablas, tendr\u00e1 que conectarse a la base de datos (s)  identificado por  <code>pg_tablespace_databases</code>y cuestionar su  <code>pg_class</code>cat\u00e1logos. <code>pg_tablespace_location</code>(   <code>tablespace</code><code>oid</code>) . <code>text</code>                Devuelve la ruta del sistema de archivos en la que se encuentra este espacio de mesa. <code>pg_typeof</code>(  <code>\"any\"</code>) . <code>regtype</code>                Devuelve la OID del tipo de datos del valor que se le pasa. Esto puede ser \u00fatil para solucionar problemas o construir  din\u00e1micamente consultas SQL. La funci\u00f3n se declara como devoluci\u00f3n <code>regtype</code>, que es un tipo de alias OID (ver Secci\u00f3n 8.19); esto significa que es lo mismo que un OID para fines de comparaci\u00f3n, pero se muestra como un nombre de tipo.                Por ejemplo:                <code>SELECT pg.typeof (33); pg.typeof --------- integer SELECT typlen FROM pg.type WHERE oid = pg.typeof(33); - . -------      4</code> <code>COLLATION FOR</code>(  <code>\"any\"</code>) . <code>text</code>                Devuelve el nombre de la collaci\u00f3n del valor que se  le pasa. El valor se cita y el esquema est\u00e1 calificado en caso  necesario. Si no se deriv\u00f3 ninguna cocolaci\u00f3n para la expresi\u00f3n  argumental, entonces  <code>NULL</code>es devuelto. Si el argumento no es de tipo de datos recopilable, entonces se levanta un error.                Por ejemplo:                <code>SELECT collation for (description) FROM pg-description LIMIT 1; pg.collation.for --------------------- \"falta\" SELECT collation for ('foo' COLLATE \"de-DE\"); pg.collation.for --------------------- \"de-DE\"</code> <code>to_regclass</code>(  <code>text</code>) . <code>regclass</code>                Trails un nombre de relaci\u00f3n textual con su OID. Un resultado similar se obtiene lanzando la cuerda al tipo  <code>regclass</code>(ver secci\u00f3n 8.19); sin embargo, esta funci\u00f3n volver\u00e1  <code>NULL</code>en lugar de lanzar un error si el nombre no se encuentra. <code>to_regcollation</code>(  <code>text</code>) . <code>regcollation</code>                Traducir un nombre textual de coteja a su OID. Un resultado similar se obtiene lanzando la cuerda al tipo  <code>regcollation</code>(ver secci\u00f3n 8.19); sin embargo, esta funci\u00f3n volver\u00e1  <code>NULL</code>en lugar de lanzar un error si el nombre no se encuentra. <code>to_regnamespace</code>(  <code>text</code>) . <code>regnamespace</code>                Traduce un nombre textual de esquema a su OID. Un resultado similar se obtiene lanzando la cuerda al tipo  <code>regnamespace</code>(ver secci\u00f3n 8.19); sin embargo, esta funci\u00f3n volver\u00e1  <code>NULL</code>en lugar de lanzar un error si el nombre no se encuentra. <code>to_regoper</code>(  <code>text</code>) . <code>regoper</code>                Traducir un nombre de operador textual a su OID. Un resultado similar se obtiene lanzando la cuerda al tipo  <code>regoper</code>(ver secci\u00f3n 8.19); sin embargo, esta funci\u00f3n volver\u00e1  <code>NULL</code>en lugar de lanzar un error si el nombre no se encuentra o es ambiguo. <code>to_regoperator</code>(  <code>text</code>) . <code>regoperator</code>                Traducir un nombre de operador textual (con tipos de  par\u00e1metros) a su OID. Un resultado similar se obtiene lanzando la cuerda al tipo  <code>regoperator</code>(ver secci\u00f3n 8.19); sin embargo, esta funci\u00f3n volver\u00e1  <code>NULL</code>en lugar de lanzar un error si el nombre no se encuentra. <code>to_regproc</code>(  <code>text</code>) . <code>regproc</code>                Trails una funci\u00f3n textual o nombre de procedimiento a su OID. Un resultado similar se obtiene lanzando la cuerda al tipo  <code>regproc</code>(ver secci\u00f3n 8.19); sin embargo, esta funci\u00f3n volver\u00e1  <code>NULL</code>en lugar de lanzar un error si el nombre no se encuentra o es ambiguo. <code>to_regprocedure</code>(  <code>text</code>) . <code>regprocedure</code>                Traducir una funci\u00f3n textual o nombre de  procedimiento (con tipos de argumento) a su OID. Un resultado similar se obtiene lanzando la cuerda al tipo  <code>regprocedure</code>(ver secci\u00f3n 8.19); sin embargo, esta funci\u00f3n volver\u00e1  <code>NULL</code>en lugar de lanzar un error si el nombre no se encuentra. <code>to_regrole</code>(  <code>text</code>) . <code>regrole</code>                Traducir un nombre textual de rol a su OID. Un resultado similar se obtiene lanzando la cuerda al tipo  <code>regrole</code>(ver secci\u00f3n 8.19); sin embargo, esta funci\u00f3n volver\u00e1  <code>NULL</code>en lugar de lanzar un error si el nombre no se encuentra. <code>to_regtype</code>(  <code>text</code>) . <code>regtype</code>                Trails un nombre de tipo textual a su OID. Un resultado similar se obtiene lanzando la cuerda al tipo  <code>regtype</code>(ver secci\u00f3n 8.19); sin embargo, esta funci\u00f3n volver\u00e1  <code>NULL</code>en lugar de lanzar un error si el nombre no se encuentra. <p>La mayor\u00eda de las funciones que reconstruyen los objetos de base de datos (decompil) tienen una  <code>pretty</code>bandera, que si  <code>true</code>hace que el resultado sea bastante impreso. La impresi\u00f3n bonita suprime los par\u00e9ntesis innecesarios y a\u00f1ade espacio en blanco para la legibilidad. El formato bastante impreso es m\u00e1s  legible, pero el formato predeterminado es m\u00e1s probable que se  interprete de la misma manera en futuras versiones de PostgreSQL ; as\u00ed que evite usar salida bastante impresa para prop\u00f3sitos de volteo. Pasando  <code>false</code>para el  <code>pretty</code>El par\u00e1metro produce el mismo resultado que omitir el par\u00e1metro.</p> <p>Cuadro 9.73. Indice de las Propiedades de Columna</p> Nombre Descripci\u00f3n <code>asc</code> La columna ordena en orden ascendente en un escaneo hacia adelante? <code>desc</code> La columna ordena en un escaneo hacia adelante? <code>nulls_first</code> La columna ordena con nulls primero en un escaneo delanteros? <code>nulls_last</code> La columna ordena con nulls dura en un esc\u00e1ner delanteros? <code>orderable</code> La columna posee alg\u00fan orden de arreglo definido? <code>distance_orderable</code> Puede la columna ser escaneada en orden por un distanceoperador de distancia, por ejemplo  <code>ORDER BY col &lt;-&gt; constant</code>? <code>returnable</code> Puede el valor de la columna ser devuelto por un escaneo solo \u00edndice? <code>search_array</code> La columna apoya nativamente  <code>col = ANY(array)</code>b\u00fasquedas? <code>search_nulls</code> La columna soporta  <code>IS NULL</code>y  <code>IS NOT NULL</code>b\u00fasquedas? <p>Cuadro 9.74. Ins\u00edndice Propiedades</p> Nombre Descripci\u00f3n <code>clusterable</code> Puede el \u00edndice ser utilizado en un  <code>CLUSTER</code>comando? <code>index_scan</code> El \u00edndice soporta escaneos simples (no bitmap)? <code>bitmap_scan</code> El \u00edndice soporta escaneos de bitmap? <code>backward_scan</code> Puede cambiar la direcci\u00f3n de escaneo en el escaneo medio (para apoyar  <code>FETCH BACKWARD</code>en un cursor sin necesidad de materializaci\u00f3n)? <p>Cuadro 9.75. Ins\u00edndice M\u00e9todo de Acceso Propiedades</p> Nombre Descripci\u00f3n <code>can_order</code> Soporta el m\u00e9todo de acceso <code>ASC</code>,  <code>DESC</code>y palabras clave relacionadas en <code>CREATE INDEX</code>? <code>can_unique</code> El m\u00e9todo de acceso soporta \u00edndices \u00fanicos? <code>can_multi_col</code> El m\u00e9todo de acceso soporta \u00edndices con m\u00faltiples columnas? <code>can_exclude</code> El m\u00e9todo de acceso soporta las limitaciones de exclusi\u00f3n? <code>can_include</code> El m\u00e9todo de acceso soporta el  <code>INCLUDE</code>cl\u00e1usula de <code>CREATE INDEX</code>? <p>Cuadro 9.76. Bandas GUC</p> Bandera Descripci\u00f3n <code>EXPLAIN</code> Par\u00e1metros con esta bandera est\u00e1n incluidos en  <code>EXPLAIN (SETTINGS)</code>comandos. <code>NO_SHOW_ALL</code> Se excluyen los par\u00e1metros con esta bandera de  <code>SHOW ALL</code>comandos. <code>NO_RESET</code> Par\u00e1metros con esta bandera no soportan  <code>RESET</code>comandos. <code>NO_RESET_ALL</code> Se excluyen los par\u00e1metros con esta bandera de  <code>RESET ALL</code>comandos. <code>NOT_IN_SAMPLE</code> Los par\u00e1metros con esta bandera no est\u00e1n incluidos en  <code>postgresql.conf</code>por defecto. <code>RUNTIME_COMPUTED</code> Los par\u00e1metros con esta bandera son los que se encuentran en tiempo de ejecuci\u00f3n."},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/26.Funciones%20y%20operadores%20de%20informaci%C3%B3n%20del%20sistema/05.-Informaci%C3%B3n%20sobre%20objetos%20y%20funciones%20de%20atenci%C3%B3n/","title":"05.-Informaci\u00f3n sobre objetos y funciones de atenci\u00f3n","text":"<p>En el cuadro 9.77 se enumeran las funciones relacionadas con la identificaci\u00f3n y la ate a los objetos de la base de datos.</p> <p>Cuadro 9.77. Informaci\u00f3n sobre objetos y funciones de atenci\u00f3n</p> Funci\u00f3n                Descripci\u00f3n <code>pg_describe_object</code>(  <code>classid</code><code>oid</code>,  <code>objid</code><code>oid</code>,   <code>objsubid</code><code>integer</code>) . <code>text</code>                Devuelve una descripci\u00f3n textual de un objeto de base de datos identificado por el cat\u00e1logo OID, objeto OID y ID de subobjeto (como un n\u00famero de columna dentro de una tabla; el ID de subobjeto es  cero cuando se refiere a un objeto completo). Esta descripci\u00f3n est\u00e1  destinada a ser legible por el hombre, y podr\u00eda traducirse, dependiendo  de la configuraci\u00f3n del servidor. Esto es especialmente \u00fatil para  determinar la identidad de un objeto referenciado en el  <code>pg_depend</code>cat\u00e1logo. Esta funci\u00f3n devuelve  <code>NULL</code>valores para objetos indefinidos. <code>pg_identify_object</code>(  <code>classid</code><code>oid</code>,  <code>objid</code><code>oid</code>,   <code>objsubid</code><code>integer</code>) .  <code>record</code>(  <code>type</code><code>text</code>,  <code>schema</code><code>text</code>,  <code>name</code><code>text</code>,   <code>identity</code><code>text</code>)                Devuelve una fila que contiene suficiente informaci\u00f3n para identificar de manera \u00fanica el objeto de base de datos  especificado por el cat\u00e1logo OID, el objeto OID y el subobjeto ID. Esta  informaci\u00f3n est\u00e1 destinada a ser legible por m\u00e1quina, y nunca se  traduce.  <code>type</code>identifica el tipo de objeto de la base de datos;  <code>schema</code>es el nombre de esquema en el que pertenece el objeto, o  <code>NULL</code>para los tipos de objetos que no pertenezcan a esquemas;  <code>name</code>es el nombre del objeto, citado si es necesario, si el nombre (junto con  el nombre del esquema, si es pertinente) es suficiente para identificar  el objeto de manera \u00fanica, de lo contrario <code>NULL</code>;  <code>identity</code>es la identidad de objeto completa, con el formato preciso dependiendo del tipo de objeto, y cada nombre dentro del formato est\u00e1 calificado y  citado seg\u00fan sea necesario. Se identifican objetos indefinidos con  <code>NULL</code>valores. <code>pg_identify_object_as_address</code>(  <code>classid</code><code>oid</code>,  <code>objid</code><code>oid</code>,   <code>objsubid</code><code>integer</code>) .  <code>record</code>(  <code>type</code><code>text</code>,  <code>object_names</code><code>text[]</code>,   <code>object_args</code><code>text[]</code>)                Devuelve una fila que contiene suficiente informaci\u00f3n para identificar de manera \u00fanica el objeto de base de datos  especificado por el cat\u00e1logo OID, el objeto OID y el subobjeto ID. La  informaci\u00f3n devuelta es independiente del servidor actual, es decir,  podr\u00eda ser utilizada para identificar un objeto id\u00e9ntico en otro  servidor.  <code>type</code>identifica el tipo de objeto de la base de datos;  <code>object_names</code>y  <code>object_args</code>son conjuntos de texto que juntos forman una referencia al objeto. Estos tres valores se pueden pasar a  <code>pg_get_object_address</code>para obtener la direcci\u00f3n interna del objeto. <code>pg_get_object_address</code>(  <code>type</code><code>text</code>,  <code>object_names</code><code>text[]</code>,   <code>object_args</code><code>text[]</code>) .  <code>record</code>(  <code>classid</code><code>oid</code>,  <code>objid</code><code>oid</code>,   <code>objsubid</code><code>integer</code>)                Devuelve una fila que contiene suficiente informaci\u00f3n para identificar de manera \u00fanica el objeto de base de datos  especificado por un c\u00f3digo de tipo y c\u00f3digo de objeto y matrices de  argumentos. Los valores devueltos son los que se utilizar\u00edan en  cat\u00e1logos de sistemas como <code>pg_depend</code>; pueden pasarse a otras funciones del sistema, como  <code>pg_describe_object</code>o o <code>pg_identify_object</code>.  <code>classid</code>es la OID del cat\u00e1logo del sistema que contiene el objeto;  <code>objid</code>es la OID del objeto mismo, y  <code>objsubid</code>es el sub-objeto ID, o cero si ninguno. Esta funci\u00f3n es la inversa de <code>pg_identify_object_as_address</code>. Se identifican objetos indefinidos con  <code>NULL</code>valores."},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/26.Funciones%20y%20operadores%20de%20informaci%C3%B3n%20del%20sistema/06.-Comentarios%20Funciones%20de%20informaci%C3%B3n/","title":"06.-Comentarios Funciones de informaci\u00f3n","text":"<p>Las funciones que se muestran en la  extractos comentan previamente almacenados con el comando COMENTARIO. Se devuelta un valor nulo si no se puede encontrar ning\u00fan comentario para los par\u00e1metros especificados.</p> <p>Cuadro 9.78. Comentarios Funciones de informaci\u00f3n</p> Funci\u00f3n                Descripci\u00f3n <code>col_description</code>(  <code>table</code><code>oid</code>,   <code>column</code><code>integer</code>) . <code>text</code>                Devuelve el comentario para una columna de tabla, que se especifica por la OID de su tabla y su n\u00famero de columna. ( <code>obj_description</code>no puede ser utilizado para las columnas de la tabla, ya que las columnas no tienen OID propios.) <code>obj_description</code>(  <code>object</code><code>oid</code>,   <code>catalog</code><code>name</code>) . <code>text</code>                Devuelve el comentario de un objeto de base de datos  especificado por su OID y el nombre del cat\u00e1logo del sistema que  contiene. Por ejemplo,  <code>obj_description(123456, 'pg_class')</code>recuperar\u00eda el comentario para la mesa con OID 123456. <code>obj_description</code>(   <code>object</code><code>oid</code>) . <code>text</code>                Devuelve el comentario para un objeto de base de datos especificado por su OID solo. Esto se desprecmenta ya que no hay garant\u00eda de que los OID sean \u00fanicos en diferentes  cat\u00e1logos de sistemas; por lo tanto, el comentario equivocado podr\u00eda ser devuelto. <code>shobj_description</code>(  <code>object</code><code>oid</code>,   <code>catalog</code><code>name</code>) . <code>text</code>                Devuelve el comentario para un objeto de base de  datos compartido especificado por su OID y el nombre del cat\u00e1logo del  sistema que contiene. Esto es como  <code>obj_description</code>salvo que se utiliza para recuperar comentarios sobre objetos compartidos (es decir, bases de datos, roles y espacios de mesa). Algunos cat\u00e1logos de  sistemas son globales para todas las bases de datos dentro de cada  cl\u00faster, y las descripciones de objetos en ellas tambi\u00e9n se almacenan  globalmente."},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/26.Funciones%20y%20operadores%20de%20informaci%C3%B3n%20del%20sistema/07.-Validez%20de%20datos%20Funciones%20de%20Comprobar/","title":"07.-Validez de datos Funciones de Comprobar","text":"<p>Las funciones que se muestran en el cuadro 9.79 pueden ser \u00fatiles para comprobar la validez de los datos de entrada propuestos.</p> <p>Cuadro 9.79. Validez de datos Funciones de Comprobar</p> Funci\u00f3n                Descripci\u00f3n                Ejemplos (s) <code>pg_input_is_valid</code>(  <code>string</code><code>text</code>,   <code>type</code><code>text</code>) . <code>boolean</code>                Pruebas de si lo dado  <code>string</code>es una entrada v\u00e1lida para el tipo de datos especificado, devolviendo true o falso.                Esta funci\u00f3n s\u00f3lo funcionar\u00e1 como se desee si la  funci\u00f3n de entrada del tipo de datos se ha actualizado para reportar  entradas inv\u00e1lidas como un softerror m\u00e1s suave. De lo contrario, la entrada inv\u00e1lida abortar\u00e1 la transacci\u00f3n, como si la cadena hubiera sido arrojada al tipo directamente.                 <code>pg_input_is_valid('42', 'integer')</code>-                  <code>pg_input_is_valid('42000000000', 'integer')</code>-                  <code>pg_input_is_valid('1234.567', 'numeric(7,4)')</code>- <code>pg_input_error_info</code>(  <code>string</code><code>text</code>,   <code>type</code><code>text</code>) .  <code>record</code>(  <code>message</code><code>text</code>,  <code>detail</code><code>text</code>,  <code>hint</code><code>text</code>,   <code>sql_error_code</code><code>text</code>)                Pruebas de si lo dado  <code>string</code>es una entrada v\u00e1lida para el tipo de datos especificado; de no ser as\u00ed,  devuelva los detalles del error que se habr\u00eda arrojado. Si la entrada es v\u00e1lida, los resultados son NULL. Las entradas son las mismas que para <code>pg_input_is_valid</code>.                Esta funci\u00f3n s\u00f3lo funcionar\u00e1 como se desee si la  funci\u00f3n de entrada del tipo de datos se ha actualizado para reportar  entradas inv\u00e1lidas como un softerror m\u00e1s suave. De lo contrario, la entrada inv\u00e1lida abortar\u00e1 la transacci\u00f3n, como si la cadena hubiera sido arrojada al tipo directamente.                 <code>select * from pg_input_error_info('42000000000', 'integer')</code>-                <code>mensaje de detalle . hint . sql.error.code ----------------------------------------------------------------------- El valor \"42000000000\" est\u00e1 fuera de rango para el n\u00famero entero de tipo 12003</code> <code>select message, detail from pg_input_error_info('1234.567', 'numeric(7,4)')</code>-                <code>mensaje . detalle ------------------------------------------------------------------------------------------------------------------ Desbordamiento num\u00e9rico de campo de un campo de precisi\u00f3n 7, escala 4 debe redondear a un valor absoluto inferior a 10o3.</code>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/26.Funciones%20y%20operadores%20de%20informaci%C3%B3n%20del%20sistema/08.-ID%20de%20transacci%C3%B3n%20e%20funciones%20de%20informaci%C3%B3n%20instant%C3%A1neas/","title":"08.-ID de transacci\u00f3n e funciones de informaci\u00f3n instant\u00e1neas","text":"<p>Las funciones que se muestran en el cuadro 9.80 proporcionan informaci\u00f3n sobre transacciones de servidor en forma  exportable. El uso principal de estas funciones es determinar qu\u00e9  transacciones se cometieron entre dos instant\u00e1neas.</p> <p>Cuadro 9.80. ID de transacci\u00f3n e funciones de informaci\u00f3n instant\u00e1neas</p> Funci\u00f3n                Descripci\u00f3n <code>pg_current_xact_id</code>() <code>xid8</code>                Devuelve la identificaci\u00f3n de la transacci\u00f3n actual.  Asignar\u00e1 uno nuevo si la transacci\u00f3n actual no tiene una ya (porque no  ha realizado ninguna actualizaci\u00f3n de la base de datos); v\u00e9ase la secci\u00f3n 74.1 para m\u00e1s detalles. Si se ejecuta en una subtransacci\u00f3n, esto devolver\u00e1 el ID de transacci\u00f3n de alto nivel; v\u00e9ase la Secci\u00f3n 74.3 para m\u00e1s detalles. <code>pg_current_xact_id_if_assigned</code>() <code>xid8</code>                Devuelve el ID de la transacci\u00f3n actual, o  <code>NULL</code>si a\u00fan no se asigna identificaci\u00f3n. (Lo mejor es utilizar esta variante si la transacci\u00f3n podr\u00eda ser s\u00f3lo de lectura, para evitar el consumo  innecesario de un XID.) Si se ejecuta en una subtransacci\u00f3n, esto  devolver\u00e1 el ID de transacci\u00f3n de alto nivel. <code>pg_xact_status</code>(  <code>xid8</code>) . <code>text</code>                Denuncia el estado de una transacci\u00f3n reciente. El resultado es uno de <code>in progress</code>, <code>committed</code>, o <code>aborted</code>, siempre que la transacci\u00f3n sea suficientemente reciente como para que  el sistema mantenga la condici\u00f3n de compromiso de esa transacci\u00f3n. Si es lo suficientemente viejo como para que ninguna referencia a la  transacci\u00f3n sobreviva en el sistema y se haya descartado la informaci\u00f3n  sobre el estado de confirmaci\u00f3n, el resultado es <code>NULL</code>. Las solicitudes podr\u00edan utilizar esta funci\u00f3n, por ejemplo, para  determinar si su transacci\u00f3n se comprometi\u00f3 o abort\u00f3 despu\u00e9s de que la  aplicaci\u00f3n y el servidor de bases de datos se desconecieran mientras que una  <code>COMMIT</code>est\u00e1 en marcha. Tomar nota de que las transacciones preparadas se comunican como <code>in progress</code>; las solicitudes deben comprobar  <code>pg_prepared_xacts</code>si tienen que determinar si un ID de transacci\u00f3n pertenece a una transacci\u00f3n preparada. <code>pg_current_snapshot</code>() <code>pg_snapshot</code>                Devuelve una instant\u00e1nea actual, una estructura de datos que muestra qu\u00e9 identificaciones de  transacci\u00f3n est\u00e1n ahora en progreso. S\u00f3lo los ID de transacci\u00f3n de alto  nivel est\u00e1n incluidos en la instant\u00e1nea; no se muestran ID de  subtransacci\u00f3n; ver la Secci\u00f3n 74.3 para m\u00e1s detalles. <code>pg_snapshot_xip</code>(  <code>pg_snapshot</code>) . <code>setof xid8</code>                Devuelve el conjunto de identificaciones de transacci\u00f3n en curso contenidas en una instant\u00e1nea. <code>pg_snapshot_xmax</code>(  <code>pg_snapshot</code>) . <code>xid8</code>                Devuelve el  <code>xmax</code>de una instant\u00e1nea. <code>pg_snapshot_xmin</code>(  <code>pg_snapshot</code>) . <code>xid8</code>                Devuelve el  <code>xmin</code>de una instant\u00e1nea. <code>pg_visible_in_snapshot</code>( <code>xid8</code>,  <code>pg_snapshot</code>) . <code>boolean</code>                El ID de transacci\u00f3n dado es visible de acuerdo con esta instant\u00e1nea (es decir, se complet\u00f3 antes de que se  topara la instant\u00e1nea)? Tenga en cuenta que esta funci\u00f3n no dar\u00e1 la  respuesta correcta para un ID de subtransacci\u00f3n (subxid); v\u00e9ase la Secci\u00f3n 74.3 para m\u00e1s detalles. <p>El tipo de identificaci\u00f3n de transacci\u00f3n interna  <code>xid</code>tiene 32 bits de ancho y envuelve alrededor de cada 4.000 millones de  transacciones. Sin embargo, las funciones que se muestran en el cuadro 9.80 utilizan un tipo de 64 bits  <code>xid8</code>que no envuelve durante la vida de una instalaci\u00f3n y se puede convertir en  <code>xid</code>por fundici\u00f3n si es necesario; vea la secci\u00f3n 74.1 para m\u00e1s detalles. El tipo de datos  <code>pg_snapshot</code>almacena informaci\u00f3n sobre la visibilidad de la identificaci\u00f3n de transacciones  en un momento determinado en el tiempo. Sus componentes se describen en  la Tabla 9.81. <code>pg_snapshot</code>La representaci\u00f3n textual es <code>*</code>xmin<code>*:*</code>xmax<code>*:*</code>xip_list<code>*</code>. Por ejemplo  <code>10:20:10,14,15</code>los medios <code>xmin=10, xmax=20, xip_list=10, 14, 15</code>.</p> <p>Cuadro 9.81. Componentes de instant\u00e1neas</p> Nombre Descripci\u00f3n <code>xmin</code> Identidad de transacci\u00f3n m\u00e1s baja que todav\u00eda estaba activa. Todos los ID de transacci\u00f3n menos que  <code>xmin</code>est\u00e1n comprometidos y visibles, o rodados y muertos. <code>xmax</code> Un pasado el ID de transacci\u00f3n m\u00e1s alto. Todos los documentos de transacci\u00f3n mayores o iguales a  <code>xmax</code>Todav\u00eda no se hab\u00eda completado a partir del momento de la instant\u00e1nea, y por lo tanto son invisibles. <code>xip_list</code> Transacciones en curso en el momento de la instant\u00e1nea. Una identificaci\u00f3n de transacci\u00f3n que es  <code>xmin &lt;= *</code>X<code>* &lt; xmax</code>y no en esta lista ya estaba terminada en el momento de la instant\u00e1nea, y por lo tanto es visible o muerto de acuerdo a su condici\u00f3n de commit.  Esta lista no incluye los ID de transacci\u00f3n de las subtransacciones  (subxidos). <p>En lanzamientos de PostgreSQL antes de 13 no hubo  <code>xid8</code>tipo, por lo que se proporcionaron variantes de estas funciones que se utilizaron  <code>bigint</code>para representar un XID de 64 bits, con un tipo de datos de instant\u00e1neas correspondientemente distinto <code>txid_snapshot</code>. Estas funciones m\u00e1s antiguas tienen  <code>txid</code>a su nombre. Todav\u00eda se les apoya para la compatibilidad hacia atr\u00e1s, pero pueden ser eliminados de una futura versi\u00f3n. V\u00e9ase Cuadro 9.82.</p> <p>Cuadro 9.82. ID de transacci\u00f3n desprencado y funciones de informaci\u00f3n instant\u00e1neas</p> Funci\u00f3n                Descripci\u00f3n <code>txid_current</code>() <code>bigint</code>                Ver <code>pg_current_xact_id()</code>. <code>txid_current_if_assigned</code>() <code>bigint</code>                Ver <code>pg_current_xact_id_if_assigned()</code>. <code>txid_current_snapshot</code>() <code>txid_snapshot</code>                Ver <code>pg_current_snapshot()</code>. <code>txid_snapshot_xip</code>(  <code>txid_snapshot</code>) . <code>setof bigint</code>                Ver <code>pg_snapshot_xip()</code>. <code>txid_snapshot_xmax</code>(  <code>txid_snapshot</code>) . <code>bigint</code>                Ver <code>pg_snapshot_xmax()</code>. <code>txid_snapshot_xmin</code>(  <code>txid_snapshot</code>) . <code>bigint</code>                Ver <code>pg_snapshot_xmin()</code>. <code>txid_visible_in_snapshot</code>( <code>bigint</code>,  <code>txid_snapshot</code>) . <code>boolean</code>                Ver <code>pg_visible_in_snapshot()</code>. <code>txid_status</code>(  <code>bigint</code>) . <code>text</code>                Ver <code>pg_xact_status()</code>."},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/26.Funciones%20y%20operadores%20de%20informaci%C3%B3n%20del%20sistema/09.-Funciones%20de%20informaci%C3%B3n%20de%20transacci%C3%B3n%20comprometidas/","title":"09.-Funciones de informaci\u00f3n de transacci\u00f3n comprometidas","text":"<p>Las funciones que figuran en el cuadro 9.83 proporcionan informaci\u00f3n sobre cu\u00e1ndo se cometieron transacciones  pasadas. S\u00f3lo proporcionan datos \u00fatiles cuando se habilita la opci\u00f3n de configuraci\u00f3n de rastrea.commit.temperal est\u00e1 activada, y s\u00f3lo para las transacciones que se cometieron despu\u00e9s de que se habilit\u00f3.</p> <p>Cuadro 9.83. Funciones de informaci\u00f3n de transacci\u00f3n comprometidas</p> Funci\u00f3n                Descripci\u00f3n <code>pg_xact_commit_timestamp</code>(  <code>xid</code>) . <code>timestamp with time zone</code>                Devuelve la marca de tiempo de una transacci\u00f3n. <code>pg_xact_commit_timestamp_origin</code>(  <code>xid</code>) .  <code>record</code>(  <code>timestamp</code><code>timestamp with time zone</code>,  <code>roident</code><code>oid</code>)                Devuelve el momento de la marca de compromiso y el origen de replicaci\u00f3n de una transacci\u00f3n. <code>pg_last_committed_xact</code>()  <code>record</code>(  <code>xid</code><code>xid</code>,  <code>timestamp</code><code>timestamp with time zone</code>,   <code>roident</code><code>oid</code>)                Devuelve el ID de transacci\u00f3n, commit timestamp y el origen de replicaci\u00f3n de la \u00faltima transacci\u00f3n comprometida."},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/27.-Funciones%20de%20administraci%C3%B3n%20de%20sistemas/","title":"Index","text":"<p>Las funciones descritas en esta secci\u00f3n se utilizan para controlar y monitorear una instalaci\u00f3n de PostgreSQL.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/27.-Funciones%20de%20administraci%C3%B3n%20de%20sistemas/01.-Funciones%20de%20configuraci%C3%B3n/","title":"01.-Funciones de configuraci\u00f3n","text":"<p>El cuadro 9.89 muestra las funciones disponibles para consultar y alterar los par\u00e1metros de configuraci\u00f3n de tiempo de ejecuci\u00f3n.</p> <p>Cuadro 9.89. Funciones de configuraci\u00f3n</p> Funci\u00f3n                Descripci\u00f3n                Ejemplos (s) <code>current_setting</code>(   <code>setting_name</code><code>text</code>[,   <code>missing_ok</code><code>boolean</code>] . <code>text</code>                Devuelve el valor actual de la configuraci\u00f3n <code>setting_name</code>. Si no existe tal ajuste,  <code>current_setting</code>lanza un error a menos  <code>missing_ok</code>se suministra y es  <code>true</code>(en cuyo caso NULL es devuelto). Esta funci\u00f3n corresponde a la  SQLcomando SHOW.                 <code>current_setting('datestyle')</code>- <code>set_config</code>(  <code>setting_name</code><code>text</code>,  <code>new_value</code><code>text</code>,   <code>is_local</code><code>boolean</code>) . <code>text</code>                Estaca el par\u00e1metro  <code>setting_name</code>a <code>new_value</code>, y devuelve ese valor. Si  <code>is_local</code>es <code>true</code>, el nuevo valor s\u00f3lo se aplicar\u00e1 durante la transacci\u00f3n actual. Si desea que el nuevo valor se aplique para el resto de la sesi\u00f3n actual,  utilice  <code>false</code>En vez de eso. Esta funci\u00f3n corresponde al comando SQL SET.                 <code>set_config('log_statement_stats', 'off', false)</code>-"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/27.-Funciones%20de%20administraci%C3%B3n%20de%20sistemas/02.-Funciones%20de%20se%C3%B1alizaci%C3%B3n%20del%20servidor/","title":"02.-Funciones de se\u00f1alizaci\u00f3n del servidor","text":"<p>Las funciones que se muestran en la Tabla 9.90 env\u00edan se\u00f1ales de control a otros procesos del servidor. El uso de  estas funciones se limita a los superusuarios por defecto, pero el  acceso puede concederse a otros utilizando <code>GRANT</code>, con las excepciones se\u00f1aladas.</p> <p>Cada una de estas funciones vuelve  <code>true</code>si la se\u00f1al fue enviada con \u00e9xito y  <code>false</code>si el env\u00edo de la se\u00f1al fall\u00f3.</p> <p>Cuadro 9.90. Funciones de se\u00f1alizaci\u00f3n del servidor</p> Funci\u00f3n                Descripci\u00f3n <code>pg_cancel_backend</code>(   <code>pid</code><code>integer</code>) . <code>boolean</code>                Cancela la consulta actual de la sesi\u00f3n cuyo proceso  de backend tiene el ID de proceso especificado. Esto tambi\u00e9n se permite  si el rol de llamada es un miembro del papel cuyo backend est\u00e1 siendo  cancelado o el rol de llamada tiene privilegios de <code>pg_signal_backend</code>, sin embargo, s\u00f3lo los superusuarios pueden cancelar los backends superuser. <code>pg_log_backend_memory_contexts</code>(   <code>pid</code><code>integer</code>) . <code>boolean</code>                Solicitudes de registrar los contextos de memoria del backend con el ID de proceso especificado. Esta funci\u00f3n puede enviar la solicitud a backends y procesos auxiliares excepto registrador. Estos  contextos de memoria se registrar\u00e1n en  <code>LOG</code>nivel de mensaje. Aparecer\u00e1n en el registro del servidor basado en el conjunto de configuraci\u00f3n de registro (ver Secci\u00f3n 20.8 para m\u00e1s informaci\u00f3n), pero no se enviar\u00e1n al cliente independientemente de los clientes. <code>pg_reload_conf</code>() <code>boolean</code>                Hace que todos los procesos del servidor PostgreSQL recargaran sus archivos de configuraci\u00f3n. (Esto se inicia enviando una se\u00f1al SIGHUP al proceso de postmaster, que a su vez env\u00eda SIGHUP a cada uno de sus hijos.) Puedes usar el <code>pg_file_settings</code>,  <code>pg_hba_file_rules</code>y  <code>pg_ident_file_mappings</code>vistas para comprobar los archivos de configuraci\u00f3n para detectar posibles errores, antes de recargar. <code>pg_rotate_logfile</code>() <code>boolean</code>                Se\u00f1a el administrador de registro para cambiar a un  nuevo archivo de salida inmediatamente. Esto funciona s\u00f3lo cuando el  colector de troncos incorporado est\u00e1 en marcha, ya que de lo contrario  no hay subproceso de administrador de archivos log. <code>pg_terminate_backend</code>(  <code>pid</code><code>integer</code>,     <code>timeout</code><code>bigint``DEFAULT``0</code>) . <code>boolean</code>                Termina la sesi\u00f3n cuyo proceso de backend tiene el ID de proceso especificado. Esto tambi\u00e9n se permite si el rol de llamada  es un miembro del papel cuyo backend est\u00e1 siendo despedido o el rol de  llamada tiene privilegios de <code>pg_signal_backend</code>, sin embargo, s\u00f3lo los superusuarios pueden terminar los backends de superusuario.                Si  <code>timeout</code>no se especifica ni cero, esta funci\u00f3n devuelve  <code>true</code>si el proceso realmente termina o no, indicando s\u00f3lo que el env\u00edo de la se\u00f1al fue exitoso. Si el  <code>timeout</code>se especifica (en milisegundos) y mayor que cero, la funci\u00f3n espera hasta  que el proceso se ponga fin o hasta que haya pasado el tiempo dado. Si  el proceso se termina, la funci\u00f3n devuelve <code>true</code>. En el tiempo de espera, se emite una advertencia y  <code>false</code>es devuelto. <p><code>pg_cancel_backend</code>y  <code>pg_terminate_backend</code>enviar se\u00f1ales (SIGINT o SIGTERM respectivamente) para los procesos de backend identificados por el ID  de proceso. La identificaci\u00f3n de proceso de un backend activo se puede  encontrar en el  <code>pid</code>la columna de la  <code>pg_stat_activity</code>vista, o mediante la lista de la  <code>postgres</code>procesos en el servidor (utilizando ps en Unix o el Administrador de tareas en Windows). El papel de un backend activo se puede encontrar en el  <code>usename</code>la columna de la  vista.</p> <p><code>pg_log_backend_memory_contexts</code>se puede utilizar para registrar los contextos de memoria de un proceso de backend. Por ejemplo:</p> <pre><code>postgres=- SELECT pg.log.log.backend.memory.contexts(pg.backend.pid ());\n pg.log.backend.memory.contexts\n---------------------------------\n t\n(1 fila)\n</code></pre> <p>Un mensaje para cada contexto de memoria ser\u00e1 registrado. Por ejemplo:</p> <pre><code>LOG: registro de contextos de memoria de PID 10377\nDISCrograf\u00eda: SELECT pg.log.backend.memoremory.contexts(pg.backend.'s;\nLOG: nivel: 0; TopMemoryContexto: 80800 en total en 6 bloques; 14432 gratis (5 trozos); 66368 usados\nLOG: nivel: 1; pgstat TabStatusArray mirada de hachenta tabla de hash: 8192 en total en 1 bloques; 1408 gratis (0 trozos); 6784 usados\nLOG: nivel: 1; TopTransactionContexto: 8192 en total de 1 bloques; 7720 gratis (1 trozos); 472 usados\nLOG: nivel: 1; FilaDescripci\u00f3nContexto: 8192 en total de 1 bloques; 6880 libre (0 trozos); 1312 usados\nLOG: nivel: 1; MensajeContexto: 16384 en total en 2 bloques; 5152 gratis (0 trozos); 11232 usados\nLOG: nivel: 1; cach\u00e9 de la clase Operador: 8192 total en 1 bloques; 512 libres (0 trozos); 7680 usados\nLOG: nivel: 1; tabla de relaci\u00f3n smgr: 16384 total en 2 bloques; 4544 libres (3 trozos); 11840 utilizados\nLOG: nivel: 1; TransactionAbortContexto: 32768 total en 1 bloques; 32504 gratis (0 trozos); 264 usados\n...\nLOG: nivel: 1; ErrorContexto: 8192 en total en 1 bloques; 7928 libre (3 trozos); 264 usados\nLOG: Total general: 1651920 bytes en 201 bloques; 622360 libre (88 trozos); 1029560 usados\n</code></pre> <p>Si hay m\u00e1s de 100 contextos infantiles bajo el mismo progenitor,  se registran los primeros 100 contextos infantiles, junto con un resumen de los contextos restantes. Tenga en cuenta que las llamadas frecuentes a esta funci\u00f3n podr\u00edan incurrir en un aumento significativo, porque  puede generar un gran n\u00famero de mensajes de registro.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/27.-Funciones%20de%20administraci%C3%B3n%20de%20sistemas/03.-Funciones%20de%20control%20de%20copia%20de%20seguridad/","title":"03.-Funciones de control de copia de seguridad","text":"<p>Las funciones que se muestran en la Tabla 9.91 ayudan a realizar copias de seguridad en l\u00ednea. Estas funciones no pueden ejecutarse durante la recuperaci\u00f3n (excepto <code>pg_backup_start</code>, <code>pg_backup_stop</code>, y <code>pg_wal_lsn_diff</code>).</p> <p>Para m\u00e1s detalles sobre el uso adecuado de estas funciones, v\u00e9ase la secci\u00f3n 26.3.</p> <p>Cuadro 9.91. Funciones de control de copia de seguridad</p> Funci\u00f3n                Descripci\u00f3n <code>pg_create_restore_point</code>(   <code>name</code><code>text</code>) . <code>pg_lsn</code>                Crea un registro de marcador en el registro de  escritura-ahead que m\u00e1s tarde se puede utilizar como un objetivo de  recuperaci\u00f3n, y devuelve la ubicaci\u00f3n de registro de escritura  correspondiente. El nombre de la p\u00e9ntrica se puede utilizar con recovery-target-name para especificar el punto hasta el cual proceder\u00e1 la recuperaci\u00f3n.  Evite crear varios puntos de restauraci\u00f3n con el mismo nombre, ya que la recuperaci\u00f3n se detendr\u00e1 en el primero cuyo nombre coincid\u00eda con el  objetivo de recuperaci\u00f3n.                Esta funci\u00f3n se limita a los superusuarios por defecto, pero otros usuarios pueden recibir EXECUTE para ejecutar la funci\u00f3n. <code>pg_current_wal_flush_lsn</code>() <code>pg_lsn</code>                Devuelve la ubicaci\u00f3n actual de la descarga de registro de escritura (ver notas m\u00e1s abajo). <code>pg_current_wal_insert_lsn</code>() <code>pg_lsn</code>                Devuelve la ubicaci\u00f3n de inserci\u00f3n de registro de escritura actual (ver notas m\u00e1s abajo). <code>pg_current_wal_lsn</code>() <code>pg_lsn</code>                Devuelve la ubicaci\u00f3n de escritura de registro de escritura actual (ver notas m\u00e1s abajo). <code>pg_backup_start</code>(   <code>label</code><code>text</code>[,   <code>fast</code><code>boolean</code>] . <code>pg_lsn</code>                Prepara el servidor para iniciar una copia de  seguridad en l\u00ednea. El \u00fanico par\u00e1metro requerido es una etiqueta  arbitraria definida por el usuario para la copia de seguridad.  (T\u00edpicamente este ser\u00eda el nombre bajo el cual se almacenar\u00e1 el archivo  de volteo de copia de seguridad.) Si se da el segundo par\u00e1metro opcional como <code>true</code>, especifica la ejecuci\u00f3n  <code>pg_backup_start</code>lo m\u00e1s r\u00e1pido posible. Esto obliga a un puesto de control inmediato que  causar\u00e1 un aumento en las operaciones de E/S, ralentizado cualquier  consulta de ejecuci\u00f3n simult\u00e1nea.                Esta funci\u00f3n se limita a los superusuarios por defecto, pero otros usuarios pueden recibir EXECUTE para ejecutar la funci\u00f3n. <code>pg_backup_stop</code>( [  <code>wait_for_archive</code><code>boolean</code>] .  <code>record</code>(  <code>lsn</code><code>pg_lsn</code>,  <code>labelfile</code><code>text</code>,   <code>spcmapfile</code><code>text</code>)                Termina con una copia de seguridad en l\u00ednea. El  contenido deseado del archivo de la etiqueta de copia de seguridad y el  archivo de mapa de tablespace se devuelven como parte del resultado de  la funci\u00f3n y deben ser escritos a los archivos en el \u00e1rea de copia de  seguridad. Estos archivos no deben ser escritos al directorio de datos  en vivo (lo har\u00e1 que PostgreSQL no se reinicie en caso de accidente).                Hay un par\u00e1metro opcional de tipo <code>boolean</code>. Si es falsa, la funci\u00f3n volver\u00e1 inmediatamente despu\u00e9s de que se  complete la copia de seguridad, sin esperar a que WAL sea archivado.  Este comportamiento s\u00f3lo es \u00fatil con software de copia de seguridad que  monitorea independientemente el archivo WAL. De lo contrario, WAL  requerido para hacer que la copia de seguridad sea consistente podr\u00eda  faltar y hacer que la copia de seguridad sea in\u00fatil. De forma  predeterminada o cuando este par\u00e1metro es verdadero,  <code>pg_backup_stop</code>esperar\u00e1 a que WAL se archive cuando est\u00e9 habilitado el archivo. (En espera, esto significa que esperar\u00e1 s\u00f3lo cuando  <code>archive_mode</code>= <code>always</code>. Si escribir actividad en la primaria es bajo, puede ser \u00fatil ejecutar  <code>pg_switch_wal</code>en la primaria con el fin de activar un interruptor de segmento inmediato.)                Cuando se ejecuta en una primaria, esta funci\u00f3n  tambi\u00e9n crea un archivo de historial de copia de seguridad en el \u00e1rea de archivo de registro de escritura. El archivo de antecedentes incluye la etiqueta dada <code>pg_backup_start</code>, los lugares de registro de escritura y final para la copia de  seguridad, y los tiempos de inicio y final de la copia de seguridad.  Despu\u00e9s de registrar la ubicaci\u00f3n final, el actual punto de inserci\u00f3n de registro de escritura se adelanta autom\u00e1ticamente al siguiente archivo  de registro de escritura, de modo que el archivo de registro de entrada  de escritura final puede archivarse inmediatamente para completar la  copia de seguridad.                El resultado de la funci\u00f3n es un solo registro. El  <code>lsn</code>la columna contiene la ubicaci\u00f3n de registro de escritura final de la  copia de seguridad (que de nuevo puede ser ignorada). La segunda columna devuelve el contenido del archivo de la etiqueta de copia de seguridad, y la tercera columna devuelve el contenido del archivo mapa de  tablespace. Estos deben almacenarse como parte de la copia de seguridad y se requieren como parte del proceso de restauraci\u00f3n.                Esta funci\u00f3n se limita a los superusuarios por defecto, pero otros usuarios pueden recibir EXECUTE para ejecutar la funci\u00f3n. <code>pg_switch_wal</code>() <code>pg_lsn</code>                Forza al servidor a cambiar a un nuevo archivo de  registro de escritura, que permite archivar el archivo actual  (suponiendo que est\u00e9 usando un archivo continuo). El resultado es la  ubicaci\u00f3n final de registro de escritura-ahead m\u00e1s 1 dentro del archivo  de registro de escritura-adelante reci\u00e9n completado. Si no ha habido  actividad de registro de escritura desde el \u00faltimo interruptor de  registro de entrada de escritura,  <code>pg_switch_wal</code>no hace nada y devuelve la ubicaci\u00f3n inicial del archivo de registro de salida de escritor actualmente en uso.                Esta funci\u00f3n se limita a los superusuarios por defecto, pero otros usuarios pueden recibir EXECUTE para ejecutar la funci\u00f3n. <code>pg_walfile_name</code>(   <code>lsn</code><code>pg_lsn</code>) . <code>text</code>                Convierte una ubicaci\u00f3n de registro de escritura en el nombre del archivo WAL que sostiene esa ubicaci\u00f3n. <code>pg_walfile_name_offset</code>(   <code>lsn</code><code>pg_lsn</code>) .  <code>record</code>(  <code>file_name</code><code>text</code>,   <code>file_offset</code><code>integer</code>)                Convierte una ubicaci\u00f3n de registro de escritura en un nombre de archivo WAL y el byte offset dentro de ese archivo. <code>pg_split_walfile_name</code>(   <code>file_name</code><code>text</code>) .  <code>record</code>(  <code>segment_number</code><code>numeric</code>,   <code>timeline_id</code><code>bigint</code>)                Extrae el n\u00famero de secuencia y el identificador de la l\u00ednea de tiempo de un nombre de archivo WAL. <code>pg_wal_lsn_diff</code>(  <code>lsn1</code><code>pg_lsn</code>,   <code>lsn2</code><code>pg_lsn</code>) . <code>numeric</code>                Calcula la diferencia en bytes ( <code>lsn1</code>- - <code>lsn2</code>) entre dos lugares de registro de escritura. Esto se puede utilizar con  <code>pg_stat_replication</code>o algunas de las funciones que se muestran en la  para obtener la rezago de replicaci\u00f3n. <p><code>pg_current_wal_lsn</code>muestra la ubicaci\u00f3n de escritura de registro de escritura actual en el mismo  formato utilizado por las funciones anteriores. Del mismo modo,  <code>pg_current_wal_insert_lsn</code>muestra la ubicaci\u00f3n de inserci\u00f3n de registro de escritura actual y  <code>pg_current_wal_flush_lsn</code>muestra la ubicaci\u00f3n actual de descarga de registro de escritura. La ubicaci\u00f3n logicalde la inserci\u00f3n es el final  del registro de escritura en cualquier momento, mientras que la  ubicaci\u00f3n de escritura es el final de lo que realmente se ha escrito  desde los amortiguadores internos del servidor, y la ubicaci\u00f3n de  enjuagar es la \u00faltima ubicaci\u00f3n conocida por estar escrita para el  almacenamiento duradero. La ubicaci\u00f3n de escritura es el final de lo que se puede examinar desde fuera del servidor, y es generalmente lo que  desea si est\u00e1 interesado en archivar archivos de registro de escritura  parcialmente completados. Las ubicaciones de inserci\u00f3n y descarga est\u00e1n  disponibles principalmente para prop\u00f3sitos de depuraci\u00f3n de servidores.  Todas estas son operaciones de s\u00f3lo lectura y no requieren permisos de  superusuario.</p> <p>Puedes usar  <code>pg_walfile_name_offset</code>para extraer el nombre de registro de escritura correspondiente y el byte offset de a  <code>pg_lsn</code>valor. Por ejemplo:</p> <pre><code>postgres=-SELECT * DESDE pg.walfile.name-offset((pg.backup-stop ()).lsn);\n        file.name . file.offset\n-----------------------------\n 00000001000000000000000D 4039624\n(1 fila)\n</code></pre> <p>Del mismo modo,  <code>pg_walfile_name</code>extrae s\u00f3lo el nombre del archivo de registro de escritura. Cuando la  ubicaci\u00f3n de registro de escritura-ahead dada es exactamente en un  l\u00edmite de registro de escritura-ahead, ambas funciones devuelven el  nombre del archivo de registro de escritura anterior. Este es  generalmente el comportamiento deseado para manejar el comportamiento de archivo de registro de escritura-ahead, ya que el archivo anterior es  el \u00faltimo que actualmente necesita ser archivado.</p> <p><code>pg_split_walfile_name</code>es \u00fatil para calcular un  LSNde un archivo de desplazamiento de archivo y nombre de archivo WAL, por ejemplo:</p> <pre><code>postgres=o . . . file-name '000000010000000000000100C000AB'\npostgres = . . . offset 256\npostgres=-SELECT '0/0'::pg.lsn . pd.segment.number * ps.setting:int . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n  DESDE pg.split.walfile.name(:'file.name') pd,\n       pg.show.all.settings () ps\n  DONDE ps.name = 'wal-segment-size';\n      lsn\n- A---------------\n C001/AB000100\n(1 fila)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/27.-Funciones%20de%20administraci%C3%B3n%20de%20sistemas/04.-Funciones%20de%20control%20de%20recuperaci%C3%B3n/","title":"04.-Funciones de control de recuperaci\u00f3n","text":"<p>Las funciones que se muestran en el cuadro 9.92 proporcionan informaci\u00f3n sobre el estado actual de un servidor de  espera. Estas funciones pueden ejecutarse tanto durante la recuperaci\u00f3n  como en la carrera normal.</p> <p>Cuadro 9.92. Funciones de la informaci\u00f3n de recuperaci\u00f3n</p> Funci\u00f3n                Descripci\u00f3n <code>pg_is_in_recovery</code>() <code>boolean</code>                Devuelve cierto si la recuperaci\u00f3n a\u00fan est\u00e1 en curso. <code>pg_last_wal_receive_lsn</code>() <code>pg_lsn</code>                Devuelve la \u00faltima ubicaci\u00f3n de registro de escritura que ha sido recibida y sincronizada al disco mediante la replicaci\u00f3n en streaming. Mientras que la replicaci\u00f3n en streaming est\u00e1 en curso, esto aumentar\u00e1 mon\u00f3\u00f3nicamente. Si la recuperaci\u00f3n se ha completado, esto  permanecer\u00e1 est\u00e1tico en la ubicaci\u00f3n del \u00faltimo registro WAL recibido y  sincronizado en el disco durante la recuperaci\u00f3n. Si la replicaci\u00f3n del  streaming est\u00e1 desactivada, o si a\u00fan no ha comenzado, la funci\u00f3n  devuelve <code>NULL</code>. <code>pg_last_wal_replay_lsn</code>() <code>pg_lsn</code>                Devuelve la \u00faltima ubicaci\u00f3n de registro de escritura que se ha vuelto a reproducir durante la recuperaci\u00f3n. Si la  recuperaci\u00f3n todav\u00eda est\u00e1 en curso esto aumentar\u00e1 mon\u00f3\u00f3nicamente. Si la  recuperaci\u00f3n se ha completado, esto permanecer\u00e1 est\u00e1tico en la ubicaci\u00f3n del \u00faltimo registro WAL aplicado durante la recuperaci\u00f3n. Cuando el  servidor se ha iniciado normalmente sin recuperaci\u00f3n, la funci\u00f3n  devuelve <code>NULL</code>. <code>pg_last_xact_replay_timestamp</code>() <code>timestamp with time zone</code>                Devuelve el sello de tiempo de la \u00faltima transacci\u00f3n  reprobada durante la recuperaci\u00f3n. Este es el momento en que se gener\u00f3  el registro de commit o abort WAL para esa transacci\u00f3n en la primaria.  Si no se han reproducido transacciones durante la recuperaci\u00f3n, la  funci\u00f3n devuelve <code>NULL</code>. De lo contrario, si la recuperaci\u00f3n a\u00fan est\u00e1 en curso, esto aumentar\u00e1  mon\u00f3\u00f3nicamente. Si la recuperaci\u00f3n se ha completado, esto seguir\u00e1 siendo est\u00e1tico en el momento de la \u00faltima transacci\u00f3n aplicada durante la  recuperaci\u00f3n. Cuando el servidor se ha iniciado normalmente sin  recuperaci\u00f3n, la funci\u00f3n devuelve <code>NULL</code>. <code>pg_get_wal_resource_managers</code>()  <code>setof record</code>(  <code>rm_id</code><code>integer</code>,  <code>rm_name</code><code>text</code>,   <code>rm_builtin</code><code>boolean</code>)                Devuelve los gestores de recursos WAL distribuidos actualmente en el sistema. La columna  <code>rm_builtin</code>indica si se trata de un gestor de recursos incorporado, o un gestor de recursos personalizado cargado por una extensi\u00f3n. <p>Las funciones que se muestran en el cuadro 9.93 controlan el progreso de la recuperaci\u00f3n. Estas funciones s\u00f3lo se pueden ejecutar durante la recuperaci\u00f3n.</p> <p>Cuadro 9.93. Funciones de control de recuperaci\u00f3n</p> Funci\u00f3n                Descripci\u00f3n <code>pg_is_wal_replay_paused</code>() <code>boolean</code>                Devuelve cierto si se solicita una pausa de recuperaci\u00f3n. <code>pg_get_wal_replay_pause_state</code>() <code>text</code>                Devuelve el estado de la pausa de recuperaci\u00f3n. Los valores de retorno son  <code>not paused</code>si no se solicita una pausa,  <code>pause requested</code>si se solicita una pausa, pero la recuperaci\u00f3n a\u00fan no se detiene, y  <code>paused</code>si la recuperaci\u00f3n se detiene. <code>pg_promote</code>(    <code>wait</code><code>boolean``DEFAULT``true</code>,     <code>wait_seconds</code><code>integer``DEFAULT``60</code>) . <code>boolean</code>                Promuela un servidor de reserva a la categor\u00eda primaria. Con  <code>wait</code>establecido en  <code>true</code>(el default), la funci\u00f3n espera hasta completar la promoci\u00f3n o  <code>wait_seconds</code>segundos han pasado, y devuelve  <code>true</code>si la promoci\u00f3n tiene \u00e9xito y  <code>false</code>de otra manera. Si  <code>wait</code>est\u00e1 listo para <code>false</code>, la funci\u00f3n devuelve  <code>true</code>inmediatamente despu\u00e9s de enviar un  <code>SIGUSR1</code>se\u00f1al al postmaster para activar la promoci\u00f3n.                Esta funci\u00f3n se limita a los superusuarios por defecto, pero otros usuarios pueden recibir EXECUTE para ejecutar la funci\u00f3n. <code>pg_wal_replay_pause</code>() <code>void</code>                Solicito para detener la recuperaci\u00f3n. Una petici\u00f3n  no significa que la recuperaci\u00f3n se detenga de inmediato. Si quieres una garant\u00eda de que la recuperaci\u00f3n se detiene realmente, tienes que  comprobar el estado de pausa de recuperaci\u00f3n devuelto por <code>pg_get_wal_replay_pause_state()</code>. Tenga en cuenta que  <code>pg_is_wal_replay_paused()</code>Devuelve si se hace una solicitud. Si bien la recuperaci\u00f3n se detiene, no se  aplican nuevos cambios en la base de datos. Si el standby caliente est\u00e1  activo, todas las nuevas consultas ver\u00e1n la misma instant\u00e1nea  consistente de la base de datos, y no se generar\u00e1n m\u00e1s conflictos de  consultas hasta que se reanude la recuperaci\u00f3n.                Esta funci\u00f3n se limita a los superusuarios por defecto, pero otros usuarios pueden recibir EXECUTE para ejecutar la funci\u00f3n. <code>pg_wal_replay_resume</code>() <code>void</code>                Reinicia la recuperaci\u00f3n si se detuvo.                Esta funci\u00f3n se limita a los superusuarios por defecto, pero otros usuarios pueden recibir EXECUTE para ejecutar la funci\u00f3n. <p><code>pg_wal_replay_pause</code>y  <code>pg_wal_replay_resume</code>no se puede ejecutar mientras se est\u00e1 llevando a cabo una promoci\u00f3n. Si se desencaden\u00f3 un ascenso mientras se detiene la recuperaci\u00f3n, el estado  pausado termina y el ascenso contin\u00faa.</p> <p>Si la replicaci\u00f3n del streaming est\u00e1 desactivada, el estado de la pausa puede continuar indefinidamente sin problema. Si la replicaci\u00f3n  de la transmisi\u00f3n est\u00e1 en curso, los registros WAL continuar\u00e1n siendo  recibidos, que eventualmente llenar\u00e1n el espacio disponible en disco,  dependiendo de la duraci\u00f3n de la pausa, la velocidad de la generaci\u00f3n  WAL y espacio disponible en disco.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/27.-Funciones%20de%20administraci%C3%B3n%20de%20sistemas/05.-Funciones%20de%20sincronizaci%C3%B3n%20instant%C3%A1neas/","title":"05.-Funciones de sincronizaci\u00f3n instant\u00e1neas","text":"<p>PostgreSQL permite sesiones de bases de datos para sincronizar sus instant\u00e1neas. Una instant\u00e1nea determina qu\u00e9 datos son visibles a la transacci\u00f3n que est\u00e1 usando las  instant\u00e1neas. Las instant\u00e1neas sincronizadas son necesarias cuando dos o m\u00e1s sesiones necesitan ver contenido id\u00e9ntico en la base de datos. Si  dos sesiones comienzan sus transacciones de forma independiente, siempre existe la posibilidad de que una tercera transacci\u00f3n cometa entre las  ejecuciones de los dos  <code>START TRANSACTION</code>comandos, para que una sesi\u00f3n vea los efectos de esa transacci\u00f3n y la otra no.</p> <p>Para resolver este problema, PostgreSQL permite una transacci\u00f3n para exportar la instant\u00e1nea que est\u00e1 utilizando. Mientras la transacci\u00f3n exportadora permanezca abierta, otras transacciones pueden importar su instant\u00e1nea, y por lo tanto se les garantiza que ven exactamente la  misma opini\u00f3n de la base de datos que la primera transacci\u00f3n ve. Pero  tenga en cuenta que cualquier cambio en la base de datos realizada por  cualquiera de estas transacciones sigue siendo invisible para las otras  transacciones, como es habitual para los cambios realizados por  transacciones no comprometidas. As\u00ed que las transacciones se sincronizan con respecto a los datos preexistentes, pero act\u00faan normalmente para  los cambios que se hacen ellos mismos.</p> <p>Las instant\u00e1neas se exportan con la  <code>pg_export_snapshot</code>funci\u00f3n, mostrada en la Tabla 9.94, e importada con el comando SET TRANSACTION.</p> <p>Cuadro 9.94. Funciones de sincronizaci\u00f3n instant\u00e1neas</p> Funci\u00f3n                Descripci\u00f3n <code>pg_export_snapshot</code>() <code>text</code>                Guarda la instant\u00e1nea actual de la transacci\u00f3n y devuelve un  <code>text</code>cuerda identificando la instant\u00e1nea. Esta cadena debe ser desmayada (fuera de  la base de datos) a los clientes que quieran importar la instant\u00e1nea. La instant\u00e1nea est\u00e1 disponible para importaci\u00f3n s\u00f3lo hasta el final de la  transacci\u00f3n que lo export\u00f3.                Una transacci\u00f3n puede exportar m\u00e1s de una instant\u00e1nea, si es necesario. Tenga en cuenta que hacerlo s\u00f3lo es \u00fatil en  <code>READ COMMITTED</code>transacciones, desde  <code>REPEATABLE READ</code>y niveles de aislamiento m\u00e1s altos, las transacciones utilizan la misma  instant\u00e1nea a lo largo de su vida. Una vez que una transacci\u00f3n ha  exportado cualquier instant\u00e1nea, no se puede preparar con PREPARE TRANSACTION. <code>pg_log_standby_snapshot</code>() <code>pg_lsn</code>                Tome una instant\u00e1nea de las transacciones en marcha y escr\u00edbala a WAL, sin tener que esperar a que bg o retenedor registre  una. Esto es \u00fatil para la decodificaci\u00f3n l\u00f3gica en espera, ya que la  creaci\u00f3n l\u00f3gica de franjas horarca tiene que esperar hasta que tal  registro se vuelva a jugar en la espera."},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/27.-Funciones%20de%20administraci%C3%B3n%20de%20sistemas/06.-Funciones%20de%20gesti%C3%B3n%20de%20la%20replicaci%C3%B3n/","title":"06.-Funciones de gesti\u00f3n de la replicaci\u00f3n","text":"<p>Las funciones que se muestran en la Tabla 9.95 son para controlar e interactuar con las caracter\u00edsticas de replicaci\u00f3n. V\u00e9anse la secci\u00f3n 27.2.5, secci\u00f3n 27.2.66 y el cap\u00edtulo 50 para informaci\u00f3n sobre las caracter\u00edsticas subyacentes. El uso de  funciones para el origen de replicaci\u00f3n s\u00f3lo se permite al superusuario  por defecto, pero se le puede permitir a otros usuarios mediante el uso  de la  <code>GRANT</code>comando. El uso de funciones para las ranuras de replicaci\u00f3n se limita a los superusuarios y usuarios que tienen  <code>REPLICATION</code>privilegio.</p> <p>Muchas de estas funciones tienen comandos equivalentes en el protocolo de replicaci\u00f3n; v\u00e9ase la Secci\u00f3n 55.4.</p> <p>Las funciones descritas en la secci\u00f3n 9.27.3, secci\u00f3n 9.27.4 y en la secci\u00f3n 9.27.5 tambi\u00e9n son pertinentes para la reproducci\u00f3n.</p> <p>Cuadro 9.95. Funciones de gesti\u00f3n de la replicaci\u00f3n</p> Funci\u00f3n                Descripci\u00f3n <code>pg_create_physical_replication_slot</code>(   <code>slot_name</code><code>name</code>[,  <code>immediately_reserve</code><code>boolean</code>,   <code>temporary</code><code>boolean</code>] .  <code>record</code>(  <code>slot_name</code><code>name</code>,   <code>lsn</code><code>pg_lsn</code>)                Crea una nueva ranura de replicaci\u00f3n f\u00edsica nombrada <code>slot_name</code>. El segundo par\u00e1metro opcional, cuando <code>true</code>, especifica que la  LSNpara esta ranura de replicaci\u00f3n se reserva inmediatamente; de lo contrario la  LSNest\u00e1 reservado en la primera conexi\u00f3n desde un cliente de replicaci\u00f3n en  streaming. Los cambios de estanqueamiento a partir de una ranura f\u00edsica  s\u00f3lo son posibles con el protocolo de replicaci\u00f3n de streaming. ver Secci\u00f3n 55.4. El tercer par\u00e1metro opcional, <code>temporary</code>, cuando se establece como verdadero, especifica que la ranura no debe  almacenarse permanentemente en el disco y s\u00f3lo est\u00e1 destinada a ser  utilizado en la sesi\u00f3n actual. Las franjas horaras temporales tambi\u00e9n se liberan por cualquier error. Esta funci\u00f3n corresponde al comando  protocolo de replicaci\u00f3n <code>CREATE_REPLICATION_SLOT ... PHYSICAL</code>. <code>pg_drop_replication_slot</code>(   <code>slot_name</code><code>name</code>) . <code>void</code>                Suelta la ranura de replicaci\u00f3n f\u00edsica o l\u00f3gica llamada <code>slot_name</code>. Igual que el comando de protocolo de replicaci\u00f3n <code>DROP_REPLICATION_SLOT</code>. Para las ranuras l\u00f3gicas, esto debe llamarse mientras est\u00e1 conectado a la misma base de datos en la que se cre\u00f3 la ranura. <code>pg_create_logical_replication_slot</code>(  <code>slot_name</code><code>name</code>,   <code>plugin</code><code>name</code>[,  <code>temporary</code><code>boolean</code>,   <code>twophase</code><code>boolean</code>] .  <code>record</code>(  <code>slot_name</code><code>name</code>,   <code>lsn</code><code>pg_lsn</code>)                Crea una nueva ranura de replicaci\u00f3n l\u00f3gica (decodificaci\u00f3n) llamada  <code>slot_name</code>utilizando el plugin de salida <code>plugin</code>. El tercer par\u00e1metro opcional, <code>temporary</code>, cuando se establece como verdadero, especifica que la ranura no debe  almacenarse permanentemente en el disco y s\u00f3lo est\u00e1 destinada a ser  utilizado en la sesi\u00f3n actual. Las franjas horaras temporales tambi\u00e9n se liberan por cualquier error. El cuarto par\u00e1metro opcional, <code>twophase</code>, cuando se establece como verdadero, especifica que la decodificaci\u00f3n de las transacciones preparadas est\u00e1 habilitada para esta ranura. Una  llamada a esta funci\u00f3n tiene el mismo efecto que el comando protocolo de replicaci\u00f3n <code>CREATE_REPLICATION_SLOT ... LOGICAL</code>. <code>pg_copy_physical_replication_slot</code>(  <code>src_slot_name</code><code>name</code>,   <code>dst_slot_name</code><code>name</code>[,   <code>temporary</code><code>boolean</code>] .  <code>record</code>(  <code>slot_name</code><code>name</code>,   <code>lsn</code><code>pg_lsn</code>)                Copias de una ranura de replicaci\u00f3n f\u00edsica existente llamada  <code>src_slot_name</code>a una ranura de replicaci\u00f3n f\u00edsica nombrada <code>dst_slot_name</code>. La ranura f\u00edsica copiada comienza a reservar WAL desde el mismo  LSNcomo la ranura de la fuente.  <code>temporary</code>es opcional. Si  <code>temporary</code>se omite, se utiliza el mismo valor que la ranura de origen. <code>pg_copy_logical_replication_slot</code>(  <code>src_slot_name</code><code>name</code>,   <code>dst_slot_name</code><code>name</code>[,   <code>temporary</code><code>boolean</code>[,   <code>plugin</code><code>name</code>]] ) .  <code>record</code>(  <code>slot_name</code><code>name</code>,   <code>lsn</code><code>pg_lsn</code>)                Copias de una ranura de replicaci\u00f3n l\u00f3gica existente llamada  <code>src_slot_name</code>a una ranura de replicaci\u00f3n l\u00f3gica nombrada <code>dst_slot_name</code>, cambiando opcionalmente el plugin de salida y la persistencia. La ranura l\u00f3gica copiada comienza desde el mismo  LSNcomo la ranura l\u00f3gica de origen. Ambos  <code>temporary</code>y  <code>plugin</code>son opcionales; si se omiten, se utilizan los valores de la ranura de origen. <code>pg_logical_slot_get_changes</code>(  <code>slot_name</code><code>name</code>,  <code>upto_lsn</code><code>pg_lsn</code>,  <code>upto_nchanges</code><code>integer</code>,    <code>VARIADIC</code><code>options</code><code>text[]</code>) .  <code>setof record</code>(  <code>lsn</code><code>pg_lsn</code>,  <code>xid</code><code>xid</code>,   <code>data</code><code>text</code>)                Devuelve cambios en la ranura <code>slot_name</code>, a partir del punto desde el que se han consumido los cambios en \u00faltimo lugar. Si  <code>upto_lsn</code>y  <code>upto_nchanges</code>son NULL, la decodificaci\u00f3n l\u00f3gica continuar\u00e1 hasta el final de WAL. Si  <code>upto_lsn</code>no es N\u00f3LL, la decodificaci\u00f3n incluir\u00e1 \u00fanicamente las transacciones que se comprometan antes de la LSN especificada. Si  <code>upto_nchanges</code>no-NULL, la decodificaci\u00f3n se detendr\u00e1 cuando el n\u00famero de filas producidas por  decodificaci\u00f3n exceda del valor especificado. Tenga en cuenta, sin  embargo, que el n\u00famero real de filas devueltas puede ser mayor, ya que  este l\u00edmite s\u00f3lo se comprueba despu\u00e9s de a\u00f1adir las filas producidas al  decodificar cada nueva transacci\u00f3n commit. <code>pg_logical_slot_peek_changes</code>(  <code>slot_name</code><code>name</code>,  <code>upto_lsn</code><code>pg_lsn</code>,  <code>upto_nchanges</code><code>integer</code>,    <code>VARIADIC</code><code>options</code><code>text[]</code>) .  <code>setof record</code>(  <code>lsn</code><code>pg_lsn</code>,  <code>xid</code><code>xid</code>,   <code>data</code><code>text</code>)                Se comporta como el  <code>pg_logical_slot_get_changes()</code>funci\u00f3n, excepto que los cambios no se consumen; es decir, ser\u00e1n devueltos de nuevo en futuras llamadas. <code>pg_logical_slot_get_binary_changes</code>(  <code>slot_name</code><code>name</code>,  <code>upto_lsn</code><code>pg_lsn</code>,  <code>upto_nchanges</code><code>integer</code>,    <code>VARIADIC</code><code>options</code><code>text[]</code>) .  <code>setof record</code>(  <code>lsn</code><code>pg_lsn</code>,  <code>xid</code><code>xid</code>,   <code>data</code><code>bytea</code>)                Se comporta como el  <code>pg_logical_slot_get_changes()</code>funci\u00f3n, excepto que los cambios se devuelven como <code>bytea</code>. <code>pg_logical_slot_peek_binary_changes</code>(  <code>slot_name</code><code>name</code>,  <code>upto_lsn</code><code>pg_lsn</code>,  <code>upto_nchanges</code><code>integer</code>,    <code>VARIADIC</code><code>options</code><code>text[]</code>) .  <code>setof record</code>(  <code>lsn</code><code>pg_lsn</code>,  <code>xid</code><code>xid</code>,   <code>data</code><code>bytea</code>)                Se comporta como el  <code>pg_logical_slot_peek_changes()</code>funci\u00f3n, excepto que los cambios se devuelven como <code>bytea</code>. <code>pg_replication_slot_advance</code>(  <code>slot_name</code><code>name</code>,   <code>upto_lsn</code><code>pg_lsn</code>) .  <code>record</code>(  <code>slot_name</code><code>name</code>,   <code>end_lsn</code><code>pg_lsn</code>)                Avances la posici\u00f3n confirmada actual de una ranura de replicaci\u00f3n nombrada <code>slot_name</code>. La ranura no se mover\u00e1 hacia atr\u00e1s, y no se mover\u00e1 m\u00e1s all\u00e1 de la  ubicaci\u00f3n de inserci\u00f3n actual. Devuelve el nombre de la ranura y la  posici\u00f3n real a la que se adelan\u00f3. La informaci\u00f3n actualizada sobre la  posici\u00f3n de franja horar que se escribe en el siguiente punto de control si se hace alg\u00fan avance. As\u00ed que en el caso de un accidente, la ranura  puede volver a una posici\u00f3n anterior. <code>pg_replication_origin_create</code>(   <code>node_name</code><code>text</code>) . <code>oid</code>                Crea un origen de replicaci\u00f3n con el nombre externo dado, y devuelve el ID interno asignado a \u00e9l. <code>pg_replication_origin_drop</code>(   <code>node_name</code><code>text</code>) . <code>void</code>                Elimina un origen de replicaci\u00f3n creado previamente, incluyendo cualquier progreso de repetici\u00f3n asociado. <code>pg_replication_origin_oid</code>(   <code>node_name</code><code>text</code>) . <code>oid</code>                Busca un origen de replicaci\u00f3n por su nombre y devuelve el ID interno. Si no se encuentra tal origen de replicaci\u00f3n,  <code>NULL</code>es devuelto. <code>pg_replication_origin_session_setup</code>(   <code>node_name</code><code>text</code>) . <code>void</code>                Marca la sesi\u00f3n actual como repetici\u00f3n desde el  origen dado, permitiendo que se rastree el progreso de la repetici\u00f3n.  S\u00f3lo se puede utilizar si actualmente no se selecciona ning\u00fan origen.  Uso  <code>pg_replication_origin_session_reset</code>para deshacer. <code>pg_replication_origin_session_reset</code>() <code>void</code>                Cancela los efectos de <code>pg_replication_origin_session_setup()</code>. <code>pg_replication_origin_session_is_setup</code>() <code>boolean</code>                Devuelve cierto si se ha seleccionado un origen de replicaci\u00f3n en la sesi\u00f3n actual. <code>pg_replication_origin_session_progress</code>(   <code>flush</code><code>boolean</code>) . <code>pg_lsn</code>                Devuelve la ubicaci\u00f3n de repetici\u00f3n para el origen de replicaci\u00f3n seleccionado en la sesi\u00f3n actual. El par\u00e1metro  <code>flush</code>determina si la transacci\u00f3n local correspondiente estar\u00e1 garantizada a haber sido enrojecida o no en el disco. <code>pg_replication_origin_xact_setup</code>(  <code>origin_lsn</code><code>pg_lsn</code>,   <code>origin_timestamp</code><code>timestamp with time zone</code>) . <code>void</code>                Marca la transacci\u00f3n actual como repetici\u00f3n de una transacci\u00f3n que se ha comprometido en el momento dado  LSNy marca de tiempo. S\u00f3lo se puede llamar cuando se ha seleccionado un origen de replicaci\u00f3n utilizando <code>pg_replication_origin_session_setup</code>. <code>pg_replication_origin_xact_reset</code>() <code>void</code>                Cancela los efectos de <code>pg_replication_origin_xact_setup()</code>. <code>pg_replication_origin_advance</code>(  <code>node_name</code><code>text</code>,   <code>lsn</code><code>pg_lsn</code>) . <code>void</code>                Estace el progreso de la replicaci\u00f3n para el nodo  dado a la ubicaci\u00f3n dada. Esto es principalmente \u00fatil para configurar la ubicaci\u00f3n inicial, o establecer una nueva ubicaci\u00f3n despu\u00e9s de los  cambios de configuraci\u00f3n y similares. Tenga en cuenta que el uso  descuidado de esta funci\u00f3n puede conducir a datos replicados de manera  inconsistente. <code>pg_replication_origin_progress</code>(  <code>node_name</code><code>text</code>,   <code>flush</code><code>boolean</code>) . <code>pg_lsn</code>                Devuelve la ubicaci\u00f3n de repetici\u00f3n para el origen de replicaci\u00f3n dado. El par\u00e1metro  <code>flush</code>determina si la transacci\u00f3n local correspondiente estar\u00e1 garantizada a haber sido enrojecida o no en el disco. <code>pg_logical_emit_message</code>(  <code>transactional</code><code>boolean</code>,  <code>prefix</code><code>text</code>,   <code>content</code><code>text</code>) . <code>pg_lsn</code> <code>pg_logical_emit_message</code>(  <code>transactional</code><code>boolean</code>,  <code>prefix</code><code>text</code>,   <code>content</code><code>bytea</code>) . <code>pg_lsn</code>                Emite un mensaje l\u00f3gico de decodificaci\u00f3n. Esto se  puede utilizar para pasar mensajes gen\u00e9ricos a los plugins de  decodificaci\u00f3n l\u00f3gico a trav\u00e9s de WAL. El  <code>transactional</code>El par\u00e1metro especifica si el mensaje debe ser parte de la transacci\u00f3n  actual, o si debe ser escrito inmediatamente y decodificado tan pronto  como el decodificador l\u00f3gico lea el registro. El  <code>prefix</code>El par\u00e1metro es un prefijo textual que se puede utilizar por los plugins  l\u00f3gicos decodificaci\u00f3n para reconocer f\u00e1cilmente los mensajes que son  interesantes para ellos. El  <code>content</code>El par\u00e1metro es el contenido del mensaje, dado en texto o en forma binaria."},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/27.-Funciones%20de%20administraci%C3%B3n%20de%20sistemas/07.-Funciones%20de%20gesti%C3%B3n%20de%20objetos%20de%20base%20de%20datos/","title":"07.-Funciones de gesti\u00f3n de objetos de base de datos","text":"<p>Las funciones que se muestran en el cuadro 9.96 calculan el uso del espacio en disco de los objetos de la base de  datos, o ayudan en la presentaci\u00f3n o comprensi\u00f3n de los resultados de  uso.  <code>bigint</code>los resultados se miden en bytes. Si una OID que no representa un objeto existente se pasa a una de estas funciones,  <code>NULL</code>es devuelto.</p> <p>Cuadro 9.96. Funciones de tama\u00f1o de objetos de base</p> Funci\u00f3n                Descripci\u00f3n <code>pg_column_size</code>(  <code>\"any\"</code>) . <code>integer</code>                Muestra el n\u00famero de bytes utilizados para almacenar  cualquier valor de datos individual. Si se aplica directamente al valor  de la columna de tabla, esto refleja cualquier compresi\u00f3n que se haya  hecho. <code>pg_column_compression</code>(  <code>\"any\"</code>) . <code>text</code>                Muestra el algoritmo de compresi\u00f3n que se utiliz\u00f3 para comprimir un valor individual de longitud variable. Retorno  <code>NULL</code>si el valor no se comprime. <code>pg_database_size</code>(  <code>name</code>) . <code>bigint</code> <code>pg_database_size</code>(  <code>oid</code>) .                 Calca el espacio total de disco utilizado por la base de datos con el nombre especificado u OID. Para usar esta funci\u00f3n,  usted debe tener  <code>CONNECT</code>privilegio en la base de datos especificada (que se concede por defecto) o tiene privilegios de la  <code>pg_read_all_stats</code>Funciona. <code>pg_indexes_size</code>(  <code>regclass</code>) . <code>bigint</code>                Calca el espacio total de disco utilizado por los \u00edndices adjuntos a la tabla especificada. <code>pg_relation_size</code>(   <code>relation</code><code>regclass</code>[,   <code>fork</code><code>text</code>] . <code>bigint</code>                Calma el espacio del disco utilizado por un tenedor de la relaci\u00f3n especificada. (Ten en cuenta que para la mayor\u00eda de los  prop\u00f3sitos es m\u00e1s conveniente utilizar las funciones de mayor nivel  <code>pg_total_relation_size</code>o o <code>pg_table_size</code>, que suenan los tama\u00f1os de todas las horquillas.) Con un argumento, esto devuelve el tama\u00f1o de la biuta principal de datos de la relaci\u00f3n. El  segundo argumento puede proporcionarse para especificar qu\u00e9 tenedor  examinar:                                                                             <code>main</code>devuelve el tama\u00f1o de la horquilla principal de datos de la relaci\u00f3n.                                                               <code>fsm</code>devuelve el tama\u00f1o del Mapa del Espacio Libre (ver secci\u00f3n 73.3) asociado a la relaci\u00f3n.                                                               <code>vm</code>devuelve el tama\u00f1o del Mapa de Visibilidad (ver Secci\u00f3n 73.4) asociado a la relaci\u00f3n.                                                               <code>init</code>devuelve el tama\u00f1o de la bital de inicializaci\u00f3n, si la hay, asociado a la relaci\u00f3n. <code>pg_size_bytes</code>(  <code>text</code>) . <code>bigint</code>                Convierte un tama\u00f1o en formato legible por el ser humano (como devuelto <code>pg_size_pretty</code>) en bytes. Las unidades v\u00e1lidas son <code>bytes</code>, <code>B</code>, <code>kB</code>, <code>MB</code>, <code>GB</code>, <code>TB</code>, y <code>PB</code>. <code>pg_size_pretty</code>(  <code>bigint</code>) . <code>text</code> <code>pg_size_pretty</code>(  <code>numeric</code>) .                 Convierte un tama\u00f1o en bytes en un formato m\u00e1s  f\u00e1cilmente legible por el ser humano con unidades de tama\u00f1o (bytes, kB,  MB, GB, TB o PB seg\u00fan corresponda). Tenga en cuenta que las unidades son poderes de 2 en lugar de poderes de 10, por lo tanto 1kB es 1024 bytes, 1MB es 1024 2 = 1048576 bytes, y as\u00ed sea. <code>pg_table_size</code>(  <code>regclass</code>) . <code>bigint</code>                Calma el espacio en disco utilizado por la tabla  especificada, excluyendo los \u00edndices (pero incluyendo su tabla TOAST si  la hubiere, mapa de espacio libre y mapa de visibilidad). <code>pg_tablespace_size</code>(  <code>name</code>) . <code>bigint</code> <code>pg_tablespace_size</code>(  <code>oid</code>) .                 Calca el espacio total de disco utilizado en el  espacio de mesa con el nombre especificado u OID. Para usar esta  funci\u00f3n, usted debe tener  <code>CREATE</code>privilegio en el espacio de mesa especificado o tener privilegios de la  <code>pg_read_all_stats</code>rol, a menos que sea el espacio de tablas por defecto para la base de datos actual. <code>pg_total_relation_size</code>(  <code>regclass</code>) . <code>bigint</code>                Calca el espacio total en disco utilizado por la tabla especificada, incluyendo todos los \u00edndices y  TOASTdatos. El resultado es equivalente a   <code>pg_table_size``+``pg_indexes_size</code>. <p>Las funciones anteriores que operan en cuadros o \u00edndices aceptan un  <code>regclass</code>argument, que es simplemente la OID de la tabla o \u00edndice en el  <code>pg_class</code>cat\u00e1logo de sistemas. Sin embargo, no tienes que buscar el OID a mano, desde el  <code>regclass</code>El convertidor de entradas del tipo de datos har\u00e1 el trabajo para usted. V\u00e9ase la secci\u00f3n 8.19 para m\u00e1s detalles.</p> <p>Las funciones que se muestran en el cuadro 9.97 ayudan a identificar los archivos de disco espec\u00edficos asociados con los objetos de la base de datos.</p> <p>Cuadro 9.97. Funciones de ubicaci\u00f3n de objetos de base</p> Funci\u00f3n                Descripci\u00f3n <code>pg_relation_filenode</code>(   <code>relation</code><code>regclass</code>) . <code>oid</code>                Devuelve el filenoden\u00famero de filenode actualmente asignado a la relaci\u00f3n especificada. El filenode es el  componente base del nombre del archivo (s) utilizado para la relaci\u00f3n  (ver Secci\u00f3n 73.1 para m\u00e1s informaci\u00f3n). Para la mayor\u00eda de las relaciones el resultado es el mismo que <code>pg_class</code>.<code>relfilenode</code>, pero para ciertos cat\u00e1logos de sistemas  <code>relfilenode</code>es cero y esta funci\u00f3n debe ser utilizada para obtener el valor correcto.  La funci\u00f3n devuelve NULL si se pas\u00f3 una relaci\u00f3n que no tiene  almacenamiento, como una vista. <code>pg_relation_filepath</code>(   <code>relation</code><code>regclass</code>) . <code>text</code>                Devuelve todo el nombre de ruta de archivo (relativo al directorio de datos del cl\u00faster de bases de datos, <code>PGDATA</code>) de la relaci\u00f3n. <code>pg_filenode_relation</code>(  <code>tablespace</code><code>oid</code>,   <code>filenode</code><code>oid</code>) . <code>regclass</code>                Devuelve un OID de relaci\u00f3n dada la OID de mesa y el exp\u00e1ndote en el que se almacena. Este es esencialmente el mapeo inverso de <code>pg_relation_filepath</code>. Para una relaci\u00f3n en el espacio de tablas predeterminado de la base de  datos, el espacio de tablas se puede especificar como cero. Retornos  <code>NULL</code>si no hay relaci\u00f3n en la base de datos actual est\u00e1 asociada a los valores dados. <p>Cuadro 9.98 enumera las funciones utilizadas para gestionar las collations.</p> <p>Cuadro 9.98. Funciones de gesti\u00f3n de la collaci\u00f3n</p> Funci\u00f3n                Descripci\u00f3n <code>pg_collation_actual_version</code>(  <code>oid</code>) . <code>text</code>                Devuelve la versi\u00f3n real del objeto de cocotaci\u00f3n ya  que est\u00e1 instalado actualmente en el sistema operativo. Si esto es  diferente del valor en <code>pg_collation</code>.<code>collversion</code>, entonces los objetos dependiendo de la collaci\u00f3n podr\u00edan necesitar ser reconstruido. V\u00e9ase tambi\u00e9n COLLACION ALTER. <code>pg_database_collation_actual_version</code>(  <code>oid</code>) . <code>text</code>                Devuelve la versi\u00f3n real de la recopilaci\u00f3n de la  base de datos, ya que actualmente se instala en el sistema operativo. Si esto es diferente del valor en <code>pg_database</code>.<code>datcollversion</code>, entonces los objetos dependiendo de la collaci\u00f3n podr\u00edan necesitar ser reconstruido. Ver tambi\u00e9n ALTER DATABASE. <code>pg_import_system_collations</code>(   <code>schema</code><code>regnamespace</code>) . <code>integer</code>                A\u00f1ade collations al cat\u00e1logo del sistema  <code>pg_collation</code>basado en todos los locales que encuentra en el sistema operativo. Esto es lo que  <code>initdb</code>utilizar; v\u00e9ase la secci\u00f3n 24.2.2 para m\u00e1s detalles. Si se instalan locales adicionales en el sistema  operativo m\u00e1s adelante, esta funci\u00f3n se puede ejecutar de nuevo para  a\u00f1adir collations para los nuevos locales. Locales que coinciden con las entradas existentes en  <code>pg_collation</code>se saltar\u00e1. (Pero los objetos de cocoteraci\u00f3n basados en locales que ya no est\u00e1n presentes en el sistema operativo no se eliminan por esta  funci\u00f3n.) El  <code>schema</code>par\u00e1metro ser\u00eda t\u00edpicamente <code>pg_catalog</code>, pero eso no es un requisito; las colillas podr\u00edan instalarse en alg\u00fan  otro esquema tambi\u00e9n. La funci\u00f3n devuelve el n\u00famero de nuevos objetos de cocoteraci\u00f3n que cre\u00f3. El uso de esta funci\u00f3n se limita a los  superusuarios. <p>El cuadro 9.99 enumera las funciones que proporcionan informaci\u00f3n sobre la estructura de las tablas divididas.</p> <p>Cuadro 9.99. Partici\u00f3n de funciones de la informaci\u00f3n</p> Funci\u00f3n                Descripci\u00f3n <code>pg_partition_tree</code>(  <code>regclass</code>) .  <code>setof record</code>(  <code>relid</code><code>regclass</code>,  <code>parentrelid</code><code>regclass</code>,  <code>isleaf</code><code>boolean</code>,   <code>level</code><code>integer</code>)                Lista las tablas o \u00edndices en el \u00e1rbol de partici\u00f3n  de la tabla particionado o \u00edndice particionado, con una fila para cada  partici\u00f3n. La informaci\u00f3n proporcionada incluye el OID de la partici\u00f3n,  el OID de su padre inmediato, un valor booleano que dice si la partici\u00f3n es una hoja, y un entero que dice su nivel en la jerarqu\u00eda. El valor de nivel es 0 para la tabla de entrada o \u00edndice, 1 para sus particiones  inmediatas para ni\u00f1os, 2 para sus particiones, y as\u00ed sea. No devuelve  filas si la relaci\u00f3n no existe o no es una partici\u00f3n o tabla  particionado. <code>pg_partition_ancestors</code>(  <code>regclass</code>) . <code>setof regclass</code>                Lista las relaciones antepasados de la partici\u00f3n  dada, incluyendo la relaci\u00f3n misma. No devuelve filas si la relaci\u00f3n no  existe o no es una partici\u00f3n o tabla particionado. <code>pg_partition_root</code>(  <code>regclass</code>) . <code>regclass</code>                Devuelve el padre m\u00e1s alto del \u00e1rbol de partici\u00f3n al que pertenece la relaci\u00f3n dada. Retorno  <code>NULL</code>si la relaci\u00f3n no existe o no es una partici\u00f3n o tabla dividida. <p>Por ejemplo, para comprobar el tama\u00f1o total de los datos contenidos en una tabla dividida <code>measurement</code>, se podr\u00eda utilizar la siguiente consulta:</p> <pre><code>SELECT pg.size.pretty(sum(pg.relation.size(relid)))))\n  DESDE pg-partici\u00f3n.tree ('medici\u00f3n');\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/27.-Funciones%20de%20administraci%C3%B3n%20de%20sistemas/08.-Funciones%20de%20mantenimiento%20de%20%C3%ADndices/","title":"08.-Funciones de mantenimiento de \u00edndices","text":"<p>El cuadro 9.100 muestra las funciones disponibles para las tareas de mantenimiento de  \u00edndices. (Ten en cuenta que estas tareas de mantenimiento normalmente se hacen autom\u00e1ticamente por autovaciaci\u00f3n; el uso de estas funciones s\u00f3lo se requiere en casos especiales.) Estas funciones no pueden ejecutarse  durante la recuperaci\u00f3n. El uso de estas funciones se limita a los  superusuarios y al propietario del \u00edndice dado.</p> <p>Cuadro 9.100. Funciones de mantenimiento de \u00edndices</p> Funci\u00f3n                Descripci\u00f3n <code>brin_summarize_new_values</code>(   <code>index</code><code>regclass</code>) . <code>integer</code>                Escanea el \u00edndice BRIN especificado para encontrar  rangos de p\u00e1gina en la tabla base que no se resumen actualmente por el  \u00edndice; para cualquier rango de este tipo crea un nuevo \u00edndice de  resumen tuple escaneando esas p\u00e1ginas de tabla. Devuelve el n\u00famero de  nuevos res\u00famenes de rango de p\u00e1ginas que se insertaron en el \u00edndice. <code>brin_summarize_range</code>(  <code>index</code><code>regclass</code>,   <code>blockNumber</code><code>bigint</code>) . <code>integer</code>                Sum\u00falla el rango de p\u00e1gina que cubre el bloque dado, si no se resume ya. Esto es como  <code>brin_summarize_new_values</code>salvo que s\u00f3lo procesa el rango de p\u00e1gina que cubre el n\u00famero de bloque de tablas. <code>brin_desummarize_range</code>(  <code>index</code><code>regclass</code>,   <code>blockNumber</code><code>bigint</code>) . <code>void</code>                Elivia la tuple del \u00edndice BRIN que resume el rango de p\u00e1gina que cubre el bloque de tablas dado, si hay uno. <code>gin_clean_pending_list</code>(   <code>index</code><code>regclass</code>) . <code>bigint</code>                pendingLimpia la lista pendiente de la lista de GIN especificada mediante entradas m\u00f3viles en ella, a  granel, a la estructura de datos GIN principal. Devuelve el n\u00famero de  p\u00e1ginas eliminadas de la lista pendiente. Si el argumento es un \u00edndice  GIN construido con el  <code>fastupdate</code>opci\u00f3n desactivado, no se produce una limpieza y el resultado es cero, porque el \u00edndice no tiene una lista pendiente. V\u00e9anse los detalles de la secci\u00f3n 70.4.1 y  la  sobre la lista pendiente y  opci\u00f3n."},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/27.-Funciones%20de%20administraci%C3%B3n%20de%20sistemas/09.-Funciones%20de%20acceso%20a%20archivos%20gen%C3%A9ricos/","title":"09.-Funciones de acceso a archivos gen\u00e9ricos","text":"<p>Las funciones que se muestran en la Tabla 9.101 proporcionan acceso nativo a los archivos de la m\u00e1quina que alberga el  servidor. S\u00f3lo archivos dentro del directorio de cl\u00faster de la base de  datos y el  <code>log_directory</code>se puede acceder, a menos que el usuario sea un superusuario o se le conceda el papel <code>pg_read_server_files</code>. Util\u00edce una ruta relativa para archivos en el directorio de cl\u00faster, y una ruta que coinzca con el  <code>log_directory</code>Configuraci\u00f3n para archivos de registro.</p> <p>Tenga en cuenta que la concesi\u00f3n a los usuarios del privilegio EXECUTE en <code>pg_read_file()</code>, o funciones relacionadas, les permite la posibilidad de leer cualquier  archivo en el servidor que el proceso del servidor de base de datos  pueda leer; estas funciones evitan todas las comprobaciones de  privilegios en la base de datos. Esto significa que, por ejemplo, un  usuario con dicho acceso es capaz de leer el contenido de la  <code>pg_authid</code>tabla donde se almacena la informaci\u00f3n de autenticaci\u00f3n, as\u00ed como leer  cualquier dato de tabla en la base de datos. Por lo tanto, debe  considerarse cuidadosamente la posibilidad de acceder a estas funciones.</p> <p>Al conceder privilegios en estas funciones, tenga en cuenta que  las entradas de la tabla que muestran par\u00e1metros opcionales se  implementan principalmente como varias funciones f\u00edsicas con diferentes  listas de par\u00e1metros. El privilegio debe concederse por separado en cada funci\u00f3n de este tipo, si se quiere utilizar. psql 's  <code>\\df</code>El comando puede ser \u00fatil para comprobar cu\u00e1les son las firmas de la funci\u00f3n real.</p> <p>Algunas de estas funciones se hacen con una opci\u00f3n  <code>missing_ok</code>par\u00e1metro, que especifica el comportamiento cuando el archivo o directorio no existe. Si <code>true</code>, la funci\u00f3n devuelve  <code>NULL</code>o un conjunto de resultados vac\u00edos, seg\u00fan corresponda. Si <code>false</code>, se levanta un error. (Notas de fallos que no sean el archivo no encontrado se reportan como errores en cualquier caso.) El incumplimiento es <code>false</code>.</p> <p>Cuadro 9.101. Funciones de acceso a archivos gen\u00e9ricos</p> Funci\u00f3n                Descripci\u00f3n <code>pg_ls_dir</code>(   <code>dirname</code><code>text</code>[,  <code>missing_ok</code><code>boolean</code>,   <code>include_dot_dirs</code><code>boolean</code>] . <code>setof text</code>                Devuelve los nombres de todos los archivos (y directorios y otros archivos especiales) en el directorio especificado. El  <code>include_dot_dirs</code>El par\u00e1metro indica si se \u201c.\u201d\u201c..\u201ddeben incluir en el conjunto de resultados: el predeterminado es excluirlos. Incluirlos puede ser \u00fatil cuando  <code>missing_ok</code>es <code>true</code>, para distinguir un directorio vac\u00edo de un directorio inexistente.                Esta funci\u00f3n se limita a los superusuarios por defecto, pero otros usuarios pueden recibir EXECUTE para ejecutar la funci\u00f3n. <code>pg_ls_logdir</code>()  <code>setof record</code>(  <code>name</code><code>text</code>,  <code>size</code><code>bigint</code>,   <code>modification</code><code>timestamp with time zone</code>)                Devuelve el nombre, tama\u00f1o y \u00faltima hora de  modificaci\u00f3n (mtime) de cada archivo ordinario en el directorio de  registro del servidor. Se excluyen las Filenames que comienzan con un  punto, directorios y otros archivos especiales.                Esta funci\u00f3n se limita a los superusuarios y funciones con privilegios de la  <code>pg_monitor</code>Funcionar por defecto, pero a otros usuarios se les puede conceder EXECUTE para ejecutar la funci\u00f3n. <code>pg_ls_waldir</code>()  <code>setof record</code>(  <code>name</code><code>text</code>,  <code>size</code><code>bigint</code>,   <code>modification</code><code>timestamp with time zone</code>)                Devuelve el nombre, tama\u00f1o y \u00faltima hora de  modificaci\u00f3n (mtime) de cada archivo ordinario en el directorio de  registro de escritores (WAL) del servidor. Se excluyen las Filenames que comienzan con un punto, directorios y otros archivos especiales.                Esta funci\u00f3n se limita a los superusuarios y funciones con privilegios de la  <code>pg_monitor</code>Funcionar por defecto, pero a otros usuarios se les puede conceder EXECUTE para ejecutar la funci\u00f3n. <code>pg_ls_logicalmapdir</code>()  <code>setof record</code>(  <code>name</code><code>text</code>,  <code>size</code><code>bigint</code>,   <code>modification</code><code>timestamp with time zone</code>)                Devuelve el nombre, tama\u00f1o y \u00faltimo tiempo de modificaci\u00f3n (mtime) de cada archivo ordinario en el servidor  <code>pg_logical/mappings</code>Directorio. Se excluyen las Filenames que comienzan con un punto, directorios y otros archivos especiales.                Esta funci\u00f3n se limita a los superusuarios y a los miembros de la  <code>pg_monitor</code>Funcionar por defecto, pero a otros usuarios se les puede conceder EXECUTE para ejecutar la funci\u00f3n. <code>pg_ls_logicalsnapdir</code>()  <code>setof record</code>(  <code>name</code><code>text</code>,  <code>size</code><code>bigint</code>,   <code>modification</code><code>timestamp with time zone</code>)                Devuelve el nombre, tama\u00f1o y \u00faltimo tiempo de modificaci\u00f3n (mtime) de cada archivo ordinario en el servidor  <code>pg_logical/snapshots</code>Directorio. Se excluyen las Filenames que comienzan con un punto, directorios y otros archivos especiales.                Esta funci\u00f3n se limita a los superusuarios y a los miembros de la  <code>pg_monitor</code>Funcionar por defecto, pero a otros usuarios se les puede conceder EXECUTE para ejecutar la funci\u00f3n. <code>pg_ls_replslotdir</code>(   <code>slot_name</code><code>text</code>) .  <code>setof record</code>(  <code>name</code><code>text</code>,  <code>size</code><code>bigint</code>,   <code>modification</code><code>timestamp with time zone</code>)                Devuelve el nombre, tama\u00f1o y \u00faltimo tiempo de modificaci\u00f3n (mtime) de cada archivo ordinario en el servidor  <code>pg_replslot/slot_name</code>directorio, d\u00f3nde  <code>slot_name</code>es el nombre de la ranura de replicaci\u00f3n proporcionado como entrada de la  funci\u00f3n. Se excluyen las Filenames que comienzan con un punto,  directorios y otros archivos especiales.                Esta funci\u00f3n se limita a los superusuarios y a los miembros de la  <code>pg_monitor</code>Funcionar por defecto, pero a otros usuarios se les puede conceder EXECUTE para ejecutar la funci\u00f3n. <code>pg_ls_archive_statusdir</code>()  <code>setof record</code>(  <code>name</code><code>text</code>,  <code>size</code><code>bigint</code>,   <code>modification</code><code>timestamp with time zone</code>)                Devuelve el nombre, tama\u00f1o y \u00faltima hora de  modificaci\u00f3n (mtime) de cada archivo ordinario en el directorio de  estado de archivo WAL del servidor (<code>pg_wal/archive_status</code>). Se excluyen las Filenames que comienzan con un punto, directorios y otros archivos especiales.                Esta funci\u00f3n se limita a los superusuarios y a los miembros de la  <code>pg_monitor</code>Funcionar por defecto, pero a otros usuarios se les puede conceder EXECUTE para ejecutar la funci\u00f3n. <code>pg_ls_tmpdir</code>( [   <code>tablespace</code><code>oid</code>] .  <code>setof record</code>(  <code>name</code><code>text</code>,  <code>size</code><code>bigint</code>,   <code>modification</code><code>timestamp with time zone</code>)                Devuelve el nombre, tama\u00f1o y \u00faltima hora de  modificaci\u00f3n (mtime) de cada archivo ordinario en el directorio de  archivos temporal para el especificado <code>tablespace</code>. Si  <code>tablespace</code>no se proporciona,  <code>pg_default</code>El espacio de mesa se examina. Se excluyen las Filenames que comienzan con un punto, directorios y otros archivos especiales.                Esta funci\u00f3n se limita a los superusuarios y a los miembros de la  <code>pg_monitor</code>Funcionar por defecto, pero a otros usuarios se les puede conceder EXECUTE para ejecutar la funci\u00f3n. <code>pg_read_file</code>(   <code>filename</code><code>text</code>[,  <code>offset</code><code>bigint</code>,   <code>length</code><code>bigint</code>] [,   <code>missing_ok</code><code>boolean</code>] . <code>text</code>                Devuelve la totalidad o parte de un archivo de texto, comenzando en el byte dado <code>offset</code>, regresando como mucho  <code>length</code>bytes (menos si se alcanza el final del archivo primero). Si  <code>offset</code>es negativo, es relativo al final del archivo. Si  <code>offset</code>y  <code>length</code>se omiten, todo el archivo se devuelve. Los bytes le\u00eddos del archivo se  interpretan como una cadena en la codificaci\u00f3n de la base de datos; se  lanza un error si no son v\u00e1lidos en esa codificaci\u00f3n.                Esta funci\u00f3n se limita a los superusuarios por defecto, pero otros usuarios pueden recibir EXECUTE para ejecutar la funci\u00f3n. <code>pg_read_binary_file</code>(   <code>filename</code><code>text</code>[,  <code>offset</code><code>bigint</code>,   <code>length</code><code>bigint</code>] [,   <code>missing_ok</code><code>boolean</code>] . <code>bytea</code>                Devuelve la totalidad o parte de un archivo. Esta funci\u00f3n es id\u00e9ntica a  <code>pg_read_file</code>excepto que puede leer datos binarios arbitrarios, devolviendo el resultado como  <code>bytea</code>no <code>text</code>; en consecuencia, no se realicen controles de codificaci\u00f3n.                Esta funci\u00f3n se limita a los superusuarios por defecto, pero otros usuarios pueden recibir EXECUTE para ejecutar la funci\u00f3n.                En combinaci\u00f3n con la  <code>convert_from</code>funci\u00f3n, esta funci\u00f3n se puede utilizar para leer un archivo de texto en una  codificaci\u00f3n especificada y convertir a la codificaci\u00f3n de la base de  datos:                <code>SELECT convert.from(pg.read.binry.file.file(in.utf8.txt'), 'UTF8');</code> <code>pg_stat_file</code>(   <code>filename</code><code>text</code>[,   <code>missing_ok</code><code>boolean</code>] .  <code>record</code>(  <code>size</code><code>bigint</code>,  <code>access</code><code>timestamp with time zone</code>,  <code>modification</code><code>timestamp with time zone</code>,  <code>change</code><code>timestamp with time zone</code>,  <code>creation</code><code>timestamp with time zone</code>,   <code>isdir</code><code>boolean</code>)                Devuelve un registro que contiene el tama\u00f1o del  archivo, el sello de la \u00faltima hora de acceso, el sello de tiempo de la  \u00faltima modificaci\u00f3n, el \u00faltimo sello de cambio de estado de archivo  (s\u00f3lo plataformasUnix), el sello de tiempo de creaci\u00f3n de archivos (s\u00f3lo Windows), y una bandera que indica si se trata de un directorio.                Esta funci\u00f3n se limita a los superusuarios por defecto, pero otros usuarios pueden recibir EXECUTE para ejecutar la funci\u00f3n."},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/27.-Funciones%20de%20administraci%C3%B3n%20de%20sistemas/10.-Funciones%20de%20bloqueo%20de%20asesoramiento/","title":"10.-Funciones de bloqueo de asesoramiento","text":"<p>Las funciones que se muestran en el cuadro 9.102 gestionan las cerrajas de asesoramiento. Para m\u00e1s detalles sobre el uso adecuado de estas funciones, v\u00e9ase la secci\u00f3n 13.3.5.</p> <p>Todas estas funciones est\u00e1n destinadas a ser utilizadas para  bloquear los recursos definidos por aplicaciones, que pueden  identificarse ya sea por un solo valor de clave de 64 bits o dos valores clave de 32 bits (tenga en cuenta que estos dos espacios clave no se  superponen). Si otra sesi\u00f3n ya celebra una cerramiento conflictiva en el mismo identificador de recursos, las funciones esperar\u00e1n hasta que el  recurso est\u00e9 disponible, o devuelva un  <code>false</code>resultado, seg\u00fan corresponda para la funci\u00f3n. Las cerrazones pueden ser  compartidas o exclusivas: una cerraz\u00f3n compartida no entra en conflicto  con otras cerrajas compartidas en el mismo recurso, s\u00f3lo con cerrajas  exclusivas. Las cerrazones se pueden llevar a nivel de sesi\u00f3n (de modo  que se celebren hasta que se publique o termine el per\u00edodo de sesiones) o a nivel de transacci\u00f3n (de modo que se celebren hasta que termine la  transacci\u00f3n actual; no hay ninguna disposici\u00f3n para la versi\u00f3n manual).  Las solicitudes de bloqueo a nivel de sesi\u00f3n m\u00faltiple se apilan, de modo que si el mismo identificador de recursos se bloquea tres veces debe  haber tres solicitudes de desbloqueo para liberar el recurso antes de  que termine el per\u00edodo de sesiones.</p> <p>Cuadro 9.102. Funciones de bloqueo de asesoramiento</p> Funci\u00f3n                Descripci\u00f3n <code>pg_advisory_lock</code>(   <code>key</code><code>bigint</code>) . <code>void</code> <code>pg_advisory_lock</code>(  <code>key1</code><code>integer</code>,   <code>key2</code><code>integer</code>) . <code>void</code>                Obtiene una cerra candado exclusivo a nivel de sesi\u00f3n, esperando si es necesario. <code>pg_advisory_lock_shared</code>(   <code>key</code><code>bigint</code>) . <code>void</code> <code>pg_advisory_lock_shared</code>(  <code>key1</code><code>integer</code>,   <code>key2</code><code>integer</code>) . <code>void</code>                Obtiene una cerra candado de asesoramiento a nivel de sesi\u00f3n compartida, esperando si es necesario. <code>pg_advisory_unlock</code>(   <code>key</code><code>bigint</code>) . <code>boolean</code> <code>pg_advisory_unlock</code>(  <code>key1</code><code>integer</code>,   <code>key2</code><code>integer</code>) . <code>boolean</code>                Lanza una cerraja de asesoramiento exclusiva previamente adquirida a nivel de sesi\u00f3n. Retorno  <code>true</code>si la cerraba se libera con \u00e9xito. Si no se hubiera mantenido la cerraja,  <code>false</code>es devuelto, y adem\u00e1s, el servidor reportar\u00e1 una advertencia SQL. <code>pg_advisory_unlock_all</code>() <code>void</code>                Pone a soltar todas las esclusas consultivas a nivel  de sesi\u00f3n celebradas en el actual per\u00edodo de sesiones. (Esta funci\u00f3n se  invoca impl\u00edcitamente al final de la sesi\u00f3n, incluso si el cliente se  desconecta de manera invergonal.) <code>pg_advisory_unlock_shared</code>(   <code>key</code><code>bigint</code>) . <code>boolean</code> <code>pg_advisory_unlock_shared</code>(  <code>key1</code><code>integer</code>,   <code>key2</code><code>integer</code>) . <code>boolean</code>                Lanza una cerraja de asesoramiento a nivel de sesi\u00f3n compartido previamente adquirida. Retorno  <code>true</code>si la cerraba se libera con \u00e9xito. Si no se hubiera mantenido la cerraja,  <code>false</code>es devuelto, y adem\u00e1s, el servidor reportar\u00e1 una advertencia SQL. <code>pg_advisory_xact_lock</code>(   <code>key</code><code>bigint</code>) . <code>void</code> <code>pg_advisory_xact_lock</code>(  <code>key1</code><code>integer</code>,   <code>key2</code><code>integer</code>) . <code>void</code>                Obtiene una cerraci\u00f3n de asesoramiento a nivel de transacci\u00f3n exclusiva, esperando si es necesario. <code>pg_advisory_xact_lock_shared</code>(   <code>key</code><code>bigint</code>) . <code>void</code> <code>pg_advisory_xact_lock_shared</code>(  <code>key1</code><code>integer</code>,   <code>key2</code><code>integer</code>) . <code>void</code>                Obtiene una cerracerraci\u00f3n de asesoramiento a nivel de transacci\u00f3n compartida, esperando si es necesario. <code>pg_try_advisory_lock</code>(   <code>key</code><code>bigint</code>) . <code>boolean</code> <code>pg_try_advisory_lock</code>(  <code>key1</code><code>integer</code>,   <code>key2</code><code>integer</code>) . <code>boolean</code>                Obtiene una cerraba de asesoramiento exclusiva a  nivel de sesi\u00f3n si est\u00e1 disponible. Esto obtendr\u00e1 la cerracerraci\u00f3n  inmediatamente y regresar\u00e1 <code>true</code>, o retorno  <code>false</code>sin esperar si la cerracerraba no se puede adquirir inmediatamente. <code>pg_try_advisory_lock_shared</code>(   <code>key</code><code>bigint</code>) . <code>boolean</code> <code>pg_try_advisory_lock_shared</code>(  <code>key1</code><code>integer</code>,   <code>key2</code><code>integer</code>) . <code>boolean</code>                Obtiene una cerrague de asesoramiento a nivel de  sesi\u00f3n compartida si est\u00e1 disponible. Esto obtendr\u00e1 la cerracerraci\u00f3n  inmediatamente y regresar\u00e1 <code>true</code>, o retorno  <code>false</code>sin esperar si la cerracerraba no se puede adquirir inmediatamente. <code>pg_try_advisory_xact_lock</code>(   <code>key</code><code>bigint</code>) . <code>boolean</code> <code>pg_try_advisory_xact_lock</code>(  <code>key1</code><code>integer</code>,   <code>key2</code><code>integer</code>) . <code>boolean</code>                Obtiene un bloqueo exclusivo de asesoramiento a nivel de transacci\u00f3n si est\u00e1 disponible. Esto obtendr\u00e1 la cerracerraci\u00f3n  inmediatamente y regresar\u00e1 <code>true</code>, o retorno  <code>false</code>sin esperar si la cerracerraba no se puede adquirir inmediatamente. <code>pg_try_advisory_xact_lock_shared</code>(   <code>key</code><code>bigint</code>) . <code>boolean</code> <code>pg_try_advisory_xact_lock_shared</code>(  <code>key1</code><code>integer</code>,   <code>key2</code><code>integer</code>) . <code>boolean</code>                Obtiene un bloqueo de asesoramiento a nivel de  transacci\u00f3n compartido si est\u00e1 disponible. Esto obtendr\u00e1 la  cerracerraci\u00f3n inmediatamente y regresar\u00e1 <code>true</code>, o retorno  <code>false</code>sin esperar si la cerracerraba no se puede adquirir inmediatamente."},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/29.-Funciones%20de%20disparadores%20de%20eventos/","title":"Index","text":"<p>PostgreSQL proporciona estas funciones de ayuda para recuperar informaci\u00f3n de los desencadenantes de eventos.</p> <p>Para obtener m\u00e1s informaci\u00f3n sobre los desencadenantes de eventos, consulte el cap\u00edtulo 40.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/29.-Funciones%20de%20disparadores%20de%20eventos/01.-Captura%20de%20cambios%20a%20final%20de%20comando/","title":"01.-Captura de cambios a final de comando","text":"<pre><code> pg_event_trigger_ddl_commands() setof record\n</code></pre> <p><code>pg_event_trigger_ddl_commands</code>devuelve una lista de  DDLcomandos ejecutados por cada acci\u00f3n del usuario, cuando se invocan en una funci\u00f3n adjunta a una  <code>ddl_command_end</code>desencadenante de eventos. Si se llama en cualquier otro contexto, se levanta un error.  <code>pg_event_trigger_ddl_commands</code>devuelve una fila para cada comando base ejecutado; algunos comandos que son una sola frase SQL pueden devolver m\u00e1s de una fila. Esta funci\u00f3n devuelve  las siguientes columnas:</p> Nombre Tipo Descripci\u00f3n <code>classid</code> <code>oid</code> OID de cat\u00e1logo en el que pertenece el objeto <code>objid</code> <code>oid</code> OID del objeto en s\u00ed <code>objsubid</code> <code>integer</code> ID de subobjeto (por ejemplo, n\u00famero de atributo para una columna) <code>command_tag</code> <code>text</code> Etiqueta de comandos <code>object_type</code> <code>text</code> Tipo del objeto <code>schema_name</code> <code>text</code> El nombre del esquema en el que pertenece el objeto, si los hubiere; de lo contrario <code>NULL</code>. No se aplica ninguna cita. <code>object_identity</code> <code>text</code> Reeciendo de texto de la identidad del objeto,  calificado con esquema. Cada identificador incluido en la identidad se  cita en caso necesario. <code>in_extension</code> <code>boolean</code> Fiel si el comando es parte de un gui\u00f3n de extensi\u00f3n <code>command</code> <code>pg_ddl_command</code> Una representaci\u00f3n completa del comando, en formato  interno. Esto no puede ser de salida directamente, pero se puede pasar a otras funciones para obtener diferentes piezas de informaci\u00f3n sobre el  comando."},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/29.-Funciones%20de%20disparadores%20de%20eventos/02.-Procesado%20de%20objetos%20abandonados%20por%20el%20comando%20DDL/","title":"02.-Procesado de objetos abandonados por el comando DDL","text":"<pre><code> pg_event_trigger_dropped_objects() setof record\n</code></pre> <p><code>pg_event_trigger_dropped_objects</code>devuelve una lista de todos los objetos lanzados por el comando en cuyo  <code>sql_drop</code>evento se llama. Si se llama en cualquier otro contexto, se levanta un error. Esta funci\u00f3n devuelve las siguientes columnas:</p> Nombre Tipo Descripci\u00f3n <code>classid</code> <code>oid</code> OID de catalogar el objeto pertenec\u00eda a <code>objid</code> <code>oid</code> OID del objeto en s\u00ed <code>objsubid</code> <code>integer</code> ID de subobjeto (por ejemplo, n\u00famero de atributo para una columna) <code>original</code> <code>boolean</code> Fiel si este fuera uno de los objetos ra\u00edz de la eliminaci\u00f3n <code>normal</code> <code>boolean</code> Cierto si hubiera una relaci\u00f3n de dependencia normal en el gr\u00e1fico de dependencia que conduje a este objeto <code>is_temporary</code> <code>boolean</code> Fiel si fuera un objeto temporal. <code>object_type</code> <code>text</code> Tipo del objeto <code>schema_name</code> <code>text</code> Nombre del esquema en el que pertenec\u00eda el objeto, si lo hubiera; de lo contrario <code>NULL</code>. No se aplica ninguna cita. <code>object_name</code> <code>text</code> Nombre del objeto, si la combinaci\u00f3n de esquema y nombre puede utilizarse como identificador \u00fanico para el objeto; de lo  contrario <code>NULL</code>. No se aplica cita, y el nombre nunca est\u00e1 calificado como esquema. <code>object_identity</code> <code>text</code> Reeciendo de texto de la identidad del objeto,  calificado con esquema. Cada identificador incluido en la identidad se  cita en caso necesario. <code>address_names</code> <code>text[]</code> Una matriz que, junto con  <code>object_type</code>y <code>address_args</code>, puede ser utilizado por la  <code>pg_get_object_address</code>funci\u00f3n para recrear la direcci\u00f3n del objeto en un servidor remoto que contiene un objeto id\u00e9ntico del mismo tipo. <code>address_args</code> <code>text[]</code> Complementa para <code>address_names</code> <p>El  <code>pg_event_trigger_dropped_objects</code>funci\u00f3n se puede utilizar en un desencadenante de eventos como este:</p> <pre><code>CREATE FUNCTION test.event.trigger.for.drops ()\n        VUELAs event.trigger LANGUAGE plpgsql AS$ $$\nDECLARE\n    obj registro;\nBEGIN\n    FOR obj IN SELECT * FROM pg.event.trigger.s.s.objects ()\n    LOOP\n        RAISE NOTICE '% objeto ca\u00eddo: % %.% % %',\n                     tg.tag,\n                     obj.object-type,\n                     obj.schema-name,\n                     obj.object.name,\n                     obj.object-identity;\n    END LOOP;\nEND;\n$$;\nCREATE EVENT TRIGGER test.event.trigger.for-baps\n   En Sql.drop\n   EXECUTE FUNCTION test.event.trigger.for. gotps ();\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/29.-Funciones%20de%20disparadores%20de%20eventos/03.-Manejo%20de%20un%20eventro%20de%20reescritura%20de%20tabla/","title":"03.-Manejo de un eventro de reescritura de tabla","text":"<p>Las funciones que se indican en el cuadro 9.104 proporcionan informaci\u00f3n sobre una tabla para la que se  <code>table_rewrite</code>Acaba de llamarse el evento. Si se llama en cualquier otro contexto, se levanta un error.</p> <p>Cuadro 9.104. Tabla Reescribir funciones de informaci\u00f3n</p> Funci\u00f3n                Descripci\u00f3n <code>pg_event_trigger_table_rewrite_oid</code>() <code>oid</code>                Devuelve la OID de la tabla a punto de ser reescrita. <code>pg_event_trigger_table_rewrite_reason</code>() <code>integer</code>                Devuelve un c\u00f3digo que explica el motivo (s) para la  reescritura. El significado exacto de los c\u00f3digos es dependiente de la  liberaci\u00f3n. <p>Estas funciones se pueden utilizar en un desencadenante de eventos como este:</p> <pre><code>CREATE FUNCTION test.event.trigger.table.rewrite.oid (\n VUETAS evento.trigger\n LANGUAGE plpgsql AS\n$$\nBEGIN\n  RAISE NOTICE 'reescribir la tabla % del motivo %',\n                pg.event.trigger.table.rewrite.oid (::regclass,\n                pg.event.trigger.rewrite.reason (;\nEND;\n$$;\n\nCREATE EVENT TRIGGER test-table.rewrite-oid\n                  EN tablerritrite\n   EXECUTE FUNCTION test.event.trigger.table.rewrite-oid ();\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/30.-Funciones%20de%20informaci%C3%B3n%20estad%C3%ADstica/","title":"Index","text":"<p>PostgreSQL provides a function to inspect complex statistics defined using the <code>CREATE STATISTICS</code> command.</p>"},{"location":"02.-El%20lenguaje%20SQL/06.-Funciones%20y%20operadores/30.-Funciones%20de%20informaci%C3%B3n%20estad%C3%ADstica/01.-Inspecci%C3%B3n%20de%20listas%20MCV/","title":"01.-Inspecci\u00f3n de listas MCV","text":"<pre><code> pg_mcv_list_items(  pg_mcv_list) . setof record\n</code></pre> <p><code>pg_mcv_list_items</code>devuelve un conjunto de registros que describen todos los elementos almacenados en una multi-columna  MCVlista. Devuelve las siguientes columnas:</p> Nombre Tipo Descripci\u00f3n <code>index</code> <code>integer</code> \u00edndice de la partida en el  MCVlista <code>values</code> <code>text[]</code> valores almacenados en el elemento MCV <code>nulls</code> <code>boolean[]</code> banderas que identifican  <code>NULL</code>valores <code>frequency</code> <code>double precision</code> frecuencia de esto  MCVel tema <code>base_frequency</code> <code>double precision</code> frecuencia de base de esto  MCVel tema <p>El  <code>pg_mcv_list_items</code>funci\u00f3n se puede utilizar de esta manera:</p> <pre><code>SELECT m.* DESDE pg.statistic.ext join pg.statistic.ext.data on (oid = stxoid),\n                art\u00edculos de la drag.mcv.list.items(stxdmcv) m WHERE stxname = 'stts';\n</code></pre> <p>Valores de la  <code>pg_mcv_list</code>tipo se puede obtener s\u00f3lo de la <code>pg_statistic_ext_data</code>. <code>stxdmcv</code>columnas.</p>"},{"location":"02.-El%20lenguaje%20SQL/07.-Conversi%C3%B3n%20de%20tipos/","title":"Index","text":"<p>SQLLas declaraciones pueden, intencionalmente o no, requerir la mezcla de diferentes tipos de datos en la misma expresi\u00f3n. PostgreSQL cuenta con amplias instalaciones para evaluar expresiones de tipo mixto.</p> <p>En muchos casos, un usuario no necesita entender los detalles del  mecanismo de conversi\u00f3n de tipo. Sin embargo, las conversiones  impl\u00edcitas realizadas por PostgreSQL pueden afectar los resultados de una consulta. Cuando sea necesario, estos resultados pueden adaptarse mediante la conversi\u00f3n expl\u00edcita de tipo.</p> <p>Este cap\u00edtulo introduce los mecanismos y convenciones de conversi\u00f3n de tipo PostgreSQL. Consulte las secciones pertinentes del cap\u00edtulo 8 y del cap\u00edtulo 9 para obtener m\u00e1s informaci\u00f3n sobre tipos de datos espec\u00edficos y funciones y operadores permitidos.</p>"},{"location":"02.-El%20lenguaje%20SQL/07.-Conversi%C3%B3n%20de%20tipos/01.-Resumen/","title":"01.-Resumen","text":"<p>SQLes un lenguaje muy mecanografiado. Es decir, cada elemento de datos tiene  un tipo de datos asociado que determina su comportamiento y permite el  uso. PostgreSQL tiene un sistema de tipo extensible m\u00e1s general y flexible que otros  SQLlas implementaciones. Por lo tanto, la mayor\u00eda del comportamiento de conversi\u00f3n de tipo en PostgreSQL se rige por reglas generales en lugar de por heur\u00edsticas ad hoc. Esto  permite el uso de expresiones de tipo mixto incluso con tipos definidos  por el usuario.</p> <p>El esc\u00e1ner/aparador PostgreSQL divide elementos l\u00e9xicos en cinco categor\u00edas fundamentales: n\u00fameros  enteros, n\u00fameros no integrados, cadenas, identificadores y palabras  clave. Los estantes de la mayor\u00eda de los tipos no num\u00e9ricos se  clasifican por primera vez como cadenas. El  SQLLa definici\u00f3n del lenguaje permite especificar nombres de tipo con cadenas, y este mecanismo se puede utilizar en PostgreSQL para iniciar el analizador por la ruta correcta. Por ejemplo, la consulta:</p> <pre><code>SELECT text \"Origen\" AS \"etiqueta\", punto \"0,0) \"valor\" AS\";\n\n etiqueta . valor\n---------------\n Origen (0,0)\n(1 fila)\n</code></pre> <p>tiene dos constantes literales, de tipo  <code>text</code>y <code>point</code>. Si un tipo no se especifica para una cadena literal, entonces el tipo de marcador de posici\u00f3n  <code>unknown</code>se asigna inicialmente, que se resolver\u00e1 en etapas posteriores como se describe a continuaci\u00f3n.</p> <p>Hay cuatro fundamentales  SQLconstrucciones que requieren reglas de conversi\u00f3n de tipo distintas en el analizador PostgreSQL:</p> <ul> <li>Llamadas de funci\u00f3n</li> </ul> <p>\u200b        Gran parte del sistema de tipo PostgreSQL est\u00e1 construido alrededor de un rico conjunto de funciones. Las funciones pueden tener uno o m\u00e1s argumentos. Dado que PostgreSQL permite sobrecarga de la funci\u00f3n, el nombre de la funci\u00f3n por s\u00ed solo  no identifica de manera \u00fanica la funci\u00f3n a llamar; el analizador debe  seleccionar la funci\u00f3n correcta en funci\u00f3n de los tipos de datos de los  argumentos suministrados.      </p> <ul> <li>Operadores</li> </ul> <p>\u200b        PostgreSQL permite expresiones con operadores de prefijo (unargumento), as\u00ed como  operadores de infix (de dos agumentos). Al igual que las funciones, los  operadores pueden sobrecargarse, por lo que existe el mismo problema de  selecci\u00f3n del operador adecuado.      </p> <ul> <li>Almacenamiento de valor</li> </ul> <p>\u200b          SQL<code>INSERT</code>y  <code>UPDATE</code>Las declaraciones colocan los resultados de las expresiones en una tabla.  Las expresiones en la declaraci\u00f3n deben ser empaedidas con los tipos de  las columnas de destino, y tal vez convertidas a.      </p> <ul> <li><code>UNION</code>, <code>CASE</code>, y construcciones relacionadas</li> </ul> <p>\u200b        Desde la consulta se desprende de un sindicato  <code>SELECT</code>declaraci\u00f3n debe aparecer en un \u00fanico conjunto de columnas, los tipos de resultados de cada  <code>SELECT</code>La cl\u00e1usula debe ser emparejan y convertidas en un conjunto uniforme. Del mismo modo, las expresiones de resultado de una  <code>CASE</code>la construcci\u00f3n debe convertirse en un tipo com\u00fan de modo que la  <code>CASE</code>la expresi\u00f3n en su conjunto tiene un tipo de salida conocido. Algunas otras construcciones, como  <code>ARRAY[]</code>y el  <code>GREATEST</code>y  <code>LEAST</code>funciones, tambi\u00e9n requieren la determinaci\u00f3n de un tipo com\u00fan para varias subexpresiones.      </p> <p>El sistema almacena informaci\u00f3n sobre qu\u00e9 conversiones existen, o molidos, entre qu\u00e9 tipos de datos y c\u00f3mo realizar esas conversiones. El usuario puede a\u00f1adir molonamientos adicionales con el comando CREATE CAST. (Esto se hace generalmente junto con la definici\u00f3n de nuevos tipos de  datos. El conjunto de moliendas entre los tipos incorporados ha sido  cuidadosamente elaborado y es mejor no alterarlo.)</p> <p>Un heur\u00edstico adicional proporcionado por el analizador permite  mejorar la determinaci\u00f3n del comportamiento de fundici\u00f3n adecuado entre  grupos de tipos que tienen elencos impl\u00edcitos. Los tipos de datos se  dividen en varias categor\u00edas de tipo b\u00e1sico, incluyendo <code>boolean</code>, <code>numeric</code>, <code>string</code>, <code>bitstring</code>, <code>datetime</code>, <code>timespan</code>, <code>geometric</code>, <code>network</code>, y definido por el usuario. (Para una lista ver Tabla 53.65 ; pero tenga en cuenta que tambi\u00e9n es posible crear categor\u00edas de tipo  personalizado.) Dentro de cada categor\u00eda puede haber uno o m\u00e1s tipos preferidos, que se prefieren cuando hay una opci\u00f3n de los posibles tipos. Con una  cuidadosa selecci\u00f3n de tipos preferidos y elencos impl\u00edcitos  disponibles, es posible asegurar que las expresiones ambiguas (aquellas  con m\u00faltiples soluciones de parsing de candidatos) puedan resolverse de  una manera \u00fatil.</p> <p>Todas las reglas de conversi\u00f3n de tipo est\u00e1n dise\u00f1adas con varios principios en mente:</p> <ul> <li>Las conversiones impl\u00edcitas nunca deben tener resultados sorprendentes o impredecibles.</li> <li>No debe haber gastos generales adicionales en el analizador o albacea si  una consulta no necesita conversi\u00f3n de tipo impl\u00edcito. Es decir, si una  consulta est\u00e1 bien formada y los tipos ya coinciden, entonces la  consulta debe ejecutar sin pasar tiempo extra en el analizador y sin  introducir innecesarias llamadas de conversi\u00f3n impl\u00edcitas en la  consulta.</li> <li>Adem\u00e1s, si una consulta generalmente requiere una conversi\u00f3n impl\u00edcita para una funci\u00f3n, y si entonces el usuario define una nueva funci\u00f3n con los  tipos de argumento correctos, el analizador debe usar esta nueva funci\u00f3n y ya no hacer la conversi\u00f3n impl\u00edcita para usar la funci\u00f3n antigua.</li> </ul>"},{"location":"02.-El%20lenguaje%20SQL/07.-Conversi%C3%B3n%20de%20tipos/02.-Operadores/","title":"02.-Operadores","text":"<p>El operador espec\u00edfico a que se hace referencia por una expresi\u00f3n del operador se determina utilizando  el siguiente procedimiento. Tenga en cuenta que este procedimiento se ve afectado indirectamente por la precedencia de los operadores  implicados, ya que ello determinar\u00e1 qu\u00e9 subexpresiones se toman como los insumos de qu\u00e9 operadores. Para m\u00e1s informaci\u00f3n v\u00e9ase </p> <p>Resoluci\u00f3n de tipo de operador</p> <ol> <li>Seleccionar los operadores a considerar de la  <code>pg_operator</code>cat\u00e1logo de sistemas. Si se utiliz\u00f3 un nombre de operador no calificado de  esquima (el caso habitual), los operadores considerados son aquellos con el nombre y el conteo de argumentos coincidentes que son visibles en la ruta de b\u00fasqueda actual (v\u00e9ase la secci\u00f3n 5.9.3). Si se da una denominaci\u00f3n de operador cualificado, solo se consideran operadores del esquema especificado.</li> <li>Si la ruta de b\u00fasqueda encuentra m\u00faltiples operadores con tipos de  argumentaci\u00f3n id\u00e9nticos, s\u00f3lo se considera el que aparece m\u00e1s temprano  en el camino. Los operadores con diferentes tipos de argumentos se  consideran en pie de igualdad independientemente de la posici\u00f3n de la  ruta de b\u00fasqueda.</li> <li>Comproba para que un operador acepte exactamente los tipos de argumentos de entrada. Si existe (puede haber una coincidencia exacta  en el conjunto de operadores considerados), \u00faselo. La falta de una  coincidencia exacta crea un peligro de seguridad al llamar, a trav\u00e9s de  nombre cualificado [9] (no t\u00edpico), a cualquier operador encontrado en un esquema que permita a los usuarios no confiables crear objetos. En tales situaciones, lanza  argumentos para forzar una coincidencia exacta.</li> <li>Si un argumento de una invocaci\u00f3n del operador binario es de la  <code>unknown</code>tipo, entonces asuma que es del mismo tipo que el otro argumento para este cheque. Invocaciones en las que participan dos  <code>unknown</code>entradas, o un operador de prefijo con un  <code>unknown</code>entrada, nunca encontrar\u00e1 una coincidencia en este paso.</li> <li>Si un argumento de una invocaci\u00f3n del operador binario es de la  <code>unknown</code>tipo y el otro es de un tipo de dominio, siguiente comprobaci\u00f3n para ver si  hay un operador que acepte exactamente el tipo de base del dominio en  ambos lados; si es as\u00ed, \u00faselo.</li> <li>Busen el mejor partido.</li> <li>Deseche a los operadores candidatos para los que los  tipos de entrada no coinzcan y no puedan convertirse (usando una  conversi\u00f3n impl\u00edcita) para que coinzcan.  <code>unknown</code>Los literales se asumen convertibles a cualquier cosa para este prop\u00f3sito.  Si s\u00f3lo queda un candidato, \u00faselo; de lo contrario sigue el siguiente  paso.</li> <li>Si cualquier argumento de entrada es de un tipo de  dominio, tratarlo como del tipo de base del dominio para todos los pasos posteriores. Esto garantiza que los dominios act\u00faen como sus tipos de  base con fines de resoluci\u00f3n ambigua-operatoria.</li> <li>Corre a trav\u00e9s de todos los candidatos y mant\u00e9n a los que tienen las coincidencias m\u00e1s exactas en los tipos de entrada. Mant\u00e9n  todos los candidatos si ninguno tiene coincidencias exactas. Si s\u00f3lo  queda un candidato, \u00faselo; de lo contrario sigue el siguiente paso.</li> <li>Corre a trav\u00e9s de todos los candidatos y mantener  aquellos que aceptan tipos preferidos (de la categor\u00eda de tipo de datos  de entrada) en las m\u00e1s posiciones donde se requerir\u00e1 la conversi\u00f3n de  tipo. Mantenga a todos los candidatos si ninguno acepta los tipos  preferidos. Si s\u00f3lo queda un candidato, \u00faselo; de lo contrario sigue el  siguiente paso.</li> <li>Si alg\u00fan argumento de entrada es <code>unknown</code>, compruebe las categor\u00edas de tipo aceptadas en esas posiciones  argumentadas por los candidatos restantes. En cada posici\u00f3n, seleccione  el  <code>string</code>categor\u00eda si alg\u00fan candidato acepta esa categor\u00eda. (Este sesgo hacia la cuerda es apropiado ya que un literal de tipo desconocido parece una cuerda.) De  lo contrario, si todos los candidatos restantes aceptan la misma  categor\u00eda de tipo, seleccione esa categor\u00eda; de lo contrario falla  porque la elecci\u00f3n correcta no se puede deducir sin m\u00e1s pistas. Ahora  deseche a los candidatos que no acepten la categor\u00eda de tipo  seleccionado. Adem\u00e1s, si alg\u00fan candidato acepta un tipo preferido en esa categor\u00eda, deseche a los candidatos que acepten tipos no preferidos  para ese argumento. Mantenga a todos los candidatos si ninguno sobreviva a estas pruebas. Si s\u00f3lo queda un candidato, \u00faselo; de lo contrario  sigue el siguiente paso.</li> <li>Si hay ambos  <code>unknown</code>y argumentos conocidos, y todos los argumentos de tipo conocido tienen el mismo tipo, asumen que el  <code>unknown</code>argumentos tambi\u00e9n son de este tipo, y comprueban qu\u00e9 candidatos pueden aceptar ese tipo en el <code>unknown</code>- posiciones de lenguaje. Si exactamente un candidato pasa esta prueba, \u00fasalo. De lo contrario, fracasa.</li> </ol> <p>Algunos ejemplos siguen.</p> <p>Ejemplo 10.1. Resoluci\u00f3n de tipo de operador de ra\u00edz cuadrada</p> <p>S\u00f3lo hay un operador de ra\u00edz cuadrada (prefijo <code>|/</code>) definido en el cat\u00e1logo est\u00e1ndar, y toma un argumento de tipo <code>double precision</code>. El esc\u00e1ner asigna un tipo inicial de  <code>integer</code>al argumento de esta expresi\u00f3n de consulta:</p> <pre><code>SELECT ./ 40 AS \"ra\u00edces cuadrado de 40\";\n ra\u00edz cuadrada de 40\n--------------------\n 6.324555320336759\n(1 fila)\n</code></pre> <p>As\u00ed que el analizador hace una conversi\u00f3n de tipo en el operando y la consulta es equivalente a:</p> <pre><code>SELECT ./ CAST(40 AS double precision) AS \"ra\u00edces cuadrado de 40\";\n</code></pre> <p>Ejemplo 10.2. Resoluci\u00f3n de tipo de operador de concatenaci\u00f3n de cuerda</p> <p>Una sintaxis similar a una cadena se utiliza para trabajar con  tipos de cadena y para trabajar con tipos de extensi\u00f3n complejos. Las  cuerdas con tipo no especificado se corresponden con los probables  candidatos a los operadores.</p> <p>Un ejemplo con un argumento no especificado:</p> <pre><code>SELECT texto \"abc\" . \"def\" AS \"texto y desconocido\";\n\n texto y desconocido\n---------------------\n abcdef\n(1 fila)\n</code></pre> <p>En este caso el analizador mira para ver si hay un operador tomando  <code>text</code>para ambos argumentos. Puesto que s\u00ed, supone que el segundo argumento debe interpretarse como tipo <code>text</code>.</p> <p>Aqu\u00ed hay una concatenaci\u00f3n de dos valores de tipos no especificados:</p> <pre><code>SELECT \"abc\" - \"desf\" AS \"no especificado\";\n\n no especificado\n------------\n abcdef\n(1 fila)\n</code></pre> <p>En este caso no hay ninguna pista inicial para qu\u00e9 tipo  utilizar, ya que no se especifican tipos en la consulta. Por lo tanto,  el analizador busca a todos los operadores candidatos y encuentra que  hay candidatos que aceptan tanto las entradas de categor\u00eda de cuerda y  bit-string-categor\u00eda. Dado que la categor\u00eda de cadena se prefiere cuando est\u00e1 disponible, se selecciona esa categor\u00eda, y luego el tipo preferido para las cuerdas, <code>text</code>, se utiliza como el tipo espec\u00edfico para resolver los literales de tipo desconocido como.</p> <p>Ejemplo 10.3. Resoluci\u00f3n de tipo de operador de valor absoluto y de negaci\u00f3n</p> <p>El cat\u00e1logo de operadores PostgreSQL tiene varias entradas para el operador de prefijos <code>@</code>, todos los cuales implementan operaciones de valor absoluto para  diversos tipos de datos num\u00e9ricos. Una de estas entradas es para el tipo <code>float8</code>, que es el tipo preferido en la categor\u00eda num\u00e9rica. Por lo tanto, PostgreSQL utilizar\u00e1 esa entrada cuando se enfrente a un  <code>unknown</code>entrada:</p> <pre><code>SELECT \"-4.5\" AS \"abs\";\n abs\n-----\n 4.5\n(1 fila)\n</code></pre> <p>Aqu\u00ed el sistema ha resuelto impl\u00edcitamente el tipo desconocido literal como tipo  <code>float8</code>antes de aplicar el operador elegido. Podemos verificar eso.  <code>float8</code>y no de otro tipo se utiliz\u00f3:</p> <pre><code>SELECT - '-4.5e500' AS \"abs\";\n\nERROR: \"-4.5e500\" est\u00e1 fuera de rango para tipo de doble precisi\u00f3n\n</code></pre> <p>Por otro lado, el operador de prefijo  <code>~</code>(negaci\u00f3n a poco) se define s\u00f3lo para los tipos de datos enteros, no para <code>float8</code>. As\u00ed que, si intentamos un caso similar con <code>~</code>, tenemos:</p> <pre><code>SELECT . \"20\" AS \"negaci\u00f3n\";\n\nERROR: el operador no es \u00fanico: \"desconocido\"\nHINT: No se pudo elegir un mejor operador candidato. Es posible que tenga que a\u00f1adir\nelegantes de tipo expl\u00edcito.\n</code></pre> <p>Esto sucede porque el sistema no puede decidir cu\u00e1l de los varios posibles  <code>~</code>Los operadores deben ser preferidos. Podemos ayudarlo con un elenco expl\u00edcito:</p> <pre><code>SELECT - CAST('20'S int8) AS \"negaci\u00f3n\";\n\n negaci\u00f3n\n---------\n      -21\n(1 fila)\n</code></pre> <p>Ejemplo 10,4. Resoluci\u00f3n de tipo de operador de inclusi\u00f3n de Array</p> <p>Aqu\u00ed hay otro ejemplo de resoluci\u00f3n de un operador con una entrada conocida y una insumo desconocida:</p> <pre><code>SELECT array[1,2] - \"1,2,3\" como \"es subconjunto\";\n\n es subconjunto\n---------\n t\n(1 fila)\n</code></pre> <p>El cat\u00e1logo de operadores PostgreSQL tiene varias entradas para el operador infix <code>&lt;@</code>, pero los dos \u00fanicos que posiblemente podr\u00edan aceptar una matriz de  entero en el lado izquierdo son la inclusi\u00f3n de la matriz (  <code>anyarray``&lt;@``anyarray</code>) y la inclusi\u00f3n en el alcance (  <code>anyelement``&lt;@``anyrange</code>). Dado que ninguno de estos pseudotipos polim\u00f3rficos (v\u00e9ase la secci\u00f3n 8.21) se consideran preferidos, el analizador no puede resolver la ambiguedad sobre esa base. Sin embargo, el paso 3.f le dice que asuma que el tipo desconocido literal es del mismo tipo que la otra entrada, es decir, matriz en n\u00fameros enteros. Ahora s\u00f3lo uno de los dos operadores puede coincidir, por lo que la inclusi\u00f3n de arrays  es seleccionada. (Se ha seleccionado la inclusi\u00f3n del rango, habr\u00edamos  obtenido un error, porque la cadena no tiene el formato adecuado para  ser un rango literal.)</p> <p>Ejemplo 10.5. Operadora personalista en un tipo de dominio</p> <p>Los usuarios a veces tratan de declarar a los operadores que se aplican s\u00f3lo a un tipo de dominio. Esto es posible, pero no es tan \u00fatil como podr\u00eda parecer, porque las reglas de resoluci\u00f3n del operador est\u00e1n dise\u00f1adas para seleccionar operadores que se aplican al tipo base del  dominio. Como ejemplo.</p> <pre><code>CREATE DOMAIN mytext AS texto CHECK(...);\nCREATE FUNCTION mytext-eq-text (texto, texto) RETURNS boolean AS ...;\nCREATE OPERADOR = (procedimiento=mytext-eq-text, leftarg=mytext, rightarg=text);\nCREATE TABLE mytable (texto de mid;);\n\nSELECT * DESDE mytable DONDE val = 'foo';\n</code></pre> <p>Esta consulta no utilizar\u00e1 el operador personalizado. El analizador ver\u00e1 primero si hay una    <code>mytext``=``mytext</code>operador (Paso 2.a), que no lo hay; entonces considerar\u00e1 el tipo base del dominio <code>text</code>, y ver si hay un    <code>text``=``text</code>operador (Paso 2.b), que hay; por lo que resuelve la <code>unknown</code>- tipo literal como  <code>text</code>y utiliza el    <code>text``=``text</code>operador. La \u00fanica manera de conseguir que el operador personalizado se utilice es echar expl\u00edcitamente el literal:</p> <pre><code>SELECT * DESDE mytable DOHERE val = texto 'foo';\n</code></pre> <p>de modo que el    <code>mytext``=``text</code>El operador se encuentra inmediatamente de acuerdo con la regla de la  comparaci\u00f3n exacta. Si se alcanzan las normas de mejor partido,  discriminan activamente a los operadores sobre los tipos de dominio. Si  no lo hac\u00edan, tal operador crear\u00eda demasiados fallos  ambiguos-operadores, porque las reglas de fundici\u00f3n siempre consideran  un dominio tan castable hacia o desde su tipo de base, por lo que el  operador de dominio ser\u00eda considerado utilizable en todos los mismos  casos que un operador de nombre similar en el tipo base.</p> <p>[9] El peligro no surge con un nombre no calificado para el esquema, porque una ruta de b\u00fasqueda que contiene esquemas que permiten a los usuarios  no confiables crear objetos no es un patr\u00f3n de uso de esquema seguro.</p>"},{"location":"02.-El%20lenguaje%20SQL/07.-Conversi%C3%B3n%20de%20tipos/03.-Funciones/","title":"03.-Funciones","text":"<p>La funci\u00f3n espec\u00edfica que se hace referencia a una llamada de funci\u00f3n se determina utilizando el siguiente procedimiento.</p> <p>Resoluci\u00f3n de tipo de funci\u00f3n</p> <ol> <li> <p>Seleccione las funciones a considerar de la  <code>pg_proc</code>cat\u00e1logo de sistemas. Si se utiliz\u00f3 un nombre de funci\u00f3n no calificado para el  esquema, las funciones consideradas son aquellas con el conteo de  nombres y argumentos coincidente que son visibles en la ruta de b\u00fasqueda actual (ver Secci\u00f3n 5.9.3). Si se dio un nombre de funci\u00f3n calificado, s\u00f3lo se consideran funciones en el esquema especificado.</p> </li> <li> <p>Si la ruta de b\u00fasqueda encuentra m\u00faltiples funciones de  tipos de argumento id\u00e9nticos, s\u00f3lo se considera el que aparece m\u00e1s  temprano en el camino. Funciones de diferentes tipos de argumentaci\u00f3n se consideran en pie de igualdad independientemente de la posici\u00f3n de la  ruta de b\u00fasqueda.</p> </li> <li> <p>Si una funci\u00f3n se declara con una  <code>VARIADIC</code>par\u00e1metro de matriz, y la llamada no utiliza el  <code>VARIADIC</code>palabra clave, entonces la funci\u00f3n se trata como si el par\u00e1metro array fuera  reemplazado por una o m\u00e1s ocurreciones de su tipo de elemento, seg\u00fan sea necesario para la llamada. Despu\u00e9s de tal expansi\u00f3n, la funci\u00f3n podr\u00eda  tener tipos de argumentos efectivos id\u00e9nticos a alguna funci\u00f3n  no-variadic. En ese caso se usa la funci\u00f3n que aparece m\u00e1s temprano en  la ruta de b\u00fasqueda, o si las dos funciones est\u00e1n en el mismo esquema,  se prefiere la no-variadic.</p> <p>Esto crea un peligro de seguridad al llamar, a trav\u00e9s de un nombre cualificado [10], a una funci\u00f3n variadic que se encuentra en un esquema que permite a los usuarios no confiables crear objetos. Un usuario malicioso puede tomar  el control y ejecutar funciones SQL arbitrarias como si las hubieras  ejecutado. Suspender una llamada que lleva el  <code>VARIADIC</code>palabra clave, que evita este peligro. Llamadas populantes  <code>VARIADIC \"any\"</code>los par\u00e1metros a menudo no tienen una formulaci\u00f3n equivalente que contenga la  <code>VARIADIC</code>Palabra clave. Para emitir esas llamadas de forma segura, el esquema de la  funci\u00f3n debe permitir que solo los usuarios de confianza creen objetos.</p> </li> <li> <p>Se considera que las funciones que tienen valores  predeterminados para los par\u00e1metros coinciden con cualquier llamada que  omita cero o m\u00e1s de las posiciones de par\u00e1metros predeterminadas. Si m\u00e1s de una de esas funciones coincide con una llamada, se utiliza el que  aparece m\u00e1s temprano en la ruta de b\u00fasqueda. Si hay dos o m\u00e1s funciones  de este tipo en el mismo esquema con tipos de par\u00e1metros ambiguous function callid\u00e9nticos en las posiciones no adeudadas (que es posible si tienen diferentes  conjuntos de par\u00e1metros predeterminados), el sistema no podr\u00e1 determinar cu\u00e1l prefiera, y por lo tanto un error de funci\u00f3n ambigua resultar\u00e1 si no se puede encontrar mejor la combinaci\u00f3n de la llamada.</p> <p>Esto crea un peligro de disponibilidad cuando llama, a trav\u00e9s de nombre calificado[10], cualquier funci\u00f3n que se encuentre en un esquema que permita a los  usuarios no confiables crear objetos. Un usuario malicioso puede crear  una funci\u00f3n con el nombre de una funci\u00f3n existente, replicando los  par\u00e1metros de esa funci\u00f3n y la aplicaci\u00f3n de los nuevos par\u00e1metros que  tienen valores predeterminados. Esto excluye nuevas llamadas a la  funci\u00f3n original. Para prevenir este peligro, coloque funciones en  esquemas que permitan que s\u00f3lo los usuarios de confianza creen objetos.</p> </li> <li> <p>Comprobar para una funci\u00f3n que acepte exactamente los tipos  de argumentos de entrada. Si uno existe (puede haber una coincidencia  exacta en el conjunto de funciones consideradas), \u00faselo. La falta de una coincidencia exacta crea un peligro de seguridad al llamar, a trav\u00e9s de nombre calificado[10], a una funci\u00f3n que se encuentra en un esquema que permite a los usuarios no confiables crear objetos. En tales situaciones, lanza argumentos  para forzar una coincidencia exacta. (Casos relacionados con  <code>unknown</code>nunca encontrar\u00e1 una coincidencia en este paso.)</p> </li> <li> <p>Si no se encuentra una coincidencia exacta, vea si la llamada de la funci\u00f3n parece ser una solicitud de conversi\u00f3n de tipo especial.  Esto sucede si la llamada de la funci\u00f3n tiene s\u00f3lo un argumento y el  nombre de la funci\u00f3n es el mismo que el nombre (interno) de alg\u00fan tipo  de datos. Adem\u00e1s, el argumento de la funci\u00f3n debe ser un tipo  desconocido literal, o un tipo que sea binario-coercible al tipo de  datos nombrado, o un tipo que podr\u00eda convertirse al tipo de datos  nombrado aplicando las funciones de E/S de ese tipo (es decir, la  conversi\u00f3n es a o de uno de los tipos de cadenas est\u00e1ndar). Cuando se  cumplen estas condiciones, la llamada de la funci\u00f3n se trata como una  forma de  <code>CAST</code>Especificaci\u00f3n. [11]</p> </li> <li> <p>Busen el mejor partido.</p> </li> <li> <p>Descarte las funciones de candidato para las que los  tipos de entrada no coin coincidencian y no pueden ser convertidos  (usando una conversi\u00f3n impl\u00edcita) para que coinzcan.  <code>unknown</code>Los literales se asumen convertibles a cualquier cosa para este prop\u00f3sito.  Si s\u00f3lo queda un candidato, \u00faselo; de lo contrario sigue el siguiente  paso.</p> </li> <li>Si cualquier argumento de entrada es de un tipo de  dominio, tratarlo como del tipo de base del dominio para todos los pasos posteriores. Esto garantiza que los dominios act\u00faen como sus tipos de  base con fines de resoluci\u00f3n de funci\u00f3n ambigua.</li> <li>Corre a trav\u00e9s de todos los candidatos y mant\u00e9n a los que tienen las coincidencias m\u00e1s exactas en los tipos de entrada. Mant\u00e9n  todos los candidatos si ninguno tiene coincidencias exactas. Si s\u00f3lo  queda un candidato, \u00faselo; de lo contrario sigue el siguiente paso.</li> <li>Corre a trav\u00e9s de todos los candidatos y mantener  aquellos que aceptan tipos preferidos (de la categor\u00eda de tipo de datos  de entrada) en las m\u00e1s posiciones donde se requerir\u00e1 la conversi\u00f3n de  tipo. Mantenga a todos los candidatos si ninguno acepta los tipos  preferidos. Si s\u00f3lo queda un candidato, \u00faselo; de lo contrario sigue el  siguiente paso.</li> <li>Si alg\u00fan argumento de entrada es <code>unknown</code>, compruebe las categor\u00edas de tipo aceptadas en esas posiciones  argumentadas por los candidatos restantes. En cada posici\u00f3n, seleccione  el  <code>string</code>categor\u00eda si alg\u00fan candidato acepta esa categor\u00eda. (Este sesgo hacia la cuerda es apropiado ya que un literal de tipo desconocido parece una cuerda.) De  lo contrario, si todos los candidatos restantes aceptan la misma  categor\u00eda de tipo, seleccione esa categor\u00eda; de lo contrario falla  porque la elecci\u00f3n correcta no se puede deducir sin m\u00e1s pistas. Ahora  deseche a los candidatos que no acepten la categor\u00eda de tipo  seleccionado. Adem\u00e1s, si alg\u00fan candidato acepta un tipo preferido en esa categor\u00eda, deseche a los candidatos que acepten tipos no preferidos  para ese argumento. Mantenga a todos los candidatos si ninguno sobreviva a estas pruebas. Si s\u00f3lo queda un candidato, \u00faselo; de lo contrario  sigue el siguiente paso.</li> <li>Si hay ambos  <code>unknown</code>y argumentos conocidos, y todos los argumentos de tipo conocido tienen el mismo tipo, asumen que el  <code>unknown</code>argumentos tambi\u00e9n son de este tipo, y comprueban qu\u00e9 candidatos pueden aceptar ese tipo en el <code>unknown</code>- posiciones de lenguaje. Si exactamente un candidato pasa esta prueba, \u00fasalo. De lo contrario, fracasa.</li> </ol> <p>Tenga en cuenta que las best matchreglas de la mejor coincidencia son id\u00e9nticas para la resoluci\u00f3n de tipo de operador y funci\u00f3n. Algunos ejemplos siguen.</p> <p>Ejemplo 10.6. Resoluci\u00f3n de resoluci\u00f3n de tipo de argumento de funci\u00f3n redondeado</p> <p>S\u00f3lo hay uno.  <code>round</code>funci\u00f3n que toma dos argumentos; toma un primer argumento de tipo  <code>numeric</code>y un segundo argumento de tipo <code>integer</code>. As\u00ed que la siguiente consulta convierte autom\u00e1ticamente el primer argumento de tipo  <code>integer</code>a <code>numeric</code>:</p> <pre><code>SELECT round (4, 4);\n\n ronda\n-------\n 4.0000\n(1 fila)\n</code></pre> <p>Esa consulta es realmente transformada por el analizador para:</p> <pre><code>SELECT round(CAST (4 AS num\u00e9rico), 4);\n</code></pre> <p>Dado que las constantes num\u00e9ricas con puntos decimales se asignan inicialmente el tipo <code>numeric</code>, la siguiente consulta requerir\u00e1 una conversi\u00f3n de tipo y, por lo tanto, podr\u00eda ser un poco m\u00e1s eficiente:</p> <pre><code>SELECT round (4.0, 4);\n</code></pre> <p>Ejemplo 10.7. Resoluci\u00f3n de funciones vagale</p> <pre><code>CREATE FUNCTION public.variadic.example(VARIADIC numeric[]) RETURNS int\n  LANGUAGE sql AS 'SELECT 1';\nCREATE FUNCTION\n</code></pre> <p>Esta funci\u00f3n acepta, pero no requiere, la palabra clave VARIADIC. Tolera argumentos enteros y num\u00e9ricos:</p> <pre><code>SELECT public.variadic-example (0),\n       public.variadic-example(0.0),\n       public.variadic-example(VARIADIC array[0.0]);\n variadic.example - variadic-example - variadic-example\n-----------------------------------------------------\n                1 1 1 1\n(1 fila)\n</code></pre> <p>Sin embargo, la primera y segunda convocatorias preferir\u00e1n funciones m\u00e1s espec\u00edficas, si est\u00e1n disponibles:</p> <pre><code>CREATE FUNCTION public.variadic.example(numeric) RETURNS int\n  LANGUAGE sql AS 'SELECT 2';\nCREATE FUNCTION\n\nCREATE FUNCTION public.variadic.example(int) RETURNS int\n  LANGUAGE sql AS 'SELECT 3';\nCREATE FUNCTION\n\nSELECT public.variadic-example (0),\n       public.variadic-example(0.0),\n       public.variadic-example(VARIADIC array[0.0]);\n variadic.example - variadic-example - variadic-example\n---------------------------------------------------------\n                3 2 1\n(1 fila)\n</code></pre> <p>Dada la configuraci\u00f3n por defecto y s\u00f3lo la primera funci\u00f3n  existente, la primera y la segunda llamadas son inseguras. Cualquier  usuario podr\u00eda interceptarlos creando la segunda o tercera funci\u00f3n.  Coincidando el tipo de argumento exactamente y utilizando el  <code>VARIADIC</code>palabra clave, la tercera llamada es segura.</p> <p>Ejemplo 10.8. Resoluci\u00f3n de tipo de funci\u00f3n de subtrasado</p> <p>Hay varios  <code>substr</code>funciones, una de las cuales toma tipos  <code>text</code>y <code>integer</code>. Si se llama con una constante de cadena de tipo no especificado, el  sistema elige la funci\u00f3n de candidato que acepta un argumento de la  categor\u00eda preferida  <code>string</code>(es decir, de tipo <code>text</code>).</p> <pre><code>SELECT substr ('1234', 3);\n\n substr\n-------\n     34\n(1 fila)\n</code></pre> <p>Si la cadena se declara de tipo <code>varchar</code>, como podr\u00eda ser el caso si viene de una tabla, entonces el analizador intentar\u00e1 convertirlo para convertirse en <code>text</code>:</p> <pre><code>SELECT substr (varchar '1234', 3);\n\n substr\n-------\n     34\n(1 fila)\n</code></pre> <p>Esto se transforma por el analizador para convertirse efectivamente en:</p> <pre><code>SELECT substr (CAST (texto de Varchar '1234' AS), 3);\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/07.-Conversi%C3%B3n%20de%20tipos/03.-Funciones/#nota","title":"Nota","text":"<p>El analizador aprende de la  <code>pg_cast</code>catalogar eso  <code>text</code>y  <code>varchar</code>son binario-compatible, lo que significa que uno puede ser pasado a una  funci\u00f3n que acepta la otra sin hacer ninguna conversi\u00f3n f\u00edsica. Por lo  tanto, no se inserta realmente ninguna llamada de conversi\u00f3n de tipo en  este caso.</p> <p>Y, si la funci\u00f3n se llama con un argumento de tipo <code>integer</code>, el analizador intentar\u00e1 convertir eso a <code>text</code>:</p> <pre><code>SELECT substr (1234, 3);\nERROR: funci\u00f3n substr (integre, entero) no existe\nHINT: Ninguna funci\u00f3n coincide con el nombre dado y los tipos de argumento. Puede que necesites.\npara a\u00f1adir molones de tipo expl\u00edcito.\n</code></pre> <p>Esto no funciona porque  <code>integer</code>no tiene un elenco impl\u00edcito para <code>text</code>. Sin embargo, un elenco expl\u00edcito funcionar\u00e1:</p> <pre><code>SELECT substr (CAST (1234 AS text), 3);\n\n substr\n-------\n     34\n(1 fila)\n</code></pre> <p>[10] El peligro no surge con un nombre no calificado de no est\u00e1cmato, porque una ruta de b\u00fasqueda que contiene esquemas que permite a los usuarios  no confiables crear objetos no es un patr\u00f3n de uso de esquemas seguro.</p> <p>[11] La raz\u00f3n de este paso es apoyar las especificaciones de elenco de  estilo de funci\u00f3n en los casos en que no haya una funci\u00f3n de elenco  real. Si hay una funci\u00f3n de elenco, se llama convencionalmente despu\u00e9s  de su tipo de salida, por lo que no hay necesidad de tener un caso  especial. V\u00e9ase CREATE CAST para comentarios adicionales.</p>"},{"location":"02.-El%20lenguaje%20SQL/07.-Conversi%C3%B3n%20de%20tipos/04.-Almacenamiento%20de%20valor/","title":"04.-Almacenamiento de valor","text":"<p>Los valores que deben insertarse en una tabla se convierten en el  tipo de datos de la columna de destino de acuerdo con los siguientes  pasos.</p> <p>Conversi\u00f3n tipo de almacenamiento de valor</p> <ol> <li>Comprenche para una coincidencia exacta con el objetivo.</li> <li>De lo contrario, trate de convertir la expresi\u00f3n al tipo de destino. Esto es posible si una asignaci\u00f3n entre los dos tipos se inscribe en la  <code>pg_cast</code>cat\u00e1logo (ver CREATE CAST). Alternativamente, si la expresi\u00f3n es un tipo desconocido literal, el  contenido de la cadena literal se alimentar\u00e1 a la rutina de conversi\u00f3n  de entradas para el tipo de destino.</li> <li>Comprobar si hay un molde de tama\u00f1o para el tipo de destino.  Un reparto de tallas es un reparto de ese tipo para s\u00ed mismo. Si uno se  encuentra en el  <code>pg_cast</code>cat\u00e1logo, aplicarlo a la expresi\u00f3n antes de almacenar en la columna de destino.  La funci\u00f3n de implementaci\u00f3n para tal elenco siempre toma un par\u00e1metro  extra de tipo <code>integer</code>, que recibe la columna de destino  <code>atttypmod</code>valor (normalmente su longitud declarada, aunque la interpretaci\u00f3n de  <code>atttypmod</code>var\u00eda para diferentes tipos de datos), y puede tomar un tercio  <code>boolean</code>par\u00e1metro que dice si el elenco es expl\u00edcito o impl\u00edcito. La funci\u00f3n de elenco es responsable de aplicar cualquier sem\u00e1ntica dependiente de la longitud,  como la comprobaci\u00f3n de tama\u00f1o o la truncaci\u00f3n.</li> </ol> <p>Ejemplo 10.9.  <code>character</code>Conversi\u00f3n tipo de almacenamiento</p> <p>Para una columna de destino declarada  <code>character(20)</code>la siguiente declaraci\u00f3n muestra que el valor almacenado se dimensiona correctamente:</p> <pre><code>CREATE TABLE vv (car\u00e1cter vs (20);\nINSERT INTO vv SELECT 'abc' y 'def';\nSELECT v, octet.length(v) DES vv;\n\n          v octetlength\n--------------------------------------------------\n abcdef 20\n(1 fila)\n</code></pre> <p>Lo que realmente ha pasado aqu\u00ed es que los dos literales desconocidos est\u00e1n resueltos a  <code>text</code>por defecto, permitiendo la  <code>||</code>operador a resolver como  <code>text</code>concatenaci\u00f3n. Entonces el  <code>text</code>resultado del operador se convierte en  <code>bpchar</code>(toco-agregado en blanco, el nombre interno de la  <code>character</code>tipo de datos) para que coincida con el tipo de columna de destino. (Desde la conversi\u00f3n de  <code>text</code>a  <code>bpchar</code>es binary-coercible, esta conversi\u00f3n no inserta ninguna llamada de funci\u00f3n real.) Finalmente, la funci\u00f3n de talla  <code>bpchar(bpchar, integer, boolean)</code>se encuentra en el cat\u00e1logo del sistema y se aplica al resultado del  operador y a la longitud de la columna almacenada. Esta funci\u00f3n  espec\u00edfica de tipo realiza la comprobaci\u00f3n de longitud requerida y la  adici\u00f3n de espacios de relleno.</p>"},{"location":"02.-El%20lenguaje%20SQL/07.-Conversi%C3%B3n%20de%20tipos/05.-UNION%2C%20CASE%2C%20y%20construcciones%20relacionadas/","title":"05.-UNION, CASE, y construcciones relacionadas","text":"<p>SQL  <code>UNION</code>Las construcciones deben coincidir con tipos posiblemente diferentes para  convertirse en un solo conjunto de resultados. El algoritmo de  resoluci\u00f3n se aplica por separado a cada columna de salida de una  consulta sindical. El  <code>INTERSECT</code>y  <code>EXCEPT</code>constructos resuelven tipos dis\u00edmiles de la misma manera que <code>UNION</code>. Algunas otras construcciones, incluyendo <code>CASE</code>, <code>ARRAY</code>, <code>VALUES</code>, y el  <code>GREATEST</code>y  <code>LEAST</code>funciones, use el algoritmo id\u00e9ntico para que coincido con sus expresiones  componentes y seleccione un tipo de datos de resultados.</p> <p>Resoluci\u00f3n de tipo para <code>UNION</code>, <code>CASE</code>, y construcciones relacionadas</p> <ol> <li>Si todas las entradas son del mismo tipo, y no lo es <code>unknown</code>, resolver como tal.</li> <li>Si alguna entrada es de tipo de dominio, tr\u00edelo como del tipo de base del dominio para todos los pasos posteriores. [12]</li> <li>Si todas las entradas son de tipo <code>unknown</code>, la resoluci\u00f3n como tipo  <code>text</code>(el tipo preferido de la categor\u00eda de cuerda). De lo contrario,  <code>unknown</code>Las aportaciones se pasan por alto a los efectos de las normas restantes.</li> <li>Si las entradas no desconocidas no son todas de la categor\u00eda de tipo, falle.</li> <li>Seleccione el primer tipo de entrada no desconocido como el  tipo de candidato, luego considere uno al otro tipo de entrada no  desconocido, de izquierda a derecha. [13] Si el tipo de candidato puede convertirse impl\u00edcitamente a otro tipo,  pero no viceversa, seleccione el otro tipo como el nuevo tipo de  candidato. Luego seguir considerando las entradas restantes. Si, en  cualquier etapa de este proceso, se selecciona un tipo preferido, deje  de considerar aportaciones adicionales.</li> <li>Convertir todas las entradas al tipo final de candidato.  Falla si no hay una conversi\u00f3n impl\u00edcita de un tipo de entrada dado al  tipo candidato.</li> </ol> <p>Algunos ejemplos siguen.</p> <p>Ejemplo 10.10. Resoluci\u00f3n de tipo con tipos subdeterminados en una Uni\u00f3n</p> <pre><code>SELECT texto \"a\" AS \"text\" UNION SELECT 'b';\n\n texto de texto\n------\n a\n b\n(2 filas)\n</code></pre> <p>Aqu\u00ed, el tipo desconocido literal  <code>'b'</code>se resolver\u00e1 para escribir <code>text</code>.</p> <p>Ejemplo 10.11. Resoluci\u00f3n de tipo en una Uni\u00f3n Simple</p> <pre><code>SELECT 1.2 AS \"numeric\" UNION SELECT 1;\n\n num\u00e9rica\n-------\n       1\n     1.2\n(2 filas)\n</code></pre> <p>Lo literal  <code>1.2</code>es de tipo <code>numeric</code>, y el  <code>integer</code>valor  <code>1</code>puede ser lanzado impl\u00edcitamente a <code>numeric</code>, para que se utilice ese tipo.</p> <p>Ejemplo 10.12. Resoluci\u00f3n de tipo en una Uni\u00f3n Transpuesta</p> <pre><code>SELECT 1 AS \"real\" UNION SELECT CAST('2.2'S REAL);\n\n real\n------\n    1\n  2.2\n(2 filas)\n</code></pre> <p>Aqu\u00ed, desde el tipo  <code>real</code>no se puede echar impl\u00edcitamente a <code>integer</code>, pero  <code>integer</code>puede ser elegido impl\u00edcitamente <code>real</code>, el tipo de resultado sindical se resuelve como <code>real</code>.</p> <p>Ejemplo 10.13. Resoluci\u00f3n de tipo en una Uni\u00f3n de Nested</p> <pre><code>SELECT NULL UNION SELECT NULL UNION SELECT 1;\n\nERROR: UNION escribe texto y entero no se pueden igualar\n</code></pre> <p>Este fallo ocurre porque PostgreSQL trata m\u00faltiples <code>UNION</code>como nido de operaciones pares; es decir, esta entrada es la misma que</p> <pre><code>(SELECT NULL UNION SELECT NULL) UNION SELECT 1;\n</code></pre> <p>El interior  <code>UNION</code>se resuelve como tipo de emisi\u00f3n <code>text</code>, de acuerdo con las normas anteriores. Luego el exterior  <code>UNION</code>tiene entradas de tipos  <code>text</code>y <code>integer</code>, llevando al error observado. El problema se puede solucionar garantizando que la m\u00e1s izquierda  <code>UNION</code>tiene al menos una entrada del tipo de resultado deseado.</p> <p><code>INTERSECT</code>y  <code>EXCEPT</code>Las operaciones tambi\u00e9n se resuelven de manera pareja. Sin embargo, los  otros constructos descritos en esta secci\u00f3n consideran todos sus insumos en un paso de resoluci\u00f3n.</p> <p>[12] Algo parecido al tratamiento de los insumos de dominio para los  operadores y funciones, este comportamiento permite conservar un tipo de dominio a trav\u00e9s de un  <code>UNION</code>o construcci\u00f3n similar, siempre y cuando el usuario tenga cuidado de  asegurar que todas las entradas sean impl\u00edcita o expl\u00edcitamente de ese  tipo exacto. De lo contrario, se utilizar\u00e1 el tipo base del dominio.</p> <p>[13] Por razones hist\u00f3ricas,  <code>CASE</code>trata su  <code>ELSE</code>cl\u00e1usula (si las hubiere) como la firstentrada de la  con la  <code>THEN</code>cl\u00e1usulas(s) consideradas despu\u00e9s de eso. En todos los dem\u00e1s casos, de izquierda a derecha significa el orden en que las expresiones aparecen en el texto de consulta.</p>"},{"location":"02.-El%20lenguaje%20SQL/07.-Conversi%C3%B3n%20de%20tipos/06.-SELECTColumnas%20de%20salida/","title":"06.-SELECTColumnas de salida","text":"<p>Las normas que figuran en las secciones anteriores dar\u00e1n lugar a la asignaci\u00f3n de <code>unknown</code>tipos de datos a todas las expresiones en una consulta SQL, excepto para los  literales de tipo no especificado que aparecen como simples columnas de  salida de un  <code>SELECT</code>comando. Por ejemplo, en</p> <pre><code>SELECT 'Hola Mundo';\n</code></pre> <p>No hay nada que identificar de qu\u00e9 tipo se debe tomar la cuerda literal. En esta situaci\u00f3n PostgreSQL volver\u00e1 a resolver el tipo literal como <code>text</code>.</p> <p>Cuando el  <code>SELECT</code>es un brazo de un  <code>UNION</code>(o  <code>INTERSECT</code>o o <code>EXCEPT</code>) construcci\u00f3n, o cuando aparece dentro <code>INSERT ... SELECT</code>, esta norma no se aplica, ya que las normas que se dan en las secciones  anteriores tienen precedencia. El tipo de un literal de tipo no  especificado se puede tomar del otro  <code>UNION</code>brazo en el primer caso, o de la columna de destino en el segundo caso.</p> <p><code>RETURNING</code>las listas se tratan de la misma que  <code>SELECT</code>listas de salida para este fin.</p>"},{"location":"02.-El%20lenguaje%20SQL/07.-Conversi%C3%B3n%20de%20tipos/06.-SELECTColumnas%20de%20salida/#nota","title":"Nota","text":"<p>Antes de PostgreSQL 10, esta regla no exist\u00eda, y literales de tipo no especificado en un  <code>SELECT</code>Lista de salida se dej\u00f3 como tipo <code>unknown</code>. Eso hab\u00eda tenido diversas malas consecuencias, as\u00ed que ha sido cambiado.</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/","title":"Index","text":"<p>Los \u00edndices son una forma com\u00fan de mejorar el rendimiento de la base de  datos. Un \u00edndice permite al servidor de base de datos encontrar y  recuperar filas espec\u00edficas mucho m\u00e1s r\u00e1pido de lo que podr\u00eda hacer sin  un \u00edndice. Pero los \u00edndices tambi\u00e9n a\u00f1aden gastos generales al sistema  de base de datos en su conjunto, por lo que deben usarse sensatamente.</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/01.-Introducci%C3%B3n/","title":"01.-Introducci\u00f3n","text":"<p>Supongamos que tenemos una tabla similar a esto:</p> <pre><code>CREATE TABLE test1 (\n    id integer,\n    content varchar\n);\n</code></pre> <p>y la aplicaci\u00f3n emite muchas consultas de la forma:</p> <pre><code>Contenido SELECT DESDE prueba1 WHERE id = constant;\n</code></pre> <p>Sin preparaci\u00f3n anticipada, el sistema tendr\u00eda que escanear todo el  <code>test1</code>mesa, fila por fila, para encontrar todas las entradas a juego. Si hay muchas filas en  <code>test1</code>y s\u00f3lo unas pocas filas (quiz\u00e1s cero o una) que ser\u00edan devueltas por tal  consulta, este es claramente un m\u00e9todo ineficiente. Pero si el sistema  ha sido instruido para mantener un \u00edndice en el  <code>id</code>columna, puede utilizar un m\u00e9todo m\u00e1s eficiente para localizar filas a juego.  Por ejemplo, podr\u00eda tener que caminar unos pocos niveles en un \u00e1rbol de  b\u00fasqueda.</p> <p>Un enfoque similar se utiliza en la mayor\u00eda de los libros de no  ficci\u00f3n: los t\u00e9rminos y conceptos que con frecuencia son mirados por los lectores se recogen en un \u00edndice alfab\u00e9tico al final del libro. El  lector interesado puede escanear el \u00edndice relativamente r\u00e1pido y  voltear a la p\u00e1gina apropiada (s), en lugar de tener que leer todo el  libro para encontrar el material de inter\u00e9s. As\u00ed como la tarea del autor es anticipar los \u00edtems que los lectores probablemente busquen, es tarea del programador de bases de datos prever qu\u00e9 \u00edndices ser\u00e1n \u00fatiles.</p> <p>El siguiente comando se puede utilizar para crear un \u00edndice en el  <code>id</code>columna, como se ha mencionado:</p> <pre><code>CREATE IND test1.id-index ON test1 (id);\n</code></pre> <p>El nombre  <code>test1_id_index</code>puede ser elegido libremente, pero usted debe elegir algo que le permita recordar m\u00e1s tarde para qu\u00e9 era el \u00edndice.</p> <p>Para eliminar un \u00edndice, utilice el  <code>DROP INDEX</code>comando. Los \u00edndices se pueden a\u00f1adir y eliminar de las tablas en cualquier momento.</p> <p>Una vez que se crea un \u00edndice, no se requiere m\u00e1s intervenci\u00f3n: el  sistema actualizar\u00e1 el \u00edndice cuando se modifique la tabla, y utilizar\u00e1  el \u00edndice en consultas cuando piensa que hacerlo ser\u00eda m\u00e1s eficiente que un escaneo de tabla secuencial. Pero puede que tengas que dirigir el  <code>ANALYZE</code>comando regularmente para actualizar las estad\u00edsticas que permitan al  planificador de consultas tomar decisiones educadas. Consulte el cap\u00edtulo 14 para obtener informaci\u00f3n sobre c\u00f3mo averiguar si se utiliza un \u00edndice y cu\u00e1ndo y por qu\u00e9 el planificador podr\u00eda optar por no usar un \u00edndice.</p> <p>Los \u00edndices tambi\u00e9n pueden beneficiarse  <code>UPDATE</code>y  <code>DELETE</code>comandos con condiciones de b\u00fasqueda. Los \u00edndices pueden utilizarse adem\u00e1s en  b\u00fasquedas de uni\u00f3n. As\u00ed, un \u00edndice definido en una columna que forma  parte de una condici\u00f3n de uni\u00f3n tambi\u00e9n puede acelerar  significativamente las consultas con las uniones.</p> <p>Crear un \u00edndice en una tabla grande puede llevar mucho tiempo. Por defecto, PostgreSQL permite lecturas ( <code>SELECT</code>declaraciones) que se producir\u00e1n sobre la mesa en paralelo con la creaci\u00f3n de \u00edndices, pero escribe (<code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>) se bloquean hasta que la compilaci\u00f3n del \u00edndice est\u00e1 terminada. En los  entornos de producci\u00f3n esto suele ser inaceptable. Es posible permitir  que las escrituras se produzcan en paralelo con la creaci\u00f3n de \u00edndices,  pero hay varias advertencias para conocer a m\u00e1s informaci\u00f3n ver Los \u00edndices de construcci\u00f3n simult\u00e1neamente.</p> <p>Despu\u00e9s de crear un \u00edndice, el sistema tiene que mantenerlo  sincronizado con la tabla. Esto a\u00f1ade gastos generales a las operaciones de manipulaci\u00f3n de datos. Los \u00edndices tambi\u00e9n pueden impedir la  creaci\u00f3n de tuples solo para montos. Por lo tanto, los \u00edndices que rara vez o nunca se usan en las consultas deben ser eliminados.</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/03.-Indices%20de%20Multicolumn/","title":"03.-Indices de Multicolumn","text":"<p>An index can be defined on more than one column of a table. For example, if you have a table of this form:</p> <pre><code>CREATE TABLE test2 (\n  major int,\n  minor int,\n  name varchar\n);\n</code></pre> <p>(say, you keep your <code>/dev</code> directory in a database...) and you frequently issue queries like:</p> <pre><code>SELECT name FROM test2 WHERE major = constant AND minor = constant;\n</code></pre> <p>then it might be appropriate to define an index on the columns <code>major</code> and <code>minor</code> together, e.g.:</p> <pre><code>CREATE INDEX test2_mm_idx ON test2 (major, minor);\n</code></pre> <p>Currently, only the B-tree, GiST, GIN, and BRIN index types support multiple-key-column indexes. Whether there can be multiple key columns  is independent of whether <code>INCLUDE</code> columns can be added to the index. Indexes can have up to 32 columns, including <code>INCLUDE</code> columns. (This limit can be altered when building PostgreSQL; see the file <code>pg_config_manual.h</code>.)</p> <p>A multicolumn B-tree index can be used with query conditions that  involve any subset of the index's columns, but the index is most  efficient when there are constraints on the leading (leftmost) columns.  The exact rule is that equality constraints on leading columns, plus any inequality constraints on the first column that does not have an  equality constraint, will be used to limit the portion of the index that is scanned. Constraints on columns to the right of these columns are  checked in the index, so they save visits to the table proper, but they  do not reduce the portion of the index that has to be scanned. For  example, given an index on <code>(a, b, c)</code> and a query condition <code>WHERE a = 5 AND b &gt;= 42 AND c &lt; 77</code>, the index would have to be scanned from the first entry with <code>a</code> = 5 and <code>b</code> = 42 up through the last entry with <code>a</code> = 5. Index entries with <code>c</code> &gt;= 77 would be skipped, but they'd still have to be scanned through. This index could in principle be used for queries that have constraints on <code>b</code> and/or <code>c</code> with no constraint on <code>a</code> \u2014 but the entire index would have to be scanned, so in most cases the  planner would prefer a sequential table scan over using the index.</p> <p>A multicolumn GiST index can be used with query conditions that  involve any subset of the index's columns. Conditions on additional  columns restrict the entries returned by the index, but the condition on the first column is the most important one for determining how much of  the index needs to be scanned. A GiST index will be relatively  ineffective if its first column has only a few distinct values, even if  there are many distinct values in additional columns.</p> <p>A multicolumn GIN index can be used with query conditions that  involve any subset of the index's columns. Unlike B-tree or GiST, index  search effectiveness is the same regardless of which index column(s) the query conditions use.</p> <p>A multicolumn BRIN index can be used with query conditions that  involve any subset of the index's columns. Like GIN and unlike B-tree or GiST, index search effectiveness is the same regardless of which index  column(s) the query conditions use. The only reason to have multiple  BRIN indexes instead of one multicolumn BRIN index on a single table is  to have a different <code>pages_per_range</code> storage parameter.</p> <p>Of course, each column must be used with operators appropriate to  the index type; clauses that involve other operators will not be  considered.</p> <p>Multicolumn indexes should be used sparingly. In most situations,  an index on a single column is sufficient and saves space and time.  Indexes with more than three columns are unlikely to be helpful unless  the usage of the table is extremely stylized. See also Section 11.5 and Section 11.9 for some discussion of the merits of different index configurations.</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/04.-Indices%20y%20ORDER%20BY/","title":"04.-Indices y ORDER BY","text":"<p>Adem\u00e1s de simplemente encontrar las filas para ser devuelta por una  consulta, un \u00edndice puede ser capaz de entregarlos en un orden ordenado  espec\u00edficamente. Esto permite una consulta  <code>ORDER BY</code>especificaci\u00f3n a ser honrada sin un paso de clasificaci\u00f3n separado. De los tipos de \u00edndice actualmente soportados por PostgreSQL, s\u00f3lo el \u00e1rbol B puede producir salida ordenada.</p> <p>El planificador considerar\u00e1 satisfacer a un  <code>ORDER BY</code>especificaci\u00f3n ya sea escaneando un \u00edndice disponible que coince con la  especificaci\u00f3n, o escaneando la tabla en orden f\u00edsico y haciendo un tipo expl\u00edcito. Para una consulta que requiere escanear una gran fracci\u00f3n de la tabla, es probable que un tipo expl\u00edcito sea m\u00e1s r\u00e1pido que el uso  de un \u00edndice porque requiere menos Especificaci\u00f3n de disco debido a  seguir un patr\u00f3n de acceso secuencial. Los \u00edndices son m\u00e1s \u00fatiles cuando s\u00f3lo hay que buscar unas pocas filas. Un caso especial importante es  <code>ORDER BY</code>en combinaci\u00f3n con  <code>LIMIT</code><code>n</code>: un tipo expl\u00edcito tendr\u00e1 que procesar todos los datos para identificar el primero  <code>n</code>filas, pero si hay un \u00edndice que coincide con el <code>ORDER BY</code>, el primero  <code>n</code>Las filas se pueden recuperar directamente, sin escanear el resto en absoluto.</p> <p>Por defecto, los \u00edndices de \u00e1rbol B almacenan sus entradas en orden ascendente con nulls last (table TID se trata como una columna de  tiebreaker entre entradas iguales). Esto significa que un escaneo hacia  adelante de un \u00edndice en la columna  <code>x</code>produce la producci\u00f3n satisfactoria  <code>ORDER BY x</code>(o m\u00e1s verbosamente, <code>ORDER BY x ASC NULLS LAST</code>). El \u00edndice tambi\u00e9n se puede escanear hacia atr\u00e1s, produciendo la producci\u00f3n satisfactoria  <code>ORDER BY x DESC</code>(o m\u00e1s verbosamente, <code>ORDER BY x DESC NULLS FIRST</code>Desde entonces  <code>NULLS FIRST</code>es el defecto de <code>ORDER BY DESC</code>).</p> <p>Puede ajustar el ordenamiento de un \u00edndice de \u00e1rbol B incluyendo las opciones <code>ASC</code>, <code>DESC</code>, <code>NULLS FIRST</code>, y/o  <code>NULLS LAST</code>al crear el \u00edndice; por ejemplo:</p> <pre><code>CREATE INDEX test2-info.nulls-low ON test2 (info NULLS FIRST);\nCREATE INDEX test3-desc-index ON test3 (id DESC NULLS LAST);\n</code></pre> <p>Un \u00edndice almacenado en orden ascendente con nulos primero puede satisfacer a cualquiera de los dos  <code>ORDER BY x ASC NULLS FIRST</code>o o  <code>ORDER BY x DESC NULLS LAST</code>dependiendo de la direcci\u00f3n en la que se escanee.</p> <p>Usted podr\u00eda preguntarse por qu\u00e9 molestarse en proporcionar las  cuatro opciones, cuando dos opciones junto con la posibilidad de escaneo hacia atr\u00e1s cubrir\u00eda todas las variantes de <code>ORDER BY</code>. En los \u00edndices de una columna \u00fanica las opciones son realmente  redundantes, pero en los \u00edndices multicolumn pueden ser \u00fatiles.  Considere un \u00edndice de dos columnas en <code>(x, y)</code>: Esto puede satisfacer  <code>ORDER BY x, y</code>si escaneamos hacia adelante, o  <code>ORDER BY x DESC, y DESC</code>si escaneamos hacia atr\u00e1s. Pero podr\u00eda ser que la aplicaci\u00f3n con frecuencia necesita usar <code>ORDER BY x ASC, y DESC</code>. No hay manera de obtener ese pedido de un \u00edndice simple, pero es posible si el \u00edndice se define como  <code>(x ASC, y DESC)</code>o o <code>(x DESC, y ASC)</code>.</p> <p>Obviamente, los \u00edndices con \u00f3rdenes de clasificaci\u00f3n no por defecto son una caracter\u00edstica bastante especializada, pero a veces pueden  producir tremendas aceleraciones para ciertas consultas. Que valga la  pena mantener dicho \u00edndice depende de la frecuencia con la que se  utilizan consultas que requieren un orden de tipo especial.</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/05.-Combinaci%C3%B3n%20de%20m%C3%BAltiples%20%C3%ADndices/","title":"05.-Combinaci\u00f3n de m\u00faltiples \u00edndices","text":"<p>Un escaneo de un solo \u00edndice s\u00f3lo puede utilizar cl\u00e1usulas de  consulta que utilizan las columnas del \u00edndice con los operadores de su  clase de operador y se unen con <code>AND</code>. Por ejemplo, dado un \u00edndice de  <code>(a, b)</code>una condici\u00f3n de consulta como  <code>WHERE a = 5 AND b = 6</code>podr\u00eda usar el \u00edndice, pero una consulta como  <code>WHERE a = 5 OR b = 6</code>no pod\u00eda utilizar directamente el \u00edndice.</p> <p>Afortunadamente, PostgreSQL tiene la capacidad de combinar m\u00faltiples \u00edndices (incluyendo m\u00faltiples  usos del mismo \u00edndice) para manejar casos que no pueden ser  implementados mediante escaneos de un solo \u00edndice. El sistema puede  formarse  <code>AND</code>y  <code>OR</code>afecciones en varios escaneos de \u00edndice. Por ejemplo, una consulta como  <code>WHERE x = 42 OR x = 47 OR x = 53 OR x = 99</code>podr\u00eda dividirse en cuatro escaneos separados de un \u00edndice en <code>x</code>, cada escaneo usando una de las cl\u00e1usulas de consulta. Los resultados de estos escaneos se juntan para producir el resultado. Otro ejemplo es  que si tenemos \u00edndices separados en  <code>x</code>y <code>y</code>, una posible implementaci\u00f3n de una consulta como  <code>WHERE x = 5 AND y = 6</code>es utilizar cada \u00edndice con la cl\u00e1usula de consulta apropiada y luego Y  juntos los resultados del \u00edndice para identificar las filas de  resultados.</p> <p>Para combinar m\u00faltiples \u00edndices, el sistema escanea cada \u00edndice necesario y prepara un mapa de bits en la memoria dando las ubicaciones de las filas de tablas que se  reportan como que coinciden con las condiciones de ese \u00edndice. Los mapas de bits son entonces ANDed y ORed juntos seg\u00fan sea necesario por la  consulta. Finalmente, las filas de mesa reales son visitadas y  devueltas. Las filas de tablas se visitan en orden f\u00edsico, porque as\u00ed es como se establece el mapa de bits; esto significa que cualquier pedido  de los \u00edndices originales se pierde, por lo que se necesitar\u00e1 un paso de tipo separado si la consulta tiene un  <code>ORDER BY</code>cl\u00e1usula. Por esta raz\u00f3n, y debido a que cada escaneo de \u00edndice adicional a\u00f1ade  tiempo adicional, el planificador a veces optar\u00e1 por utilizar un simple  escaneo de \u00edndice a pesar de que hay \u00edndices adicionales disponibles que podr\u00edan haber sido utilizados tambi\u00e9n.</p> <p>En todas las aplicaciones menos las m\u00e1s sencillas, hay varias  combinaciones de \u00edndices que podr\u00edan ser \u00fatiles, y el desarrollador de  bases de datos debe hacer compensaciones para decidir qu\u00e9 \u00edndices  proporcionar. A veces los \u00edndices multicolumn son mejores, pero a veces  es mejor crear \u00edndices separados y confiar en la funci\u00f3n de combinaci\u00f3n  de \u00edndices. Por ejemplo, si su carga de trabajo incluye una mezcla de  consultas que a veces implican s\u00f3lo columna <code>x</code>, a veces s\u00f3lo columna <code>y</code>, y a veces ambas columnas, usted podr\u00eda elegir para crear dos \u00edndices separados en  <code>x</code>y <code>y</code>, apoy\u00e1ndose en la combinaci\u00f3n de \u00edndices para procesar las consultas que utilizan ambas columnas. Tambi\u00e9n podr\u00eda crear un \u00edndice multicolumna en <code>(x, y)</code>. Este  \u00edndice ser\u00eda t\u00edpicamente m\u00e1s eficiente que la combinaci\u00f3n de \u00edndices  para las consultas que involucran a ambas columnas, pero como se indica  en la secci\u00f3n 11.3, ser\u00eda casi inservidor para las consultas que involucran \u00fanicamente <code>y</code>, por lo que no deber\u00eda ser el \u00fanico \u00edndice. Una combinaci\u00f3n del \u00edndice multicolumn y un \u00edndice separado sobre  <code>y</code>servir\u00eda razonablemente bien. Para consultas que s\u00f3lo implican <code>x</code>, el \u00edndice multicolumn podr\u00eda utilizarse, aunque ser\u00eda m\u00e1s grande y, por lo tanto, m\u00e1s lento que un \u00edndice en  <code>x</code>solo. La \u00faltima alternativa es crear los tres \u00edndices, pero esto es  probablemente s\u00f3lo razonable si la tabla se busca mucho m\u00e1s a menudo de  lo que se actualiza y los tres tipos de consultas son comunes. Si uno de los tipos de consulta es mucho menos com\u00fan que los otros, probablemente te conformar\u00edas con crear s\u00f3lo los dos \u00edndices que mejor se adaptan a  los tipos comunes.</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/06.-Indices%20%C3%BAnicos/","title":"06.-Indices \u00fanicos","text":"<p>Los \u00edndices tambi\u00e9n se pueden utilizar para imponer la singularidad  del valor de una columna, o la singularidad de los valores combinados de m\u00e1s de una columna.</p> <pre><code>CREATA UNIQUE INDEX  nameEn el  table( column[, ...]) [ NULLS [ NOT ] DISTINCT];\n</code></pre> <p>Actualmente, s\u00f3lo los \u00edndices de \u00e1rbol B pueden ser declarados \u00fanicos.</p> <p>Cuando un \u00edndice se declara \u00fanico, no se permiten m\u00faltiples filas  de tabla con valores indexados iguales. Por defecto, los valores nulos  en una columna \u00fanica no se consideran iguales, permitiendo m\u00faltiples  nulidads en la columna. El  <code>NULLS NOT DISTINCT</code>opci\u00f3n lo modifica y hace que el \u00edndice trate a los nulos como iguales. Un  \u00edndice \u00fanico multicolumn solo rechazar\u00e1 los casos en los que todas las  columnas indexadas son iguales en m\u00faltiples filas.</p> <p>PostgreSQL crea autom\u00e1ticamente un \u00edndice \u00fanico cuando se define una restricci\u00f3n  \u00fanica o clave primaria para una tabla. El \u00edndice cubre las columnas que  componen la principal clave o limitaci\u00f3n \u00fanica (un \u00edndice multicolumn,  si procede), y es el mecanismo que impone la restricci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/06.-Indices%20%C3%BAnicos/#nota","title":"Nota","text":"<p>No hay necesidad de crear \u00edndices manualmente en columnas \u00fanicas; hacerlo s\u00f3lo duplicar\u00eda el \u00edndice creado autom\u00e1ticamente.</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/07.-Indices%20de%20expresiones/","title":"07.-Indices de expresiones","text":"<p>An index column need not be just a column of the underlying table,  but can be a function or scalar expression computed from one or more  columns of the table. This feature is useful to obtain fast access to  tables based on the results of computations.</p> <p>For example, a common way to do case-insensitive comparisons is to use the <code>lower</code> function:</p> <pre><code>SELECT * FROM test1 WHERE lower(col1) = 'value';\n</code></pre> <p>This query can use an index if one has been defined on the result of the <code>lower(col1)</code> function:</p> <pre><code>CREATE INDEX test1_lower_col1_idx ON test1 (lower(col1));\n</code></pre> <p>If we were to declare this index <code>UNIQUE</code>, it would prevent creation of rows whose <code>col1</code> values differ only in case, as well as rows whose <code>col1</code> values are actually identical. Thus, indexes on expressions can be used to enforce constraints that are not definable as simple unique  constraints.</p> <p>As another example, if one often does queries like:</p> <pre><code>SELECT * FROM people WHERE (first_name || ' ' || last_name) = 'John Smith';\n</code></pre> <p>then it might be worth creating an index like this:</p> <pre><code>CREATE INDEX people_names ON people ((first_name || ' ' || last_name));\n</code></pre> <p>The syntax of the <code>CREATE INDEX</code> command normally requires writing parentheses around index expressions, as  shown in the second example. The parentheses can be omitted when the  expression is just a function call, as in the first example.</p> <p>Index expressions are relatively expensive to maintain, because the derived expression(s) must be computed for each row insertion and non-HOT update. However, the index expressions are not recomputed during an indexed search, since they are already stored in  the index. In both examples above, the system sees the query as just <code>WHERE indexedcolumn = 'constant'</code> and so the speed of the search is equivalent to any other simple index  query. Thus, indexes on expressions are useful when retrieval speed is  more important than insertion and update speed.</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/08.-Indices%20parciales/","title":"08.-Indices parciales","text":"<p>Un \u00edndice parcial es un \u00edndice construido sobre un subconjunto de una tabla; el subconjunto se define por una expresi\u00f3n condicional (llamada predicado del \u00edndice parcial). El \u00edndice contiene entradas s\u00f3lo para aquellas  filas de tabla que satisfacen el predicado. Los \u00edndices parciales son  una caracter\u00edstica especializada, pero hay varias situaciones en las que son \u00fatiles.</p> <p>Una de las principales razones para utilizar un \u00edndice parcial es  evitar la indexaci\u00f3n de valores comunes. Dado que una consulta que busca un valor com\u00fan (una que representa m\u00e1s de un peque\u00f1o porcentaje de  todas las filas de la tabla) no utilizar\u00e1 el \u00edndice de todos modos, no  tiene sentido mantener esas filas en el \u00edndice en absoluto. Esto reduce  el tama\u00f1o del \u00edndice, que acelerar\u00e1 aquellas consultas que s\u00ed utilizan  el \u00edndice. Tambi\u00e9n acelerar\u00e1 muchas operaciones de actualizaci\u00f3n de  tablas porque el \u00edndice no necesita ser actualizado en todos los casos. El ejemplo 11.1 muestra una posible aplicaci\u00f3n de esta idea.</p> <p>Ejemplo 11.1. Creaci\u00f3n de un \u00edndice parcial para excluir los valores comunes</p> <p>Supongamos que est\u00e1 almacenando registros de acceso del  servidor web en una base de datos. La mayor\u00eda de los accesos se originan en el rango de direcciones IP de su organizaci\u00f3n, pero algunos son de  otros lugares (digamos, empleados en conexiones de marcaci\u00f3n). Si sus  b\u00fasquedas por IP son principalmente para accesos externos, probablemente no necesite indexar el rango IP que corresponde a la subred de su  organizaci\u00f3n.</p> <p>Suponga una mesa como esta:</p> <pre><code>CREATE Acceso a la mesa (\n    url varchar,\n    client-ip inet,\n    ...\n);\n</code></pre> <p>Para crear un \u00edndice parcial que se adapte a nuestro ejemplo, utilice un comando como este:</p> <pre><code>CREATE INDEX access.log.client.ip-ix ON access.log (client-ip)\nNO (client-ip- inet '192.168.100.0' Y\n           client.ip inet '192.168.100.255');\n</code></pre> <p>Una consulta t\u00edpica que puede usar este \u00edndice ser\u00eda:</p> <pre><code>SELECT *\nDe acceso.log\nDONDE url = '/index.html' Y client-ip = inet '212.78.10.32';\n</code></pre> <p>Aqu\u00ed la direcci\u00f3n IP de la consulta est\u00e1 cubierta por el \u00edndice parcial. La siguiente consulta no puede utilizar el \u00edndice parcial, ya  que utiliza una direcci\u00f3n IP que se excluye del \u00edndice:</p> <pre><code>SELECT *\nDe acceso.log\nDONDE url = '/index.html' Y client-ip = inet '192.168.100.23';\n</code></pre> <p>Observe que este tipo de \u00edndice parcial requiere que los  valores comunes sean predeterminados, por lo que estos \u00edndices parciales se utilizan mejor para distribuciones de datos que no cambian. Estos  \u00edndices se pueden recrear ocasionalmente para ajustarse a nuevas  distribuciones de datos, pero esto a\u00f1ade esfuerzo de mantenimiento.</p> <p>Otro posible uso para un \u00edndice parcial es excluir los valores del \u00edndice que no le interesa la carga de trabajo t\u00edpica de la consulta; esto se muestra en .2. Esto resulta en las mismas ventajas que se enumeran anteriormente, pero evita que se uninterestingacceda a los valores  a trav\u00e9s de ese \u00edndice, incluso si un escaneo de \u00edndice podr\u00eda ser  rentable en ese caso. Obviamente, establecer \u00edndices parciales para este tipo de escenarios requerir\u00e1 mucha atenci\u00f3n y experimentaci\u00f3n.</p> <p>Ejemplo 11.2. Creaci\u00f3n de un \u00edndice parcial para excluir valores poco interesantes</p> <p>Si usted tiene una tabla que contiene pedidos facturados y sin  facturar, donde las \u00f3rdenes sin facturar toman una peque\u00f1a fracci\u00f3n de  la tabla total y sin embargo esas son las filas m\u00e1s accesibles, usted  puede mejorar el rendimiento creando un \u00edndice en s\u00f3lo las filas sin  facturar. El comando para crear el \u00edndice se ver\u00eda as\u00ed:</p> <pre><code>CREATE INDEX orders.unbilled-index ON orders (orden.nr)\n    Donde se facturar no es cierto;\n</code></pre> <p>Una posible consulta para usar este \u00edndice ser\u00eda:</p> <pre><code>SELECT * DESDE DE \u00f3rdenes DONDE facturado no es verdad Y pedir\u00e1n 10000;\n</code></pre> <p>Sin embargo, el \u00edndice tambi\u00e9n se puede utilizar en consultas que no implican  <code>order_nr</code>en absoluto, por ejemplo:</p> <pre><code>SELECT * DESDE \u00f3rdenes DONDE facturado no es cierto Y la cantidad de 5000.00;\n</code></pre> <p>Esto no es tan eficiente como un \u00edndice parcial en el  <code>amount</code>columna ser\u00eda, ya que el sistema tiene que escanear todo el \u00edndice. Sin  embargo, si hay relativamente pocas \u00f3rdenes sin facturar, usar este  \u00edndice parcial s\u00f3lo para encontrar los pedidos no facturados podr\u00eda ser  una victoria.</p> <p>Tenga en cuenta que esta consulta no puede utilizar este \u00edndice:</p> <pre><code>SELECT * DESDE los pedidos DONDE order.nr = 3501;\n</code></pre> <p>La orden 3501 podr\u00eda estar entre las \u00f3rdenes facturadas o sin facturar.</p> <p>Ejemplo 11.2 tambi\u00e9n ilustra que la columna indexada y la columna utilizada en el predicado no necesitan coincidir. PostgreSQL soporta \u00edndices parciales con predicados arbitrarios, siempre y cuando  s\u00f3lo se indice columnas de la tabla que se indexa. Sin embargo, tenga en cuenta que el predicado debe coincidir con las condiciones utilizadas  en las consultas que se supone que se benefician del \u00edndice. Para ser  precisos, un \u00edndice parcial se puede utilizar en una consulta s\u00f3lo si el sistema puede reconocer que el  <code>WHERE</code>La condici\u00f3n de la consulta implica matem\u00e1ticamente el predicado del \u00edndice. PostgreSQL no tiene un sofisticado prover de teorema que pueda reconocer  expresiones matem\u00e1ticamente equivalentes que est\u00e1n escritas en  diferentes formas. (No s\u00f3lo es un proverdo de teorema tan general  extremadamente dif\u00edcil de crear, probablemente ser\u00eda demasiado lento  para ser de cualquier uso real.) El sistema puede reconocer las  implicaciones simples de la desigualdad, por ejemplo, x 1 - implica x 2 - 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    condici\u00f3n o el \u00edndice no ser\u00e1 reconocido como utilizable. El emparejado  se lleva a cabo en el tiempo de planificaci\u00f3n de la consulta, no a la  hora de correr. Como resultado, las cl\u00e1usulas de consulta parametrizadas no funcionan con un \u00edndice parcial. Por ejemplo, una consulta preparada con un par\u00e1metro podr\u00eda especificar la que nunca implicar\u00e1  todos los valores posibles del par\u00e1metro.</p> <p>Un tercer posible uso para \u00edndices parciales no requiere que el  \u00edndice se utilice en consultas en absoluto. La idea aqu\u00ed es crear un  \u00edndice \u00fanico sobre un subconjunto de una tabla, como en Ejemplo 11.3. Esto impone la singularidad entre las filas que satisfacen el \u00edndice predicado, sin limitar a los que no lo hacen.</p> <p>Ejemplo 11.3. Creaci\u00f3n de un \u00edndice \u00fanico parcial</p> <p>Supongamos que tenemos una tabla describiendo los resultados de las pruebas. Queremos asegurarnos de que s\u00f3lo hay una successfulentrada exitosa para un tema dado y una combinaci\u00f3n de destino, pero puede haber cualquier n\u00famero de entradas sin \u00e9xito. Aqu\u00ed hay una manera de hacerlo:</p> <pre><code>Pruebas de TABLABLE (\n    el texto de asunto,\n    texto objetivo,\n    \u00e9xito booleano,\n    ...\n);\n\nCREATE UNIQUE INDEX pruebas.exceso.constrasint ON (sujeto, objetivo)\n    El \u00e9xito de AQUI;\n</code></pre> <p>Este es un enfoque particularmente eficiente cuando hay pocas  pruebas exitosas y muchas infructuosas. Tambi\u00e9n es posible permitir s\u00f3lo un nulo en una columna mediante la creaci\u00f3n de un \u00edndice parcial \u00fanico  con un  <code>IS NULL</code>restricci\u00f3n.</p> <p>Finalmente, un \u00edndice parcial tambi\u00e9n se puede utilizar para anular las opciones del plan de consulta del sistema. Adem\u00e1s, los conjuntos de datos con distribuciones peculiares podr\u00edan hacer que el sistema  utilice un \u00edndice cuando realmente no deber\u00eda. En ese caso se puede  configurar el \u00edndice para que no est\u00e9 disponible para la consulta  ofensiva. Normalmente, PostgreSQL toma decisiones razonables sobre el uso del \u00edndice (por ejemplo, las  evita al recuperar valores comunes, por lo que el ejemplo anterior  realmente s\u00f3lo ahorra tama\u00f1o del \u00edndice, no es necesario para evitar el  uso de \u00edndices), y las opciones de plangravamente incorrectas son causa  de un informe de fallo.</p> <p>Tenga en cuenta que la configuraci\u00f3n de un \u00edndice parcial indica  que usted sabe al menos tanto como el planificador de consultas sabe, en particular usted sabe cuando un \u00edndice podr\u00eda ser rentable. La  formaci\u00f3n de este conocimiento requiere experiencia y comprensi\u00f3n de  c\u00f3mo funcionan los \u00edndices en PostgreSQL. En la mayor\u00eda de los casos, la ventaja de un \u00edndice parcial sobre un  \u00edndice regular ser\u00e1 m\u00ednima. Hay casos en los que son bastante  contraproducentes, como en el ejemplo 11.4.</p> <p>Ejemplo 11.4. No usar \u00edndices parciales como sustituto para la partici\u00f3n</p> <p>Usted podr\u00eda estar tentado a crear un gran conjunto de \u00edndices parciales no superlapping, por ejemplo</p> <pre><code>CREATE INDEX mytable.cat-1 ON mytable (datos) Categor\u00eda AQUI = 1;\nCREATO INDEX mytable.cat-2 ON mytable (datos) Categor\u00eda DE DONDE = 2;\nCREATE INDEX mytable.cat-3 ON mytable (datos) Categor\u00eda DE DONDE = 3;\n...\nCREATE INDEX mytable-cat. NEN mita (datos) DONDE categor\u00eda = N;\n</code></pre> <p>Es una mala idea. Casi con toda seguridad, estar\u00e1s mejor con un solo \u00edndice no partidista, declarado como</p> <pre><code>CREATE INDEX mytable.cat.data ON mytable (categor\u00eda, datos);\n</code></pre> <p>(Encabece la columna de la categor\u00eda primero, por las razones descritas en la secci\u00f3n 11.3.) Mientras que una b\u00fasqueda en este \u00edndice m\u00e1s grande podr\u00eda tener que  descender a trav\u00e9s de un par de niveles de \u00e1rboles m\u00e1s que una b\u00fasqueda  en un \u00edndice m\u00e1s peque\u00f1o, eso es casi seguro que va a ser m\u00e1s barato que el esfuerzo del planificador necesario para seleccionar el apropiado de los \u00edndices parciales. El n\u00facleo del problema es que el sistema no  entiende la relaci\u00f3n entre los \u00edndices parciales, y probar\u00e1  laboriosamente a cada uno para ver si es aplicable a la consulta actual.</p> <p>Si su tabla es lo suficientemente grande que un solo \u00edndice  realmente es una mala idea, usted debe considerar el uso de partici\u00f3n en su lugar (ver Secci\u00f3n 5.11). Con ese mecanismo, el sistema s\u00ed entiende que las tablas y los  \u00edndices no est\u00e1n superando, por lo que es posible un rendimiento mucho  mejor.</p> <p>Puede encontrar m\u00e1s informaci\u00f3n sobre los \u00edndices parciales en [ston89b], [olson93] y [seshadri95].</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/09.-Indices%20de%20escaneos%20y%20%C3%ADndices%20de%20cobertura/","title":"09.-Indices de escaneos y \u00edndices de cobertura","text":"<p>Todos los \u00edndices de PostgreSQL son \u00edndices secundarios, lo que significa que cada \u00edndice se almacena separadamente del \u00e1rea de datos principal de la tabla (que se llama el mont\u00f3n de la tabla en la terminolog\u00eda PostgreSQL). Esto significa que en un escaneo de \u00edndice ordinario, cada recuperaci\u00f3n de fila requiere obtener datos tanto del \u00edndice como del mont\u00f3n.  Adem\u00e1s, mientras que las entradas del \u00edndice que coinjan con un  determinado indexable  <code>WHERE</code>las condiciones suelen estar juntas en el \u00edndice, las filas de tablas que  hacen referencia podr\u00edan estar en cualquier lugar del mont\u00f3n. La porci\u00f3n de acceso al mont\u00f3n de un escaneo \u00edndice implica as\u00ed un gran acceso  aleatorio al mont\u00f3n, que puede ser lento, particularmente en los medios  tradicionales rotatorios. (Como se describe en la Secci\u00f3n 11.5, escaneos de bitmap tratan de aliviar este costo haciendo los accesos de montones en orden ordenado, pero eso s\u00f3lo va tan lejos.)</p> <p>Para resolver este problema de rendimiento, PostgreSQL admite escaneos solo con \u00edndice, que pueden responder a las consultas de un \u00edndice solo sin ning\u00fan  acceso a montos. La idea b\u00e1sica es devolver los valores directamente de  cada entrada de \u00edndice en lugar de consultar la entrada de mont\u00f3n  asociada. Hay dos restricciones fundamentales en el momento en que se  puede utilizar este m\u00e9todo:</p> <ol> <li> <p>El tipo de \u00edndice debe soportar escaneos solo con \u00edndice. Los \u00edndices de \u00e1rbol B siempre lo hacen. Los \u00edndices GiST y SP-GiST  soportan escaneos solo para algunas clases de operador, pero no otras.  Otros tipos de \u00edndices no tienen soporte. El requisito subyacente es que el \u00edndice debe almacenar f\u00edsicamente, o bien poder reconstruir, el  valor de datos original para cada entrada de \u00edndice. Como contraejemplo, los \u00edndices GIN no pueden soportar escaneos solo con \u00edndice porque cada entrada de \u00edndice normalmente tiene s\u00f3lo una parte del valor de datos  original.</p> </li> <li> <p>La consulta debe hacer referencia \u00fanicamente a las columnas almacenadas en el \u00edndice. Por ejemplo, dado un \u00edndice en columnas  <code>x</code>y  <code>y</code>de una tabla que tambi\u00e9n tiene una columna <code>z</code>, estas consultas podr\u00edan utilizar escaneos solo \u00edndice:</p> </li> </ol> <p><code>SELECT x, y DESDE pesta\u00f1as DODE x = 'clave';    SELECT x DESDE Pesta\u00f1as DE DONDE x = 'clave' Y y 42;</code></p> <p>pero estas consultas no pod\u00edan:</p> <p><code>SELECT x, z DESDE pesta\u00f1a DONDE x = 'clave';    SELECT x DESDE Pesta\u00f1as DONDE x = 'llave' y z 42;</code></p> <p>(Los \u00edndices depresi\u00f3n y los \u00edndices parciales complican esta regla, como se examina a continuaci\u00f3n.)</p> <p>Si se cumplen estos dos requisitos fundamentales, entonces todos  los valores de datos requeridos por la consulta est\u00e1n disponibles en el  \u00edndice, por lo que un escaneo solo \u00edndice es f\u00edsicamente posible. Pero  hay un requisito adicional para cualquier exploraci\u00f3n de tablas en PostgreSQL : debe verificar que cada fila recuperada sea visible a la instant\u00e1nea MVCC de la consulta, como se discute en el Cap\u00edtulo 13. La informaci\u00f3n de visibilidad no se almacena en entradas de \u00edndice, s\u00f3lo en entradas de montos; por lo que a primera vista parecer\u00eda que  cada recuperaci\u00f3n de fila requerir\u00eda un acceso a montos de todos modos. Y este es el caso, si la fila de la mesa se ha modificado recientemente.  Sin embargo, para los datos que rara vez cambian hay una manera de  evitar este problema. PostgreSQL rastrea, para cada p\u00e1gina en el mont\u00f3n de una tabla, si todas las filas almacenadas en esa p\u00e1gina son lo suficientemente viejas para ser  visibles para todas las transacciones actuales y futuras. Esta  informaci\u00f3n se almacena en un poco en el mapa de visibilidad de la tabla. Un escaneo solo \u00edndice, despu\u00e9s de encontrar una entrada  de \u00edndice candidato, comprueba el mapa de visibilidad para la p\u00e1gina de  montos correspondiente. Si est\u00e1 configurado, la fila se conoce visible y por lo tanto los datos se pueden devolver sin m\u00e1s trabajo. Si no est\u00e1  establecido, la entrada de monto debe ser visitada para averiguar si es  visible, por lo que no se obtiene ninguna ventaja de rendimiento sobre  un escaneo \u00edndice est\u00e1ndar. Incluso en el caso exitoso, este enfoque  negocia accesos de mapas de visibilidad para los accesos de monto fuera; pero dado que el mapa de visibilidad es cuatro \u00f3rdenes de magnitud  menor que el mont\u00f3n que describe, se necesita mucha menos E/S f\u00edsica  para acceder a ella. En la mayor\u00eda de las situaciones el mapa de  visibilidad permanece en cach\u00e9 en la memoria todo el tiempo.</p> <p>En resumen, mientras que un escaneo solo \u00edndice es posible dados  los dos requisitos fundamentales, ser\u00e1 una victoria s\u00f3lo si una fracci\u00f3n significativa de las p\u00e1ginas de montos de la tabla tiene sus bits de  mapas totalmente visibles establecidos. Pero las tablas en las que una  gran fracci\u00f3n de las filas son inmutables son lo suficientemente comunes como para hacer este tipo de escaneo muy \u00fatil en la pr\u00e1ctica.</p> <p>Para hacer un uso eficaz de la funci\u00f3n de escaneo solo \u00edndice, puede optar por crear un \u00edndice de cobertura, que es un \u00edndice dise\u00f1ado espec\u00edficamente para incluir las columnas  necesarias por un tipo particular de consulta que ejecuta con  frecuencia. Dado que las consultas suelen necesitar m\u00e1s columnas que las que buscan, PostgreSQL le permite crear un \u00edndice en el que algunas columnas son s\u00f3lo de carga \u00fatil y no forman parte de la clave de b\u00fasqueda. Esto se hace a\u00f1adiendo un  cl\u00e1usula que enumera las columnas adicionales. Por ejemplo, si com\u00fanmente diriges consultas como</p> <pre><code>SELECT y DESDE pesta\u00f1as DONDE x = 'clave';\n</code></pre> <p>el enfoque tradicional para acelerar tales consultas ser\u00eda crear un \u00edndice sobre  <code>x</code>S\u00f3lo. Sin embargo, un \u00edndice definido como</p> <pre><code>CREATE INDEX tab.x-y ON tab(x) INCLUDE (y);\n</code></pre> <p>podr\u00eda manejar estas consultas como escaneos solo \u00edndice, porque  <code>y</code>se puede obtener del \u00edndice sin visitar el mont\u00f3n.</p> <p>Porque columna  <code>y</code>no es parte de la clave de b\u00fasqueda del \u00edndice, no tiene que ser de un  tipo de datos que el \u00edndice pueda manejar; simplemente se almacena en el \u00edndice y no es interpretado por la maquinaria del \u00edndice. Adem\u00e1s, si el \u00edndice es un \u00edndice \u00fanico, es decir</p> <pre><code>CREATE UNIQUE INDEX tab.x-y ON p tab(x) INCLUDE (y);\n</code></pre> <p>la condici\u00f3n de singularidad se aplica a columnas <code>x</code>, no a la combinaci\u00f3n de  <code>x</code>y <code>y</code>. (An  <code>INCLUDE</code>la cl\u00e1usula tambi\u00e9n puede escribirse en  <code>UNIQUE</code>y  <code>PRIMARY KEY</code>limitaciones, proporcionando una sintaxis alternativa para establecer un \u00edndice como este.)</p> <p>Es sabio ser conservador acerca de agregar columnas de carga \u00fatil  no clave a un \u00edndice, especialmente columnas anchas. Si una tuple de  \u00edndice supera el tama\u00f1o m\u00e1ximo permitido para el tipo de \u00edndice, la  inserci\u00f3n de datos fallar\u00e1. En cualquier caso, columnas no clave  duplican los datos de la tabla del \u00edndice y flote el tama\u00f1o del \u00edndice,  por lo tanto potencialmente ralentizaci\u00f3n de las b\u00fasquedas. Y recuerde  que no tiene mucho sentido incluir columnas de carga \u00fatil en un \u00edndice a menos que la tabla cambie lo suficientemente lentamente como para que  un escaneo solo \u00edndice probablemente no necesite acceder al mont\u00f3n. Si  el tuple del mont\u00f3n debe ser visitado de todos modos, no cuesta nada m\u00e1s obtener el valor de la columna de de ah\u00ed. Otras restricciones son que  las expresiones no est\u00e1n actualmente soportadas como columnas incluidas, y que s\u00f3lo los \u00edndices de \u00e1rbol B, GiST y SP-GiST soportan columnas  actualmente incluidas.</p> <p>Antes de PostgreSQL ten\u00eda el  <code>INCLUDE</code>caracter\u00edsticas, la gente a veces hac\u00eda \u00edndices de cobertura escribiendo las columnas de carga \u00fatil como columnas de \u00edndice ordinario, es decir, escribiendo</p> <pre><code>CREATE INDEX tab.x-y ON p pesta\u00f1a (x, y);\n</code></pre> <p>a pesar de que no ten\u00edan intenci\u00f3n de usar nunca  <code>y</code>como parte de una  <code>WHERE</code>cl\u00e1usula. Esto funciona bien siempre y cuando las columnas adicionales est\u00e9n  rastrondo columnas; hacerlos columnas principales es imprudable por las razones explicadas en .3. Sin embargo, este m\u00e9todo no apoya el caso en el que desea que el \u00edndice aplique la singularidad en las columnas clave (s).</p> <p>La truncamiento de Suffix siempre elimina columnas no clave de los niveles superiores de B-Tree.  Como columnas de carga \u00fatil, nunca se utilizan para guiar los escaneos  de \u00edndices. El proceso de truncamiento tambi\u00e9n elimina una o m\u00e1s  columnas clave de seguimiento cuando el prefijo restante de columnas de  tecla (s) resulta suficiente para describir tuples en el nivel B-Tree  m\u00e1s bajo. En la pr\u00e1ctica, cubriendo \u00edndices sin un  <code>INCLUDE</code>cl\u00e1usula a menudo evita almacenar columnas que efectivamente son carga \u00fatil en  los niveles superiores. Sin embargo, definir expl\u00edcitamente las columnas de carga \u00fatil como columnas no clave mantiene los tuples en los niveles superiores peque\u00f1os.</p> <p>En principio, se pueden utilizar escaneos solo con \u00edndices de expresi\u00f3n. Por ejemplo, dado un \u00edndice de  <code>f(x)</code>d\u00f3nde  <code>x</code>es una columna de tabla, deber\u00eda ser posible ejecutar</p> <pre><code>SELECT f(x) DESDE pesta\u00f1a DONDE f(x) 1;\n</code></pre> <p>como un escaneo solo \u00edndice; y esto es muy atractivo si  <code>f()</code>es una funci\u00f3n cara de compute. Sin embargo, el planificador de PostgreSQL no es muy inteligente en estos casos. Considera una consulta para ser  potencialmente ejecutable mediante escaneo solo por \u00edndice cuando todas las columnas necesarias para la consulta est\u00e1n disponibles desde el \u00edndice. En este ejemplo,  <code>x</code>no es necesaria excepto en el contexto <code>f(x)</code>, pero el planificador no se da cuenta de eso y concluye que un escaneo  solo de \u00edndice no es posible. Si un escaneo solo \u00edndice parece  suficientemente vale la pena, esto se puede trabajar en torno a\u00f1adiendo  <code>x</code>como columna incluida, por ejemplo</p> <pre><code>CREATE INDEX p.f.x ON pesta\u00f1a (f(x)) INCLUDE (x);\n</code></pre> <p>Una advertencia adicional, si el objetivo es evitar la recalculaci\u00f3n <code>f(x)</code>, es que el planificador no necesariamente coincidir\u00e1 con los usos de  <code>f(x)</code>que no est\u00e1n en indexable  <code>WHERE</code>cl\u00e1usulas a la columna de \u00edndice. Por lo general, lo har\u00e1 bien en consultas  simples como se muestra anteriormente, pero no en consultas que implican a las uniones. Estas deficiencias pueden ser subsanadas en futuras  versiones de PostgreSQL.</p> <p>Los \u00edndices parciales tambi\u00e9n tienen interacciones interesantes con escaneos solo con \u00edndices. Considere el \u00edndice parcial mostrado en Ejemplo 11.3:</p> <pre><code>CREATE UNIQUE INDEX pruebas.exceso.constrasint ON (sujeto, objetivo)\n    El \u00e9xito de AQUI;\n</code></pre> <p>En principio, podr\u00edamos hacer un escaneo solo \u00edndice en este \u00edndice para satisfacer una consulta como</p> <pre><code>SELECT target FROM tests WHERE subject = 'some-suject' AND success;\n</code></pre> <p>Pero hay un problema: el  <code>WHERE</code>cl\u00e1usula se refiere a  <code>success</code>que no est\u00e1 disponible como columna de resultados del \u00edndice. Sin embargo,  un escaneo solo \u00edndice es posible porque el plan no necesita volver a  comprobar esa parte de la  <code>WHERE</code>cl\u00e1usula en el momento de la ejecuci\u00f3n: todas las entradas que se encuentran en el \u00edndice necesariamente tienen  <code>success = true</code>por lo que esto no tiene que ser verificado expl\u00edcitamente en el plan. Las versiones PostgreSQL 9.6 y m\u00e1s tarde reconocer\u00e1n estos casos y permitir\u00e1n generar escaneos solo con \u00edndice, pero las versiones anteriores no.</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/10.-Clases%20de%20operador%20y%20familias%20operadoras/","title":"10.-Clases de operador y familias operadoras","text":"<p>Una definici\u00f3n de \u00edndice puede especificar una clase de operador para cada columna de un \u00edndice.</p> <pre><code>CREATE INDEX  nameEn el  table(  columnopclass[ (  opclass_options) ] [sort options] [, ...]);\n</code></pre> <p>La clase de operador identifica a los operadores que deben ser  utilizados por el \u00edndice para esa columna. Por ejemplo, un \u00edndice de  \u00e1rbol B en el tipo  <code>int4</code>utilizar\u00eda la  <code>int4_ops</code>clase; esta clase de operador incluye funciones de comparaci\u00f3n para valores de tipo <code>int4</code>. En la pr\u00e1ctica, la clase de operador predeterminada para el tipo de  datos de la columna suele ser suficiente. La raz\u00f3n principal para tener  clases de operador es que para algunos tipos de datos, podr\u00eda haber m\u00e1s  de un comportamiento significativo del \u00edndice. Por ejemplo, podr\u00edamos  querer ordenar un tipo de datos de n\u00fameros complejos ya sea por valor  absoluto o por parte real. Podr\u00edamos hacerlo definiendo dos clases de  operador para el tipo de datos y luego seleccionando la clase adecuada  al hacer un \u00edndice. La clase de operador determina el orden de  clasificaci\u00f3n b\u00e1sica (que luego se puede modificar a\u00f1adiendo opciones de clasificaci\u00f3n <code>COLLATE</code>, <code>ASC</code>/ <code>DESC</code>y/o <code>NULLS FIRST</code>/<code>NULLS LAST</code>).</p> <p>Tambi\u00e9n hay algunas clases de operador incorporadas adem\u00e1s de las por defecto:</p> <ul> <li>Las clases de operador <code>text_pattern_ops</code>, <code>varchar_pattern_ops</code>, y  <code>bpchar_pattern_ops</code>soporte Indices de \u00e1rbol B en los tipos <code>text</code>, <code>varchar</code>, y  <code>char</code>respectivamente. La diferencia con respecto a las clases de operador por defecto es que  los valores se comparan estrictamente por car\u00e1cter en lugar de de  acuerdo con las reglas de cocolaci\u00f3n espec\u00edficas de la localidad. Esto  hace que estas clases de operador sean adecuadas para su uso por  consultas que implican expresiones de empareja de patrones ( <code>LIKE</code>o expresiones regulares POSIX) cuando la base de datos no utiliza el est\u00e1ndar de localizaci\u00f3n. Como ejemplo, podr\u00edas indexar un  <code>varchar</code>columnas como esta:</li> </ul> <p><code>CREATE INDEX test-index ON test-table (col varchar-pattern-ops);</code></p> <p>Tenga en cuenta que tambi\u00e9n debe crear un \u00edndice con la clase de operador predeterminada si desea consultas que impliquen ordinarias <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, o  <code>&gt;=</code>comparaciones para usar un \u00edndice. Tales consultas no pueden utilizar el  <code>*</code>xxx<code>*_pattern_ops</code>Clases de operador. (Sin embargo, las comparaciones ordinarias de igualdad  pueden utilizar estas clases de operador.) Es posible crear m\u00faltiples  \u00edndices en la misma columna con diferentes clases de operador. Si usted  utiliza el local de C, usted no necesita el  <code>*</code>xxx<code>*_pattern_ops</code>Clases de operador, porque un \u00edndice con la clase de operador predeterminado  es utilizable para consultas de anotable en el C locale.</p> <p>La siguiente consulta muestra todas las clases definidas de operador:</p> <pre><code>SELECT am.amname AS index-methodd,\n       opc.opcname AS opclass.name,\n       opc.opcintype::regtype AS indexed-type,\n       opc.opcdefault AS is-default\n    DESDE pg.am am, pg.opclass opc\n    WHERE opc.opcmethod = am.oid\n    ORDER BY index-method, opclass-name;\n</code></pre> <p>Una clase de operador es en realidad s\u00f3lo un subconjunto de una estructura m\u00e1s grande llamada familia de operadores. En los casos en que varios tipos de datos tienen comportamientos  similares, con frecuencia es \u00fatil definir operadores de tipo de datos  cruzados y permitir que funcionen con \u00edndices. Para ello, las clases de  operador para cada uno de los tipos deben agruparse en la misma familia  de operadores. Los operadores de tipo cruzado son miembros de la  familia, pero no est\u00e1n asociados con ninguna clase dentro de la familia.</p> <p>Esta versi\u00f3n ampliada de la consulta anterior muestra que la familia de operadores de cada clase de operador pertenece a:</p> <pre><code>SELECT am.amname AS index-methodd,\n       opc.opcname AS opclass.name,\n       opf.opfname AS opfamilia-name,\n       opc.opcintype::regtype AS indexed-type,\n       opc.opcdefault AS is-default\n    DESDE pg.am am, pg.opclass opc, pg.opfamily opf\n    LOHERE opc.opcmethod = am.oid Y\n          opc.opcfamily = opf.oid\n    ORDER BY index-method, opclass-name;\n</code></pre> <p>Esta consulta muestra a todas las familias de los operadores definidos y a todos los operadores incluidos en cada familia:</p> <pre><code>SELECT am.amname AS index-methodd,\n       opf.opfname AS opfamilia-name,\n       amop.amopopr::regoperador AS opfamily-operator\n    DESDE pg.am am, pg.opfamily opf, pg.amop amop\n    D\u00f3nde opf.opfmethod = am.oid Y\n          amop.amopfamily = opf.oid\n    ORDER BY index-method, opfamily-name, opfamily-operator;\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/10.-Clases%20de%20operador%20y%20familias%20operadoras/#tip","title":"Tip","text":"<p>psql tiene mandos <code>\\dAc</code>, <code>\\dAf</code>, y <code>\\dAo</code>, que proporcionan versiones un poco m\u00e1s sofisticadas de estas consultas.</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/11.-Indices%20y%20Collaciones/","title":"11.-Indices y Collaciones","text":"<p>Un \u00edndice puede soportar s\u00f3lo una cocolaci\u00f3n por columna de \u00edndice.  Si m\u00faltiples colillas son de inter\u00e9s, pueden ser necesarios m\u00faltiples  \u00edndices.</p> <p>Considere estas declaraciones:</p> <pre><code>CREATE TABLE test1c (\n    id integer,\n    content varchar COLLATE \"x\"\n);\n\nCREATE INDEX test1c.content-index ON test1c (contenido);\n</code></pre> <p>El \u00edndice utiliza autom\u00e1ticamente la collaci\u00f3n de la columna subyacente. As\u00ed que una consulta de la forma</p> <pre><code>SELECT * DESDE prueba1c El contenido de . constant;\n</code></pre> <p>podr\u00eda utilizar el \u00edndice, porque la comparaci\u00f3n usar\u00e1 por defecto  la recopilaci\u00f3n de la columna. Sin embargo, este \u00edndice no puede  acelerar las consultas que implican alg\u00fan otro coteja. As\u00ed que si las  preguntas de la forma, digamos,</p> <pre><code>SELECT * DESDE prueba1c El contenido de .  constantCOLLATE \"y\";\n</code></pre> <p>tambi\u00e9n de inter\u00e9s, se podr\u00eda crear un \u00edndice adicional que apoye la  <code>\"y\"</code>Collation, as\u00ed:</p> <pre><code>CREATE INDEX test1c.content-y-index ON test1c (contenido COLLATE \"y\");\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/12.-Examinando%20el%20uso%20del%20%C3%ADndice/","title":"12.-Examinando el uso del \u00edndice","text":"<p>Aunque los \u00edndices de PostgreSQL no necesitan mantenimiento o sinton\u00eda, todav\u00eda es importante comprobar  qu\u00e9 \u00edndices son realmente utilizados por la carga de trabajo de la  consulta de la vida real. Examinando el uso del \u00edndice para una consulta individual se hace con el comando EXPLAIN; su aplicaci\u00f3n para este prop\u00f3sito se ilustra en la Secci\u00f3n 14.1. Tambi\u00e9n es posible recopilar estad\u00edsticas generales sobre el uso de  \u00edndices en un servidor en ejecuci\u00f3n, como se describe en la Secci\u00f3n 28.2.</p> <p>Es dif\u00edcil formular un procedimiento general para determinar qu\u00e9  \u00edndices crear. Hay una serie de casos t\u00edpicos que se han mostrado en los ejemplos a lo largo de las secciones anteriores. Una buena  experimentaci\u00f3n es a menudo necesaria. El resto de esta secci\u00f3n da  algunos consejos para eso:</p> <ul> <li> <p>Siempre ejecute ANALYZE primero. Este comando recoge estad\u00edsticas sobre la distribuci\u00f3n de los  valores en la tabla. Esta informaci\u00f3n es necesaria para estimar el  n\u00famero de filas devueltas por una consulta, que es necesaria por el  planificador para asignar costos realistas a cada posible plan de  consulta. A falta de estad\u00edsticas reales, se asumen algunos valores por  defecto, que casi seguramente son inexactos. Examinando el uso del  \u00edndice de una aplicaci\u00f3n sin haber corrido  <code>ANALYZE</code>Es, por tanto, una causa perdida. V\u00e9anse los art\u00edculos 25.1.3 y  para m\u00e1s informaci\u00f3n.</p> </li> <li> <p>Util\u00edce datos reales para la experimentaci\u00f3n. El uso de datos de prueba para configurar los \u00edndices le dir\u00e1 qu\u00e9 \u00edndices necesita para los datos de prueba, pero eso es todo.</p> </li> </ul> <p>Es especialmente fatal utilizar conjuntos de datos de prueba  muy peque\u00f1os. Si bien seleccionar 1000 de 100000 filas podr\u00eda ser un  candidato para un \u00edndice, seleccionar 1 de 100 filas dif\u00edcilmente ser\u00e1,  porque las 100 filas probablemente encajen dentro de una sola p\u00e1gina de  disco, y no hay ning\u00fan plan que pueda vencer secuencialmente la p\u00e1gina  de 1 disco.</p> <p>Tambi\u00e9n tenga cuidado al inventar los datos de las pruebas,  que a menudo son inevitables cuando la aplicaci\u00f3n a\u00fan no est\u00e1 en  producci\u00f3n. Los valores que son muy similares, completamente aleatorios o insertados en orden ordenado sesgar\u00e1n las estad\u00edsticas lejos de la  distribuci\u00f3n que los datos reales tendr\u00edan.</p> <ul> <li> <p>Cuando los \u00edndices no se utilizan, puede ser \u00fatil para las  pruebas para forzar su uso. Hay par\u00e1metros de tiempo de ejecuci\u00f3n que  pueden apagar varios tipos de plan (ver secci\u00f3n 20.7.1). Por ejemplo, apagando los escaneos secuenciales (<code>enable_seqscan</code>) y se une a lazo anidado (<code>enable_nestloop</code>), que son los planes m\u00e1s b\u00e1sicos, obligar\u00e1 al sistema a utilizar un plan  diferente. Si el sistema todav\u00eda elige un escaneo secuencial o un bucle  anidado, entonces probablemente hay una raz\u00f3n m\u00e1s fundamental por la que el \u00edndice no se est\u00e1 utilizando; por ejemplo, la condici\u00f3n de consulta  no coincide con el \u00edndice. (Qu\u00e9 tipo de consulta puede utilizar qu\u00e9 tipo de \u00edndice se explica en las secciones anteriores.)</p> </li> <li> <p>Si el uso del \u00edndice de fuerza utiliza el \u00edndice, entonces  hay dos posibilidades: O el sistema es correcto y el uso del \u00edndice no  es apropiado, o las estimaciones de costos de los planes de consulta no  reflejan la realidad. As\u00ed que deber\u00edas tiempo tu consulta con y sin  \u00edndices. El  <code>EXPLAIN ANALYZE</code>El comando puede ser \u00fatil aqu\u00ed.</p> </li> <li> <p>Si resulta que las estimaciones de costos son err\u00f3neas, hay,  una vez m\u00e1s, dos posibilidades. El costo total se calcula con respecto a los costos por f\u00edmba de cada nodo plan veces la estimaci\u00f3n de  selectividad del nodo del plan. Los costes estimados para los nodos del  plan pueden ajustarse a trav\u00e9s de par\u00e1metros de tiempo de ejecuci\u00f3n  (descritos en la secci\u00f3n 20.7.2). Una estimaci\u00f3n de selectividad inexacta se debe a la insuficiencia de  estad\u00edsticas. Podr\u00eda ser posible mejorar esto sintonando los par\u00e1metros  de reuni\u00f3n de estad\u00edsticas (v\u00e9ase ALTER TABLE).</p> </li> </ul> <p>Si no tiene \u00e9xito en ajustar los costos para ser m\u00e1s  apropiado, entonces es posible que tenga que recurrir a forzar el uso  del \u00edndice expl\u00edcitamente. Tambi\u00e9n es posible que desee ponerse en  contacto con los desarrolladores de PostgreSQL para examinar el problema.</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/02.-Tipos%20de%20%C3%ADndices/","title":"Index","text":"<p>PostgreSQL proporciona varios tipos de \u00edndices: B-\u00e1r, Hash, GiST, SP-GiST, GIN, BRIN y la floraci\u00f3n de extensi\u00f3n. Cada tipo de \u00edndice utiliza un algoritmo diferente que mejor se adapta a diferentes tipos de consultas. Por defecto, el  <code>CREATE INDEX</code>El comando crea \u00edndices de \u00e1rbol B, que se ajustan a las situaciones m\u00e1s  comunes. Los otros tipos de \u00edndice se seleccionan escribiendo la palabra clave  <code>USING</code>seguido por el nombre tipo \u00edndice. Por ejemplo, para crear un \u00edndice Hash:</p> <pre><code>CREATE INDEX  nameEn el  tableUSING HASH (column);\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/02.-Tipos%20de%20%C3%ADndices/01.-B-Tree/","title":"01.-B-Tree","text":"<p>Los \u00e1rboles B pueden manejar consultas de igualdad y rango sobre los  datos que se pueden ordenar en alg\u00fan orden. En particular, el  planificador de consultas PostgreSQL considerar\u00e1 el uso de un \u00edndice de \u00e1rbol B cada vez que una columna  indexada participe en una comparaci\u00f3n utilizando uno de estos  operadores:</p> <pre><code>= = = = = =\n</code></pre> <p>Construcciones equivalentes a combinaciones de estos operadores, tales como  <code>BETWEEN</code>y <code>IN</code>, tambi\u00e9n se puede implementar con una b\u00fasqueda de \u00edndice de \u00e1rbol B. Tambi\u00e9n, un  <code>IS NULL</code>o o  <code>IS NOT NULL</code>La condici\u00f3n en una columna de \u00edndice se puede utilizar con un \u00edndice de \u00e1rbol B.</p> <p>El optimizador tambi\u00e9n puede utilizar un \u00edndice de \u00e1rbol B para  consultas que involucran a los operadores que coinciden con el patr\u00f3n  <code>LIKE</code>y  <code>~</code>si el patr\u00f3n es una constante y est\u00e1 anclado al principio de la cadena, por ejemplo,  <code>col LIKE 'foo%'</code>o o <code>col ~ '^foo'</code>, pero no <code>col LIKE '%bar'</code>. Sin embargo, si su base de datos no utiliza el local de C, tendr\u00e1 que  crear el \u00edndice con una clase de operador especial para soportar la  indexaci\u00f3n de consultas de coincidencia de patrones; consulte la Secci\u00f3n 11.10 a continuaci\u00f3n. Tambi\u00e9n es posible utilizar los \u00edndices de \u00e1rbol B para  <code>ILIKE</code>y <code>~*</code>, pero s\u00f3lo si el patr\u00f3n comienza con caracteres no alfab\u00e9ticos, es  decir, caracteres que no se ven afectados por la conversi\u00f3n de casos  superior/inferior.</p> <p>Los \u00edndices de \u00e1rbol B tambi\u00e9n se pueden utilizar para recuperar  datos en orden ordenado. Esto no siempre es m\u00e1s r\u00e1pido que un simple  escaneo y tipo, pero a menudo es \u00fatil.</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/02.-Tipos%20de%20%C3%ADndices/02.-Hash/","title":"02.-Hash","text":"<p>Los \u00edndices Hash almacenan un c\u00f3digo de hachte de 32 bits derivado  del valor de la columna indexada. Por lo tanto, tales \u00edndices s\u00f3lo  pueden manejar comparaciones simples de igualdad. El planificador de  consultas considerar\u00e1 el uso de un \u00edndice de hach ins\u00f3logo cada vez que  una columna indexada est\u00e9 involucrada en una comparaci\u00f3n utilizando el  operador igual:</p> <pre><code>=\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/02.-Tipos%20de%20%C3%ADndices/03.-GiST/","title":"03.-GiST","text":"<p>Los \u00edndices de GiST no son un solo tipo de \u00edndice, sino m\u00e1s bien una  infraestructura dentro de la cual se pueden implementar muchas  estrategias de indexaci\u00f3n diferentes. En consecuencia, los operadores en particular con los que se puede utilizar un \u00edndice GiST var\u00edan  dependiendo de la estrategia de indexaci\u00f3n (clase del operador). Como ejemplo, la distribuci\u00f3n est\u00e1ndar de PostgreSQL incluye clases de operador de GiST para varios tipos de datos  geom\u00e9tricos bidimensionales, que soportan consultas indexadas utilizando estos operadores:</p> <pre><code>&amp; A &amp;.\n</code></pre> <p>(V\u00e9ase la secci\u00f3n 9.11 para el significado de estos operadores.) Las clases de operador de  GiST incluidas en la distribuci\u00f3n est\u00e1ndar est\u00e1n documentadas en el .1. Muchas otras clases de operador de GiST est\u00e1n disponibles en el  <code>contrib</code>colecci\u00f3n o como proyectos separados. Para m\u00e1s informaci\u00f3n v\u00e9ase el cap\u00edtulo 68.</p> <p>Los \u00edndices de GiST tambi\u00e9n son capaces de optimizar las nearest-neighborb\u00fasquedas de la beca m\u00e1s cercana, como</p> <pre><code>SELECT * DESDE lugares ORDEN POR ubicaci\u00f3n \"(101,456) LIMIT 10;\n</code></pre> <p>que encuentra los diez lugares m\u00e1s cercanos a un punto objetivo  dado. La capacidad de hacerlo depende de nuevo de la clase de operador  en particular que se utilice. En el .1, los operadores que pueden utilizarse de esta manera se enumeran en la columna.Ordering Operators</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/02.-Tipos%20de%20%C3%ADndices/04.-SP-GiST/","title":"04.-SP-GiST","text":"<p>Los \u00edndices SP-GiST, al igual que los \u00edndices GiST, ofrecen una  infraestructura que soporta varios tipos de b\u00fasquedas. SP-GiST permite  la implementaci\u00f3n de una amplia gama de diferentes estructuras de datos  basadas en discos diferentes, tales como quadros, \u00e1rboles k-d y \u00e1rboles  de radix (traes). Como ejemplo, la distribuci\u00f3n est\u00e1ndar de PostgreSQL incluye clases de operador SP-GiST para puntos bidimensionales, que soportan consultas indexadas utilizando estos operadores:</p> <pre><code>* * * * * * *\n</code></pre> <p>(V\u00e9ase la secci\u00f3n 9.11 para el significado de estos operadores.) Las clases de operador  SP-GiST incluidas en la distribuci\u00f3n est\u00e1ndar se documentan en el cuadro 69.1. Para m\u00e1s informaci\u00f3n, v\u00e9ase el cap\u00edtulo 69.</p> <p>Al igual que GiST, SP-GiST soporta b\u00fasquedas  m\u00e1s . Para las clases de operador SP-GiST que soportan el pedido de distancia, el operador correspondiente se lista en la columna de los operadores de pedidos en .1.</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/02.-Tipos%20de%20%C3%ADndices/05.-GIN/","title":"05.-GIN","text":"<p>Los \u00edndices de GIN son \u00edndices invertidos que son apropiados para los valores de datos que contienen m\u00faltiples  valores componentes, como matrices. Un \u00edndice invertido contiene una  entrada separada para cada valor de componente, y puede manejar  eficientemente las consultas que prueban la presencia de valores de  componentes espec\u00edficos.</p> <p>Al igual que GiST y SP-GiST, GIN puede soportar muchas  estrategias de indexaci\u00f3n definidas por el usuario diferentes, y los  operadores en particular con los que se puede utilizar un \u00edndice GIN  var\u00edan dependiendo de la estrategia de indexaci\u00f3n. Por ejemplo, la  distribuci\u00f3n est\u00e1ndar de PostgreSQL incluye una clase de operador GIN para arrays, que admite consultas indexadas utilizando estos operadores:</p> <pre><code>= &amp; &amp;\n</code></pre> <p>(V\u00e9ase la secci\u00f3n 9.19 para el significado de estos operadores.) Las clases de operador GIN incluidas en la distribuci\u00f3n est\u00e1ndar se documentan en el .1. Muchas otras clases de operador GIN est\u00e1n disponibles en el  <code>contrib</code>colecci\u00f3n o como proyectos separados. Para m\u00e1s informaci\u00f3n, v\u00e9ase el cap\u00edtulo 70.</p>"},{"location":"02.-El%20lenguaje%20SQL/08.-%C3%8Dndices/02.-Tipos%20de%20%C3%ADndices/06.-BRIN/","title":"06.-BRIN","text":"<p>Los \u00edndices BRIN (una abreviatura para Block Range INdexes) almacenan res\u00famenes sobre los valores almacenados en rangos de bloques f\u00edsicos  consecutivos de una tabla. Por lo tanto, son m\u00e1s eficaces para columnas  cuyos valores est\u00e1n bien relacionados con el orden f\u00edsico de las filas  de mesa. Al igual que GiST, SP-GiST y GIN, la BRIN puede soportar muchas estrategias de indexaci\u00f3n diferentes, y los operadores en particular  con los que se puede utilizar un \u00edndice BRIN var\u00edan dependiendo de la  estrategia de indexaci\u00f3n. Para los tipos de datos que tienen un orden de tipo lineal, los datos indexados corresponden a los valores m\u00ednimos y  m\u00e1ximos de los valores de la columna para cada rango de bloques. Esto es compatible con consultas indexadas utilizando estos operadores:</p> <pre><code>= = = = = =\n</code></pre> <p>Las clases de operador BRIN incluidas en la distribuci\u00f3n est\u00e1ndar se documentan en el .1. Para m\u00e1s informaci\u00f3n v\u00e9ase el cap\u00edtulo 71.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/05.-Parsers/","title":"05.-Parsers","text":"<p>Text search parsers are responsible for splitting raw document text into tokens and identifying each token's type, where the set of possible types is  defined by the parser itself. Note that a parser does not modify the  text at all \u2014 it simply identifies plausible word boundaries. Because of this limited scope, there is less need for application-specific custom  parsers than there is for custom dictionaries. At present PostgreSQL provides just one built-in parser, which has been found to be useful for a wide range of applications.</p> <p>The built-in parser is named <code>pg_catalog.default</code>. It recognizes 23 token types, shown in Table 12.1.</p> <p>Table 12.1. Default Parser's Token Types</p> Alias Description Example <code>asciiword</code> Word, all ASCII letters <code>elephant</code> <code>word</code> Word, all letters <code>ma\u00f1ana</code> <code>numword</code> Word, letters and digits <code>beta1</code> <code>asciihword</code> Hyphenated word, all ASCII <code>up-to-date</code> <code>hword</code> Hyphenated word, all letters <code>l\u00f3gico-matem\u00e1tica</code> <code>numhword</code> Hyphenated word, letters and digits <code>postgresql-beta1</code> <code>hword_asciipart</code> Hyphenated word part, all ASCII <code>postgresql</code> in the context <code>postgresql-beta1</code> <code>hword_part</code> Hyphenated word part, all letters <code>l\u00f3gico</code> or <code>matem\u00e1tica</code> in the context <code>l\u00f3gico-matem\u00e1tica</code> <code>hword_numpart</code> Hyphenated word part, letters and digits <code>beta1</code> in the context <code>postgresql-beta1</code> <code>email</code> Email address <code>foo@example.com</code> <code>protocol</code> Protocol head <code>http://</code> <code>url</code> URL <code>example.com/stuff/index.html</code> <code>host</code> Host <code>example.com</code> <code>url_path</code> URL path <code>/stuff/index.html</code>, in the context of a URL <code>file</code> File or path name <code>/usr/local/foo.txt</code>, if not within a URL <code>sfloat</code> Scientific notation <code>-1.234e56</code> <code>float</code> Decimal notation <code>-1.234</code> <code>int</code> Signed integer <code>-1234</code> <code>uint</code> Unsigned integer <code>1234</code> <code>version</code> Version number <code>8.3.0</code> <code>tag</code> XML tag <code>&lt;a href=\"dictionaries.html\"&gt;</code> <code>entity</code> XML entity <code>&amp;</code> <code>blank</code> Space symbols (any whitespace or punctuation not otherwise recognized)"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/05.-Parsers/#note","title":"Note","text":"<p>The parser's notion of a \u201cletter\u201d is determined by the database's locale setting, specifically <code>lc_ctype</code>. Words containing only the basic ASCII letters are reported as a  separate token type, since it is sometimes useful to distinguish them.  In most European languages, token types <code>word</code> and <code>asciiword</code> should be treated alike.</p> <p><code>email</code> does not support all valid email characters as defined by RFC 5322. Specifically, the only non-alphanumeric characters supported for email user names are period, dash, and underscore.</p> <p>It is possible for the parser to produce overlapping tokens from  the same piece of text. As an example, a hyphenated word will be  reported both as the entire word and as each component:</p> <pre><code>SELECT alias, description, token FROM ts_debug('foo-bar-beta1');\n      alias      |               description                |     token\n-----------------+------------------------------------------+---------------\n numhword        | Hyphenated word, letters and digits      | foo-bar-beta1\n hword_asciipart | Hyphenated word part, all ASCII          | foo\n blank           | Space symbols                            | -\n hword_asciipart | Hyphenated word part, all ASCII          | bar\n blank           | Space symbols                            | -\n hword_numpart   | Hyphenated word part, letters and digits | beta1\n</code></pre> <p>This behavior is desirable since it allows searches to work for  both the whole compound word and for components. Here is another  instructive example:</p> <pre><code>SELECT alias, description, token FROM ts_debug('http://example.com/stuff/index.html');\n  alias   |  description  |            token\n----------+---------------+------------------------------\n protocol | Protocol head | http://\n url      | URL           | example.com/stuff/index.html\n host     | Host          | example.com\n url_path | URL path      | /stuff/index.html\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/07.-Ejemplo%20de%20configuraci%C3%B3n/","title":"07.-Ejemplo de configuraci\u00f3n","text":"<p>Una configuraci\u00f3n de b\u00fasqueda de texto especifica todas las opciones necesarias para transformar un documento en un <code>tsvector</code>: el analizador de uso para romper el texto en tokens, y los diccionarios a utilizar para transformar cada token en una lexeme. Cada llamada de  <code>to_tsvector</code>o o  <code>to_tsquery</code>necesita una configuraci\u00f3n de b\u00fasqueda de texto para realizar su procesamiento. El par\u00e1metro de configuraci\u00f3n default.text.search.config especifica el nombre de la configuraci\u00f3n predeterminada, que es el  utilizado por las funciones de b\u00fasqueda de texto si se omite un  par\u00e1metro de configuraci\u00f3n expl\u00edcito. Se puede establecer. <code>postgresql.conf</code>, o establecido para una sesi\u00f3n individual utilizando la  <code>SET</code>comando.</p> <p>Existen varias configuraciones de b\u00fasqueda de texto predefinidas, y puede crear configuraciones personalizadas f\u00e1cilmente. Para facilitar  la gesti\u00f3n de los objetos de b\u00fasqueda de texto, un conjunto de  SQLlos comandos est\u00e1n disponibles, y hay varios comandos psql que muestran informaci\u00f3n sobre los objetos de b\u00fasqueda de texto (Secci\u00f3n 12.10).</p> <p>Como ejemplo crearemos una configuraci\u00f3n <code>pg</code>, comenzando por duplicar el incorporado  <code>english</code>configuraci\u00f3n:</p> <pre><code>CREATE TEXTO BEARCH CONFIGURATION public.pg (COPY = pg-catalog.english );\n</code></pre> <p>Usaremos una lista de sin\u00f3nimos espec\u00edfica de PostgreSQL y la almacenaremos en <code>$SHAREDIR/tsearch_data/pg_dict.syn</code>. El contenido del archivo se parece a:</p> <pre><code>postgres pg\npgsql pg\npostgresql pg\n</code></pre> <p>Definimos el diccionario sin\u00f3nimo como este:</p> <pre><code>CREATE TEXTO BEARCH DICTIONARY pg.dict (\n    TEMPLATE = sin\u00f3nimo,\n    SYNONYMS = pg.dict\n);\n</code></pre> <p>A continuaci\u00f3n registramos el diccionario de Ispell <code>english_ispell</code>, que tiene sus propios archivos de configuraci\u00f3n:</p> <pre><code>CREATE TEXTO BEARCH DICTIONARY englishispell (\n    TEMPLATE = ispell,\n    DictFile = ingl\u00e9s,\n    AffFile = english,\n    StopWords = english\n);\n</code></pre> <p>Ahora podemos configurar los mapeos para palabras en configuraci\u00f3n <code>pg</code>:</p> <pre><code>ALTER TEXTO BUSCA CONFIGURACION pg\n    ALTER MAPPING FOR asciiword, asciihword, hword.asciipart,\n                      palabra, hword, hword-part\n    CON pg.dict, english-ispell, english-stem;\n</code></pre> <p>Elegimos no indexar o buscar algunos tipos sic\u00falcones que la configuraci\u00f3n incorporada maneja:</p> <pre><code>ALTER TEXTO BUSCA CONFIGURACION pg\n    DROP MAPPING PARA Correo electr\u00f3nico, url, url-path, sfloat, flotar;\n</code></pre> <p>Ahora podemos probar nuestra configuraci\u00f3n:</p> <pre><code>SELECT * DESDE ts.debug(public.pg', '\nPostgreSQL, el altamente escalable, compatible con SQL, objeto-relacional de c\u00f3digo abierto\nsistema de gesti\u00f3n de bases de datos, ahora est\u00e1 siendo sometido a pruebas beta de la pr\u00f3xima\nversi\u00f3n de nuestro software.\n\");\n</code></pre> <p>El siguiente paso es establecer la sesi\u00f3n para utilizar la nueva configuraci\u00f3n, que fue creada en la  <code>public</code>esquema:</p> <pre><code>=-dF\n   Lista de configuraciones de b\u00fasqueda de texto\n Esquema . Nombre . Descripci\u00f3n\n------------------------------\n p\u00fablico.\n\nSET default.text.search.config = 'public.pg';\nSET\n\nSHOW default.text.search.config;\n default.text.search.config\n----------------------------\n public.pg\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/09.-Tipos%20de%20%C3%ADndice%20preferidos%20para%20la%20b%C3%BAsqueda%20de%20texto/","title":"09.-Tipos de \u00edndice preferidos para la b\u00fasqueda de texto","text":"<p>Hay dos tipos de \u00edndices que se pueden utilizar para acelerar las b\u00fasquedas de texto completo:  GINy GiST. Tenga en cuenta que los \u00edndices no son obligatorios para la b\u00fasqueda  completa de texto, pero en los casos en que una columna se busca de  forma regular, un \u00edndice suele ser deseable.</p> <p>Para crear tal \u00edndice, haga uno de:</p> <ul> <li><code>CREATE INDEX *</code>name<code>* ON *</code>table<code>* USING GIN (*</code>column<code>*);</code></li> </ul> <p>\u200b        Crea un \u00edndice GIN (Endice Invertido Generalizado) basado en. El  <code>column</code>debe ser de  <code>tsvector</code>tipo.      </p> <ul> <li><code>CREATE INDEX *</code>name<code>* ON *</code>table<code>* USING GIST (*</code>column<code>* [ { DEFAULT | tsvector_ops } (siglen = *</code>number<code>*) ] );</code></li> </ul> <p>\u200b        Crea un \u00edndice GiST (Search Tree Generalizado) basado en. El  <code>column</code>puede ser de  <code>tsvector</code>o o  <code>tsquery</code>tipo. Par\u00e1metro opcional del perro de fondo  <code>siglen</code>determina la longitud de la firma en bytes (ver abajo para m\u00e1s detalles).      </p> <p>Los \u00edndices GIN son el tipo de \u00edndice de b\u00fasqueda de texto  preferido. Como \u00edndices invertidos, contienen una entrada de \u00edndice para cada palabra (lexeme), con una lista comprimida de ubicaciones  coincidentes. Las b\u00fasquedas de palabras m\u00faltiples pueden encontrar la  primera coincidencia, luego utilizar el \u00edndice para eliminar las filas  que carecen de palabras adicionales. Los \u00edndices GIN almacenan s\u00f3lo las  palabras (lexemes) de  <code>tsvector</code>valores, y no sus etiquetas de peso. As\u00ed se necesita un nuevo chequeo de la fila de tablas cuando se utiliza una consulta que implica pesas.</p> <p>Un \u00edndice GiST es p\u00e9rdida, lo que significa que el \u00edndice podr\u00eda producir coincidencias falsas, y  es necesario comprobar la fila de tablas real para eliminar tales  coincidencias falsas. (PostgreSQL hace esto autom\u00e1ticamente cuando es necesario.) Los \u00edndices GiST son  p\u00e9rdida porque cada documento est\u00e1 representado en el \u00edndice por una  firma de longitud fija. La longitud de la firma en bytes est\u00e1  determinada por el valor del par\u00e1metro entero opcional <code>siglen</code>. La longitud de la firma por defecto (cuando  <code>siglen</code>no se especifica) es de 124 bytes, la longitud m\u00e1xima de la firma es de  2024 bytes. La firma se genera por hashing cada palabra en un solo bit  en una cadena de n-bit, con todos estos bits OR-ed togethers para  producir una firma de documento n-bit. Cuando dos palabras se haya  puesto en la misma posici\u00f3n habr\u00e1 una coincidencia falsa. Si todas las  palabras en la consulta tienen coincidencias (reales o falsas), entonces la fila de la tabla debe ser recuperada para ver si el partido es  correcto. Las firmas m\u00e1s largas conducen a una b\u00fasqueda m\u00e1s precisa  (escaneando una fracci\u00f3n menor del \u00edndice y menos p\u00e1ginas de montos), al costo de un \u00edndice m\u00e1s grande.</p> <p>Un \u00edndice GiST puede estar cubriendo, es decir, utilizar el  <code>INCLUDE</code>cl\u00e1usula. Las columnas incluidas pueden tener tipos de datos sin ninguna clase de operador GiST. Los atributos incluidos se almacenar\u00e1n sin comprimir.</p> <p>La p\u00e9rdida causa degradaci\u00f3n del rendimiento debido a innecesarios  de registros de tablas que resultan ser falsos partidos. Dado que el  acceso aleatorio a los registros de tablas es lento, esto limita la  utilidad de los \u00edndices GiST. La probabilidad de coincidencias falsas  depende de varios factores, en particular el n\u00famero de palabras \u00fanicas,  por lo que se recomienda utilizar diccionarios para reducir este n\u00famero.</p> <p>Tenga en cuenta que  GINEl tiempo de construcci\u00f3n de \u00edndices a menudo se puede mejorar aumentando el mantenimiento.  GiSTEl tiempo de construcci\u00f3n de \u00edndices no es sensible a ese par\u00e1metro.</p> <p>La partici\u00f3n de grandes colecciones y el uso adecuado de los  \u00edndices GIN y GiST permite la implementaci\u00f3n de b\u00fasquedas muy r\u00e1pidas  con actualizaci\u00f3n en l\u00ednea. La partici\u00f3n se puede hacer a nivel de base  de datos utilizando la herencia de la tabla, o distribuyendo documentos a trav\u00e9s de servidores y recogiendo resultados externos de b\u00fasqueda, por  ejemplo, a trav\u00e9s del acceso a Datos Extranjeros. Esto \u00faltimo es posible porque las funciones de clasificaci\u00f3n utilizan s\u00f3lo informaci\u00f3n local.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/10.-Apoyo%20psql/","title":"10.-Apoyo psql","text":"<p>Information about text search configuration objects can be obtained in psql using a set of commands:</p> <pre><code>\\dF{d,p,t}[+] [PATTERN]\n</code></pre> <p>An optional <code>+</code> produces more details.</p> <p>The optional parameter <code>PATTERN</code> can be the name of a text search object, optionally schema-qualified. If <code>PATTERN</code> is omitted then information about all visible objects will be displayed. <code>PATTERN</code> can be a regular expression and can provide separate patterns for the schema and object names. The following examples illustrate this:</p> <pre><code>=&gt; \\dF *fulltext*\n       List of text search configurations\n Schema |  Name        | Description\n--------+--------------+-------------\n public | fulltext_cfg |\n=&gt; \\dF *.fulltext*\n       List of text search configurations\n Schema   |  Name        | Description\n----------+----------------------------\n fulltext | fulltext_cfg |\n public   | fulltext_cfg |\n</code></pre> <p>The available commands are:</p> <ul> <li><code>\\dF[+] [PATTERN]</code></li> </ul> <p>\u200b        List text search configurations (add <code>+</code> for more detail).        <code>=&gt; \\dF russian            List of text search configurations   Schema   |  Name   |            Description ------------+---------+------------------------------------ pg_catalog | russian | configuration for russian language =&gt; \\dF+ russian Text search configuration \"pg_catalog.russian\" Parser: \"pg_catalog.default\"      Token      | Dictionaries -----------------+-------------- asciihword      | english_stem asciiword       | english_stem email           | simple file            | simple float           | simple host            | simple hword           | russian_stem hword_asciipart | english_stem hword_numpart   | simple hword_part      | russian_stem int             | simple numhword        | simple numword         | simple sfloat          | simple uint            | simple url             | simple url_path        | simple version         | simple word            | russian_stem</code> </p> <ul> <li><code>\\dFd[+] [PATTERN]</code></li> </ul> <p>\u200b        List text search dictionaries (add <code>+</code> for more detail).        <code>=&gt; \\dFd                             List of text search dictionaries   Schema   |      Name       |                        Description ------------+-----------------+----------------------------------------------------------- pg_catalog | arabic_stem     | snowball stemmer for arabic language pg_catalog | armenian_stem   | snowball stemmer for armenian language pg_catalog | basque_stem     | snowball stemmer for basque language pg_catalog | catalan_stem    | snowball stemmer for catalan language pg_catalog | danish_stem     | snowball stemmer for danish language pg_catalog | dutch_stem      | snowball stemmer for dutch language pg_catalog | english_stem    | snowball stemmer for english language pg_catalog | finnish_stem    | snowball stemmer for finnish language pg_catalog | french_stem     | snowball stemmer for french language pg_catalog | german_stem     | snowball stemmer for german language pg_catalog | greek_stem      | snowball stemmer for greek language pg_catalog | hindi_stem      | snowball stemmer for hindi language pg_catalog | hungarian_stem  | snowball stemmer for hungarian language pg_catalog | indonesian_stem | snowball stemmer for indonesian language pg_catalog | irish_stem      | snowball stemmer for irish language pg_catalog | italian_stem    | snowball stemmer for italian language pg_catalog | lithuanian_stem | snowball stemmer for lithuanian language pg_catalog | nepali_stem     | snowball stemmer for nepali language pg_catalog | norwegian_stem  | snowball stemmer for norwegian language pg_catalog | portuguese_stem | snowball stemmer for portuguese language pg_catalog | romanian_stem   | snowball stemmer for romanian language pg_catalog | russian_stem    | snowball stemmer for russian language pg_catalog | serbian_stem    | snowball stemmer for serbian language pg_catalog | simple          | simple dictionary: just lower case and check for stopword pg_catalog | spanish_stem    | snowball stemmer for spanish language pg_catalog | swedish_stem    | snowball stemmer for swedish language pg_catalog | tamil_stem      | snowball stemmer for tamil language pg_catalog | turkish_stem    | snowball stemmer for turkish language pg_catalog | yiddish_stem    | snowball stemmer for yiddish language</code> </p> <ul> <li><code>\\dFp[+] [PATTERN]</code></li> </ul> <p>\u200b        List text search parsers (add <code>+</code> for more detail).        <code>=&gt; \\dFp        List of text search parsers   Schema   |  Name   |     Description ------------+---------+--------------------- pg_catalog | default | default word parser =&gt; \\dFp+    Text search parser \"pg_catalog.default\"     Method      |    Function    | Description -----------------+----------------+------------- Start parse     | prsd_start     | Get next token  | prsd_nexttoken | End parse       | prsd_end       | Get headline    | prsd_headline  | Get token types | prsd_lextype   |         Token types for parser \"pg_catalog.default\"   Token name    |               Description -----------------+------------------------------------------ asciihword      | Hyphenated word, all ASCII asciiword       | Word, all ASCII blank           | Space symbols email           | Email address entity          | XML entity file            | File or path name float           | Decimal notation host            | Host hword           | Hyphenated word, all letters hword_asciipart | Hyphenated word part, all ASCII hword_numpart   | Hyphenated word part, letters and digits hword_part      | Hyphenated word part, all letters int             | Signed integer numhword        | Hyphenated word, letters and digits numword         | Word, letters and digits protocol        | Protocol head sfloat          | Scientific notation tag             | XML tag uint            | Unsigned integer url             | URL url_path        | URL path version         | Version number word            | Word, all letters (23 rows)</code> </p> <ul> <li><code>\\dFt[+] [PATTERN]</code></li> </ul> <p>\u200b        List text search templates (add <code>+</code> for more detail).        <code>=&gt; \\dFt                           List of text search templates   Schema   |   Name    |                        Description ------------+-----------+----------------------------------------------------------- pg_catalog | ispell    | ispell dictionary pg_catalog | simple    | simple dictionary: just lower case and check for stopword pg_catalog | snowball  | snowball stemmer pg_catalog | synonym   | synonym dictionary: replace word by its synonym pg_catalog | thesaurus | thesaurus dictionary: phrase by phrase substitution</code> </p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/11.-Limitaciones/","title":"11.-Limitaciones","text":"<p>The current limitations of PostgreSQL's text search features are:</p> <ul> <li>The length of each lexeme must be less than 2 kilobytes</li> <li>The length of a <code>tsvector</code> (lexemes + positions) must be less than 1 megabyte</li> <li>The number of lexemes must be less than 264</li> <li>Position values in <code>tsvector</code> must be greater than 0 and no more than 16,383</li> <li>The match distance in a <code>&lt;*</code>N<code>*&gt;</code> (FOLLOWED BY) <code>tsquery</code> operator cannot be more than 16,384</li> <li>No more than 256 positions per lexeme</li> <li>The number of nodes (lexemes + operators) in a <code>tsquery</code> must be less than 32,768</li> </ul> <p>For comparison, the PostgreSQL 8.1 documentation contained 10,441 unique words, a total of 335,420 words, and the most frequent word \u201cpostgresql\u201d was mentioned 6,127 times in 655 documents.</p> <p>Another example \u2014 the PostgreSQL mailing list archives contained 910,989 unique words with 57,491,343 lexemes in 461,020 messages.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/01.-Introducci%C3%B3n/","title":"Index","text":"<p>B\u00fasqueda de texto completo (o s\u00f3lo b\u00fasqueda de texto) proporciona la capacidad de identificar documentos de lenguaje natural que satisfagan una consulta, y opcionalmente para ordenarlos por relevancia para la consulta. El  tipo de b\u00fasqueda m\u00e1s com\u00fan es encontrar todos los documentos que  contengan los t\u00e9rminos de consulta dados y devolverlos en orden de su similitud con la consulta. Nociones de  <code>query</code>y  <code>similarity</code>son muy flexibles y dependen de la aplicaci\u00f3n espec\u00edfica. La b\u00fasqueda m\u00e1s simple se considera  <code>query</code>como un conjunto de palabras y  como la frecuencia de las palabras de consulta en el documento.</p> <p>Los operadores de b\u00fasqueda textual han existido en bases de datos durante a\u00f1os. PostgreSQL tiene <code>~</code>, <code>~*</code>, <code>LIKE</code>, y  <code>ILIKE</code>operadores para tipos de datos textuales, pero carecen de muchas propiedades  esenciales requeridas por los sistemas de informaci\u00f3n modernos:</p> <ul> <li>No hay apoyo idiom\u00e1tico, ni siquiera para el ingl\u00e9s. Las  expresiones regulares no son suficientes porque no pueden manejar  f\u00e1cilmente las palabras derivadas, por ejemplo,  <code>satisfies</code>y <code>satisfy</code>. Puedes perderte documentos que contengan <code>satisfies</code>, aunque probablemente te gustar\u00eda encontrarlos cuando buscas <code>satisfy</code>. Es posible utilizar  <code>OR</code>para buscar m\u00faltiples formas derivadas, pero esto es tedioso y propenso a  errores (alg\u00e1\u00f1alas pueden tener varios miles de derivados).</li> <li>No proporcionan ning\u00fan pedido (ranking) de los resultados de  b\u00fasqueda, lo que los hace ineficaces cuando se encuentran miles de  documentos coincidetivos.</li> <li>Tienden a ser lentos porque no hay soporte de \u00edndice, por lo que deben procesar todos los documentos para cada b\u00fasqueda.</li> </ul> <p>La indexaci\u00f3n completa de texto permite preprocesar los documentos y un \u00edndice guardado para la b\u00fasqueda r\u00e1pida posterior. El preprocesamiento incluye:</p> <ul> <li>Paro de documentos en *fichas. Es \u00fatil identificar varias clases de fichas, por ejemplo, n\u00fameros,  palabras, palabras complejas, direcciones de correo electr\u00f3nico, para  que puedan procesarse de manera diferente. En principio, las clases  sitbaizadas dependen de la aplicaci\u00f3n espec\u00edfica, pero para la mayor\u00eda  de los prop\u00f3sitos es adecuado utilizar un conjunto de clases  predefinidos. PostgreSQL utiliza un analizador* para realizar este paso. Se proporciona un analizador est\u00e1ndar y se  pueden crear parsers personalizados para necesidades espec\u00edficas.</li> <li>Conversi\u00f3n de fichas en *lexemes. Una lexeme es una cuerda, al igual que una ficha, pero se ha normalizado de modo que se hacen diferentes formas de la misma palabra. Por  ejemplo, la normalizaci\u00f3n casi siempre incluye la doblaje de letras  may\u00fasculas a la min\u00fascula, y a menudo implica la eliminaci\u00f3n de sufijos  (como  <code>s</code>o o  <code>es</code>en ingl\u00e9s). Esto permite que las b\u00fasquedas encuentren formas variantes de  la misma palabra, sin entrar tediosamente todas las variantes posibles.  Adem\u00e1s, este paso t\u00edpicamente elimina las palabras de stop, que son palabras que son tan comunes que son in\u00fatiles para la b\u00fasqueda. (En resumen, entonces, los tokens son fragmentos crudos del texto del  documento, mientras que las lexemes son palabras que se consideran  \u00fatiles para indexar y buscar.) PostgreSQL utiliza diccionarios* para realizar este paso. Se proporcionan varios diccionarios est\u00e1ndar y se pueden crear los personalizados para necesidades espec\u00edficas.</li> <li>Almacenar documentos preprocesados optimizados para la b\u00fasqueda. Por ejemplo, cada documento puede ser representado como una variedad  ordenada de lexemes normalizados. Junto con los lexemes a menudo es  deseable almacenar informaci\u00f3n posicional para su ranking de proximidad, de modo que un documento que contiene una denseregi\u00f3n m\u00e1s  de palabras de consulta se asigna un rango m\u00e1s alto que uno con palabras de consulta dispersas.</li> </ul> <p>Los diccionarios permiten un control fino sobre c\u00f3mo se normalizan las fichas. Con los diccionarios adecuados, puede:</p> <ul> <li>Definir palabras de alto que no deben ser indexadas.</li> <li>Mapa sin\u00f3nimo de una sola palabra usando Ispell.</li> <li>Mapear frases a una sola palabra usando un tesauro.</li> <li>Mapear diferentes variaciones de una palabra a una forma can\u00f3nica usando un diccionario de Ispell.</li> <li>Mapa diferentes variaciones de una palabra a una forma can\u00f3nica usando reglas de desbaratero de Snowball.</li> </ul> <p>Tipo de datos  <code>tsvector</code>se proporciona para el almacenamiento de documentos preprocesados, junto con un tipo  <code>tsquery</code>para la representaci\u00f3n de las consultas procesadas (11). Hay muchas funciones y operadores disponibles para estos tipos de datos (Secci\u00f3n 9.13), el m\u00e1s importante de los cuales es el operador de la coincidencia <code>@@</code>, que presentamos en la Secci\u00f3n 12.1.2. Las b\u00fasquedas de texto completo se pueden acelerar mediante \u00edndices (Secci\u00f3n 12.9).</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/01.-Introducci%C3%B3n/01.-Qu%C3%A9%20es%20un%20documento%3F/","title":"01.-Qu\u00e9 es un documento?","text":"<p>Un documento  es la unidad de b\u00fasqueda en un sistema completo de b\u00fasqueda de texto;  por ejemplo, un art\u00edculo de revista o mensaje de correo electr\u00f3nico. El  motor de b\u00fasqueda de texto debe ser capaz de analizar documentos y  almacenar asociaciones de lexemes (palabras clave) con su documento  padre. Posteriormente, estas asociaciones se utilizan para buscar  documentos que contengan palabras de consulta.</p> <p>Para las b\u00fasquedas dentro de PostgreSQL, un documento es normalmente un campo textual dentro de una fila de una  tabla de bases de datos, o posiblemente una combinaci\u00f3n (concatenaci\u00f3n)  de tales campos, tal vez almacenado en varias tablas o obtenido  din\u00e1micamente. En otras palabras, un documento se puede construir desde  diferentes partes para indexar y podr\u00eda no ser almacenado en ninguna  parte en su conjunto. Por ejemplo:</p> <pre><code>T\u00edtulo de SELECT \" \" \" \" \" \" \" \" \" \" - resumen \" \" . . . . . . . . . . . . . . . . . . . . . . . . . . . . \nDe los mensajes\nA mediados de 12;\n\nSELECT m.title \" ' ' . m.author \" . m.abstract \" ' . d.body AS Document\nDe los mensajes m, documentos d\nDONDE m.mid = d.did Y m.mid = 12;\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/01.-Introducci%C3%B3n/01.-Qu%C3%A9%20es%20un%20documento%3F/#nota","title":"Nota","text":"<p>En realidad, en estas consultas de ejemplo,  <code>coalesce</code>debe utilizarse para evitar una sola  <code>NULL</code>atributo de causar a  <code>NULL</code>resultado para todo el documento.</p> <p>Otra posibilidad es almacenar los documentos como simples  archivos de texto en el sistema de archivos. En este caso, la base de  datos se puede utilizar para almacenar el \u00edndice de texto completo y  para ejecutar b\u00fasquedas, y se puede utilizar alg\u00fan identificador \u00fanico  para recuperar el documento del sistema de archivos. Sin embargo,  recuperar archivos desde fuera de la base de datos requiere permisos de  superusuaci\u00f3n o soporte de funci\u00f3n especial, por lo que esto suele ser  menos conveniente que mantener todos los datos dentro de PostgreSQL. Adem\u00e1s, mantener todo dentro de la base de datos permite un f\u00e1cil  acceso a los metadatos de documentos para ayudar en la indexaci\u00f3n y la  visualizaci\u00f3n.</p> <p>A efectos de b\u00fasqueda de texto, cada documento debe reducirse a la preprocesada  <code>tsvector</code>formato. La b\u00fasqueda y el ranking se realizan enteramente en el  <code>tsvector</code>representaci\u00f3n de un documento, el texto original s\u00f3lo tiene que ser recuperado cuando el documento haya sido seleccionado para su visualizaci\u00f3n en un  usuario. Por lo tanto, a menudo hablamos de la  <code>tsvector</code>Como el documento, pero por supuesto es s\u00f3lo una representaci\u00f3n compacta del documento completo.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/01.-Introducci%C3%B3n/02.-A%20juego%20de%20texto%20b%C3%A1sico/","title":"02.-A juego de texto b\u00e1sico","text":"<p>La b\u00fasqueda completa de texto en PostgreSQL se basa en el operador de partido <code>@@</code>, que devuelve  <code>true</code>si a  <code>tsvector</code>(documento) coincide con un  <code>tsquery</code>(quer\u00eda). No importa qu\u00e9 tipo de datos se escriba primero:</p> <pre><code>SELECT 'un gato gordo se sent\u00f3 en una estera y comi\u00f3 una rata gorda'::tsvector \"cat &amp; rata\"::tsquery;\n ?column?\n---------\n t\n\nSELECT 'grasa y vaca'::squebrio \"un gato gordo se sent\u00f3 en una estera y comi\u00f3 una rata gorda\"::tsvector;\n ?column?\n---------\n f\n</code></pre> <p>Como sugiere el ejemplo anterior, a  <code>tsquery</code>no es s\u00f3lo texto crudo, como mucho  <code>tsvector</code>S\u00ed, lo es. A  <code>tsquery</code>contiene t\u00e9rminos de b\u00fasqueda, que deben ser lexemes ya normalizados, y pueden  combinar m\u00faltiples t\u00e9rminos usando AND, OR, NOT y SEGRESADO BY  operadores. (Para detalles de la sintaxis v\u00e9ase la secci\u00f3n 8.11.2) Hay funciones <code>to_tsquery</code>, <code>plainto_tsquery</code>, y  <code>phraseto_tsquery</code>que son \u00fatiles para convertir el texto escrito por el usuario en un <code>tsquery</code>, principalmente normalizando las palabras que aparecen en el texto. Del mismo modo,  <code>to_tsvector</code>se utiliza para analizar y normalizar una cadena de documentos. As\u00ed que en la pr\u00e1ctica una coincidencia de b\u00fasqueda de texto se ver\u00eda m\u00e1s como  esta:</p> <pre><code>SELECT to-tsvector ('los gatos gordos se comieron ratas gordas')\n ?column?\n---------\n t\n</code></pre> <p>Observe que este partido no tendr\u00eda \u00e9xito si se escribiera como</p> <pre><code>SELECT 'gordos los gatos se comieron ratas gordas'::tsvector a to-tsquery('gra &amp; rata');\n ?column?\n---------\n f\n</code></pre> <p>desde aqu\u00ed sin normalizaci\u00f3n de la palabra  <code>rats</code>se producir\u00e1. Los elementos de una  <code>tsvector</code>son lexemes, que se asumen ya normalizados, por lo que  <code>rats</code>no coincide <code>rat</code>.</p> <p>El  <code>@@</code>operadora tambi\u00e9n soporta  <code>text</code>entrada, permitiendo la conversi\u00f3n expl\u00edcita de una cadena de texto en  <code>tsvector</code>o o  <code>tsquery</code>para saltarse en casos simples. Las variantes disponibles son:</p> <pre><code>tsvector y tsquery\ntsquery . tsvector\ntexto de la tsquery\ntexto . texto\n</code></pre> <p>Los dos primeros de estos que ya vimos. La forma    <code>text``@@``tsquery</code>es equivalente a <code>to_tsvector(x) @@ y</code>. La forma    <code>text``@@``text</code>es equivalente a <code>to_tsvector(x) @@ plainto_tsquery(y)</code>.</p> <p>Dentro de un <code>tsquery</code>, el  <code>&amp;</code>(AND) El operador especifica que ambos argumentos deben aparecer en el  documento para tener una coincidencia. Del mismo modo, la  <code>|</code>(OR) el operador especifica que al menos uno de sus argumentos debe aparecer, mientras que el  <code>!</code>(NOTI) el operador especifica que su argumento no debe aparecer para tener una coincidencia. Por ejemplo, la consulta  <code>fat &amp; ! rat</code>coincidencias documentos que contienen  <code>fat</code>pero no <code>rat</code>.</p> <p>Buscar frases es posible con la ayuda de la  <code>&lt;-&gt;</code>(FOLLOWED BY)  <code>tsquery</code>operador, que coincide s\u00f3lo si sus argumentos tienen coincidencias que son adyacentes y en el orden dado. Por ejemplo:</p> <pre><code>SELECT to-tsvector ('erro fatal') . to-tsquery('fatal error');\n ?column?\n---------\n t\n\nSELECT to-tsvector ('error no es fatal') . to-tsquery (error de .---o');\n ?column?\n---------\n f\n</code></pre> <p>Hay una versi\u00f3n m\u00e1s general del operador de SEGparado BY con el formulario <code>&lt;*</code>N<code>*&gt;</code>, d\u00f3nde  <code>N</code>es un entero que representa la diferencia entre las posiciones de los lexemes a juego.  <code>&lt;1&gt;</code>es la misma que <code>&lt;-&gt;</code>, mientras que  <code>&lt;2&gt;</code>permite exactamente que aparezca entre otros lexeme entre los partidos, y as\u00ed es. El  <code>phraseto_tsquery</code>funci\u00f3n hace uso de este operador para construir un  <code>tsquery</code>que puede coincidir con una frase de varias palabras cuando algunas de las palabras son palabras paradas. Por ejemplo:</p> <pre><code>SELECT phraseto.tsquery (\"cats comieron ratas\";\n       fraseto.tsquery\n---------------------------------------------\n \"gato\" \"todo\" \"trat\"\n\nSELECT phraseto.tsquery (\"los gatos se comieron las ratas\";\n       fraseto.tsquery\n---------------------------------------------\n 'gato' \"todo\" \"trat\"\n</code></pre> <p>Un caso especial que a veces es \u00fatil es que  <code>&lt;0&gt;</code>se puede utilizar para requerir que dos patrones coin\u00e1ban la misma palabra.</p> <p>Las paparentas se pueden utilizar para controlar la anidaci\u00f3n de la  <code>tsquery</code>operadores. Sin par\u00e9ntesis,  <code>|</code>se une menos firmemente, entonces <code>&amp;</code>, entonces <code>&lt;-&gt;</code>, y  <code>!</code>muy apretado.</p> <p>Vale la pena notar que los operadores AND/OR/NOT significan algo  sutilmente diferente cuando est\u00e1n dentro de los argumentos de un  operador de SEGRESADO POR que cuando no lo son, porque dentro de la  posici\u00f3n exacta de la coincidencia es significativa. Por ejemplo,  normalmente  <code>!x</code>coincide \u00fanicamente documentos que no contienen  <code>x</code>en cualquier lugar. Pero  <code>!x &lt;-&gt; y</code>partidos  <code>y</code>si no es inmediatamente despu\u00e9s de un <code>x</code>; ocurrencia de  <code>x</code>En otras partes del documento no impide un partido. Otro ejemplo es que  <code>x &amp; y</code>normalmente s\u00f3lo requiere que  <code>x</code>y  <code>y</code>ambos aparecen en alg\u00fan lugar del documento, pero  <code>(x &amp; y) &lt;-&gt; z</code>requiere  <code>x</code>y  <code>y</code>para que coince en el mismo lugar, inmediatamente antes de un <code>z</code>. As\u00ed esta consulta se comporta de manera diferente a <code>x &lt;-&gt; z &amp; y &lt;-&gt; z</code>, que se igualar\u00e1 con un documento que contiene dos secuencias separadas  <code>x z</code>y <code>y z</code>. (Esta consulta espec\u00edfica es in\u00fatil como est\u00e1 escrita, desde  <code>x</code>y  <code>y</code>No pod\u00eda coincidir en el mismo lugar; pero con situaciones m\u00e1s complejas  como los patrones de prefijo-match, una consulta de esta forma podr\u00eda  ser \u00fatil.)</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/01.-Introducci%C3%B3n/03.-Configuraciones/","title":"03.-Configuraciones","text":"<p>Los anteriores son todos ejemplos simples de b\u00fasqueda de texto. Como  se mencion\u00f3 anteriormente, la funcionalidad de b\u00fasqueda completa de  texto incluye la capacidad de hacer muchas m\u00e1s cosas: saltar indexar  ciertas palabras (parada de palabras), procesar sin\u00f3nimos, y utilizar  sofisticados an\u00e1lisis, por ejemplo, analizar en base a algo m\u00e1s que el  espacio blanco. Esta funcionalidad se controla con configuraciones de b\u00fasqueda de texto. PostgreSQL viene con configuraciones predefinidas para muchos idiomas, y puede crear f\u00e1cilmente sus propias configuraciones. (psql 's  <code>\\dF</code>el comando muestra todas las configuraciones disponibles.)</p> <p>Durante la instalaci\u00f3n se selecciona una configuraci\u00f3n apropiada y predeterminado.text.search.config se establece en consecuencia en <code>postgresql.conf</code>. Si est\u00e1 utilizando la misma configuraci\u00f3n de b\u00fasqueda de texto para todo el cl\u00faster, puede utilizar el valor en <code>postgresql.conf</code>. Para utilizar diferentes configuraciones a trav\u00e9s del cl\u00faster pero la  misma configuraci\u00f3n dentro de cualquier base de datos, utilice <code>ALTER DATABASE ... SET</code>. De lo contrario, puedes establecer  <code>default_text_search_config</code>en cada sesi\u00f3n.</p> <p>Cada funci\u00f3n de b\u00fasqueda de texto que depende de una configuraci\u00f3n tiene un opcional  <code>regconfig</code>argumentar, para que la configuraci\u00f3n a utilizar pueda especificarse expl\u00edcitamente.  <code>default_text_search_config</code>se utiliza s\u00f3lo cuando se omite este argumento.</p> <p>Para que sea m\u00e1s f\u00e1cil construir configuraciones de b\u00fasqueda de  texto personalizadas, se construye una configuraci\u00f3n a partir de objetos de base de datos m\u00e1s simples. La instalaci\u00f3n de b\u00fasqueda de texto de PostgreSQL proporciona cuatro tipos de objetos de base de datos relacionados con la configuraci\u00f3n:</p> <ul> <li>Los parsers de b\u00fasqueda de texto romper los documentos en fichas y clasifican cada ficha (por ejemplo, como palabras o n\u00fameros).</li> <li>Diccionarios de b\u00fasqueda de texto convierten tokens en forma normalizada y rechazan las palabras de stop.</li> <li>Las plantillas de b\u00fasqueda de texto proporcionan las funciones diccionarios subyacentes. (Un diccionario  simplemente especifica una plantilla y un conjunto de par\u00e1metros para la plantilla.)</li> <li>Las configuraciones de b\u00fasqueda de texto seleccionan un analizador y un conjunto de diccionarios para normalizar los tokens producidos por el analizador.</li> </ul> <p>Los analizadores y plantillas de b\u00fasqueda de texto se construyen a partir de funciones C de bajo nivel; por lo tanto, requiere la  capacidad de programaci\u00f3n de C para desarrollar otras nuevas, y  privilegios de superusuario para instalar uno en una base de datos. (Hay ejemplos de pars y plantillas adicionales en el  <code>contrib/</code>zona de la distribuci\u00f3n PostgreSQL.) Dado que los diccionarios y configuraciones simplemente parametrizan y  conectan algunos parsers y plantillas subyacentes, no se necesita ning\u00fan privilegio especial para crear un nuevo diccionario o configuraci\u00f3n.  Ejemplos de la creaci\u00f3n de diccionarios y configuraciones personalizadas aparecen m\u00e1s adelante en este cap\u00edtulo.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/02.-Tablas%20e%20%C3%ADndices/","title":"Index","text":"<p>Los ejemplos de la secci\u00f3n anterior ilustraron la correspondencia  completa de texto utilizando simples cadenas constantes. Esta secci\u00f3n  muestra c\u00f3mo buscar los datos de la tabla, opcionalmente usando \u00edndices.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/02.-Tablas%20e%20%C3%ADndices/01.-Buscando%20una%20mesa/","title":"01.-Buscando una mesa","text":"<p>Es posible hacer una b\u00fasqueda de texto completo sin un \u00edndice. Una simple consulta para imprimir el  <code>title</code>de cada fila que contiene la palabra  <code>friend</code>en su  <code>body</code>el campo es:</p> <pre><code>T\u00edtulo SELECT\nDESDE pgweb\nD\u00f3nde to-tsvector ('english', body) . to-tsquery ('english', 'amigo');\n</code></pre> <p>Esto tambi\u00e9n encontrar\u00e1 palabras relacionadas tales como  <code>friends</code>y <code>friendly</code>, ya que todos estos se reducen a la misma lexeme normalizada.</p> <p>La consulta anterior especifica que la  <code>english</code>La configuraci\u00f3n se debe utilizar para analizar y normalizar las cuerdas.  Alternativamente podr\u00edamos omitir los par\u00e1metros de configuraci\u00f3n:</p> <pre><code>T\u00edtulo SELECT\nDESDE pgweb\nD\u00f3nde a-tsvector (cuerpo) to-tsquery('amio');\n</code></pre> <p>Esta consulta usar\u00e1 la configuraci\u00f3n establecida por default.text.search.config.</p> <p>Un ejemplo m\u00e1s complejo es seleccionar los diez documentos m\u00e1s recientes que contienen  <code>create</code>y  <code>table</code>en el  <code>title</code>o o <code>body</code>:</p> <pre><code>T\u00edtulo SELECT\nDESDE pgweb\nD\u00f3nde apuestasvectora (t\u00edtulo \" '\"-organismo) \" to-tsquery('create &amp; table\")\nORDEDER POR \u00faltimo.mod.de DESC\nMEUMIT 10;\n</code></pre> <p>Para la claridad omitimos el  <code>coalesce</code>llamadas de funci\u00f3n que ser\u00edan necesarias para encontrar filas que contengan  <code>NULL</code>en uno de los dos campos.</p> <p>Aunque estas consultas funcionar\u00e1n sin un \u00edndice, la mayor\u00eda de  las aplicaciones encontrar\u00e1n este enfoque demasiado lento, excepto  quiz\u00e1s para b\u00fasquedas puntuales de ad-hoc. El uso pr\u00e1ctico de la  b\u00fasqueda de texto generalmente requiere crear un \u00edndice.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/02.-Tablas%20e%20%C3%ADndices/02.-Creaci%C3%B3n%20de%20%C3%ADndices/","title":"02.-Creaci\u00f3n de \u00edndices","text":"<p>Podemos crear un  GIN\u00edndice (Secci\u00f3n 12.9) para acelerar las b\u00fasquedas de texto:</p> <pre><code>CREATE INDEX pgweb.idx ON pgweb USING GIN (to-tsvector ('english', body));\n</code></pre> <p>Observe que la versi\u00f3n de 2 agumentos de  <code>to_tsvector</code>se usa. S\u00f3lo las funciones de b\u00fasqueda de texto que especifiquen un nombre de configuraci\u00f3n pueden ser usadas en \u00edndices de expresi\u00f3n (Secci\u00f3n 11.7). Esto se debe a que el contenido del \u00edndice no debe verse afectado por default.text.search.config. Si se vieran afectados, el contenido del \u00edndice podr\u00eda ser inconsistente porque diferentes entradas podr\u00edan contener <code>tsvector</code>que se crearon con diferentes configuraciones de b\u00fasqueda de texto, y no  habr\u00eda manera de adivinar cu\u00e1l era cu\u00e1l. Ser\u00eda imposible volcar y  restaurar un \u00edndice de este tipo correctamente.</p> <p>Porque la versi\u00f3n de dos engus de  <code>to_tsvector</code>se utiliz\u00f3 en el \u00edndice anterior, s\u00f3lo una referencia de consulta que utiliza la versi\u00f3n de 2 agumentos de  <code>to_tsvector</code>con el mismo nombre de configuraci\u00f3n se utilizar\u00e1 ese \u00edndice. Es decir,  <code>WHERE to_tsvector('english', body) @@ 'a &amp; b'</code>puede utilizar el \u00edndice, pero  <code>WHERE to_tsvector(body) @@ 'a &amp; b'</code>No puedo. Esto asegura que un \u00edndice se utilizar\u00e1 s\u00f3lo con la misma configuraci\u00f3n utilizada para crear las entradas de \u00edndice.</p> <p>Es posible configurar \u00edndices de expresi\u00f3n m\u00e1s complejos en los  que el nombre de configuraci\u00f3n se especifica por otra columna, por  ejemplo:</p> <pre><code>CREATE INDEX pgweb.idx ON pgweb USING GIN (to-tsvector(config-name, body));\n</code></pre> <p>d\u00f3nde  <code>config_name</code>es una columna en el  <code>pgweb</code>mesa. Esto permite configuraciones mixtas en el mismo \u00edndice mientras se  registraba qu\u00e9 configuraci\u00f3n se usaba para cada entrada de \u00edndice. Esto  ser\u00eda \u00fatil, por ejemplo, si la colecci\u00f3n de documentos contuviera  documentos en diferentes idiomas. Una vez m\u00e1s, las consultas que se  pretenden usar el \u00edndice deben ser configuradas para que coin figuren,  por ejemplo, <code>WHERE to_tsvector(config_name, body) @@ 'a &amp; b'</code>.</p> <p>Los \u00edndices pueden incluso concatenar columnas:</p> <pre><code>CREATE INDEX pgweb.idx ON pgweb USING GIN (to-tsvector (-t-tvel', title . '' .\n</code></pre> <p>Otro enfoque es crear un  <code>tsvector</code>columna para mantener la salida de <code>to_tsvector</code>. Para mantener esta columna autom\u00e1ticamente actualizada con sus datos de origen, utilice una columna generada almacenada. Este ejemplo es una  concatenaci\u00f3n de  <code>title</code>y <code>body</code>, el uso de  <code>coalesce</code>para garantizar que un campo se siga indexado cuando el otro est\u00e9 <code>NULL</code>:</p> <pre><code>ALTER TABLE pgweb\n    ADD COLUMN textsearchable.index.col tsvector\n               GENERAYS ALWAYS AS (to-tsvector (\"english\", coalesce (t\u00edtulo, '') \"----Culsodi\u00f3 (-relocomado;)\n</code></pre> <p>Entonces creamos un  GIN\u00edndice para acelerar la b\u00fasqueda:</p> <pre><code>CREATE INDEX textsearch.idx ON pgweb USING GIN (textsearchable.index.col);\n</code></pre> <p>Ahora estamos listos para realizar una b\u00fasqueda r\u00e1pida de texto completo:</p> <pre><code>T\u00edtulo SELECT\nDESDE pgweb\nLO ADEM\u00fas*s textseseable.index.col . . . . . . . . . . . . . . . . . . . .\nORDEDER POR \u00faltimo.mod.de DESC\nMEUMIT 10;\n</code></pre> <p>Una ventaja del enfoque separado-columna sobre un \u00edndice de  expresi\u00f3n es que no es necesario especificar expl\u00edcitamente la  configuraci\u00f3n de b\u00fasqueda de texto en consultas para hacer uso del  \u00edndice. Como se muestra en el ejemplo anterior, la consulta puede  depender de <code>default_text_search_config</code>. Otra ventaja es que las b\u00fasquedas ser\u00e1n m\u00e1s r\u00e1pidas, ya que no ser\u00e1 necesario rehacer el  <code>to_tsvector</code>llamadas para verificar coincidencias de \u00edndices. (Esto es m\u00e1s importante cuando se utiliza un \u00edndice GiST que un \u00edndice GIN; v\u00e9ase Secci\u00f3n 12.9.) El enfoque de la expresi\u00f3n-\u00edndice es m\u00e1s simple de configurar, sin embargo, y requiere menos espacio en discos desde el  <code>tsvector</code>la representaci\u00f3n no se almacena expl\u00edcitamente.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/03.-Controlar%20la%20b%C3%BAsqueda%20de%20texto/","title":"Index","text":"<p>Para implementar la b\u00fasqueda completa de texto debe haber una funci\u00f3n para crear una  <code>tsvector</code>de un documento y un  <code>tsquery</code>de una consulta de usuario. Adem\u00e1s, necesitamos devolver resultados en un  orden \u00fatil, por lo que necesitamos una funci\u00f3n que compare los  documentos con respecto a su relevancia para la consulta. Tambi\u00e9n es  importante poder mostrar los resultados muy bien. PostgreSQL proporciona soporte para todas estas funciones.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/03.-Controlar%20la%20b%C3%BAsqueda%20de%20texto/01.-Documentos%20de%20Parsing/","title":"01.-Documentos de Parsing","text":"<p>PostgreSQL proporciona la funci\u00f3n  <code>to_tsvector</code>para la conversi\u00f3n de un documento a la  <code>tsvector</code>Tipo de datos.</p> <pre><code>a-tsvector ([  configregconfig, ]  documenttext) devoluciones tsvector\n</code></pre> <p><code>to_tsvector</code>analiza un documento textual en tokens, reduce las fichas a lexemes, y devuelve un  <code>tsvector</code>que enumera las lexemes junto con sus posiciones en el documento. El  documento se procesa de acuerdo con la configuraci\u00f3n de b\u00fasqueda de  texto especificada o por defecto. He aqu\u00ed un simple ejemplo:</p> <pre><code>SELECT to-tsvector ('english', 'un gato gordo se sent\u00f3 en una alfombra - se comi\u00f3 unas ratas gordas');\n                  a-tsvector\n------------------------------------------------------\n 'ate':9 'cat':3 'gordo':2,11 'mat':7 'rata':12 'sat':4\n</code></pre> <p>En el ejemplo anterior vemos que el resultado  <code>tsvector</code>no contiene las palabras <code>a</code>, <code>on</code>, o <code>it</code>, la palabra  <code>rats</code>se convirti\u00f3 <code>rat</code>, y el signo de puntuaci\u00f3n  <code>-</code>fue ignorado.</p> <p>El  <code>to_tsvector</code>funci\u00f3n llama internamente a un analizador que rompe el texto del documento en  tokens y asigna un tipo a cada ficha. Para cada ficha, se consulta una lista de diccionarios (), donde la lista puede variar dependiendo del tipo de token. El primer diccionario que reconoce el sim silbido emite una o m\u00e1s lexemes normalizadas para representar el s\u00edmbolo. Por ejemplo,  <code>rats</code>se convirti\u00f3  <code>rat</code>porque uno de los diccionarios reconoci\u00f3 que la palabra  <code>rats</code>es una forma plural de <code>rat</code>. Algunas palabras se reconocen como palabras de stop (Secci\u00f3n 12.6.1), lo que hace que sean ignoradas, ya que ocurren con demasiada frecuencia para ser \u00fatiles en la b\u00fasqueda. En nuestro ejemplo estos son <code>a</code>, <code>on</code>, y <code>it</code>. Si ning\u00fan diccionario en la lista reconoce la ficha, entonces tambi\u00e9n  se ignora. En este ejemplo que le pas\u00f3 al signo de puntuaci\u00f3n  <code>-</code>porque de hecho no hay diccionarios asignados para su tipo si que si quero (<code>Space symbols</code>), lo que significa que los tokens espaciales nunca ser\u00e1n indexados. Las  opciones de los analizadores, diccionarios y qu\u00e9 tipos de fichas a  \u00edndice est\u00e1n determinadas por la configuraci\u00f3n de b\u00fasqueda de texto  seleccionada (Secci\u00f3n 12.7). Es posible tener muchas configuraciones diferentes en la misma base de  datos, y las configuraciones predefinidas est\u00e1n disponibles para varios  idiomas. En nuestro ejemplo hemos utilizado la configuraci\u00f3n  predeterminada  <code>english</code>para el idioma ingl\u00e9s.</p> <p>La funci\u00f3n  <code>setweight</code>se puede utilizar para etiquetar las entradas de una  <code>tsvector</code>con un peso dado, donde un peso es una de las letras <code>A</code>, <code>B</code>, <code>C</code>, o <code>D</code>. Esto se utiliza t\u00edpicamente para marcar entradas provenientes de  diferentes partes de un documento, como t\u00edtulo versus cuerpo. M\u00e1s tarde, esta informaci\u00f3n se puede utilizar para la clasificaci\u00f3n de los  resultados de b\u00fasqueda.</p> <p>Porque <code>to_tsvector</code>(<code>NULL</code>) volver\u00e1 <code>NULL</code>, se recomienda utilizar  <code>coalesce</code>cuando un campo pueda ser nulo. Aqu\u00ed est\u00e1 el m\u00e9todo recomendado para crear un  <code>tsvector</code>a partir de un documento estructurado:</p> <pre><code>UPDATE tt SET ti =\n    setweight (to-tsvector (coalesce(title,')), 'A')\n    setweight(to-tsvector (coalesce(palabra clave,')), 'B')\n    setweight(to-tsvector (coalesce(abstract,')), 'C')\n    setweight(to-tsvector (coalesce(body,')), 'D');\n</code></pre> <p>Aqu\u00ed hemos usado  <code>setweight</code>etiquetar la fuente de cada lexeme en el acabado <code>tsvector</code>, y luego fusionado el etiquetado  <code>tsvector</code>valores utilizando la  <code>tsvector</code>operador de concatenaci\u00f3n <code>||</code>. (Secci\u00f3n 12.4.1 se detallan estas operaciones.)</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/03.-Controlar%20la%20b%C3%BAsqueda%20de%20texto/02.-Parsing%20Quejas/","title":"02.-Parsing Quejas","text":"<p>PostgreSQL proporciona las funciones <code>to_tsquery</code>, <code>plainto_tsquery</code>,  <code>phraseto_tsquery</code>y  <code>websearch_to_tsquery</code>para la conversi\u00f3n de una consulta a la  <code>tsquery</code>Tipo de datos.  <code>to_tsquery</code>ofrece acceso a m\u00e1s caracter\u00edsticas que  <code>plainto_tsquery</code>o o <code>phraseto_tsquery</code>, pero es menos indulgente con su entrada.  <code>websearch_to_tsquery</code>es una versi\u00f3n simplificada de  <code>to_tsquery</code>con una sintaxis alternativa, similar a la utilizada por los motores de b\u00fasqueda web.</p> <pre><code>a-tsquery ([  configregconfig, ]  querytexttext) devoluciones tsquery\n</code></pre> <p><code>to_tsquery</code>crea un  <code>tsquery</code>valor de <code>querytext</code>, que debe consistir en fichas \u00fanicas separadas por la  <code>tsquery</code>los operadores  <code>&amp;</code>(AND),  <code>|</code>(OR),  <code>!</code>(NO), y  <code>&lt;-&gt;</code>(FOLLOWED BY), posiblemente agrupado usando par\u00e9ntesis. En otras palabras, la entrada a  <code>to_tsquery</code>ya debe seguir las normas generales para  <code>tsquery</code>entrada, seg\u00fan se describe en la secci\u00f3n 8.11.2. La diferencia es que, aunque es b\u00e1sica  <code>tsquery</code>la entrada toma las fichas a valor nominal,   normaliza cada token en una lexeme usando la configuraci\u00f3n especificada o predeterminada, y descarta cualquier ficha que sea parada palabras de  acuerdo a la configuraci\u00f3n. Por ejemplo:</p> <pre><code>SELECT to-tsquery('english', 'The &amp; Fat &amp; Rats');\n  a-tsquery\n- A---------------\n 'gordo' y 'rata'\n</code></pre> <p>Como en b\u00e1sico  <code>tsquery</code>entrada, peso (s) se puede unir a cada lexeme para restringirlo a la sola  <code>tsvector</code>lexemes de esos pesos. Por ejemplo:</p> <pre><code>SELECT to-tsquery('english', 'Fat . Rats:AB');\n    a-tsquery\n---------------------\n 'gordo' y 'rata':AB\n</code></pre> <p>Tambi\u00e9n,  <code>*</code>se puede unir a una lexeme para especificar la coincidencia de prefijo:</p> <pre><code>SELECT to-tsquery('supern:*A &amp; star:A*B');\n        a-tsquery\n--------------------------\n 'supern':*A &amp; 'estrella':*AB\n</code></pre> <p>Tal lexeme coincidir\u00e1 con cualquier palabra en un  <code>tsvector</code>que comienza con la cuerda dada.</p> <p><code>to_tsquery</code>tambi\u00e9n puede aceptar frases con citas simples. Esto es principalmente \u00fatil  cuando la configuraci\u00f3n incluye un diccionario de tesuro que puede  desencadenar en tales frases. En el ejemplo de abajo, un tesauro  contiene la regla <code>supernovae stars : sn</code>:</p> <pre><code>SELECT to-tsquery(''supernovae estrellas' y .crab');\n  a-tsquery\n- A---------------\n 'sn' &amp; \"crab\"\n</code></pre> <p>Sin comillas,  <code>to_tsquery</code>generar\u00e1 un error de sintaxis para fichas que no est\u00e1n separadas por un operador AND, OR o de S\u00e1GUESADO BY.</p> <pre><code>plainto-tsquery ([  configregconfig, ]  querytexttext) devoluciones tsquery\n</code></pre> <p><code>plainto_tsquery</code>transforma el texto no formateado  <code>querytext</code>a a  <code>tsquery</code>valor. El texto se analiza y se normaliza tanto en cuanto a <code>to_tsvector</code>, entonces el  <code>&amp;</code>(AND)  <code>tsquery</code>El operador se inserta entre las palabras sobrevivientes.</p> <p>Ejemplo:</p> <pre><code>SELECT plainto-tsquery ('english', 'The Fat Rats');\n plainto-tsquery\n----------------\n 'gordo' y 'rata'\n</code></pre> <p>Tenga en cuenta que  <code>plainto_tsquery</code>no reconocer\u00e1  <code>tsquery</code>operadores, etiquetas de peso o etiquetas de prefijo en su entrada:</p> <pre><code>SELECT plainto-tsquery('english', 'The Fat &amp; Rats:C');\n   plainto-tsquery\n----------------------\n 'gordo' y 'rata' y 'c'\n</code></pre> <p>Aqu\u00ed, se descart\u00f3 toda la puntuaci\u00f3n de entrada.</p> <pre><code>fraseto-tsquery ([  configregconfig, ]  querytexttext) devoluciones tsquery\n</code></pre> <p><code>phraseto_tsquery</code>se comporta como <code>plainto_tsquery</code>, excepto que inserta el  <code>&lt;-&gt;</code>(FOLLOWED BY) operador entre las palabras sobrevivientes en lugar de  <code>&amp;</code>(AND) operador. Adem\u00e1s, las palabras de parada no se descartan simplemente, sino que se contabilizan insertando  <code>&lt;*</code>N<code>*&gt;</code>operadores en lugar de  <code>&lt;-&gt;</code>operadores. Esta funci\u00f3n es \u00fatil cuando se busca secuencias exactas de lexeme, ya  que los operadores de S\u00e1GUELEGADA Ordenar lexeme no s\u00f3lo la presencia de todos los lexemes.</p> <p>Ejemplo:</p> <pre><code>SELECT phraseto.tsquery('english', 'The Fat Rats');\n fraseto.tsquery\n---------------------\n 'gordo' \"rata\"\n</code></pre> <p>Como <code>plainto_tsquery</code>, el  <code>phraseto_tsquery</code>funci\u00f3n no reconocer\u00e1  <code>tsquery</code>operadores, etiquetas de peso o etiquetas de prefijo en su entrada:</p> <pre><code>SELECT phraseto.tsquery('english', 'The Fat &amp; Rats:C');\n      fraseto.tsquery\n-----------------------------\n 'gordo' \"rata\" \"----------'\nen redessearch.to.tsquery ([  configregconfig, ]  querytexttext) devoluciones tsquery\n</code></pre> <p><code>websearch_to_tsquery</code>crea un  <code>tsquery</code>valor de  <code>querytext</code>utilizando una sintaxis alternativa en la que el texto sencillo no formateado es una consulta v\u00e1lida. A diferencia de  <code>plainto_tsquery</code>y <code>phraseto_tsquery</code>, tambi\u00e9n reconoce a ciertos operadores. Adem\u00e1s, esta funci\u00f3n nunca  elevar\u00e1 los errores de sintaxis, lo que permite utilizar la entrada de  uso en bruto suministrada por el usuario para la b\u00fasqueda. Se admite la  siguiente sintaxis:</p> <ul> <li><code>unquoted text</code>: el texto no dentro de las citas se convertir\u00e1 a t\u00e9rminos separados por  <code>&amp;</code>los operadores, como si fueran tratados por <code>plainto_tsquery</code>.</li> <li><code>\"quoted text\"</code>: texto dentro de las citas se convertir\u00e1 a t\u00e9rminos separados por  <code>&lt;-&gt;</code>los operadores, como si fueran tratados por <code>phraseto_tsquery</code>.</li> <li><code>OR</code>: la palabra se \u201cor\u201dconvertir\u00e1 en  <code>|</code>operador.</li> <li><code>-</code>: un gui\u00f3n se convertir\u00e1 a la  <code>!</code>operador.</li> </ul> <p>Otra puntuaci\u00f3n es ignorada. As\u00ed que como  <code>plainto_tsquery</code>y <code>phraseto_tsquery</code>, el  <code>websearch_to_tsquery</code>funci\u00f3n no reconocer\u00e1  <code>tsquery</code>operadores, etiquetas de peso o etiquetas de prefijo-match en su entrada.</p> <p>Ejemplos:</p> <pre><code>SELECT websearch.to-tsquery('english', 'Las ratas gordas');\n websearch.to-tsquery\n----------------------\n 'gordo' y 'rata'\n(1 fila)\n\nSELECT websearch.to.tsquery (-english', '\"supernovae stars\" -crab');\n       websearch.to-tsquery\n----------------------------------\n 'supernova' \"estrella\" y \"crab\"\n(1 fila)\n\nSELECT websearch.to.tsquery ('english', 'sad cat\" o \"rata gorda\");\n       websearch.to-tsquery\n------------------------------------\n \"triste\" \"gato\" \"gordo\" rata\n(1 fila)\n\nSELECT websearch.to.tsquery ('english', 'sfirmal - \"segmentation fault\"');\n         websearch.to-tsquery\n--------------------------------------\n \"se\u00f1al\" y \"segmento\"\n(1 fila)\n\nSELECT websearch.to.tsquery ('english', '\"\"\"\"\"( mu\u00f1eco .----');\n websearch.to-tsquery\n----------------------\n 'dummi' y 'queri'\n(1 fila)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/03.-Controlar%20la%20b%C3%BAsqueda%20de%20texto/03.-Resultados%20de%20la%20b%C3%BAsqueda%20de%20clasificaci%C3%B3n/","title":"03.-Resultados de la b\u00fasqueda de clasificaci\u00f3n","text":"<p>El ranking intenta medir c\u00f3mo son los documentos relevantes para una  consulta particular, de modo que cuando hay muchos partidos los m\u00e1s  relevantes se puedan mostrar primero. PostgreSQL proporciona dos funciones de clasificaci\u00f3n predefinidas, que tienen en  cuenta la informaci\u00f3n l\u00e9xica, de proximidad e estructural; es decir,  consideran con qu\u00e9 frecuencia aparecen los t\u00e9rminos de consulta en el  documento, cu\u00e1n estrechamente unidos son los t\u00e9rminos del documento, y  lo importante que es la parte del documento donde ocurren. Sin embargo,  el concepto de relevancia es vago y es muy espec\u00edfico de la aplicaci\u00f3n.  Diferentes aplicaciones podr\u00edan requerir informaci\u00f3n adicional para  clasificar, por ejemplo, tiempo de modificaci\u00f3n de documentos. Las  funciones de clasificaci\u00f3n incorporada son s\u00f3lo ejemplos. Puedes  escribir tus propias funciones de clasificaci\u00f3n y/o combinar sus  resultados con factores adicionales para adaptarse a tus necesidades  espec\u00edficas.</p> <p>Las dos funciones de clasificaci\u00f3n disponibles actualmente son:</p> <ul> <li><code>ts_rank([ *</code>weights<code>* float4[], ] *</code>vector<code>* tsvector, *</code>query<code>* tsquery [, *</code>normalization<code>* integer ]) returns float4</code></li> </ul> <p>\u200b          Ranks vectores basados en la frecuencia de sus lexemes a juego.        </p> <ul> <li><code>ts_rank_cd([ *</code>weights<code>* float4[], ] *</code>vector<code>* tsvector, *</code>query<code>* tsquery [, *</code>normalization<code>* integer ]) returns float4</code></li> </ul> <p>\u200b          Esta funci\u00f3n calcula el ranking de densidad de cobertura del vector de documento dado y la consulta, como se describe en Clarke, Cormack, y \"Relevance Ranking for One to Three Termes\" de Tudhope en  las consultas de informaci\u00f3n, de 1999. La densidad de cubierta es  similar a  <code>ts_rank</code>rankings excepto que se tiene en cuenta la proximidad de lexemes a juego entre s\u00ed.          Esta funci\u00f3n requiere informaci\u00f3n posicional de lexeme para realizar su c\u00e1lculo. Por lo tanto, ignora cualquier strippedlexemes despojado en el <code>tsvector</code>. Si no hay lexemes sin rayas en la entrada, el resultado ser\u00e1 cero. (Para m\u00e1s informaci\u00f3n  la , se encuentra la   funci\u00f3n e informaci\u00f3n posicional en s.)        </p> <p>Para ambas funciones, la  <code>weights</code>argumenta la capacidad de sopesar las instancias de palabras m\u00e1s o menos  dependiendo de c\u00f3mo se etiquetan. Los conjuntos de peso especifican cu\u00e1n fuertemente sopesar cada categor\u00eda de palabra, en el orden:</p> <pre><code>D-peso, peso C, peso B, peso A.\n</code></pre> <p>Si no  <code>weights</code>se proporcionan, luego se utilizan estos valores por defecto:</p> <pre><code>1, 0,2, 0,4, 1,0\n</code></pre> <p>Normalmente se utilizan pesos para marcar palabras de \u00e1reas  especiales del documento, como el t\u00edtulo o un resumen inicial, por lo  que pueden ser tratadas con m\u00e1s o menos importancia que las palabras en  el cuerpo del documento.</p> <p>Dado que un documento m\u00e1s largo tiene una mayor probabilidad de  contener un t\u00e9rmino de consulta, es razonable tener en cuenta el tama\u00f1o  del documento, por ejemplo, un documento de cien palabras con cinco  instancias de una palabra de b\u00fasqueda es probablemente m\u00e1s relevante que un documento de mil palabras con cinco instancias. Ambas funciones de  clasificaci\u00f3n se llevan un n\u00famero entero  <code>normalization</code>opci\u00f3n que especifique si la longitud de un documento debe impactar su rango y c\u00f3mo debe afectar su rango. La opci\u00f3n en el entero controla varios  comportamientos, por lo que es un poco m\u00e1scara: se puede especificar uno o m\u00e1s comportamientos usando  <code>|</code>(por ejemplo, <code>2|4</code>).</p> <ul> <li>0 (el por defecto) ignora la longitud del documento</li> <li>1 divide el rango por 1 - el logaritmo de la longitud del documento</li> <li>2 divide el rango por la longitud del documento</li> <li>4 divide el rango por la distancia arm\u00f3nica media entre los grados (esto se aplica s\u00f3lo por <code>ts_rank_cd</code>)</li> <li>8 divide el rango por el n\u00famero de palabras \u00fanicas en el documento</li> <li>16 divide el rango por 1 - el logaritmo del n\u00famero de palabras \u00fanicas en el documento</li> <li>32 divide el rango por s\u00ed mismo 1</li> </ul> <p>Si se especifica m\u00e1s de una bit de bandera, las transformaciones se aplican en el orden listado.</p> <p>Es importante se\u00f1alar que las funciones de clasificaci\u00f3n no  utilizan ninguna informaci\u00f3n global, por lo que es imposible producir  una normalizaci\u00f3n justa al 1% o al 100% como a veces se desea. Opci\u00f3n de normalizaci\u00f3n 32 (<code>rank/(rank+1)</code>) se puede aplicar para escalar todos los rangos en el rango cero a uno,  pero por supuesto esto es s\u00f3lo un cambio cosm\u00e9tico; no afectar\u00e1 el  ordenamiento de los resultados de b\u00fasqueda.</p> <p>Aqu\u00ed hay un ejemplo que selecciona s\u00f3lo los diez partidos de mayor rango:</p> <pre><code>T\u00edtulo de SELECT, ts.rank-cd(textsearch, consulta) AS rank\nDe apod, a.tsquery('neutrino'(dark &amp; matter)') consulta\nWHERE consulta .archivos de texto\nORDEN POR rango DESC\nMEUMIT 10;\n                     t\u00edtulo - rango\n------------------------\n Neutrinos en el sol 3.1\n El Detector de Neutrino de Sudbury . 2.4\n Una vista MACHO de la materia oscosa gal\u00e1ctica 2.01317\n Gas caliente y materia oscense 1.91171\n El Cl\u00faster Virgo: Hot Plasma y Materia Oscura 1.90953\n Rafting para Neutrinos Solares . 1.9\n NGC 4650A: Strange Galaxy and Dark Matter 1.85774\n Gas caliente y materia oscense . 1.6123\n Pesca de hielo para Neutrinos C\u00f3smicos .\n Lente d\u00e9bil distorna el Universo . 0.818218\n</code></pre> <p>Este es el mismo ejemplo utilizando el ranking normalizado:</p> <pre><code>T\u00edtulo de SELECT, ts.rank-cd(textsearch, consulta, 32 /* rank/(rank-1-1 */ ) AS rank\nDe apod, a.tsquery('neutrino'(dark &amp; matter)') consulta\nWHERE consulta .archivos de texto\nORDEN POR rango DESC\nMEUMIT 10;\n                     t\u00edtulo - rango\n----------------------------------------------------------------------------------\n Neutrinos en el sol\n El Detector Neutrino de Sudbury\n Una vista MACHO de la materia oscense gal\u00e1ctica\n Gas caliente y materia oscesa\n El Cl\u00faster Virgo: Hot Plasma y Materia Oscura\n Rafting para Neutrinos Solares\n NGC 4650A: Extra\u00f1o Galaxy y Materia Oscura\n Gas caliente y materia oscense\n Pesca de hielo para Neutrinos C\u00f3smicos\n Lente d\u00e9bil distorna el universo . 0.450010798361481\n</code></pre> <p>Ranking puede ser caro ya que requiere consultar el  <code>tsvector</code>de cada documento de correspondencia, que puede ser vinculado a E/S y por  lo tanto lento. Desafortunadamente, es casi imposible de evitar, ya que  las consultas pr\u00e1cticas a menudo resultan en un gran n\u00famero de  coincidencias.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/03.-Controlar%20la%20b%C3%BAsqueda%20de%20texto/04.-Resultados%20destacados/","title":"04.-Resultados destacados","text":"<p>Para presentar los resultados de la b\u00fasqueda es ideal mostrar una  parte de cada documento y c\u00f3mo est\u00e1 relacionado con la consulta. Por lo  general, los motores de b\u00fasqueda muestran fragmentos del documento con  marcados t\u00e9rminos de b\u00fasqueda. PostgreSQL proporciona una funci\u00f3n  <code>ts_headline</code>que implementa esta funcionalidad.</p> <pre><code>([  configregconfig, ]  documenttext,   querytsquery[,   optionstext]) devoluciones text\n</code></pre> <p><code>ts_headline</code>acepta un documento junto con una consulta, y devuelve un extracto del  documento en el que se destacan los t\u00e9rminos de la consulta. La  configuraci\u00f3n que se utilizar\u00e1 para analizar el documento puede ser  especificada por <code>config</code>; si  <code>config</code>se omite,  <code>default_text_search_config</code>se utiliza la configuraci\u00f3n.</p> <p>Si a  <code>options</code>se especifica que debe consistir en una lista separada por comas de uno o m\u00e1s  <code>option</code><code>=</code><code>value</code>pares. Las opciones disponibles son:</p> <ul> <li><code>MaxWords</code>,  <code>MinWords</code>(integre): estos n\u00fameros determinan los titulares m\u00e1s largos y cortos de la producci\u00f3n. Los valores por defecto son 35 y 15.</li> <li><code>ShortWord</code>(integre): palabras de esta longitud o menos se dejar\u00e1n caer al principio y al  final de un titular, a menos que sean t\u00e9rminos de consulta. El valor por defecto de tres elimina los art\u00edculos comunes en ingl\u00e9s.</li> <li><code>HighlightAll</code>(booleano): si  <code>true</code>todo el documento ser\u00e1 utilizado como titular, ignorando los tres par\u00e1metros anteriores. El incumplimiento es <code>false</code>.</li> <li><code>MaxFragments</code>(integre): n\u00famero m\u00e1ximo de fragmentos de texto a mostrar. El valor predeterminado de cero selecciona un m\u00e9todo de generaci\u00f3n de titulares no basado en  fragmentos. Un valor mayor que cero selecciona la generaci\u00f3n de  titulares basada en fragmentos (ver m\u00e1s abajo).</li> <li><code>StartSel</code>,  <code>StopSel</code>(cadenaciones): las cuerdas con las que delimitar las palabras de consulta que aparecen en el documento, para distinguirlas de otras palabras exceridas. Los  valores por defecto son .<code>&lt;b&gt;</code>- y<code>&lt;/b&gt;</code>- que puede ser adecuado para la salida HTML.</li> <li><code>FragmentDelimiter</code>Cuando se muestre m\u00e1s de un fragmento, los fragmentos se separar\u00e1n por esta cuerda. El valor predeterminado es .</li> </ul> <p>Estos nombres de opci\u00f3n se reconocen de forma insensible. Debes de doble cuota valores de cuerda si contienen espacios o comas.</p> <p>En generaci\u00f3n titular no basada en el fragmento,  <code>ts_headline</code>Localiza partidos para el dado  <code>query</code>y elige uno solo para exhibir, prefiriendo coincidencias que tienen m\u00e1s  palabras de consulta dentro de la longitud de titular permitida. En  generaci\u00f3n de titulares fragmentadas,  <code>ts_headline</code>localiza los partidos de consulta y divide cada partido en fragmentos de no m\u00e1s  <code>MaxWords</code>palabras cada uno, prefiriendo fragmentos con m\u00e1s palabras de consulta, y cuando sea posible, fragmentos  para incluir palabras circundantes. El modo fragmentado es por lo tanto m\u00e1s  \u00fatil cuando la consulta coincide con secciones grandes del documento, o  cuando es deseable mostrar m\u00faltiples coincidencias. En ambos modos, si  no se pueden identificar coincidencias de consulta, entonces un solo  fragmento de la primera  <code>MinWords</code>Las palabras en el documento se mostrar\u00e1n.</p> <p>Por ejemplo:</p> <pre><code>SELECT ts.headline ('english',\n  'El tipo de b\u00fasqueda m\u00e1s com\u00fan\nes encontrar todos los documentos que contengan los t\u00e9rminos de consulta dados\ny devu\u00e9lvelos por orden de su semejanza a la\nconsulta.',\n  a.tsquery('english', 'query &amp; similitudity');\n                        ts.headline\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n que contiene los t\u00e9rminos de la .b.\n y devu\u00e9lvelos en orden de su \"b\" semejanza a la.\n B.\n\nSELECT ts.headline ('english',\n  'Los t\u00e9rminos de b\u00fasqueda pueden ocurrir\nmuchas veces en un documento,\nexigir el ranking de los partidos de b\u00fasqueda para decidir cu\u00e1les\nocurrencias para mostrar en el resultado.',\n  to-tsquery('english', 'b\u00fasqueda &amp; term'),\n  'MaxFragments=10, MaxWords=7, MinWords=3, StartSel=, StopSel=');\n                        ts.headline\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Puede ocurrir en la b\u00fasqueda\n muchas veces... clasificaci\u00f3n de los partidos de la \"search\" para decidir\n</code></pre> <p><code>ts_headline</code>utiliza el documento original, no un  <code>tsvector</code>Resumen, por lo que puede ser lento y debe ser utilizado con cuidado.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/04.-Caracter%C3%ADsticas%20adicionales/","title":"Index","text":"<p>En esta secci\u00f3n se describen funciones y operadores adicionales que son \u00fatiles en relaci\u00f3n con la b\u00fasqueda de texto.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/04.-Caracter%C3%ADsticas%20adicionales/01.-Documentos%20de%20Manipular/","title":"01.-Documentos de Manipular","text":"<p>La secci\u00f3n 12.3.1 mostr\u00f3 c\u00f3mo los documentos textuales brutos pueden convertirse en  <code>tsvector</code>valores. PostgreSQL tambi\u00e9n proporciona funciones y operadores que pueden ser utilizados para manipular documentos que ya est\u00e1n en  <code>tsvector</code>la forma.</p> <ul> <li><code>tsvector || tsvector</code></li> </ul> <p>\u200b          El  <code>tsvector</code>El operador de concatenaci\u00f3n devuelve un vector que combina las lexemes y  la informaci\u00f3n posicional de los dos vectores dados como argumentos. Las posiciones y etiquetas de peso se conservan durante la concatenaci\u00f3n.  Las posiciones que aparecen en el vector de la derecha se compensan por  la posici\u00f3n m\u00e1s grande mencionada en el vector de la izquierda, de modo  que el resultado es casi equivalente al resultado de la realizaci\u00f3n  <code>to_tsvector</code>en la concatenaci\u00f3n de las dos cadenas de documentos originales. (La  equivalencia no es exacta, porque cualquier tirador eliminado del  argumento de la izquierda no afectar\u00e1 al resultado, mientras que habr\u00edan afectado las posiciones de las lexemes en el argumento de la derecha si se usara una concatenaci\u00f3n textual.)          Una ventaja de usar la concatenaci\u00f3n en la forma vectorial, en lugar de concatenar texto antes de aplicar <code>to_tsvector</code>, es que puede utilizar diferentes configuraciones para analizar diferentes secciones del documento. Tambi\u00e9n, porque el  <code>setweight</code>funci\u00f3n marca todas las lexemes del vector dado de la misma manera, es necesario analizar el texto y hacer  <code>setweight</code>antes de concatenar si desea etiquetar diferentes partes del documento con diferentes pesos.        </p> <ul> <li><code>setweight(*</code>vector<code>* tsvector, *</code>weight<code>* \"char\") returns tsvector</code></li> </ul> <p>\u200b           <code>setweight</code>devuelve una copia del vector de entrada en la que cada posici\u00f3n ha sido etiquetada con el <code>weight</code>, o tampoco <code>A</code>, <code>B</code>, <code>C</code>, o <code>D</code>. ( <code>D</code>es el predeterminado para los nuevos vectores y como tal no se muestra en  la salida.) Estas etiquetas se conservan cuando los vectores se  concatenan, permitiendo que las palabras de diferentes partes de un  documento se ponderen de manera diferente por funciones de  clasificaci\u00f3n.          Tenga en cuenta que las etiquetas de peso se aplican a las posiciones, no a las lexemes. Si el vector de entrada ha sido despojado de posiciones entonces  <code>setweight</code>no hace nada.        </p> <ul> <li><code>length(*</code>vector<code>* tsvector) returns integer</code></li> </ul> <p>\u200b          Devuelve el n\u00famero de lexemes almacenados en el vector.        </p> <ul> <li><code>strip(*</code>vector<code>* tsvector) returns tsvector</code></li> </ul> <p>\u200b          Devuelve un vector que enumera las mismas lexemes que el  vector dado, pero carece de cualquier posici\u00f3n o informaci\u00f3n de peso. El resultado suele ser mucho menor que un vector sin rayas, pero tambi\u00e9n  es menos \u00fatil. El ranking de relevancia no funciona tan bien en vectores despojados como los no despojados. Tambi\u00e9n, el  <code>&lt;-&gt;</code>(FOLLOWED BY)  <code>tsquery</code>El operador nunca coincidir\u00e1 con la entrada despojada, ya que no puede determinar la distancia entre ocurrencias de lexeme.        </p> <p>Una lista completa de <code>tsvector</code>- Las funciones relacionadas se pueden consultar en el cuadro 9.43.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/04.-Caracter%C3%ADsticas%20adicionales/02.-Manipulan%20las%20consultas/","title":"02.-Manipulan las consultas","text":"<p>Secci\u00f3n 12.3.2 mostr\u00f3 c\u00f3mo las consultas textuales crudas pueden convertirse en  <code>tsquery</code>valores. PostgreSQL tambi\u00e9n proporciona funciones y operadores que se pueden utilizar para manipular consultas que ya est\u00e1n en  <code>tsquery</code>la forma.</p> <ul> <li><code>tsquery &amp;&amp; tsquery</code></li> </ul> <p>\u200b          Devuelve la combinaci\u00f3n AND de las dos consultas dadas.        </p> <ul> <li><code>tsquery || tsquery</code></li> </ul> <p>\u200b          Devuelve la combinaci\u00f3n de quir\u00f3fanos de las dos consultas dadas.        </p> <ul> <li><code>!! tsquery</code></li> </ul> <p>\u200b          Devuelve la negaci\u00f3n (NO) de la consulta dada.        </p> <ul> <li><code>tsquery &lt;-&gt; tsquery</code></li> </ul> <p>\u200b          Devuelve una consulta que busca un partido a la primera  consulta dada inmediatamente seguida por un partido a la segunda  consulta dada, utilizando el  <code>&lt;-&gt;</code>(FOLLOWED BY)  <code>tsquery</code>operador. Por ejemplo:          <code>SELECT to-tsquery('fat')          ?column? ---------------------------- 'gordo' \"-o\" ( \"gato\" \"rata\" .)</code> </p> <ul> <li><code>tsquery_phrase(*</code>query1<code>* tsquery, *</code>query2<code>* tsquery [, *</code>distance<code>* integer ]) returns tsquery</code></li> </ul> <p>\u200b          Devuelve una consulta que busca un partido a la primera  consulta dada seguida de un partido al segundo dada la consulta a una  distancia de exactamente  <code>distance</code>lexemes, usando el   <code>&lt;*</code>N<code>*&gt;``tsquery</code>operador. Por ejemplo:          <code>SELECT tsquery.phrase(to-tsquery''), to-tsquery ('cat'), 10);  tsquery-phrasese --------------------- 'gordo' No 10o 'gato'</code> </p> <ul> <li><code>numnode(*</code>query<code>* tsquery) returns integer</code></li> </ul> <p>\u200b          Devuelve el n\u00famero de nodos (lexemes plusoperadores) en un <code>tsquery</code>. Esta funci\u00f3n es \u00fatil para determinar si el  <code>query</code>es significativo (vuelta 0), o contiene s\u00f3lo palabras de parada (devoluciones 0). Ejemplos:          <code>SELECT numnode(plainto-tsquery (\"los que sean\"); NOTICE: la consulta contiene s\u00f3lo stopword(s) o no contiene lexeme (s), ignorado numnode -------       0 SELECT numnode('foo &amp; bar'::tsquery); numnode -------       3</code> </p> <ul> <li><code>querytree(*</code>query<code>* tsquery) returns text</code></li> </ul> <p>\u200b          Devuelve la porci\u00f3n de un  <code>tsquery</code>que se puede utilizar para buscar un \u00edndice. Esta funci\u00f3n es \u00fatil para  detectar consultas no indexables, por ejemplo aquellas que contienen  s\u00f3lo palabras de parada o s\u00f3lo t\u00e9rminos negados. Por ejemplo:          <code>SELECT querytree(to-tsquery (definito')); consultaria --------- 'defin' SELECT querytree(to-tsquery('definido'); consultaria --------- T</code> </p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/04.-Caracter%C3%ADsticas%20adicionales/03.-Desencantes%20para%20actualizaciones%20autom%C3%A1ticas/","title":"03.-Desencantes para actualizaciones autom\u00e1ticas","text":""},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/04.-Caracter%C3%ADsticas%20adicionales/03.-Desencantes%20para%20actualizaciones%20autom%C3%A1ticas/#nota","title":"Nota","text":"<p>El m\u00e9todo descrito en esta secci\u00f3n ha quedado obsoleto por el uso de columnas generadas almacenadas, tal como se describe en .</p> <p>Cuando se utiliza una columna separada para almacenar el  <code>tsvector</code>representaci\u00f3n de sus documentos, es necesario crear un disparador para actualizar el  <code>tsvector</code>columnas cuando las columnas de contenido de documento cambian. Dos funciones  desencadenantes incorporadas est\u00e1n disponibles para esto, o puedes  escribir la tuya.</p> <pre><code>tsvector.update.trigger (tsvector_column_name,config_name \n\n,  text_column_name[, ... ])\ntsvector.update.trigger.column (tsvector_column_name,config_column_name \n\n,  text_column_name[, ... ])\n</code></pre> <p>Estas funciones desencadenante calculan autom\u00e1ticamente un  <code>tsvector</code>columna de una o m\u00e1s columnas textuales, bajo el control de los par\u00e1metros especificados en el  <code>CREATE TRIGGER</code>comando. Un ejemplo de su uso es:</p> <pre><code>CREATE TABLE mensajes (\n    texto del t\u00edtulo,\n    texto de cuerpo,\n    tsv tsvector\n);\n\nCREATE TRIGGER tsvector desvectorada ANTES de INSERT O Actualizaci\u00f3n\nEn mensajes PARA EACH ROW EXECUTE FUNCTION\ntsvector.update.trigger (tsv, 'pg.catalog.english', t\u00edtulo, cuerpo);\n\nINSERT INTO mensajes VALUES (t\u00edtulo aqu\u00ed\", 'el texto del cuerpo est\u00e1 aqu\u00ed');\n\nSELECT * DESDE los mensajes;\n   t\u00edtulo - cuerpo tsv\n----------------------------------------------------------------------------\n t\u00edtulo aqu\u00ed - el texto del cuerpo est\u00e1 aqu\u00ed \"-bodi\":4 'texto':5 'titl':1\n\nSELECT t\u00edtulo, cuerpo DESDE mensajes DONDE tsv . to-tsquery (t\u00edtulo &amp; body');\n   t\u00edtulo . cuerpo\n---------------------------------------------------------------\n el t\u00edtulo aqu\u00ed - el texto del cuerpo est\u00e1 aqu\u00ed\n</code></pre> <p>Habiendo creado este desencadenante, cualquier cambio en  <code>title</code>o o  <code>body</code>se reflejar\u00e1 autom\u00e1ticamente en <code>tsv</code>, sin que la solicitud tenga que preocuparse por ello.</p> <p>El primer argumento desencadenante debe ser el nombre de la  <code>tsvector</code>columna a actualizar. El segundo argumento especifica la configuraci\u00f3n de  b\u00fasqueda de texto a ser utilizado para realizar la conversi\u00f3n. Para <code>tsvector_update_trigger</code>, el nombre de configuraci\u00f3n se da simplemente como el segundo argumento  desencadenante. Debe ser calificado como se muestra anteriormente, para  que el comportamiento desencadenante no cambie con cambios en <code>search_path</code>. Para <code>tsvector_update_trigger_column</code>, el segundo argumento desencadenante es el nombre de otra columna de tabla, que debe ser de tipo <code>regconfig</code>. Esto permite hacer una selecci\u00f3n por rosca de configuraci\u00f3n. Los  argumentos restantes son los nombres de las columnas textuales (de tipo <code>text</code>, <code>varchar</code>, o <code>char</code>). Estos se incluir\u00e1n en el documento en el orden dado. Los valores de  NULL se saltar\u00e1n (pero las otras columnas todav\u00eda estar\u00e1n indexadas).</p> <p>Una limitaci\u00f3n de estos disparadores incorporados es que tratan  todas las columnas de entrada por igual. Para procesar las columnas de  manera diferente, por ejemplo, para ponderar el t\u00edtulo de manera  diferente al cuerpo, es necesario escribir un disparador personalizado.  Aqu\u00ed hay un ejemplo usando PL/pgSQL como el lenguaje desencadenante:</p> <pre><code>CREATE FUNCTION messages.trigger() RETURNS trigger AS $$\nempezar\n  new.tsv :=\n     setweight(to-tsvector('pg-catalog.english', coalesce(new.title,')), 'A')\n     setweight(to-tsvector ('pg-catalog.english', coalesce(new.body')), 'D');\n  retorno nuevo;\nfinal\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER tsvector desvectorada ANTES de INSERT O Actualizaci\u00f3n\n    En mensajes PARA EACH ROW EXECUTE FUNCTION messages.trigger ();\n</code></pre> <p>Tenga en cuenta que es importante especificar el nombre de configuraci\u00f3n expl\u00edcitamente al crear  <code>tsvector</code>valores dentro desencadenantes, de modo que el contenido de la columna no se ver\u00e1 afectado por cambios en <code>default_text_search_config</code>. No hacerlo es probable que esto conduzca a problemas como que los  resultados de b\u00fasqueda cambien despu\u00e9s de un versura y restauraci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/04.-Caracter%C3%ADsticas%20adicionales/04.-Recoger%20estad%C3%ADsticas%20de%20documentos/","title":"04.-Recoger estad\u00edsticas de documentos","text":"<p>La funci\u00f3n  <code>ts_stat</code>es \u00fatil para comprobar su configuraci\u00f3n y para encontrar candidatos de palabras de stop-word.</p> <pre><code>ts.stat( sqlquerytext, [  weightstext, ]\n        OUT  wordtext, OUT  ndocinteger,\n        OUT  nentryinteger) devoluciones setof record\n</code></pre> <p><code>sqlquery</code>es un valor de texto que contiene una consulta SQL que debe devolver una sola  <code>tsvector</code>columnas.  <code>ts_stat</code>ejecuta la consulta y devuelve estad\u00edsticas sobre cada lexeme (palabra) distinta contenida en el  <code>tsvector</code>datos. Las columnas devueltas son</p> <ul> <li><code>word</code><code>text</code>El valor de una lexeme</li> <li><code>ndoc</code><code>integer</code>N\u00famero de documentos (<code>tsvector</code>s) la palabra se produjo en</li> <li><code>nentry</code><code>integer</code>N\u00famero total de ocurreciones de la palabra</li> </ul> <p>Si  <code>weights</code>se suministra, s\u00f3lo se contabilizan las ocurreciones que tienen uno de esos pesos.</p> <p>Por ejemplo, para encontrar las diez palabras m\u00e1s frecuentes en una colecci\u00f3n de documentos:</p> <pre><code>SELECT * DESDE ts-stat('SELECT vector FROM apod')\nORDEN BY nentry DESC, ndoc DESC, palabra\nMEUMIT 10;\n</code></pre> <p>Lo mismo, pero contando s\u00f3lo ocurrencias de palabras con peso  <code>A</code>o o <code>B</code>:</p> <pre><code>SELECT * FROM ts.stat('SELECT vector FROM apod', 'ab')\nORDEN BY nentry DESC, ndoc DESC, palabra\nMEUMIT 10;\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/06.-Diccionarios/","title":"Index","text":"<p>Dictionaries are used to eliminate words that should not be considered in a search (stop words), and to normalize words so that different derived forms of the same word will match. A successfully normalized word is called a lexeme. Aside from improving search quality, normalization and removal of stop words reduce the size of the <code>tsvector</code> representation of a document, thereby improving performance.  Normalization does not always have linguistic meaning and usually  depends on application semantics.</p> <p>Some examples of normalization:</p> <ul> <li>Linguistic \u2014 Ispell dictionaries try to reduce input words to a normalized form; stemmer dictionaries remove word endings</li> <li>URL locations can be canonicalized to make equivalent URLs match:</li> <li>http://www.pgsql.ru/db/mw/index.html</li> <li>http://www.pgsql.ru/db/mw/</li> <li>http://www.pgsql.ru/db/../db/mw/index.html</li> <li>Color names can be replaced by their hexadecimal values, e.g., <code>red, green, blue, magenta -&gt; FF0000, 00FF00, 0000FF, FF00FF</code></li> <li>If indexing numbers, we can remove some fractional digits to reduce the range of possible numbers, so for example 3.14159265359, 3.1415926, 3.14 will be the same after normalization if only two digits are kept after the decimal point.</li> </ul> <p>A dictionary is a program that accepts a token as input and returns:</p> <ul> <li>an array of lexemes if the input token is known to the dictionary (notice that one token can produce more than one lexeme)</li> <li>a single lexeme with the <code>TSL_FILTER</code> flag set, to replace the original token with a new token to be passed  to subsequent dictionaries (a dictionary that does this is called a filtering dictionary)</li> <li>an empty array if the dictionary knows the token, but it is a stop word</li> <li><code>NULL</code> if the dictionary does not recognize the input token</li> </ul> <p>PostgreSQL provides predefined  dictionaries for many languages. There are also several predefined  templates that can be used to create new dictionaries with custom  parameters. Each predefined dictionary template is described below. If  no existing template is suitable, it is possible to create new ones; see the <code>contrib/</code> area of the PostgreSQL distribution for examples.</p> <p>A text search configuration binds a parser together with a set of  dictionaries to process the parser's output tokens. For each token type  that the parser can return, a separate list of dictionaries is specified by the configuration. When a token of that type is found by the parser, each dictionary in the list is consulted in turn, until some dictionary recognizes it as a known word. If it is identified as a stop word, or  if no dictionary recognizes the token, it will be discarded and not  indexed or searched for. Normally, the first dictionary that returns a  non-<code>NULL</code> output determines the result, and  any remaining dictionaries are not consulted; but a filtering dictionary can replace the given word with a modified word, which is then passed  to subsequent dictionaries.</p> <p>The general rule for configuring a list of dictionaries is to place first the most narrow, most specific dictionary, then the more general  dictionaries, finishing with a very general dictionary, like a Snowball stemmer or <code>simple</code>, which recognizes everything. For example, for an astronomy-specific search (<code>astro_en</code> configuration) one could bind token type <code>asciiword</code> (ASCII word) to a synonym dictionary of astronomical terms, a general English dictionary and a Snowball English stemmer:</p> <pre><code>ALTER TEXT SEARCH CONFIGURATION astro_en\n    ADD MAPPING FOR asciiword WITH astrosyn, english_ispell, english_stem;\n</code></pre> <p>A filtering dictionary can be placed anywhere in the list, except  at the end where it'd be useless. Filtering dictionaries are useful to  partially normalize words to simplify the task of later dictionaries.  For example, a filtering dictionary could be used to remove accents from accented letters, as is done by the unaccent module.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/06.-Diccionarios/01.-Detenga%20las%20palabras/","title":"01.-Detenga las palabras","text":"<p>Stop words are words that are very common, appear in almost every  document, and have no discrimination value. Therefore, they can be  ignored in the context of full text searching. For example, every  English text contains words like <code>a</code> and <code>the</code>, so it is useless to store them in an index. However, stop words do affect the positions in <code>tsvector</code>, which in turn affect ranking:</p> <pre><code>SELECT to_tsvector('english', 'in the list of stop words');\n        to_tsvector\n----------------------------\n 'list':3 'stop':5 'word':6\n</code></pre> <p>The missing positions 1,2,4 are because of stop words. Ranks  calculated for documents with and without stop words are quite  different:</p> <pre><code>SELECT ts_rank_cd (to_tsvector('english', 'in the list of stop words'), to_tsquery('list &amp; stop'));\n ts_rank_cd\n------------\n       0.05\n\nSELECT ts_rank_cd (to_tsvector('english', 'list stop words'), to_tsquery('list &amp; stop'));\n ts_rank_cd\n------------\n        0.1\n</code></pre> <p>It is up to the specific dictionary how it treats stop words. For example, <code>ispell</code> dictionaries first normalize words and then look at the list of stop words, while <code>Snowball</code> stemmers first check the list of stop words. The reason for the different behavior is an attempt to decrease noise.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/06.-Diccionarios/02.-Diccionario%20simple/","title":"02.-Diccionario simple","text":"<p>The <code>simple</code> dictionary template operates  by converting the input token to lower case and checking it against a  file of stop words. If it is found in the file then an empty array is  returned, causing the token to be discarded. If not, the lower-cased  form of the word is returned as the normalized lexeme. Alternatively,  the dictionary can be configured to report non-stop-words as  unrecognized, allowing them to be passed on to the next dictionary in  the list.</p> <p>Here is an example of a dictionary definition using the <code>simple</code> template:</p> <pre><code>CREATE TEXT SEARCH DICTIONARY public.simple_dict (\n    TEMPLATE = pg_catalog.simple,\n    STOPWORDS = english\n);\n</code></pre> <p>Here, <code>english</code> is the base name of a file of stop words. The file's full name will be <code>$SHAREDIR/tsearch_data/english.stop</code>, where <code>$SHAREDIR</code> means the PostgreSQL installation's shared-data directory, often <code>/usr/local/share/postgresql</code> (use <code>pg_config --sharedir</code> to determine it if you're not sure). The file format is simply a list  of words, one per line. Blank lines and trailing spaces are ignored, and upper case is folded to lower case, but no other processing is done on  the file contents.</p> <p>Now we can test our dictionary:</p> <pre><code>SELECT ts_lexize('public.simple_dict', 'YeS');\n ts_lexize\n-----------\n {yes}\n\nSELECT ts_lexize('public.simple_dict', 'The');\n ts_lexize\n-----------\n {}\n</code></pre> <p>We can also choose to return <code>NULL</code>,  instead of the lower-cased word, if it is not found in the stop words  file. This behavior is selected by setting the dictionary's <code>Accept</code> parameter to <code>false</code>. Continuing the example:</p> <pre><code>ALTER TEXT SEARCH DICTIONARY public.simple_dict ( Accept = false );\n\nSELECT ts_lexize('public.simple_dict', 'YeS');\n ts_lexize\n-----------\n\n\nSELECT ts_lexize('public.simple_dict', 'The');\n ts_lexize\n-----------\n {}\n</code></pre> <p>With the default setting of <code>Accept</code> = <code>true</code>, it is only useful to place a <code>simple</code> dictionary at the end of a list of dictionaries, since it will never pass on any token to a following dictionary. Conversely, <code>Accept</code> = <code>false</code> is only useful when there is at least one following dictionary.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/06.-Diccionarios/02.-Diccionario%20simple/#caution","title":"Caution","text":"<p>Most types of dictionaries rely on configuration files, such as files of stop words. These files must be stored in UTF-8 encoding. They will be translated to the actual  database encoding, if that is different, when they are read into the  server.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/06.-Diccionarios/02.-Diccionario%20simple/#caution_1","title":"Caution","text":"<p>Normally, a database session will read a dictionary  configuration file only once, when it is first used within the session.  If you modify a configuration file and want to force existing sessions  to pick up the new contents, issue an <code>ALTER TEXT SEARCH DICTIONARY</code> command on the dictionary. This can be a \u201cdummy\u201d update that doesn't actually change any parameter values.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/06.-Diccionarios/03.-Diccionario%20de%20sin%C3%B3nimos/","title":"03.-Diccionario de sin\u00f3nimos","text":"<p>This dictionary template is used to create dictionaries that replace a word with a synonym. Phrases are not supported (use the thesaurus  template (Section 12.6.4) for that). A synonym dictionary can be used to overcome linguistic  problems, for example, to prevent an English stemmer dictionary from  reducing the word \u201cParis\u201d to \u201cpari\u201d. It is enough to have a <code>Paris paris</code> line in the synonym dictionary and put it before the <code>english_stem</code> dictionary. For example:</p> <pre><code>SELECT * FROM ts_debug('english', 'Paris');\n   alias   |   description   | token |  dictionaries  |  dictionary  | lexemes\n-----------+-----------------+-------+----------------+--------------+---------\n asciiword | Word, all ASCII | Paris | {english_stem} | english_stem | {pari}\n\nCREATE TEXT SEARCH DICTIONARY my_synonym (\n    TEMPLATE = synonym,\n    SYNONYMS = my_synonyms\n);\n\nALTER TEXT SEARCH CONFIGURATION english\n    ALTER MAPPING FOR asciiword\n    WITH my_synonym, english_stem;\n\nSELECT * FROM ts_debug('english', 'Paris');\n   alias   |   description   | token |       dictionaries        | dictionary | lexemes\n-----------+-----------------+-------+---------------------------+------------+---------\n asciiword | Word, all ASCII | Paris | {my_synonym,english_stem} | my_synonym | {paris}\n</code></pre> <p>The only parameter required by the <code>synonym</code> template is <code>SYNONYMS</code>, which is the base name of its configuration file \u2014 <code>my_synonyms</code> in the above example. The file's full name will be <code>$SHAREDIR/tsearch_data/my_synonyms.syn</code> (where <code>$SHAREDIR</code> means the PostgreSQL installation's shared-data directory). The file format is just one line per word to be substituted, with the word followed by its synonym,  separated by white space. Blank lines and trailing spaces are ignored.</p> <p>The <code>synonym</code> template also has an optional parameter <code>CaseSensitive</code>, which defaults to <code>false</code>. When <code>CaseSensitive</code> is <code>false</code>, words in the synonym file are folded to lower case, as are input tokens. When it is <code>true</code>, words and tokens are not folded to lower case, but are compared as-is.</p> <p>An asterisk (<code>*</code>) can be placed at the end of a synonym in the configuration file. This indicates that the  synonym is a prefix. The asterisk is ignored when the entry is used in <code>to_tsvector()</code>, but when it is used in <code>to_tsquery()</code>, the result will be a query item with the prefix match marker (see Section 12.3.2). For example, suppose we have these entries in <code>$SHAREDIR/tsearch_data/synonym_sample.syn</code>:</p> <pre><code>postgres        pgsql\npostgresql      pgsql\npostgre pgsql\ngogle   googl\nindices index*\n</code></pre> <p>Then we will get these results:</p> <pre><code>mydb=# CREATE TEXT SEARCH DICTIONARY syn (template=synonym, synonyms='synonym_sample');\nmydb=# SELECT ts_lexize('syn', 'indices');\n ts_lexize\n-----------\n {index}\n(1 row)\n\nmydb=# CREATE TEXT SEARCH CONFIGURATION tst (copy=simple);\nmydb=# ALTER TEXT SEARCH CONFIGURATION tst ALTER MAPPING FOR asciiword WITH syn;\nmydb=# SELECT to_tsvector('tst', 'indices');\n to_tsvector\n-------------\n 'index':1\n(1 row)\n\nmydb=# SELECT to_tsquery('tst', 'indices');\n to_tsquery\n------------\n 'index':*\n(1 row)\n\nmydb=# SELECT 'indexes are very useful'::tsvector;\n            tsvector\n---------------------------------\n 'are' 'indexes' 'useful' 'very'\n(1 row)\n\nmydb=# SELECT 'indexes are very useful'::tsvector @@ to_tsquery('tst', 'indices');\n ?column?\n----------\n t\n(1 row)\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/06.-Diccionarios/04.-Diccionario%20de%20tesaaurio/","title":"04.-Diccionario de tesaaurio","text":"<p>A thesaurus dictionary (sometimes abbreviated as TZ) is a collection of words that includes information about the relationships of words and phrases, i.e., broader terms (BT), narrower terms (NT), preferred terms, non-preferred terms, related terms, etc.</p> <p>Basically a thesaurus dictionary replaces all non-preferred terms by one preferred term and, optionally, preserves the original terms for indexing as well. PostgreSQL's current implementation of the thesaurus dictionary is an extension of the synonym dictionary with added phrase support. A thesaurus dictionary requires a configuration file of the following format:</p> <pre><code># this is a comment\nsample word(s) : indexed word(s)\nmore sample word(s) : more indexed word(s)\n...\n</code></pre> <p>where the colon (<code>:</code>) symbol acts as a delimiter between a phrase and its replacement.</p> <p>A thesaurus dictionary uses a subdictionary (which is specified in the dictionary's configuration) to normalize the input text before checking for phrase matches. It is only possible to  select one subdictionary. An error is reported if the subdictionary  fails to recognize a word. In that case, you should remove the use of  the word or teach the subdictionary about it. You can place an asterisk (<code>*</code>) at the beginning of an indexed word to skip applying the subdictionary to it, but all sample words must be known to the subdictionary.</p> <p>The thesaurus dictionary chooses the longest match if there are  multiple phrases matching the input, and ties are broken by using the  last definition.</p> <p>Specific stop words recognized by the subdictionary cannot be specified; instead use <code>?</code> to mark the location where any stop word can appear. For example, assuming that <code>a</code> and <code>the</code> are stop words according to the subdictionary:</p> <pre><code>? one ? two : swsw\n</code></pre> <p>matches <code>a one the two</code> and <code>the one a two</code>; both would be replaced by <code>swsw</code>.</p> <p>Since a thesaurus dictionary has the capability to recognize  phrases it must remember its state and interact with the parser. A  thesaurus dictionary uses these assignments to check if it should handle the next word or stop accumulation. The thesaurus dictionary must be  configured carefully. For example, if the thesaurus dictionary is  assigned to handle only the <code>asciiword</code> token, then a thesaurus dictionary definition like <code>one 7</code> will not work since token type <code>uint</code> is not assigned to the thesaurus dictionary.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/06.-Diccionarios/04.-Diccionario%20de%20tesaaurio/#caution","title":"Caution","text":"<p>Thesauruses are used during indexing so any change in the thesaurus dictionary's parameters requires reindexing. For most other dictionary types, small changes such as adding or removing stopwords does not force reindexing.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/06.-Diccionarios/04.-Diccionario%20de%20tesaaurio/#01-thesaurus-configuration","title":"01. Thesaurus Configuration","text":"<p>To define a new thesaurus dictionary, use the <code>thesaurus</code> template. For example:</p> <pre><code>CREATE TEXT SEARCH DICTIONARY thesaurus_simple (\n    TEMPLATE = thesaurus,\n    DictFile = mythesaurus,\n    Dictionary = pg_catalog.english_stem\n);\n</code></pre> <p>Here:</p> <ul> <li><code>thesaurus_simple</code> is the new dictionary's name</li> <li><code>mythesaurus</code> is the base name of the thesaurus configuration file. (Its full name will be <code>$SHAREDIR/tsearch_data/mythesaurus.ths</code>, where <code>$SHAREDIR</code> means the installation shared-data directory.)</li> <li><code>pg_catalog.english_stem</code> is  the subdictionary (here, a Snowball English stemmer) to use for  thesaurus normalization. Notice that the subdictionary will have its own configuration (for example, stop words), which is not shown here.</li> </ul> <p>Now it is possible to bind the thesaurus dictionary <code>thesaurus_simple</code> to the desired token types in a configuration, for example:</p> <pre><code>ALTER TEXT SEARCH CONFIGURATION russian\n    ALTER MAPPING FOR asciiword, asciihword, hword_asciipart\n    WITH thesaurus_simple;\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/06.-Diccionarios/04.-Diccionario%20de%20tesaaurio/#02-thesaurus-example","title":"02. Thesaurus Example","text":"<p>Consider a simple astronomical thesaurus <code>thesaurus_astro</code>, which contains some astronomical word combinations:</p> <pre><code>supernovae stars : sn\ncrab nebulae : crab\n</code></pre> <p>Below we create a dictionary and bind some token types to an astronomical thesaurus and English stemmer:</p> <pre><code>CREATE TEXT SEARCH DICTIONARY thesaurus_astro (\n    TEMPLATE = thesaurus,\n    DictFile = thesaurus_astro,\n    Dictionary = english_stem\n);\n\nALTER TEXT SEARCH CONFIGURATION russian\n    ALTER MAPPING FOR asciiword, asciihword, hword_asciipart\n    WITH thesaurus_astro, english_stem;\n</code></pre> <p>Now we can see how it works. <code>ts_lexize</code> is not very useful for testing a thesaurus, because it treats its input as a single token. Instead we can use <code>plainto_tsquery</code> and <code>to_tsvector</code> which will break their input strings into multiple tokens:</p> <pre><code>SELECT plainto_tsquery('supernova star');\n plainto_tsquery\n-----------------\n 'sn'\n\nSELECT to_tsvector('supernova star');\n to_tsvector\n-------------\n 'sn':1\n</code></pre> <p>In principle, one can use <code>to_tsquery</code> if you quote the argument:</p> <pre><code>SELECT to_tsquery('''supernova star''');\n to_tsquery\n------------\n 'sn'\n</code></pre> <p>Notice that <code>supernova star</code> matches <code>supernovae stars</code> in <code>thesaurus_astro</code> because we specified the <code>english_stem</code> stemmer in the thesaurus definition. The stemmer removed the <code>e</code> and <code>s</code>.</p> <p>To index the original phrase as well as the substitute, just include it in the right-hand part of the definition:</p> <pre><code>supernovae stars : sn supernovae stars\n\nSELECT plainto_tsquery('supernova star');\n       plainto_tsquery\n-----------------------------\n 'sn' &amp; 'supernova' &amp; 'star'\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/06.-Diccionarios/05.-Diccionario%20de%20Ispell/","title":"05.-Diccionario de Ispell","text":"<p>The Ispell dictionary template supports morphological dictionaries, which can normalize many different linguistic forms of a word into the same lexeme. For example, an English Ispell dictionary can match all declensions and conjugations of the search term <code>bank</code>, e.g., <code>banking</code>, <code>banked</code>, <code>banks</code>, <code>banks'</code>, and <code>bank's</code>.</p> <p>The standard PostgreSQL distribution does not include any Ispell configuration files. Dictionaries for a large number of languages are available from Ispell. Also, some more modern dictionary file formats are supported \u2014 MySpell (OO &lt; 2.0.1) and Hunspell (OO &gt;= 2.0.2). A large list of dictionaries is available on the OpenOffice Wiki.</p> <p>To create an Ispell dictionary perform these steps:</p> <ul> <li>download dictionary configuration files. OpenOffice extension files have the <code>.oxt</code> extension. It is necessary to extract <code>.aff</code> and <code>.dic</code> files, change extensions to <code>.affix</code> and <code>.dict</code>. For some dictionary files it is also needed to convert characters to  the UTF-8 encoding with commands (for example, for a Norwegian language  dictionary):</li> </ul> <p><code>iconv -f ISO_8859-1 -t UTF-8 -o nn_no.affix nn_NO.aff   iconv -f ISO_8859-1 -t UTF-8 -o nn_no.dict nn_NO.dic</code></p> <ul> <li> <p>copy files to the <code>$SHAREDIR/tsearch_data</code> directory</p> </li> <li> <p>load files into PostgreSQL with the following command:</p> </li> </ul> <p><code>CREATE TEXT SEARCH DICTIONARY english_hunspell (       TEMPLATE = ispell,       DictFile = en_us,       AffFile = en_us,       Stopwords = english);</code></p> <p>Here, <code>DictFile</code>, <code>AffFile</code>, and <code>StopWords</code> specify the base names of the dictionary, affixes, and stop-words  files. The stop-words file has the same format explained above for the <code>simple</code> dictionary type. The format of the other files is not specified here but is available from the above-mentioned web sites.</p> <p>Ispell dictionaries usually recognize a limited set of words, so  they should be followed by another broader dictionary; for example, a  Snowball dictionary, which recognizes everything.</p> <p>The <code>.affix</code> file of Ispell has the following structure:</p> <pre><code>prefixes\nflag *A:\n    .           &gt;   RE      # As in enter &gt; reenter\nsuffixes\nflag T:\n    E           &gt;   ST      # As in late &gt; latest\n    [^AEIOU]Y   &gt;   -Y,IEST # As in dirty &gt; dirtiest\n    [AEIOU]Y    &gt;   EST     # As in gray &gt; grayest\n    [^EY]       &gt;   EST     # As in small &gt; smallest\n</code></pre> <p>And the <code>.dict</code> file has the following structure:</p> <pre><code>lapse/ADGRS\nlard/DGRS\nlarge/PRTY\nlark/MRS\n</code></pre> <p>Format of the <code>.dict</code> file is:</p> <pre><code>basic_form/affix_class_name\n</code></pre> <p>In the <code>.affix</code> file every affix flag is described in the following format:</p> <pre><code>condition &gt; [-stripping_letters,] adding_affix\n</code></pre> <p>Here, condition has a format similar to the format of regular expressions. It can use groupings <code>[...]</code> and <code>[^...]</code>. For example, <code>[AEIOU]Y</code> means that the last letter of the word is <code>\"y\"</code> and the penultimate letter is <code>\"a\"</code>, <code>\"e\"</code>, <code>\"i\"</code>, <code>\"o\"</code> or <code>\"u\"</code>. <code>[^EY]</code> means that the last letter is neither <code>\"e\"</code> nor <code>\"y\"</code>.</p> <p>Ispell dictionaries support splitting compound words; a useful  feature. Notice that the affix file should specify a special flag using  the <code>compoundwords controlled</code> statement that marks dictionary words that can participate in compound formation:</p> <pre><code>compoundwords  controlled z\n</code></pre> <p>Here are some examples for the Norwegian language:</p> <pre><code>SELECT ts_lexize('norwegian_ispell', 'overbuljongterningpakkmesterassistent');\n   {over,buljong,terning,pakk,mester,assistent}\nSELECT ts_lexize('norwegian_ispell', 'sjokoladefabrikk');\n   {sjokoladefabrikk,sjokolade,fabrikk}\n</code></pre> <p>MySpell format is a subset of Hunspell. The <code>.affix</code> file of Hunspell has the following structure:</p> <pre><code>PFX A Y 1\nPFX A   0     re         .\nSFX T N 4\nSFX T   0     st         e\nSFX T   y     iest       [^aeiou]y\nSFX T   0     est        [aeiou]y\nSFX T   0     est        [^ey]\n</code></pre> <p>The first line of an affix class is the header. Fields of an affix rules are listed after the header:</p> <ul> <li>parameter name (PFX or SFX)</li> <li>flag (name of the affix class)</li> <li>stripping characters from beginning (at prefix) or end (at suffix) of the word</li> <li>adding affix</li> <li>condition that has a format similar to the format of regular expressions.</li> </ul> <p>The <code>.dict</code> file looks like the <code>.dict</code> file of Ispell:</p> <pre><code>larder/M\nlardy/RT\nlarge/RSPMYT\nlargehearted\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/06.-Diccionarios/05.-Diccionario%20de%20Ispell/#note","title":"Note","text":"<p>MySpell does not support compound words. Hunspell has sophisticated support for compound words. At present, PostgreSQL implements only the basic compound word operations of Hunspell.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/06.-Diccionarios/06.-Diccionario%20de%20bolas%20de%20nieve/","title":"06.-Diccionario de bolas de nieve","text":"<p>The Snowball dictionary template is  based on a project by Martin Porter, inventor of the popular Porter's  stemming algorithm for the English language. Snowball now provides  stemming algorithms for many languages (see the Snowball site for more information). Each algorithm understands how to reduce common  variant forms of words to a base, or stem, spelling within its language. A Snowball dictionary requires a <code>language</code> parameter to identify which stemmer to use, and optionally can specify a <code>stopword</code> file name that gives a list of words to eliminate. (PostgreSQL's standard stopword lists are also provided by the Snowball project.) For example, there is a built-in definition equivalent to</p> <pre><code>CREATE TEXT SEARCH DICTIONARY english_stem (\n    TEMPLATE = snowball,\n    Language = english,\n    StopWords = english\n);\n</code></pre> <p>The stopword file format is the same as already explained.</p> <p>A Snowball dictionary recognizes everything, whether or not it is able to simplify the word, so it  should be placed at the end of the dictionary list. It is useless to  have it before any other dictionary because a token will never pass  through it to the next dictionary.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/08.-Probar%20y%20depuraci%C3%B3n%20de%20la%20b%C3%BAsqueda%20de%20texto/","title":"Index","text":"<p>El comportamiento de una configuraci\u00f3n de b\u00fasqueda de texto  personalizado puede f\u00e1cilmente volverse confuso. Las funciones descritas en esta secci\u00f3n son \u00fatiles para probar objetos de b\u00fasqueda de texto.  Puede probar una configuraci\u00f3n completa, o probar parsers y diccionarios por separado.</p>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/08.-Probar%20y%20depuraci%C3%B3n%20de%20la%20b%C3%BAsqueda%20de%20texto/#_1","title":"Index","text":""},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/08.-Probar%20y%20depuraci%C3%B3n%20de%20la%20b%C3%BAsqueda%20de%20texto/01.-Pruebas%20de%20configuraci%C3%B3n/","title":"01.-Pruebas de configuraci\u00f3n","text":"<p>La funci\u00f3n  <code>ts_debug</code>permite una f\u00e1cil prueba de una configuraci\u00f3n de b\u00fasqueda de texto.</p> <pre><code>ts.debug ([  configregconfig, ]  documenttext,\n         OUT  aliastext,\n         OUT  descriptiontext,\n         OUT  tokentext,\n         OUT  dictionariesregdictionary[],\n         OUT  dictionaryregdictionary,\n         OUT  lexemestext[])\n         devuelve r\u00e9cord\n</code></pre> <p><code>ts_debug</code>muestra informaci\u00f3n sobre cada muestra de  <code>document</code>como producido por el analizador y procesado por los diccionarios configurados. Utiliza la configuraci\u00f3n especificada por <code>config</code>, o  <code>default_text_search_config</code>si se omite ese argumento.</p> <p><code>ts_debug</code>devuelve una fila para cada ficha identificado en el texto por el analizador. Las columnas devueltas son</p> <ul> <li><code>alias</code><code>text</code>Nombre corto del tipo de ficha sisto</li> <li><code>description</code><code>text</code>- descripci\u00f3n del tipo de ficha</li> <li><code>token</code><code>text</code>- texto de la ficha</li> <li><code>dictionaries</code><code>regdictionary[]</code>Los diccionarios seleccionados por la configuraci\u00f3n de este tipo de token</li> <li><code>dictionary</code><code>regdictionary</code>- el diccionario que reconoci\u00f3 la ficha, o  <code>NULL</code>si ninguno lo hizo</li> <li><code>lexemes</code><code>text[]</code>- el lexeme (s) producido por el diccionario que reconoci\u00f3 el token, o  <code>NULL</code>si ninguno lo hizo; una matriz vac\u00eda (<code>{}</code>) significa que fue reconocida como una palabra de alto</li> </ul> <p>He aqu\u00ed un simple ejemplo:</p> <pre><code>SELECT * DESDE ts-debug('english', 'un gato gordo se sent\u00f3 en una alfombra - se comi\u00f3 unas ratas gordas');\n   alias de la descripci\u00f3n de los diccionarios, diccionarios\n-----------------------------------------------------------------------------------\n asciiword . Palabra, todos ASCII A. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n Simbolog\u00edas espaciales en blanco\n asciiword \"\" Palabra, todos ASCII - gorda. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n Simbolog\u00edas espaciales en blanco\n asciiword \" Palabra\", todos ASCII - gato \"english\",stem.\n Simbolog\u00edas espaciales en blanco\n asciiword . Palabra, todos los ASCII-seat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n Simbolog\u00edas espaciales en blanco\n asciiword - Palabra, todo ASCII en el \"english\"stem - . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n Simbolog\u00edas espaciales en blanco\n asciiword . Palabra, todos ASCII A. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n Simbolog\u00edas espaciales en blanco\n asciiword . Palabra, todos ASCII - alfombra \"english\"stem.\n Simbolog\u00edas espaciales en blanco\n S\u00edmbolos espaciales - * * * * * * * * * * *\n asciiword . Palabra, todos ASCII - . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n Simbolog\u00edas espaciales en blanco\n asciiword, la palabra, todos los ASCII comi\u00f3 \"english\",stem.\n Simbolog\u00edas espaciales en blanco\n asciiword . Palabra, todos ASCII A. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n Simbolog\u00edas espaciales en blanco\n asciiword \"\" Palabra, todos ASCII - gorda. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n Simbolog\u00edas espaciales en blanco\n asciiword . Palabra, todos los ASCII - ratas. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n</code></pre> <p>Para una demostraci\u00f3n m\u00e1s extensa, primero creamos un  <code>public.english</code>configuraci\u00f3n y diccionario de Ispell para el idioma ingl\u00e9s:</p> <pre><code>CREATE TEXTO B\u00fasqueda de la CONFIGURACION public.english (COPY = pg.catalog.english );\n\nCREATE TEXTO BEARCH DICTIONARY englishispell (\n    TEMPLATE = ispell,\n    DictFile = ingl\u00e9s,\n    AffFile = english,\n    StopWords = english\n);\n\nALTER TEXTO BUSCAR CONFIGURATION public.english\n   ALTER MAPPING FOR asciiword CON english-ispell, english-stem;\nSELECT * DESDE ts.debug('public.english', 'Las supernovas m\u00e1s brillantes');\n   alias de la descripci\u00f3n de los diccionarios, diccionarios\n-------------------------------------------------------------------------------------------------------------\n asciiword . Palabra, todos ASCII El \"english-ispell,english-stem\" english-ispell *\n Simbolog\u00edas espaciales en blanco\n asciiword . Palabra, todos ASCII . Brightest . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n Simbolog\u00edas espaciales en blanco\n asciiword - Palabra, todas las supernovas ASCII - supernovas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n</code></pre> <p>En este ejemplo, la palabra  <code>Brightest</code>fue reconocida por el analizador como un  <code>ASCII word</code>(alias <code>asciiword</code>). Para este tipo de token, la lista de diccionarios es  <code>english_ispell</code>y <code>english_stem</code>. La palabra fue reconocida por <code>english_ispell</code>, que lo redujo a la sustantivo <code>bright</code>. La palabra  <code>supernovaes</code>es desconocido para el  <code>english_ispell</code>diccionario por lo que fue pasado al siguiente diccionario, y, afortunadamente, fue reconocido (de hecho,  <code>english_stem</code>es un diccionario de Bola de Nieve que lo reconoce todo; por eso se coloc\u00f3 al final de la lista del diccionario).</p> <p>La palabra  <code>The</code>fue reconocida por la  <code>english_ispell</code>diccionario como palabra de alto (Secci\u00f3n 12.6.1) y no se indexar\u00e1. Los espacios tambi\u00e9n se descartan, ya que la configuraci\u00f3n no les proporciona diccionarios.</p> <p>Puede reducir el ancho de la salida especificando expl\u00edcitamente qu\u00e9 columnas desea ver:</p> <pre><code>alias de SELECT, ficha, diccionario, lexemes\nDESDE ts.debug( 'public.english', 'Las supernovas m\u00e1s brillantes');\n   alias, ficha, diccionario, lexemes\n------------------------------------------\n asciiword El english-ispell\n en blanco.\n asciiword . Brightest . english.ispell .bright\n en blanco.\n asciiword - supernovas - english-stem - Supernovas\".\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/08.-Probar%20y%20depuraci%C3%B3n%20de%20la%20b%C3%BAsqueda%20de%20texto/02.-Pruebas%20de%20Parser/","title":"02.-Pruebas de Parser","text":"<p>Las siguientes funciones permiten la prueba directa de un analizador de b\u00fasqueda de texto.</p> <pre><code>ts.parse ( parser_nametext,  documenttext,\n         OUT  tokidinteger, OUT  tokentext) devoluciones \nsetof recordts.parse ( parser_oidoid,  documenttext,\n         OUT  tokidinteger, OUT  tokentext) devoluciones setof record\n</code></pre> <p><code>ts_parse</code>analiza el dado  <code>document</code>y devuelve una serie de discos, uno por cada ficha producido por parsing. Cada registro incluye un  <code>tokid</code>mostrando el tipo de ficha asignado y un  <code>token</code>que es el texto de la ficha. Por ejemplo:</p> <pre><code>SELECT * DESDE ts-parse('default', '123 - un n\u00famero');\n tokid . ficha\n---------------\n    22 123\n    12 .\n    12 -\n     1 A\n    12 .\n     1 n\u00famero\n</code></pre> <pre><code>ts.token.type ( parser_nametext, OUT  tokidinteger,\n              OUT  aliastext, OUT  descriptiontext) devoluciones \nsetof recordts.token.type ( parser_oidoid, OUT  tokidinteger,\n              OUT  aliastext, OUT  descriptiontext) devoluciones setof record\n</code></pre> <p><code>ts_token_type</code>devuelve una tabla que describe cada tipo de token que el analizador  especificado puede reconocer. Para cada tipo de token, la mesa da el  entero  <code>tokid</code>que el analizador utiliza para etiquetar una ficha de este tipo,  <code>alias</code>que nombra el tipo de token en comandos de configuraci\u00f3n, y un corto <code>description</code>. Por ejemplo:</p> <pre><code>SELECT * FROM ts.token.type('default');\n tokid - alias de la descripci\u00f3n\n----------------------------------------------------------------------------------------------------------------\n     1 Adi\u00f3s, Palabra, todos ASCII\n     2 palabra Palabra, todas las letras\n     3 palabra de palabra, palabra, letras y d\u00edgitos\n     4 correos electr\u00f3nicos. Direcci\u00f3n de correo electr\u00f3nico\n     5 url URL\n     6 - Hostia\n     7 a prueba de valores\n     N\u00famero de versi\u00f3n\n     9 . hword-numpart . Parte de la palabra infesada, letras y d\u00edgitos\n    Parte de la palabra infesada, todas las letras\n    11 . hword.asciipart . Parte de la palabra infelada, todos ASCII\n    12 en blanco\n    13 tag . Etiqueta XML\n    14 Protocolo - Jefe de Protocolo\n    15 numhword - Palabra, letras y d\u00edgitos infestados\n    16 de asciihword . Palabra infelada, todo ASCII\n    Palabra infesada, todas las letras\n    Direcci\u00f3n de URL de 18 url.\n    Archivo de archivo o nombre de ruta\n    20 carroza. Notaci\u00f3n decimal\n    21 int . . . . . . . . . . . . . . . . . . . . . \n    22 uint - Uint - Integer sin firmar\n    Entidad de 23o entidad XML\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/08.-Probar%20y%20depuraci%C3%B3n%20de%20la%20b%C3%BAsqueda%20de%20texto/03.-Pruebas%20de%20Diccionario/","title":"03.-Pruebas de Diccionario","text":"<p>El  <code>ts_lexize</code>funci\u00f3n facilita las pruebas de diccionario.</p> <pre><code>ts.lexize ( dictregdictionary,  tokentext) devoluciones text[]\n</code></pre> <p><code>ts_lexize</code>devuelve una serie de lexemes si la entrada  <code>token</code>es conocido por el diccionario, o un array vac\u00edo si el s\u00edmbolo es conocido por el diccionario, pero es una palabra de parada, o  <code>NULL</code>si es una palabra desconocida.</p> <p>Ejemplos:</p> <pre><code>SELECT ts.lexize('english-stem', 'estrellas');\n Ts-lexize\n---------\n Estrella.\n\nSELECT ts-lexize('english-stem', 'a');\n Ts-lexize\n---------\n -\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/09.-B%C3%BAsqueda%20de%20texto%20completo/08.-Probar%20y%20depuraci%C3%B3n%20de%20la%20b%C3%BAsqueda%20de%20texto/03.-Pruebas%20de%20Diccionario/#nota","title":"Nota","text":"<p>El  <code>ts_lexize</code>funci\u00f3n espera un solo token, no texto. Aqu\u00ed hay un caso en el que esto puede ser confuso:</p> <pre><code>SELECT ts-lexize('thesaurus'astro', 'supernovae estrellas') es nulo;\n ?column?\n---------\n t\n</code></pre> <p>El diccionario del tesuro  <code>thesaurus_astro</code>sabes la frase <code>supernovae stars</code>, pero  <code>ts_lexize</code>fracasa ya que no analiza el texto de entrada sino que lo trata como una sola ficha. Uso  <code>plainto_tsquery</code>o o  <code>to_tsvector</code>para probar los diccionarios del tesuro, por ejemplo:</p> <pre><code>SELECT plainto-tsquery('supernovae estrellas');\n plainto-tsquery\n----------------\n 'n'\n</code></pre>"},{"location":"02.-El%20lenguaje%20SQL/10.-Control%20de%20la%20concurrencia/01.-Introducci%C3%B3n/","title":"01.-Introducci\u00f3n","text":"<p>PostgreSQL proporciona un rico conjunto de herramientas para que los  desarrolladores gestionen el acceso simult\u00e1neo a los datos.  Internamente, la consistencia de los datos se mantiene mediante un  modelo de multiversi\u00f3n (Contorno de concurrencia de Multiversi\u00f3n, MVCC). Esto significa que cada declaraci\u00f3n de SQL ve una instant\u00e1nea de datos (una versi\u00f3n de base de datos) como lo era hace alg\u00fan tiempo, independientemente del estado actual de  los datos subyacentes. Esto impide que las declaraciones vean datos  incoherentes producidos por transacciones simult\u00e1neas que realizan  actualizaciones sobre las mismas filas de datos, proporcionando aislamiento de transacciones para cada sesi\u00f3n de bases de datos. MVCC, evitando las metodolog\u00edas de bloqueo de los sistemas tradicionales de  bases de datos, minimiza la contenci\u00f3n de bloqueo para permitir un  rendimiento razonable en entornos multiusuarios.</p> <p>La principal ventaja de utilizar la  MVCCmodelo de control de concurrencia en lugar de bloqueo es que en  MVCCLas cerrajas adquiridas para consultar (lectura) datos no entran en  conflicto con las cerrajas adquiridas para escribir datos, por lo que la lectura nunca bloquea la escritura y la escritura nunca bloquea la  lectura. PostgreSQL mantiene esta garant\u00eda incluso cuando proporciona el nivel m\u00e1s estricto de aislamiento de transacci\u00f3n mediante el uso de un innovador aislamiento de instant\u00e1neas serializable (SSI) nivel.</p> <p>Las instalaciones de bloqueo a nivel de mesa y fila tambi\u00e9n est\u00e1n disponibles en PostgreSQL para aplicaciones que generalmente no necesitan aislamiento completo de transacciones y prefieren gestionar expl\u00edcitamente puntos particulares  de conflicto. Sin embargo, el uso adecuado de  MVCCGeneralmente proporcionar\u00e1 un mejor rendimiento que las cerrajas. Adem\u00e1s, las cerras de asesoramiento definidas por aplicaciones proporcionan un mecanismo  para adquirir cerrajas que no est\u00e1n vinculadas a una sola transacci\u00f3n.0</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/","title":"Index","text":"<p>El rendimiento de la consulta puede verse afectado por muchas cosas.  Algunos de estos pueden ser controlados por el usuario, mientras que  otros son fundamentales para el dise\u00f1o subyacente del sistema. Este  cap\u00edtulo proporciona algunas pistas sobre la comprensi\u00f3n y sinton\u00eda de  la actuaci\u00f3n de PostgreSQL.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/03.-Controlando%20el%20planificador%20con%20cl%C3%A1usulas%20expl%C3%ADcitas%20JOIN/","title":"03.-Controlando el planificador con cl\u00e1usulas expl\u00edcitas JOIN","text":"<p>Es posible controlar el planificador de consultas en cierta medida utilizando el  <code>JOIN</code>Sintaxis. Para ver por qu\u00e9 importa, primero necesitamos algunos antecedentes.</p> <p>En una simple b\u00fasqueda de uni\u00f3n, como:</p> <pre><code>SELECT * DESDE a, b, c AQUI A.id = b.id Y b.ref = c.id;\n</code></pre> <p>el planificador es libre de unirse a las tablas dadas en cualquier  orden. Por ejemplo, podr\u00eda generar un plan de consulta que se une A a B, usando el  <code>WHERE</code>acondicionar <code>a.id = b.id</code>, y luego se une a C a esta mesa unida, usando el otro  <code>WHERE</code>afecci\u00f3n. O podr\u00eda unirse a B a C y luego unirse a A para ese resultado. O podr\u00eda unirse a A a C y luego unirse a ellos con B , pero eso ser\u00eda  ineficiente, ya que el producto cartesiano completo de A y C tendr\u00eda que ser formado, no habiendo ninguna condici\u00f3n aplicable en el  <code>WHERE</code>cl\u00e1usula para permitir la optimizaci\u00f3n de la uni\u00f3n. (Todos se une al albacea de PostgreSQL ocurren entre dos tablas de entrada, por lo que es necesario construir  el resultado en una u otra de estas modas.) El punto importante es que  estas diferentes posibilidades de uni\u00f3n dan resultados sem\u00e1nticamente  equivalentes, pero podr\u00edan tener costos de ejecuci\u00f3n enormemente  diferentes. Por lo tanto, el planificador explorar\u00e1 todos ellos para  tratar de encontrar el plan de consultas m\u00e1s eficiente.</p> <p>Cuando una consulta s\u00f3lo involucra dos o tres mesas, no hay muchas  \u00f3rdenes de uni\u00f3n de las que preocuparse. Pero el n\u00famero de posibles  \u00f3rdenes de uni\u00f3n crece exponencialmente a medida que se expande el  n\u00famero de tablas. M\u00e1s all\u00e1 de unas diez tablas de entrada ya no es  pr\u00e1ctico hacer una b\u00fasqueda exhaustiva de todas las posibilidades, e  incluso para seis o siete mesas la planificaci\u00f3n podr\u00eda tomar un tiempo  molesto largo. Cuando haya demasiadas tablas de entradas, el  planificador PostgreSQL pasar\u00e1 de una b\u00fasqueda exhaustiva a una b\u00fasqueda probabil\u00edstica gen\u00e9tica a trav\u00e9s de un n\u00famero limitado de posibilidades. (El umbral de conmutaci\u00f3n es establecido por el par\u00e1metro de tiempo de ejecuci\u00f3n de geqothhold.) La b\u00fasqueda gen\u00e9tica lleva menos tiempo, pero no necesariamente encontrar\u00e1 el mejor plan posible.</p> <p>Cuando la consulta involucra a las uniones externas, el  planificador tiene menos libertad que para la uni\u00f3n (interior). Por  ejemplo, considere:</p> <pre><code>SELECT * DESDE un JOIN de LEFT (b JOIN c ON (b.ref = c.id) ON (a.id = b.id);\n</code></pre> <p>Aunque las restricciones de esta consulta son superficialmente  similares al ejemplo anterior, la sem\u00e1ntica es diferente porque hay que  emitir una fila para cada fila de A que no tiene fila a juego en la  uni\u00f3n de B y C. Por lo tanto, el planificador no tiene opci\u00f3n de unirse  al orden aqu\u00ed: debe unirse a B a C y luego unirse a A a ese resultado.  En consecuencia, esta consulta tarda menos tiempo en planificarse que la consulta anterior. En otros casos, el planificador podr\u00eda ser capaz de  determinar que m\u00e1s de una orden de uni\u00f3n es segura. Por ejemplo, dado:</p> <pre><code>SELECT * FROM a LEFT JOIN b ON (a.bid = b.id) LEFT JOIN c ON (a.cid = c.id);\n</code></pre> <p>es v\u00e1lido unirse a A a B o C primero. Actualmente, s\u00f3lo  <code>FULL JOIN</code>Limita completamente el orden de uni\u00f3n. La mayor\u00eda de los casos pr\u00e1cticos que se refer\u00edan  <code>LEFT JOIN</code>o o  <code>RIGHT JOIN</code>se puede reorganizar hasta cierto punto.</p> <p>A la persona interior expl\u00edcita se une a la sintaxis (<code>INNER JOIN</code>, <code>CROSS JOIN</code>, o sin adornar <code>JOIN</code>) es sem\u00e1nticamente lo mismo en la lista de las relaciones de entrada en <code>FROM</code>, para que no constrime el orden de uni\u00f3n.</p> <p>Aunque la mayor\u00eda de los tipos de  <code>JOIN</code>no constrenar completamente la orden de uni\u00f3n, es posible instruir al planificador de consultas PostgreSQL para tratar a todos  <code>JOIN</code>cl\u00e1usulas que limitan el orden de uni\u00f3n de todos modos. Por ejemplo, estas tres consultas son l\u00f3gicamente equivalentes:</p> <pre><code>SELECT * DESDE a, b, c AQUI A.id = b.id Y b.ref = c.id;\nSELECT * DESDE una CROSS JOIN b CROSS JOIN cHERE a.id = b.id Y b.ref = c.id;\nSELECT * DESDE un JOIN (b JOIN c ON (b.ref = c.id)) ON (a.id = b.id);\n</code></pre> <p>Pero si le decimos al planificador que honren el  <code>JOIN</code>El orden, el segundo y el tercero tardan menos tiempo en planificarse que  el primero. Este efecto no vale la pena preocuparse por s\u00f3lo tres mesas, pero puede ser un salvavidas con muchas mesas.</p> <p>Forzar al planificador a seguir el orden de uni\u00f3n establecido por expl\u00edcito <code>JOIN</code>s, establezca el par\u00e1metro de tiempo de ejecuci\u00f3n join.collapse-limit a 1. (A continuaci\u00f3n se examinan otros valores posibles.)</p> <p>Usted no necesita limitar el orden de uni\u00f3n completamente para reducir el tiempo de b\u00fasqueda, porque est\u00e1 bien usar  <code>JOIN</code>operadores dentro de los art\u00edculos de una llanura  <code>FROM</code>lista. Por ejemplo, considere:</p> <pre><code>SELECT * FROM a CROSS JOIN b, c, d, eHERE ...;\n</code></pre> <p>Con  <code>join_collapse_limit</code>= 1, esto obliga al planificador a unirse a A a B antes de unirse a otras mesas, pero no limita sus opciones de otra manera. En este ejemplo, el  n\u00famero de posibles \u00f3rdenes de uni\u00f3n se reduce por un factor de 5.</p> <p>La restricci\u00f3n de la b\u00fasqueda del planificador de esta manera es  una t\u00e9cnica \u00fatil tanto para reducir el tiempo de planificaci\u00f3n como para dirigir al planificador a un buen plan de consulta. Si el planificador  elige un mal orden de uni\u00f3n por defecto, puede obligarlo a elegir un  mejor pedido a trav\u00e9s de  <code>JOIN</code>sintaxis asumiendo que usted sabe de un mejor orden, es decir. Se recomienda la experimentaci\u00f3n.</p> <p>Un tema estrechamente relacionado que afecta el tiempo de  planificaci\u00f3n est\u00e1 colapando subcoquer\u00edas en su consulta de padres. Por  ejemplo, considere:</p> <pre><code>SELECT *\nDe x, y,\n    (SELECT * FROM a, b, c WHERE algo) AS ss\nD\u00f3nde algo;\n</code></pre> <p>Esta situaci\u00f3n podr\u00eda surgir del uso de una visi\u00f3n que contiene una uni\u00f3n;  <code>SELECT</code>La regla se insertar\u00e1 en lugar de la referencia de la opini\u00f3n, dando una  consulta muy parecida a la anterior. Normalmente, el planificador  intentar\u00e1 colapsar la sublicuidad en el padre, cediendo:</p> <pre><code>SELECT * FROM x, y, a, b, c AQUI algo Y algo;\n</code></pre> <p>Esto generalmente resulta en un plan mejor que la planificaci\u00f3n de la suqueter\u00eda por separado. (Por ejemplo, el exterior  <code>WHERE</code>condiciones pueden ser tales que unirse X a A primero elimina muchas filas de A,  evitando as\u00ed la necesidad de formar la salida l\u00f3gica completa de la  subcoquer\u00eda.) Pero al mismo tiempo, hemos aumentado el tiempo de  planificaci\u00f3n; aqu\u00ed, tenemos un problema de uni\u00f3n a cinco v\u00edas  reemplazando dos problemas separados de tres v\u00edas de uni\u00f3n. Debido al  crecimiento exponencial del n\u00famero de posibilidades, esto marca una gran diferencia. El planificador trata de evitar quedar atrapado en enormes  problemas de b\u00fasqueda de uni\u00f3n al no colaparse una subcoquer\u00eda si m\u00e1s  que   <code>from_collapse_limit``FROM</code>Los art\u00edculos resultar\u00edan en la consulta de los padres. Puedes cambiar el  tiempo de planificaci\u00f3n con la calidad del plan ajustando este par\u00e1metro de tiempo de ejecuci\u00f3n hacia arriba o hacia abajo.</p> <p>desde.collapse-limit y join-collapse-limit se nombran de manera similar porque hacen casi lo mismo: uno controla cuando el planificador aplanar\u00e1 las subconsecuencias, y los otros controles cuando aplanar\u00e1 las uniones expl\u00edcitas. T\u00edpicamente te pondr\u00edas.  <code>join_collapse_limit</code>igual a  <code>from_collapse_limit</code>(para que las uniones expl\u00edcitas y las subcoquer\u00edas act\u00faen de manera similar) o establecido  <code>join_collapse_limit</code>a 1 (si quieres controlar unir el orden con las uniones expl\u00edcitas). Pero podr\u00edas configurarlos de manera diferente si est\u00e1s tratando de afinar  el intercambio entre el tiempo de planificaci\u00f3n y el tiempo de  ejecuci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/05.-Configuraciones%20no%20durables/","title":"05.-Configuraciones no durables","text":"<p>La durabilidad es una caracter\u00edstica de base de datos que garantiza  el registro de transacciones comprometidas incluso si el servidor se  bloquea o pierde energ\u00eda. Sin embargo, la durabilidad a\u00f1ade un avance  significativo de la base de datos, por lo que si su sitio no requiere  tal garant\u00eda, PostgreSQL se puede configurar para ejecutarse mucho m\u00e1s r\u00e1pido. Los siguientes  son los cambios de configuraci\u00f3n que puede hacer para mejorar el  rendimiento en tales casos. Excepto como se se\u00f1ala a continuaci\u00f3n, la  durabilidad sigue estando garantizada en caso de un fallo del software  de la base de datos; s\u00f3lo un fallo abrupto del sistema operativo crea un riesgo de p\u00e9rdida de datos o corrupci\u00f3n cuando se utilizan estos  ajustes.</p> <ul> <li>Coloque el directorio de datos del grupo de datos en un sistema de archivos respaldado por la memoria (es decir,  RAMdisco). Esto elimina todos los datos de base de datos de disco I/S, pero limita el almacenamiento de datos a la cantidad de memoria disponible (y tal  vez swap).</li> <li>Apagar fsync ; no hay necesidad de rascar los datos al disco.</li> <li>Apagar sincr\u00f3nico.commit ; podr\u00eda no haber necesidad de forzar  WALescribe al disco en cada confirmaci\u00f3n. Esta configuraci\u00f3n se produce la p\u00e9rdida de la transacci\u00f3n de riesgo (aunque no la corrupci\u00f3n de datos) en caso  de un fallo de la base de datos.</li> <li>Apagar a la totalidad.page.writes ; no hay necesidad de protegerse de los escritos de la p\u00e1gina parcial.</li> <li>Aumentar el m\u00e1ximo tama\u00f1o y el control-tiempo de tiempo de control ; esto reduce la frecuencia de los puestos de control, pero aumenta las necesidades de almacenamiento de .</li> <li>Crear mesas desenganchadas para evitar  WALEscribe, aunque hace que las tablas no sean seguras.</li> </ul>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/01.-Usando%20EXPLAIN/","title":"Index","text":"<p>PostgreSQL dise\u00f1a un plan de consulta para cada consulta que recibe. Elegir el plan adecuado para coincidir  con la estructura de consulta y las propiedades de los datos es  absolutamente cr\u00edtico para el buen rendimiento, por lo que el sistema  incluye un planificador complejo que intenta elegir buenos planes. Puedes usar el  <code>EXPLAIN</code>comando para ver qu\u00e9 plan de consulta crea el planificador para cualquier  consulta. La lectura de planes es un arte que requiere cierta  experiencia para dominar, pero esta secci\u00f3n intenta cubrir lo b\u00e1sico.</p> <p>Ejemplos en esta secci\u00f3n se extraen de la base de datos de pruebas de regresi\u00f3n despu\u00e9s de hacer un <code>VACUUM ANALYZE</code>, utilizando 9,3 fuentes de desarrollo. Usted debe ser capaz de obtener  resultados similares si usted prueba los ejemplos usted mismo, pero sus  costos estimados y recuentos de filas pueden variar ligeramente porque <code>ANALYZE</code>Las estad\u00edsticas son muestras aleatorias m\u00e1s que exactas, y porque los  costos son inherentemente algo dependientes de la plataforma.</p> <p>Los ejemplos utilizados <code>EXPLAIN</code>'s por defecto, texto, formato de salida, que es compacto y conveniente para que los humanos la lean. Si quieres alimentarte <code>EXPLAIN</code>'s salida a un programa para un an\u00e1lisis posterior, debe utilizar uno de  sus formatos de salida legibles por m\u00e1quina (XML, JSON o YAML) en su  lugar.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/01.-Usando%20EXPLAIN/01.-EXPLAIN%20Funciones%20b%C3%A1sicas/","title":"01.-EXPLAIN Funciones b\u00e1sicas","text":"<p>La estructura de un plan de consulta es un \u00e1rbol de nodos planos. Los nodos en el nivel inferior del \u00e1rbol son nodos de escaneo:  devuelven filas crudas de una mesa. Hay diferentes tipos de nodos de  escaneo para diferentes m\u00e9todos de acceso a la mesa: escaneos  secuenciales, escaneos de \u00edndice y escaneos de \u00edndice de mapa de bits.  Tambi\u00e9n hay fuentes de filas no mesa, como  <code>VALUES</code>cl\u00e1usulas y funciones de devoluci\u00f3n en <code>FROM</code>, que tienen sus propios tipos de nodos de escaneo. Si la consulta  requiere unirse, agregaci\u00f3n, clasificaci\u00f3n u otras operaciones en las  filas crudas, entonces habr\u00e1 nodos adicionales por encima de los nodos  de escaneo para realizar estas operaciones. Una vez m\u00e1s, por lo general  hay m\u00e1s de una manera posible de hacer estas operaciones, por lo que  diferentes tipos de nodos tambi\u00e9n pueden aparecer aqu\u00ed. La salida de  <code>EXPLAIN</code>tiene una l\u00ednea para cada nodo en el \u00e1rbol de plan, mostrando el tipo de nodo b\u00e1sico m\u00e1s las estimaciones de costos que el planificador hizo para la  ejecuci\u00f3n de ese nodo de plan. Pueden aparecer l\u00edneas adicionales,  sangrados de la l\u00ednea de resumen del nodo, para mostrar propiedades  adicionales del nodo. La primera l\u00ednea (la l\u00ednea de resumen para el nodo m\u00e1s alto) tiene el costo total estimado de ejecuci\u00f3n para el plan; es  este n\u00famero que el planificador busca minimizar.</p> <p>Aqu\u00ed hay un ejemplo trivial, s\u00f3lo para mostrar c\u00f3mo es la salida:</p> <pre><code>EXPLAIN SELECT * DESDE tenk1;\n\n                         QUERY PLAN\n-------------------------------------------------------------------------------------------------------------------------------------------------\n Seq Scan en tenk1 (costo=0,00,458,00 filas=10000 anchura=244)\n</code></pre> <p>Desde que esta consulta no tiene  <code>WHERE</code>cl\u00e1usula, debe escanear todas las filas de la mesa, por lo que el planificador ha optado por utilizar un simple plan de escaneo secuencial. Los n\u00fameros  que se citan entre par\u00e9ntesis son (de izquierda a derecha):</p> <ul> <li>Costo estimado de puesta en marcha. Este es el tiempo que  se gasta antes de que la fase de salida pueda comenzar, por ejemplo, el  tiempo para hacer la clasificaci\u00f3n en un nodo de tipo.</li> <li>Costo total estimado. Esto se indica en el supuesto de que  el nodo del plan se lleva a t\u00e9rmino, es decir, se recuperan todas las  filas disponibles. En la pr\u00e1ctica, el nodo padre de un nodo podr\u00eda  detenerse a leer todas las filas disponibles (ver  <code>LIMIT</code>ejemplo a continuaci\u00f3n).</li> <li>N\u00famero estimado de filas de producci\u00f3n de este nodo de plan. Una vez m\u00e1s, se supone que el nodo se ejecuta para completarlo.</li> <li>Ancho medio estimado de la producci\u00f3n de hileras por este nodo plan (en bytes).</li> </ul> <p>Los costos se miden en unidades arbitrarias determinadas por los par\u00e1metros de costos del planificador (v\u00e9ase la secci\u00f3n 20.7.2). La pr\u00e1ctica tradicional es medir los costos en las unidades de b\u00fasqueda de p\u00e1ginas de disco; es decir, seq-page-cost se establece convencionalmente para  <code>1.0</code>y los dem\u00e1s par\u00e1metros de costos se establecen en relaci\u00f3n con eso. Los  ejemplos en esta secci\u00f3n se ejecutan con los par\u00e1metros de costos por  defecto.</p> <p>Es importante entender que el costo de un nodo de nivel superior  incluye el costo de todos sus nodos infantiles. Tambi\u00e9n es importante  darse cuenta de que el costo s\u00f3lo refleja las cosas que al planificador  le importan. En particular, el costo no considera el tiempo dedicado a  transmitir filas de resultados al cliente, lo que podr\u00eda ser un factor  importante en el tiempo real transcurrido; pero el planificador lo  ignora porque no puede cambiarlo alterando el plan. (Cada plan correcto  producir\u00e1 el mismo conjunto de filas, confiamos.)</p> <p>El  <code>rows</code>El valor es un poco complicado porque no es el n\u00famero de filas procesadas o escaneadas por el nodo del plan, sino m\u00e1s bien el n\u00famero emitido por el nodo. Esto es a menudo menos que el n\u00famero escaneado, como resultado de filtrar por cualquier <code>WHERE</code>-clausal condiciones que se est\u00e1n aplicando en el nodo. Idealmente la estimaci\u00f3n de filas de alto nivel se aproximar\u00e1 al n\u00famero de filas realmente  devueltas, actualizadas o eliminadas por la consulta.</p> <p>Volviendo a nuestro ejemplo:</p> <pre><code>EXPLAIN SELECT * DESDE tenk1;\n\n                         QUERY PLAN\n-------------------------------------------------------------------------------------------------------------------------------------------------\n Seq Scan en tenk1 (costo=0,00,458,00 filas=10000 anchura=244)\n</code></pre> <p>Estos n\u00fameros se derivan muy directamente. Si lo haces:</p> <pre><code>SELECT relpages, reltuples FROM pg-class WHERE renombre = 'tenk1';\n</code></pre> <p>encontrar\u00e1s eso.  <code>tenk1</code>tiene 358 p\u00e1ginas de disco y 10000 filas. El costo estimado se calcula como (las p\u00e1ginas de discos leen * seq.page.cost) (fila escaneada * cpu-tuple.cost). Por defecto,  <code>seq_page_cost</code>es 1.0 y  <code>cpu_tuple_cost</code>es 0,01, por lo que el costo estimado es (358 * 1.0) (10000 * 0.01) = 458.</p> <p>Ahora vamos a modificar la consulta para a\u00f1adir un  <code>WHERE</code>afecci\u00f3n:</p> <pre><code>EXPLAIN SELECT * FROM tenk1 WHERE unique1 7000;\n\n                         QUERY PLAN\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Seq Scan en tenk1 (costo=0,00,483,00 hileras=7001 anchura=244)\n   Filtro: (\u00fanico 1 7000)\n</code></pre> <p>Observe que el  <code>EXPLAIN</code>La salida muestra la  <code>WHERE</code>cl\u00e1usula que se aplica como una filtercondici\u00f3n de filtro y condici\u00f3n adjunta al nodo plan Seq Scan. Esto significa que el nodo  plan comprueba la condici\u00f3n para cada fila que escanea, y produce s\u00f3lo  los que pasan la condici\u00f3n. La estimaci\u00f3n de las filas de producci\u00f3n se  ha reducido debido a la  <code>WHERE</code>cl\u00e1usula. Sin embargo, el escaneo todav\u00eda tendr\u00e1 que visitar todas las 10000  filas, por lo que el costo no ha disminuido; de hecho ha subido un poco  (por 10000 * cpuoperator-cost, para ser exactos) para reflejar el tiempo adicional de CPU dedicado a comprobar el  <code>WHERE</code>afecci\u00f3n.</p> <p>El n\u00famero real de filas que esta consulta seleccionar\u00eda es de 7000, pero el  <code>rows</code>La estimaci\u00f3n es s\u00f3lo aproximada. Si intentas duplicar este experimento,  probablemente obtendr\u00e1s una estimaci\u00f3n ligeramente diferente; adem\u00e1s,  puede cambiar despu\u00e9s de cada  <code>ANALYZE</code>comando, porque las estad\u00edsticas elaboradas por  <code>ANALYZE</code>se toman de una muestra aleatorizada de la tabla.</p> <p>Ahora, hagamos la condici\u00f3n m\u00e1s restrictiva:</p> <pre><code>EXPLAIN SELECT * FROM tenk1 WHERE unique1 . 100;\n\n                                  QUERY PLAN\n---------------------------------------------------------------------\n Bitmap Heap Scan on tenk1 (costo=5.07..229.20 hileras=101 anchura=244)\n   Reche Cond: (\u00fanico 1 - 100)\n   ----Bitmap Index Expan en tenk1-unique1 (costo=0.00,.5.04 filas=101 anchura=0)\n         Index Cond: (\u00fanico 1 - 100)\n</code></pre> <p>Aqu\u00ed el planificador ha decidido usar un plan de dos pasos: el  nodo del plan para ni\u00f1os visita un \u00edndice para encontrar la ubicaci\u00f3n de las filas que coinciden con la condici\u00f3n del \u00edndice, y entonces el nodo del plan superior realmente obtiene esas filas de la propia tabla.  Traer filas por separado es mucho m\u00e1s caro que leerlos secuencialmente,  pero debido a que no todas las p\u00e1ginas de la mesa tienen que ser  visitadas, esto sigue siendo m\u00e1s barato que un escaneo secuencial. (La  raz\u00f3n para usar dos niveles de plan es que el nodo del plan superior  ordena las ubicaciones de fila identificadas por el \u00edndice en orden  f\u00edsico antes de leerlas, para minimizar el costo de las ofertas  separadas. El mapa de bits mencionado en los nombres de los nodos es el mecanismo que hace la clasificaci\u00f3n.)</p> <p>Ahora vamos a a\u00f1adir otra condici\u00f3n a la  <code>WHERE</code>cl\u00e1usula:</p> <pre><code>EXPLAIN SELECT * DESDE tenk1 WHERE.1 - 100 Y stringu1 = 'xxx';\n\n                                  QUERY PLAN\n---------------------------------------------------------------------\n Bitmap Heap Scan en tenk1 (costo=5,04,.229.43 filas=1 anchura=244)\n   Reche Cond: (\u00fanico 1 - 100)\n   Filtrar: (stringu1 = 'xxx':name)\n   ----Bitmap Index Expan en tenk1-unique1 (costo=0.00,.5.04 filas=101 anchura=0)\n         Index Cond: (\u00fanico 1 - 100)\n</code></pre> <p>La condici\u00f3n a\u00f1adida  <code>stringu1 = 'xxx'</code>reduce la estimaci\u00f3n de conteo de filas de salida, pero no el costo porque  todav\u00eda tenemos que visitar el mismo conjunto de filas. Observe que el  <code>stringu1</code>la cl\u00e1usula no puede aplicarse como una condici\u00f3n de \u00edndice, ya que este \u00edndice est\u00e1 s\u00f3lo en el  <code>unique1</code>columnas. En su lugar se aplica como un filtro en las filas recuperada por el  \u00edndice. Por lo tanto, el costo ha subido ligeramente para reflejar este  chequeo extra.</p> <p>En algunos casos, el planificador preferir\u00e1 un plan  escaneo  \u00edndice </p> <pre><code>EXPLAIN SELECT * FROM tenk1 WHERE unique1 = 42;\n\n                                 QUERY PLAN\n---------------------------------------------------------------\n Indice Escane, con tenk1 en tenk1 en tenk1 (costo=0,29,8,0,30 hileras=1 anchura=244)\n   Indice Cond: (\u00fanico1 = 42)\n</code></pre> <p>En este tipo de plan las filas de tabla se obtienen en orden  \u00edndice, lo que las hace a\u00fan m\u00e1s caras de leer, pero hay tan pocos que el costo extra de ordenar las ubicaciones de la fila no vale la pena.  Ver\u00e1s m\u00e1s a menudo este tipo de plan para las consultas que traen una  sola fila. Tambi\u00e9n se utiliza a menudo para consultas que tienen un  <code>ORDER BY</code>condici\u00f3n que coince con el orden \u00edndice, porque entonces no se necesita ning\u00fan paso de clasificaci\u00f3n extra para satisfacer el <code>ORDER BY</code>. En este ejemplo, a\u00f1adiendo  <code>ORDER BY unique1</code>utilizar\u00eda el mismo plan porque el \u00edndice ya proporciona impl\u00edcitamente el pedido solicitado.</p> <p>El planificador puede implementar una  <code>ORDER BY</code>cl\u00e1usula de varias maneras. El ejemplo anterior demuestra que esa cl\u00e1usula de  orden puede aplicarse impl\u00edcitamente. El planificador tambi\u00e9n puede  a\u00f1adir un  <code>sort</code>pasos:</p> <pre><code>EXPLAIN SELECT * DESDE tenk1 ORDE BY unique1;\n                            QUERY PLAN\n--------------------------------------------------------------------------------------------------------------\n Ordenar (costo=1109.39.31.39.39 hileras=10000 anchura=244)\n   Sort Key: \u00fanico1\n   -- Seq Scan en tenk1 (costo=0,00,445.00 filas=10000 anchura=244)\n</code></pre> <p>Si una parte del plan garantiza un pedido en un prefijo de las  teclas de tipo requeridas, entonces el planificador puede en su lugar  decidir utilizar un  <code>incremental sort</code>pasos:</p> <pre><code>EXPLAIN SELECT * FROM tenk1 ORDER BY four, ten LIMIT 100;\n                                              QUERY PLAN\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n L\u00edmite (costo=521,06.5,5,05 hileras=100 anchura=244)\n   ---- Ordenaci\u00f3n incremental (costo=521,06.02,25,95 filas=10000 ancho=244)\n         Sort Key: cuatro, diez\n         Clave de la gama: cuatro\n         --- Indice escaneo usando index-tenk1-on-four en tenk1 (costo=0,29..1510,08 filas=10000 ancho=244)\n</code></pre> <p>En comparaci\u00f3n con los tipos regulares, la clasificaci\u00f3n permite  la devoluci\u00f3n de tuples antes de que se haya clasificado todo el  conjunto de resultados, lo que especialmente permite optimizaciones con  <code>LIMIT</code>las  preguntas. Tambi\u00e9n puede reducir el uso de la memoria y la probabilidad  de derramar los tipos al disco, pero viene a costa del aumento de los  gastos generales de divisi\u00f3n del resultado establecido en m\u00faltiples  lotes de clasificaci\u00f3n.</p> <p>Si hay \u00edndices separados en varias de las columnas a las que se hace referencia en <code>WHERE</code>, el planificador podr\u00eda optar por utilizar una combinaci\u00f3n AND o OR de los \u00edndices:</p> <pre><code>EXPLAIN SELECT * DESDE tenk1 WHERE unique1 - 100 Y unique2 9000;\n\n                                     QUERY PLAN\nA------------------------------------------------------------------------------------------------------------\n Bitmap Heap Scan en tenk1 (costo=25.08.60,21 hileras=10 anchura=244)\n   Reche Cond: ((\u00fanico1 - 100) Y (\u00fanico2 - 9000))\n   - BitmapAnd (costo=25.08..25.08 hileras=10 anchura=0)\n         ----Bitmap Index Expan en tenk1-unique1 (costo=0.00,.5.04 filas=101 anchura=0)\n               Index Cond: (\u00fanico 1 - 100)\n         ----Bitmap Index Scan on tenk1-unique2 (cost=0.00,.19.78 filas=999 anchura=0)\n               Index Cond: (\u00fanico2 - 9000)\n</code></pre> <p>Pero esto requiere visitar ambos \u00edndices, por lo que no es  necesariamente una victoria en comparaci\u00f3n con usar s\u00f3lo un \u00edndice y  tratar la otra condici\u00f3n como un filtro. Si vas a variar los rangos  involucrados ver\u00e1s el plan cambiar en consecuencia.</p> <p>Aqu\u00ed hay un ejemplo que muestra los efectos de <code>LIMIT</code>:</p> <pre><code>EXPLAIN SELECT * DESDE tenk1 WHERE unique1 - 100 AND unique2 9000 LIMIT 2;\n\n                                     QUERY PLAN\nA------------------------------------------------------------------------------------------------------------\n L\u00edmite (costo=0,29,14,48 filas=2 anchura=244)\n   --- Indice Escanear con tenk1-unique2 en tenk1 (costo = 0,29.71,27 filas=10 de ancho=244)\n         Index Cond: (\u00fanico2 - 9000)\n         Filtro: (\u00fanico 1 - 100)\n</code></pre> <p>Esta es la misma consulta que arriba, pero a\u00f1adimos un  <code>LIMIT</code>para que no todas las filas necesitan ser recuperadas, y el planificador  cambi\u00f3 de opini\u00f3n sobre qu\u00e9 hacer. Observe que el costo total y el  conteo de filas del nodo de escaneo de Index se muestran como si se  corriera a completar. Sin embargo, se espera que el nodo Limit se  detenga despu\u00e9s de recuperar s\u00f3lo una quinta parte de esas filas, por lo que su costo total es s\u00f3lo una quinta parte, y ese es el costo estimado real de la consulta. Este plan se prefiere sobre la adici\u00f3n de un nodo  de l\u00edmite al plan anterior porque el L\u00edmite no pudo evitar pagar el  costo de arranque del escaneo de bitmap, por lo que el costo total ser\u00eda algo mayor de 25 unidades con ese enfoque.</p> <p>Intentemos unirnos a dos tablas, usando las columnas que hemos estado discutiendo:</p> <pre><code>EXPLAIN SELECT *\nDESDE tenk1 t1, tenk2 t2\nDONDE t1.unique1 - 10 Y t1.unique2 = t2.unique2;\n\n                                      QUERY PLAN\nn Nested Loop (costo=4.65..118,62 hileras=10 anchura=488)\n   ---Bitmap Heap Scan en tenk1 t1 (costo=4.36.39.47 hileras=10 anchura=244)\n         Reche Cond: (\u00fanico 1 - 10)\n         ----Bitmap Index Scan on tenk1-unique1 (costo=0.00,4,4,36 filas=10 width=0)\n               Index Cond: (\u00fanico 1 - 10)\n   --- Indice Escaneido con tenk2-unique2 en tenk2 t2 (costo=0,29,.7.91 filas=1 anchura=244)\n         Indice Cond: (\u00fanico2 = t1.unique2)\n</code></pre> <p>En este plan, tenemos un nodo de unir un ojo anidado con dos  escaneos de mesa como insumos, o ni\u00f1os. La hendidura de las l\u00edneas de  resumen del nodo refleja la estructura del \u00e1rbol de planta. El primer  \u00fanete, o exterior, el ni\u00f1o es un escaneo de mapa de bits similar a los que vimos antes. Su costo y conteo de filas son los mismos de los que obtendr\u00edamos de  <code>SELECT ... WHERE unique1 &lt; 10</code>porque estamos aplicando la  <code>WHERE</code>cl\u00e1usula  <code>unique1 &lt; 10</code>en ese nodo. El  <code>t1.unique2 = t2.unique2</code>la cl\u00e1usula a\u00fan no es relevante, por lo que no afecta el conteo de filas  del escaneo exterior. El nodo de la uni\u00f3n de la unidad de bucle de  anidaci\u00f3n funcionar\u00e1 su segundo, o \"interior\" ni\u00f1o una vez por cada fila obtenida del ni\u00f1o exterior. Los valores de  columna de la fila exterior actual se pueden enchufar en el escaneo  interior; aqu\u00ed, el  <code>t1.unique2</code>valor de la fila exterior est\u00e1 disponible, por lo que obtenemos un plan y  costos similares a lo que vimos arriba para un simple  <code>SELECT ... WHERE t2.unique2 = *</code>constant<code>*</code>caso. (El costo estimado es en realidad un poco m\u00e1s bajo de lo que se vio  anteriormente, como resultado de la cach\u00e9 que se espera que ocurra  durante los escaneos repetidos de \u00edndice en <code>t2</code>.) Los costos del nodo bucle se establecen sobre la base del costo del  escaneo exterior, m\u00e1s una repetici\u00f3n del escaneo interior para cada fila exterior (10 * 7.91, aqu\u00ed), m\u00e1s un poco de tiempo de CPU para el  procesamiento de la uni\u00f3n.</p> <p>En este ejemplo el conteo de fila de salida de la uni\u00f3n es el  mismo que el producto de los dos an\u00e1lisis de filas, pero eso no es  cierto en todos los casos porque puede haber adicional  <code>WHERE</code>cl\u00e1usulas que mencionan ambas tablas y por lo tanto s\u00f3lo se pueden aplicar en el  punto de uni\u00f3n, no para el escaneo de entrada. He aqu\u00ed un ejemplo:</p> <pre><code>EXPLAIN SELECT *\nDESDE tenk1 t1, tenk2 t2\nDONDE t1.unique1 - 10 Y t2.unique2 - 10 Y t1.hundred;\n\n                                         QUERY PLAN\n-------------------------------------------------------------------------\n Nested Loop (costo=4.65.49.46 filas=33 anchura=488)\n   Unirse a Filter: (t1.hciento . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n   ---Bitmap Heap Scan en tenk1 t1 (costo=4.36.39.47 hileras=10 anchura=244)\n         Reche Cond: (\u00fanico 1 - 10)\n         ----Bitmap Index Scan on tenk1-unique1 (costo=0.00,4,4,36 filas=10 width=0)\n               Index Cond: (\u00fanico 1 - 10)\n   - Materializaci\u00f3n (costo=0,29,8,51 hileras=10 anchura=244)\n         --- Indice Expansi\u00f3n con tenk2unique2 en tenk2 t2 (costo = 0,29,8,46 hileras=10 anchura=244)\n               Index Cond: (\u00fanico2 - 10)\n</code></pre> <p>La afecci\u00f3n  <code>t1.hundred &lt; t2.hundred</code>no se puede probar en el  <code>tenk2_unique2</code>\u00edndice, por lo que se aplica en el nodo de uni\u00f3n. Esto reduce el conteo  estimado de fila de salida del nodo de uni\u00f3n, pero no cambia el escaneo  de entrada.</p> <p>Observe que aqu\u00ed el planificador ha elegido materializar la relaci\u00f3n interna de la uni\u00f3n, poniendo un nodo de plan de Materializarlo. Esto significa que el  <code>t2</code>El escaneo de \u00edndice se har\u00e1 una sola vez, a pesar de que el nodo de la  uni\u00f3n de lazo requiere leer esos datos diez veces, una vez para cada  fila de la relaci\u00f3n externa. El nodo de Materializar guarda los datos en la memoria tal como se lee, y luego devuelve los datos de la memoria en cada pase posterior.</p> <p>Cuando se trata de unas uniones externas, es posible que vea unirse a los nodos de plan con los dos.Join Filter\u201cFilter\u201d Las condiciones de Filtrar vienen de la uni\u00f3n exterior  <code>ON</code>cl\u00e1usula, por lo que una fila que falla la condici\u00f3n de Join Filter todav\u00eda  podr\u00eda ser emitida como una fila desviada. Pero una condici\u00f3n de filtro  simple se aplica despu\u00e9s de las reglas del ador\u00edn externo y por lo tanto act\u00faa para eliminar las filas incondicionalmente. En un \u00fanete interior  no hay diferencia sem\u00e1ntica entre este tipo de filtros.</p> <p>Si cambiamos un poco la selectividad de la consulta, podr\u00edamos conseguir un plan de unirse muy diferente:</p> <pre><code>EXPLAIN SELECT *\nDESDE tenk1 t1, tenk2 t2\nDONDE t1.unique1 - 100 Y t1.unique2 = t2.unique2;\n\n                                        QUERY PLAN\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Hash Join (costo=230.47.713,713.98 hileras=101 anchura=488)\n   Hash Cond: (t2.unique2 = t1.unique2)\n   --- Seq Scan en tenk2 t2 (costo=0,00, 0,445.00 filas=10000 ancho=244)\n   - Hash (costo=229.20,2.2229,20 hileras=101 de ancho=244)\n         ---Bitmap Heap Scan en tenk1 t1 (costo=5.07.229.20 filas=101 anchura=244)\n               Reche Cond: (\u00fanico 1 - 100)\n               ----Bitmap Index Expan en tenk1-unique1 (costo=0.00,.5.04 filas=101 anchura=0)\n                     Index Cond: (\u00fanico 1 - 100)\n</code></pre> <p>Aqu\u00ed, el planificador ha optado por utilizar un semeja un semeja, en la que se introducen filas de una mesa de hach\u00eds en memoria, despu\u00e9s de lo cual se escanea la otra mesa y se analiza la tabla de hach\u00eds para los partidos de cada fila. Una vez m\u00e1s note c\u00f3mo la hendidura refleja  la estructura del plan: el escaneo de bitmap encendido  <code>tenk1</code>es la entrada al nodo Hash, que construye la mesa de hach\u00eds. Eso luego se  devuelve al nodo Hash Join, que lee las filas de su plan exterior  infantil y busca la mesa de hach\u00eds para cada uno.</p> <p>Otro tipo posible de uni\u00f3n es una uni\u00f3n, ilustrado aqu\u00ed:</p> <pre><code>EXPLAIN SELECT *\nDESDE tenk1 t1, onek t2\nDONDE t1.unique1 - 100 Y t1.unique2 = t2.unique2;\n\n                                        QUERY PLAN\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Merge Unin (costo=198.11..268.19 hileras=10 anchura=488)\n   Merge Cond: (t1.unique2 = t2.unique2)\n   --- Indice Scan usando tenk1-unique2 en tenk1 t1 (costo=0,29,66,28 hileras=101 ancho=244)\n         Filtro: (\u00fanico 1 - 100)\n   --- Ordenar (costo=197.83.200.33 hileras=1000 anchura=244)\n         Sort Key: t2.unique2\n         --- Seq Scan on onek t2 (costo=0,00,.148,00 filas=1000 anchura=244)\n</code></pre> <p>La fusi\u00f3n requiere que sus datos de entrada sean ordenados en las claves de uni\u00f3n. En este plan el  <code>tenk1</code>los datos se clasifican mediante el uso de un escaneo \u00edndice para visitar  las filas en el orden correcto, pero se prefiere un escaneo y el tipo  secuencial para <code>onek</code>, porque hay muchas m\u00e1s filas que visitar en esa mesa.  (Secuen-scan-and-sort frecuentemente supera un escaneo \u00edndice para  ordenar muchas filas, debido al acceso de disco no secuencial requerido  por el escaneo \u00edndice.)</p> <p>Una forma de ver los planes de variantes es forzar al  planificador a ignorar cualquier estrategia que pensara que era la m\u00e1s  barata, utilizando las banderas de habilitaci\u00f3n/desactivaci\u00f3n descritas  en la Secci\u00f3n 20.7.1. (Esta es una herramienta cruda, pero \u00fatil. V\u00e9ase tambi\u00e9n la secci\u00f3n 14.3.) Por ejemplo, si no estamos convencidos de que la secuencia-escana y el  tipo son\u00e1ra es la mejor manera de lidiar con la mesa  <code>onek</code>en el ejemplo anterior, podr\u00edamos intentarlo</p> <pre><code>SET enable-sort = off;\n\nEXPLAIN SELECT *\nDESDE tenk1 t1, onek t2\nDONDE t1.unique1 - 100 Y t1.unique2 = t2.unique2;\n\n                                        QUERY PLAN\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Merge Unin (costo=0,56,292,65 hileras=10 anchura=488)\n   Merge Cond: (t1.unique2 = t2.unique2)\n   --- Indice Scan usando tenk1-unique2 en tenk1 t1 (costo=0,29,66,28 hileras=101 ancho=244)\n         Filtro: (\u00fanico 1 - 100)\n   --- Indice Explosi\u00f3n usando onek-unique2 onek t2 (costo=0,8.28,.224,79 hileras=1000 anchura=244)\n</code></pre> <p>que muestra que el planificador piensa que la clasificaci\u00f3n  <code>onek</code>por escaneo de \u00edndices es aproximadamente un 12% m\u00e1s caro que el escaneo y  el tipo secuencial. Por supuesto, la siguiente pregunta es si est\u00e1 bien  en eso. Podemos investigar eso usando <code>EXPLAIN ANALYZE</code>, como se examina a continuaci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/01.-Usando%20EXPLAIN/02.-EXPLAIN%20ANALYZE/","title":"02.-EXPLAIN ANALYZE","text":"<p>Es posible comprobar la exactitud de las estimaciones del planificador mediante el uso de <code>EXPLAIN</code>de  <code>ANALYZE</code>opci\u00f3n. Con esta opci\u00f3n,  <code>EXPLAIN</code>en realidad ejecuta la consulta, y luego muestra la verdadera fila cuenta y el tiempo de ejecuci\u00f3n verdadero acumulado dentro de cada nodo de plan, junto con las mismas estimaciones que una llanura  <code>EXPLAIN</code>espect\u00e1culos. Por ejemplo, podr\u00edamos obtener un resultado como este:</p> <pre><code>EXPLAIN ANALYZE SELECT *\nDESDE tenk1 t1, tenk2 t2\nDONDE t1.unique1 - 10 Y t1.unique2 = t2.unique2;\n\n                                                           QUERY PLAN\nn Bucle deneado (costo=4.65..118,62 filas=10 anchura=488) (tiempo real=0,128.0,377 hileras=10 bucles=1)\n   - Bitmap Heap Scan en tenk1 t1 (costo=4.36.39.47 filas=10 anchura=244) (tiempo real=0.057.0.121 filas=10 lazos=1)\n         Reche Cond: (\u00fanico 1 - 10)\n         ---Bitmap Index Scan on tenk1-unique1 (cost=0.00,4,4,36 hileras=10 width=0) (tiempo real=0,024,0,024 filas=10 bucles=1)\n               Index Cond: (\u00fanico 1 - 10)\n   --- Indice Escanece usando tenk2-unique2 en tenk2 t2 (costo=0,29,.7.91 filas=1 ancho=244) (tiempo real=0,021.0,021 hileras=1 loops=10)\n         Indice Cond: (\u00fanico2 = t1.unique2)\n Tiempo de planificaci\u00f3n: 0,181 ms\n Tiempo de ejecuci\u00f3n: 0,501 ms\n</code></pre> <p>Tenga en cuenta que los actual timevalores de tiempo real son en milisegundos de tiempo real, mientras que el  <code>cost</code>Las estimaciones se expresan en unidades arbitrarias, por lo que es poco  probable que coinunen. Lo que suele ser m\u00e1s importante buscar es si los  recuentos estimados de filas est\u00e1n razonablemente cerca de la realidad.  En este ejemplo las estimaciones estaban todas muertas, pero eso es  bastante inusual en la pr\u00e1ctica.</p> <p>En algunos planes de consulta, es posible que un nodo subplan se  ejecute m\u00e1s de una vez. Por ejemplo, el escaneo interno del \u00edndice se  ejecutar\u00e1 una vez por fila exterior en el plan de bucle anidado  anterior. En tales casos, la  <code>loops</code>El valor reporta el n\u00famero total de ejecuciones del nodo, y los valores  reales de tiempo y filas mostrados son promedios por ejecuci\u00f3n. Esto se  hace para que los n\u00fameros sean comparables con la forma en que se  muestran las estimaciones de costos. Multiplicar por el  <code>loops</code>valor para conseguir el tiempo total realmente pasado en el nodo. En el  ejemplo anterior, pasamos un total de 0,220 milisegundos ejecutando los  escaneos del \u00edndice en <code>tenk2</code>.</p> <p>En algunos casos  <code>EXPLAIN ANALYZE</code>muestra estad\u00edsticas de ejecuci\u00f3n adicionales m\u00e1s all\u00e1 de los tiempos de  ejecuci\u00f3n de los nodos del plan y los recuentos de filas. Por ejemplo,  los nodos de Sort y Hash proporcionan informaci\u00f3n adicional:</p> <pre><code>EXPLAIN ANALYZE SELECT *\nDESDE tenk1 t1, tenk2 t2\nDO ADrnoso t1.unique1 - 100 Y t1.unique2 = t2.unique2 ORDER BY t1.fivethous;\n\n                                                                 QUERY PLAN\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Ordenar (costo=717.34,77,7,59 hileras=101 ancho=488) (tiempo real=7.761,7.774 hileras=100 bucles=1)\n   Sort Key: t1.fivethous\n   Sort Method: quicksort Memoria: 77kB\n   - Hash Join (costo=230.47.71.98 filas=101 ancho=488) (tiempo real=0,71,7.727 hileras=100 lazos=1)\n         Hash Cond: (t2.unique2 = t1.unique2)\n         --- Seq Scan en tenk2 t2 (costo=0,00.04.445.00 filas=10000 anchura=244) (tiempo real=0,007,2.583 filas=10000 lazos=1)\n         - Hash (costo=229.20,229.20 hileras=101 anchura=244) (tiempo real=0,659,0.659 filas=100 bucles=1)\n               Cubos: 1024 Bates: 1 Uso de la memoria: 28kB\n               - Bitmap Heap Scan en tenk1 t1 (costo=5.07..229.20 filas=101 ancho=244) (tiempo real=0,0080.0.526 hileras=100 bucles=1)\n                     Reche Cond: (\u00fanico 1 - 100)\n                     ---Bitmap Index Scan on tenk1-unique1 (costo=0.00,.5.04 filas=101 ancho=0) (tiempo real=0,009.0.049 filas=100 bucles=1)\n                           Index Cond: (\u00fanico 1 - 100)\n Tiempo de planificaci\u00f3n: 0,194 ms\n Tiempo de ejecuci\u00f3n: 8.008 ms\n</code></pre> <p>El nodo Sort muestra el m\u00e9todo de tipo utilizado (en particular,  ya sea del tipo en memoria o disco) y la cantidad de memoria o espacio  de disco necesario. El nodo Hash muestra el n\u00famero de cubos de hach\u00f3 y  lotes, as\u00ed como la cantidad m\u00e1xima de memoria utilizada para la mesa de  hachce. (Si el n\u00famero de lotes supera a uno, tambi\u00e9n habr\u00e1 uso del  espacio en disco involucrado, pero eso no se muestra.)</p> <p>Otro tipo de informaci\u00f3n adicional es el n\u00famero de filas eliminadas por una condici\u00f3n de filtro:</p> <pre><code>EXPLAIN ANALYZE SELECT * FROM ten WHERE ten 7;\n\n                                               QUERY PLAN\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Seq Scan en tenk1 (costo=0,00,483.00 hileras=7000 de ancho=244) (tiempo real=0,016,5.107 hileras=7000 bucles=1)\n   Filtro: (diez y 7)\n   Filas retiradas por Filtro: 3000\n Tiempo de planificaci\u00f3n: 0,083 ms\n Tiempo de ejecuci\u00f3n: 5.905 ms\n</code></pre> <p>Estos recuentos pueden ser particularmente valiosos para las condiciones de filtro aplicadas en los ganglios de uni\u00f3n. La l\u00ednea de  de  s\u00f3lo aparece cuando al menos una fila escaneada, o posible pareja de un nodo de uni\u00f3n, es rechazada por la condici\u00f3n del filtro.</p> <p>Un caso similar a las condiciones del filtro ocurre con lossyescaneos de \u00edndice de p\u00e9rdida. Por ejemplo, considere esta b\u00fasqueda de pol\u00edgonos que contengan un punto espec\u00edfico:</p> <pre><code>EXPLAIN ANALYZE SELECT * FROM polygon.tbl WHERE f1 . pol\u00edgono '(0.5,2.0) ';\n\n                                              QUERY PLAN\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Bq Scan en poligon-tbl (costo=0.00,.1.1,05 hils=1 width=32) (tiempo real=0.044.0.044 filas=0 lazo=1)\n   Filter: (f1 \"(((0,5,2)) \":pol\u00edgono)\n   Filas retiradas por filtro: 4\n Tiempo de planificaci\u00f3n: 0,040 ms\n Tiempo de ejecuci\u00f3n: 0,083 ms\n</code></pre> <p>El planificador piensa (basado correctamente) que esta tabla de  muestra es demasiado peque\u00f1a para molestarse con un escaneo \u00edndice, por  lo que tenemos un escaneo secuencial claro en el que todas las filas  fueron rechazadas por la condici\u00f3n del filtro. Pero si forzamos un  escaneo de \u00edndice para ser usados, vemos:</p> <pre><code>SET enable-seqscan TO off;\n\nEXPLAIN ANALYZE SELECT * FROM polygon.tbl WHERE f1 . pol\u00edgono '(0.5,2.0) ';\n\n                                                        QUERY PLAN\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Indice Escanear con gpolygonind en poligon-tbl (costo=0,13,.8.15 filas=1 ancho=32) (tiempo real=0,02,0,62 filas=0 lazo=1)\n   Index Cond: (f1 \"((0,5,2)) \":pol\u00f3n)\n   Filas retiradas por Index Recheck: 1\n Tiempo de planificaci\u00f3n: 0,034 ms\n Tiempo de ejecuci\u00f3n: 0,144 ms\n</code></pre> <p>Aqu\u00ed podemos ver que el \u00edndice devolvi\u00f3 una fila de candidatos,  que luego fue rechazada por un nuevo chequeo de la condici\u00f3n del \u00edndice. Esto sucede porque un \u00edndice de GiST es la p\u00e9rdida de las pruebas de contenci\u00f3n de pol\u00edgono: en realidad devuelve las filas  con pol\u00edgonos que se superponen al objetivo, y luego tenemos que hacer  la prueba de contenci\u00f3n exacta en esas filas.</p> <p><code>EXPLAIN</code>tiene una  <code>BUFFERS</code>opci\u00f3n que se puede utilizar con  <code>ANALYZE</code>para obtener a\u00fan m\u00e1s estad\u00edsticas de tiempo:</p> <pre><code>EXPLAIN (ANALYZE, BUFFERS) SELECT * DESDE tenk1 WHERE unique1 - 100 AND unique2 9000;\n\n                                                           QUERY PLAN\nn Bitmap Heap Scan en tenk1 (costo=25.08..60.21 filas=10 de ancho=244) (tiempo real=0,323.0,342 filas=10 bucles=1)\n   Reche Cond: ((\u00fanico1 - 100) Y (\u00fanico2 - 9000))\n   Buffers: hit compartido=15\n   - BitmapAnd (costo=25.08.25,08 filas=10 anchura=0) (tiempo real=0,309..0,309 hileras=0 bucles=1)\n         Buffers: hit compartido=7\n         ---Bitmap Index Scan on tenk1-unique1 (costo=0.00,5.0,504 filas=101 width=0) (tiempo real=0,003, 0,043 filas=100 bucles=1)\n               Index Cond: (\u00fanico 1 - 100)\n               Buffers: hit compartido=2\n         ---Bitmap Index Scan on tenk1-unique2 (costo=0.00,.19.78 filas=999 ancho=0) (tiempo real=0,22,0.227 filas=999 bucles=1)\n               Index Cond: (\u00fanico2 - 9000)\n               Buffers: hit compartido=5\n Tiempo de planificaci\u00f3n: 0,088 ms\n Tiempo de ejecuci\u00f3n: 0,423 ms\n</code></pre> <p>Los n\u00fameros proporcionados por  <code>BUFFERS</code>ayudar a identificar qu\u00e9 partes de la consulta son las m\u00e1s intensivas en E/S.</p> <p>Tenga en cuenta que porque  <code>EXPLAIN ANALYZE</code>en realidad ejecuta la consulta, cualquier efecto secundario suceder\u00e1 como de costumbre, a pesar de cualquier resultado que la consulta podr\u00eda  salir se descartan a favor de la impresi\u00f3n de la  <code>EXPLAIN</code>datos. Si desea analizar una consulta que modifica cualquier dato sin cambiar  sus tablas, puede volver a rodar el comando despu\u00e9s, por ejemplo:</p> <pre><code>BEGIN;\n\nEXPLAIN ANALYZE UPDATE tenk1 SET hundred = cien 1 WHERE unique1 100;\n\n                                                           QUERY PLAN\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Actualizaci\u00f3n en tenk1 (costo=5.08..230.08 filas=0 anchura=0) (tiempo real=3.791,3.792 filas=0 bucles=1)\n   - Bitmap Heap Heap Scan en tenk1 (costo=5.08.230.08 filas=102 ancho=10) (tiempo real=0.069.0.513 filas=100 lazos=1)\n         Reche Cond: (\u00fanico 1 - 100)\n         Heap Bloqueos: exact=90\n         ---Bitmap Index Scan on tenk1-unique1 (cost =0.00,.5.05 hileras=102 ancho=0) (tiempo real=0,006.0,03 hileras=300 bucles=1)\n               Index Cond: (\u00fanico 1 - 100)\n Tiempo de planificaci\u00f3n: 0,113 ms\n Tiempo de ejecuci\u00f3n: 3.850 ms\n\nROLLBACK;\n</code></pre> <p>Como se ve en este ejemplo, cuando la consulta es un <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, o  <code>MERGE</code>El trabajo real de aplicar los cambios de tabla se realiza por un nodo de  planta Insertar, Actualizar, Eliminar o Fusionar de primer nivel. Los  nodos del plan debajo de este nodo realizan el trabajo de localizar las  viejas filas y/o computar los nuevos datos. As\u00ed que arriba, vemos el  mismo tipo de escaneo de mapa de bitmap que hemos visto ya, y su salida  se alimenta a un nodo de actualizaci\u00f3n que almacena las filas  actualizadas. Vale la pena se\u00f1alar que aunque el nodo modificador de  datos puede tomar una cantidad considerable de tiempo de ejecuci\u00f3n  (aqu\u00ed, est\u00e1 consumiendo la mayor parte del tiempo), el planificador no  agrega nada a las estimaciones de costos para tener en cuenta esa obra.  Eso se debe a que el trabajo a hacer es el mismo para todo plan de  consultas correcto, por lo que no afecta las decisiones de  planificaci\u00f3n.</p> <p>Cuando es un <code>UPDATE</code>, <code>DELETE</code>, o  <code>MERGE</code>El comando afecta a una jerarqu\u00eda de herencias, la producci\u00f3n podr\u00eda parecerse a esto:</p> <pre><code>EXPLAIN UPDATE parent SET f2 = f2 1 WHERE f1 = 101;\n                                              QUERY PLAN\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n Actualizaci\u00f3n sobre el padre (costo=0,00,.24.59 filas=0 anchura=0)\n   Actualizaci\u00f3n sobre el padre de padre 1\n   Actualizaci\u00f3n sobre el hijo1 padre 2\n   Actualizaci\u00f3n sobre el ni\u00f1o2 padre 3\n   Actualizaci\u00f3n sobre el ni\u00f1o3 padre-4\n   - Resultado (costo=0,00,24,59 hileras=4 anchura=14)\n         - Aprobaci\u00f3n (costo=0,00,24,54 hileras=4 anchura=14)\n               - Seq Scan on parent parent-1 (costo=0.00,0.00,0 rows=1 width=14)\n                     Filtro: (f1 = 101)\n               --- Indice Escanear usando ni\u00f1o 1o pkey en el ni\u00f1o 1 parent-2 (costo=0,15,8,17 filas=1 anchura=14)\n                     Indice Cond: (f1 = 101)\n               -- Indice Escanear usando hijo de 2 pkey en el hijo 2 padre-3 (costo=0,15,8, 1,17 hileras=1 anchura=14)\n                     Indice Cond: (f1 = 101)\n               -- Indice Escanear usando ni\u00f1o de 3 pkey en el ni\u00f1o3 padre-4 (costo=0,15, 8,17 filas=1 anchura=14)\n                     Indice Cond: (f1 = 101)\n</code></pre> <p>En este ejemplo, el nodo de actualizaci\u00f3n debe considerar tres  cuadros infantiles, as\u00ed como la tabla de padres mencionada  originalmente. As\u00ed que hay cuatro subplanes de escaneo de entrada, uno  por mesa. Para mayor claridad, el nodo de actualizaci\u00f3n se anota para  mostrar las tablas de destino espec\u00edficas que se actualizar\u00e1n, en el  mismo orden que los subplanes correspondientes.</p> <p>El  <code>Planning time</code>mostrado por  <code>EXPLAIN ANALYZE</code>es el tiempo que tarda en generar el plan de consulta a partir de la  consulta analizada y optimizarla. No incluye el parsing ni la  reescritura.</p> <p>El  <code>Execution time</code>mostrado por  <code>EXPLAIN ANALYZE</code>incluye la puesta en marcha del albacea y el tiempo de cierre, as\u00ed como el  tiempo para ejecutar cualquier disparador que se dispare, pero no  incluye el parsing, la reescritura o el tiempo de planificaci\u00f3n. Tiempo  de ejecuci\u00f3n  <code>BEFORE</code>los desencadenantes, si los hubiere, se incluyen en el tiempo para el nodo  Insertar, Actualizar o Eliminar; pero el tiempo dedicado a la ejecuci\u00f3n  <code>AFTER</code>los desencadenantes no se cuentan all\u00ed porque  <code>AFTER</code>Los desencadenantes se disparan despu\u00e9s de completar todo el plan. El tiempo total que pas\u00f3 en cada disparador (o bien  <code>BEFORE</code>o o <code>AFTER</code>) tambi\u00e9n se muestra por separado. Tenga en cuenta que los  desencadenantes de restricciones diferidas no se ejecutar\u00e1n hasta el  final de la transacci\u00f3n y, por lo tanto, no se considerar\u00e1n en absoluto  por <code>EXPLAIN ANALYZE</code>.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/01.-Usando%20EXPLAIN/03.-Las%20advertencias/","title":"03.-Las advertencias","text":"<p>Hay dos maneras significativas en que los tiempos de ejecuci\u00f3n medidos por  <code>EXPLAIN ANALYZE</code>puede desviarse de la ejecuci\u00f3n normal de la misma consulta. En primer lugar, dado que no se entregan filas de salida al cliente, no se incluyen los  costos de transmisi\u00f3n de red y los costos de conversi\u00f3n de E/S. En  segundo lugar, el techo de medici\u00f3n a\u00f1adido por  <code>EXPLAIN ANALYZE</code>puede ser significativo, especialmente en las m\u00e1quinas con  <code>gettimeofday()</code>Llamadas al sistema operativo. Puede utilizar la herramienta pg.test-timing para medir la parte superior de la sincronizaci\u00f3n en su sistema.</p> <p><code>EXPLAIN</code>Los resultados no deben extrapolarse a situaciones muy diferentes a la que  realmente est\u00e1 probando; por ejemplo, los resultados en una tabla del  tama\u00f1o de un juguete no se pueden suponer que se aplican a las tablas  grandes. Las estimaciones de costos del planificador no son lineales y  por lo tanto podr\u00eda elegir un plan diferente para una tabla m\u00e1s grande o m\u00e1s peque\u00f1a. Un ejemplo extremo es que en una tabla que s\u00f3lo ocupa una  p\u00e1gina de disco, casi siempre obtendr\u00e1s un plan de escaneo secuencial si los \u00edndices est\u00e1n disponibles o no. El planificador se da cuenta de que va a tomar una p\u00e1gina de disco leyendo para procesar la tabla en  cualquier caso, por lo que no hay valor en gastar adicional p\u00e1gina lee  para mirar un \u00edndice. (Vimos que esto suced\u00eda en el  <code>polygon_tbl</code>ejemplo arriba.)</p> <p>Hay casos en los que los valores reales y estimados no  coincidir\u00e1n bien, pero nada est\u00e1 realmente mal. Uno de estos casos se  produce cuando la ejecuci\u00f3n de los nodos del plan se detiene corta por  un  <code>LIMIT</code>o efecto similar. Por ejemplo, en la  <code>LIMIT</code>la consulta que usamos antes,</p> <pre><code>EXPLAIN ANALYZE SELECT * DESDE tenk1 WHERE unique1 100 AND unique2 9000 LIMIT 2;\n\n                                                          QUERY PLAN\nn L\u00edmite (costo=0,29,14,71 hileras=2 anchura=244) (tiempo real=0,177,0.249 filas=2 bucles=1)\n   ---- Indice Scan usando tenk1-unique2 en tenk1 (costo=0,29..72.42 filas=10 ancho=244) (tiempo real=0,174.0.244 filas=2 bucles=1)\n         Index Cond: (\u00fanico2 - 9000)\n         Filtro: (\u00fanico 1 - 100)\n         Filas retiradas por filtro: 287\n Tiempo de planificaci\u00f3n: 0,096 ms\n Tiempo de ejecuci\u00f3n: 0,336 ms\n</code></pre> <p>el costo estimado y el conteo de filas para el nodo de Index Scan se muestra como si se corriera a completar. Pero en realidad el nodo de Limit dej\u00f3 de solicitar filas despu\u00e9s de obtener dos, por lo que el  conteo de filas real es s\u00f3lo 2 y el tiempo de ejecuci\u00f3n es menor de lo  que la estimaci\u00f3n de costos sugerir\u00eda. Esto no es un error de  estimaci\u00f3n, s\u00f3lo una discrepancia en la forma en que se muestran las  estimaciones y valores verdaderos.</p> <p>Las uniones se unen tambi\u00e9n tienen artefactos de medici\u00f3n que  pueden confundir a los incautos. Una uni\u00f3n de fusi\u00f3n dejar\u00e1 de leer una  entrada si se agota la otra entrada y el siguiente valor clave en una  entrada es mayor que el \u00faltimo valor clave de la otra entrada; en tal  caso no puede haber m\u00e1s coincidencias y por lo tanto no hay necesidad de escanear el resto de la primera entrada. Esto resulta en no leer a  todos un ni\u00f1o, con resultados como los mencionados para <code>LIMIT</code>. Adem\u00e1s, si el ni\u00f1o externo (primero) contiene filas con valores clave  duplicados, el ni\u00f1o interior (segundo) est\u00e1 respaldado y resaccionado  por la porci\u00f3n de sus filas que coinciden con ese valor clave.  <code>EXPLAIN ANALYZE</code>cuenta estas repetidas emisiones de las mismas filas internas que si fueran  verdaderas filas adicionales. Cuando hay muchos duplicados externos, el  recuento de filas real reportada para el nodo del plan infantil interno  puede ser significativamente mayor que el n\u00famero de filas que realmente  est\u00e1n en la relaci\u00f3n interna.</p> <p>BitmapAnd y BitmapOr los nodos siempre reportan sus recuentos  reales de filas como cero, debido a limitaciones de implementaci\u00f3n.</p> <p>Normalmente,  <code>EXPLAIN</code>mostrar\u00e1 cada nodo de plan creado por el planificador. Sin embargo, hay casos en los que el albacea puede determinar que ciertos nodos no necesitan ser  ejecutados porque no pueden producir ninguna fila, basada en valores de  par\u00e1metros que no estaban disponibles en el momento de la planificaci\u00f3n. (Actualmente esto s\u00f3lo puede suceder para los nodos infantiles de un  nodo de Apret\u00f3n o MergeAppend que est\u00e1 escaneando una mesa dividida.)  Cuando esto sucede, esos nodos de planes se omiten de la  <code>EXPLAIN</code>salida y a  <code>Subplans Removed: *</code>N<code>*</code>Aparece anotaci\u00f3n en su lugar.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/02.-Estad%C3%ADsticas%20utilizadas%20por%20el%20planificador/01.-Estad%C3%ADsticas%20de%20una%20sola%20columna/","title":"01.-Estad\u00edsticas de una sola columna","text":"<p>Como vimos en la secci\u00f3n anterior, el planificador de consultas  necesita estimar el n\u00famero de filas recuperadas por una consulta para  tomar buenas decisiones de los planes de consulta. En esta secci\u00f3n se  examinan r\u00e1pidamente las estad\u00edsticas que el sistema utiliza para estas  estimaciones.</p> <p>Un componente de las estad\u00edsticas es el n\u00famero total de entradas  en cada tabla e \u00edndice, as\u00ed como el n\u00famero de bloques de disco ocupados  por cada tabla e \u00edndice. Esta informaci\u00f3n se mantiene en la tabla <code>pg_class</code>, en las columnas  <code>reltuples</code>y <code>relpages</code>. Podemos mirarlo con consultas similares a esta:</p> <pre><code>SELECT renombre, relanza, relanza, relanza, replposas\nDe clase de la pg.\nDONDE renombre LIKE 'dicentro';\n\n       relnames relkind reltuples relpages\n-------------------------------------------------------------------------------------\n tenk1 r 10000 358\n tenk1-hundred de . i 10000 . 30\n tenk1.thous-tenthous i 10000 y 30\n tenk1-unique1 - 10000 - 30\n tenk1-unique2 - i 10000 - 30\n(5 filas)\n</code></pre> <p>Aqu\u00ed podemos ver eso.  <code>tenk1</code>contiene 10000 filas, al igual que sus \u00edndices, pero los \u00edndices son (desprenso) mucho m\u00e1s peque\u00f1os que la tabla.</p> <p>Por razones de eficiencia,  <code>reltuples</code>y  <code>relpages</code>no se actualizan sobre la marcha, por lo que suelen contener valores algo anticuados. Se actualizan por <code>VACUUM</code>, <code>ANALYZE</code>, y algunos comandos DDL tales como <code>CREATE INDEX</code>. A  <code>VACUUM</code>o o  <code>ANALYZE</code>operaci\u00f3n que no escanea toda la tabla (que es com\u00fanmente el caso) actualizar\u00e1 de forma incremental la  <code>reltuples</code>contar sobre la base de la parte de la tabla que escane\u00f3, resultando en un  valor aproximado. En cualquier caso, el planificador escalar\u00e1 los  valores en los que encuentra  <code>pg_class</code>para que coincido con el tama\u00f1o de la tabla f\u00edsica actual, obteniendo as\u00ed una aproximaci\u00f3n m\u00e1s cercana.</p> <p>La mayor\u00eda de las consultas recuperan s\u00f3lo una fracci\u00f3n de las filas en una tabla, debido a  <code>WHERE</code>cl\u00e1usulas que restringen la revisi\u00f3n de las filas. Por lo tanto, el planificador debe hacer una estimaci\u00f3n de la selectividad de  <code>WHERE</code>cl\u00e1usulas, es decir, la fracci\u00f3n de filas que coinciden con cada condici\u00f3n en el  <code>WHERE</code>cl\u00e1usula. La informaci\u00f3n utilizada para esta tarea se almacena en la  <code>pg_statistic</code>cat\u00e1logo de sistemas. Entradas en  <code>pg_statistic</code>se actualizan por el  <code>ANALYZE</code>y  <code>VACUUM ANALYZE</code>comandos, y siempre son aproximados incluso cuando se actualizan.</p> <p>En lugar de mirar  <code>pg_statistic</code>directamente, es mejor mirar su vista  <code>pg_stats</code>al examinar las estad\u00edsticas manualmente.  <code>pg_stats</code>est\u00e1 dise\u00f1ado para ser m\u00e1s f\u00e1cilmente legible. Adem\u00e1s,  <code>pg_stats</code>es legible por todos, mientras que  <code>pg_statistic</code>s\u00f3lo es legible por un superusuario. (Esto impide que los usuarios no  privilegiados aprenden algo sobre el contenido de las tablas de otras  personas de las estad\u00edsticas. El  <code>pg_stats</code>la vista se limita a mostrar s\u00f3lo filas sobre tablas que el usuario actual puede leer.) Por ejemplo, podr\u00edamos hacer:</p> <pre><code>SELECT atname, heredado, nodistinct,\n       array.to.string (m\u00e1s-communon-vals, E'on') como la mayor\u00eda.\nDe los pg\u00e1statos\nLOname = \"carreta\";\n\n apodo de la misma\n-------------------------------------------------------------------------------------------\n nombre de . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n         I- 880 Ramp.\n         Espuela de ferrocarril\n         I- 580\n         I- 680 Ramp\n nombre de la .. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n         I- 580 Ramp.\n         - I- 680 Ramp.\n         I- 580\n         Estado Hwy 13 Ramp\n(2 filas)\n</code></pre> <p>Tenga en cuenta que se muestran dos filas para la misma columna,  una correspondiente a la jerarqu\u00eda de herencia completa a partir de la  <code>road</code>tabla (<code>inherited</code>=<code>t</code>), y otro que incluye s\u00f3lo el  <code>road</code>la mesa misma (<code>inherited</code>=<code>f</code>).</p> <p>Cantidad de informaci\u00f3n almacenada en  <code>pg_statistic</code>por <code>ANALYZE</code>, en particular el n\u00famero m\u00e1ximo de entradas en la  <code>most_common_vals</code>y  <code>histogram_bounds</code>arrays para cada columna, se pueden establecer columna por columna con columna.  <code>ALTER TABLE SET STATISTICS</code>comando, o globalmente configurando la variable de configuraci\u00f3n de segmentaci\u00f3n predeterminada. El l\u00edmite por defecto es actualmente de 100 entradas. El aumento del  l\u00edmite podr\u00eda permitir que se hagan estimaciones m\u00e1s precisas de los  planificadores, en particular para las columnas con distribuciones de  datos irregulares, al precio de consumir m\u00e1s espacio en  <code>pg_statistic</code>y un poco m\u00e1s de tiempo para calcular las estimaciones. Por el contrario, un l\u00edmite inferior podr\u00eda ser suficiente para las columnas con  distribuciones de datos simples.</p> <p>En el cap\u00edtulo 76 se pueden encontrar m\u00e1s detalles sobre el uso de las estad\u00edsticas por parte del planificador.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/02.-Estad%C3%ADsticas%20utilizadas%20por%20el%20planificador/02.-Estad%C3%ADsticas%20ampliadas/","title":"02.-Estad\u00edsticas ampliadas","text":"<p>Es com\u00fan ver consultas lentas ejecutando planes de mala ejecuci\u00f3n  porque varias columnas utilizadas en las cl\u00e1usulas de consulta est\u00e1n  correlacionadas. El planificador normalmente asume que m\u00faltiples  condiciones son independientes entre s\u00ed, una suposici\u00f3n que no se  sostiene cuando los valores de la columna est\u00e1n correlacionados. Las  estad\u00edsticas regulares, debido a su naturaleza por-columna individual,  no pueden capturar ning\u00fan conocimiento sobre correlaci\u00f3n entre columnas. Sin embargo, PostgreSQL tiene la capacidad de calcular estad\u00edsticas multivariadas, que pueden capturar dicha informaci\u00f3n.</p> <p>Debido a que el n\u00famero de posibles combinaciones de columnas es  muy grande, no es pr\u00e1ctico calcular autom\u00e1ticamente las estad\u00edsticas  multivariar. En cambio, se pueden crear objetos de estad\u00edsticas extendidos, m\u00e1s a menudo llamados objetos de estad\u00edsticas, para instruir al servidor a obtener estad\u00edsticas a trav\u00e9s de conjuntos interesantes de columnas.</p> <p>Estad\u00edsticas objetos se crean utilizando  <code>CREATE STATISTICS</code>comando. La creaci\u00f3n de tal objeto se limita a crear una entrada de cat\u00e1logo que expresa inter\u00e9s en las estad\u00edsticas. La recopilaci\u00f3n real de datos se  realiza por  <code>ANALYZE</code>(ya sea un comando manual, o autoan\u00e1lisis de fondo). Los valores recogidos pueden ser examinados en la  <code>pg_statistic_ext_data</code>cat\u00e1logo.</p> <p><code>ANALYZE</code>compute estad\u00edsticas ampliadas basadas en la misma muestra de filas de tablas  que se necesita para computar estad\u00edsticas regulares de una sola  columna. Dado que el tama\u00f1o de la muestra se incrementa aumentando el  objetivo de las estad\u00edsticas para el cuadro o cualquiera de sus columnas (como se describe en la secci\u00f3n anterior), un objetivo de estad\u00edsticas  m\u00e1s amplio normalmente dar\u00e1 lugar a estad\u00edsticas ampliadas m\u00e1s precisas, as\u00ed como a que se dedicar\u00e1 a calcularlas m\u00e1s tiempo.</p> <p>En las subsecciones siguientes se describen los tipos de estad\u00edsticas ampliadas que se apoyan actualmente.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/02.-Estad%C3%ADsticas%20utilizadas%20por%20el%20planificador/02.-Estad%C3%ADsticas%20ampliadas/#14221-dependencias-funcionales","title":"14.2.2.1. Dependencias funcionales","text":"<p>El tipo m\u00e1s simple de estad\u00edsticas extendidas rastrea las dependencias funcionales, un concepto utilizado en las definiciones de los formularios normales de base de datos. Decimos esa columna  <code>b</code>depende funcionalmente de la columna  <code>a</code>si el conocimiento del valor de  <code>a</code>es suficiente para determinar el valor de <code>b</code>, es decir, no hay dos filas que tengan el mismo valor de  <code>a</code>pero diferentes valores de <code>b</code>. En una base de datos totalmente normalizada, las dependencias  funcionales deben existir s\u00f3lo en las llaves primarias y superclavos.  Sin embargo, en la pr\u00e1ctica muchos conjuntos de datos no est\u00e1n  completamente normalizados por diversas razones; la desnormalizaci\u00f3n  intencional por razones de desempe\u00f1o es un ejemplo com\u00fan. Incluso en una base de datos totalmente normalizada, puede haber correlaci\u00f3n parcial  entre algunas columnas, que pueden expresarse como dependencia funcional parcial.</p> <p>La existencia de dependencias funcionales afecta directamente a la exactitud de las estimaciones en ciertas consultas. Si una consulta  contiene condiciones tanto de las columnas independientes como de las  dependientes, las condiciones de las columnas dependientes no reducen  a\u00fan m\u00e1s el tama\u00f1o del resultado; pero sin conocimiento de la dependencia funcional, el planificador de consultas asumir\u00e1 que las condiciones son independientes, lo que resulta en subestimar el tama\u00f1o del resultado.</p> <p>Informar al planificador sobre las dependencias funcionales,  <code>ANALYZE</code>puede recoger mediciones de la dependencia de la columna transversal. Evaluar el grado de dependencia entre todos los conjuntos de columnas ser\u00eda  prohibitivamente costoso, por lo que la recolecci\u00f3n de datos se limita a que los grupos de columnas aparezcan juntos en un objeto de estad\u00edstica definido con la  <code>dependencies</code>opci\u00f3n. Es recomendable crear  <code>dependencies</code>estad\u00edsticas s\u00f3lo para los grupos de columnas que est\u00e1n fuertemente correlacionados, para evitar gastos generales innecesarios en ambos  <code>ANALYZE</code>y m\u00e1s tarde planificaci\u00f3n de la consulta.</p> <p>He aqu\u00ed un ejemplo de la recopilaci\u00f3n de estad\u00edsticas de dependencia funcional:</p> <pre><code>CREATE STATISTICS sats (dependencias) ON ciudad, zip FROM zipcodes;\n\nzipcodes ANALYZE;\n\nSELECT stxname, stxkeys, stxddependencies\n  DESDE pg.statistic.ext join pg.statistic.ext.data on (oid = stxoid)\n  DONDE stxname = 'stts';\n stxname - stxkeys - stxddependencies\n---------------------------------------------------------------------------------------------\n Sats 1 5 = 5\": 1.000000, \"5 = 1\": 0,423130\n(1 fila)\n</code></pre> <p>Aqu\u00ed se puede ver que la columna 1 (c\u00f3digo de cremallera)  determina completamente la columna 5 (ciudad) por lo que el coeficiente  es 1.0, mientras que la ciudad s\u00f3lo determina el c\u00f3digo postal alrededor del 42% de las veces, lo que significa que hay muchas ciudades (58%)  que est\u00e1n representadas por m\u00e1s de un \u00fanico c\u00f3digo postal.</p> <p>Al calcular la selectividad para una consulta que implica  columnas funcionalmente dependientes, el planificador ajusta las  estimaciones de selectividad por condiciones utilizando los coeficientes de dependencia para no producir una subestimaci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/02.-Estad%C3%ADsticas%20utilizadas%20por%20el%20planificador/02.-Estad%C3%ADsticas%20ampliadas/#142211-limitaciones-de-las-dependencias","title":"14.2.2.1.1. Limitaciones de las Dependencias","text":"<p>Actualmente, las dependencias funcionales s\u00f3lo se aplican  cuando se consideran condiciones sencillas de igualdad que se comparan  columnas con valores constantes, y  <code>IN</code>cl\u00e1usulas con valores constantes. No se utilizan para mejorar las estimaciones de las condiciones de igualdad que comparan dos columnas o comparar una  columna con una expresi\u00f3n, ni para cl\u00e1usulas de alcance,  <code>LIKE</code>o cualquier otro tipo de condici\u00f3n.</p> <p>Al estimar con dependencias funcionales, el planificador  asume que las condiciones de las columnas involucradas son compatibles  y, por lo tanto, redundantes. Si son incompatibles, la estimaci\u00f3n  correcta ser\u00eda cero filas, pero esa posibilidad no se considera. Por  ejemplo, dada una consulta como</p> <pre><code>SELECT * DESDE zipcodes Donde ciudad = 'San Francisco' Y cremallera = '94105';\n</code></pre> <p>el planificador despredar\u00e1 el  <code>city</code>cl\u00e1usula como no cambiar la selectividad, lo cual es correcto. Sin embargo, har\u00e1 la misma suposici\u00f3n sobre</p> <pre><code>SELECT * DESDE zipcodes WHERE city = 'San Francisco' Y cremallera = '90210';\n</code></pre> <p>a pesar de que realmente habr\u00e1 cero filas satisfactorias esta consulta. Sin embargo, las estad\u00edsticas de dependencia funcional no  proporcionan suficiente informaci\u00f3n para concluirlo.</p> <p>En muchas situaciones pr\u00e1cticas, esta suposici\u00f3n suele ser  satisfecha; por ejemplo, puede haber una interfaz gr\u00e1fica en la  aplicaci\u00f3n que s\u00f3lo permite seleccionar valores de c\u00f3digo de ciudad y  ZIP compatibles para usar en una consulta. Pero si no es as\u00ed, las  dependencias funcionales pueden no ser una opci\u00f3n viable.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/02.-Estad%C3%ADsticas%20utilizadas%20por%20el%20planificador/02.-Estad%C3%ADsticas%20ampliadas/#14222-multivaria-n-distinto-conteos","title":"14.2.2.2 Multivaria N-Distinto Conteos","text":"<p>Las estad\u00edsticas de una columna de una columna almacenan el  n\u00famero de valores distintos en cada columna. Estimaciones del n\u00famero de  valores distintos al combinar m\u00e1s de una columna (por ejemplo, <code>GROUP BY a, b</code>) son frecuentemente equivocados cuando el planificador s\u00f3lo tiene datos  estad\u00edsticos de una columna, lo que hace que seleccione malos planes.</p> <p>Mejorar esas estimaciones,  <code>ANALYZE</code>puede recopilar estad\u00edsticas n-distinct para grupos de columnas. Como antes,  no es pr\u00e1ctico hacer esto para cada posible agrupaci\u00f3n de columnas, por  lo que los datos se recopilan s\u00f3lo para aquellos grupos de columnas que  aparecen juntas en un objeto de estad\u00edstica definido con el  <code>ndistinct</code>opci\u00f3n. Se recopilar\u00e1n datos para cada posible combinaci\u00f3n de dos o m\u00e1s columnas del conjunto de columnas listadas.</p> <p>Continuando con el ejemplo anterior, el distinto n cuenta en una tabla de c\u00f3digos ZIP podr\u00eda parecer lo siguiente:</p> <pre><code>CREATE STATISTICS sats2 (ndistinto) ON ciudad, estado, zip DESDE zipcodes;\n\nzipcodes ANALYZE;\n\nSELECT stxkeys AS k, stxdndistinct AS nd\n  DESDE pg.statistic.ext join pg.statistic.ext.data on (oid = stxoid)\n  DONDE stxname = 'stts2';\n- [ RECORD 1 ]------------------------------------------------------- --\nk 1 2 5\nY . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n(1 fila)\n</code></pre> <p>Esto indica que hay tres combinaciones de columnas que tienen  33178 valores distintos: c\u00f3digo ZIP y estado; c\u00f3digo ZIP y ciudad; y  c\u00f3digo ZIP, ciudad y estado (el hecho de que todos son iguales se espera dado que el c\u00f3digo ZIP por s\u00ed solo en esta tabla). Por otro lado, la  combinaci\u00f3n de ciudad y estado tiene s\u00f3lo 27435 valores distintos.</p> <p>Es recomendable crear  <code>ndistinct</code>estad\u00edsticas se opone \u00fanicamente a combinaciones de columnas que se utilizan  realmente para agrupar, y para las que la falta de indicaci\u00f3n del n\u00famero de grupos est\u00e1 resultando en malos planes. De lo contrario, el  <code>ANALYZE</code>Los ciclos est\u00e1n desperdiciados.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/02.-Estad%C3%ADsticas%20utilizadas%20por%20el%20planificador/02.-Estad%C3%ADsticas%20ampliadas/#14223-listas-mcv-multivariadas","title":"14.2.2.3. Listas MCV multivariadas","text":"<p>Otro tipo de estad\u00edstica almacenada para cada columna son las  listas de valor m\u00e1s comunes. Esto permite estimaciones muy precisas para columnas individuales, pero puede resultar en errores significativos  para consultas con condiciones en m\u00faltiples columnas.</p> <p>Mejorar esas estimaciones,  <code>ANALYZE</code>puede recoger listas de MCV en combinaciones de columnas. Del mismo modo, las dependencias funcionales y los coeficientes de no-distinto, no es  pr\u00e1ctico hacer esto para cada posible agrupaci\u00f3n de columnas. M\u00e1s a\u00fan en este caso, ya que la lista MCV (a diferencia de las dependencias  funcionales y coeficientes n-distintos) s\u00ed almacena los valores de  columna comunes. As\u00ed que los datos se recopilan s\u00f3lo para los grupos de  columnas que aparecen juntas en un objeto de estad\u00edstica definido con la  <code>mcv</code>opci\u00f3n.</p> <p>Continuando con el ejemplo anterior, la lista MCV para una  tabla de c\u00f3digos ZIP podr\u00eda parecerse a la siguiente (a diferencia de  los tipos m\u00e1s simples de estad\u00edsticas, se requiere una funci\u00f3n para la  inspecci\u00f3n de los contenidos de MCV):</p> <pre><code>CREATE STATISTICS sats3 (mcv) ON ciudad, estado DESDE zipcodes;\n\nzipcodes ANALYZE;\n\nSELECT m.* DESDE pg.statistic.ext join pg.statistic.ext.data on (oid = stxoid),\n                pg.mcv.list.items(stxdmcv) m WHERE stxname = 'stts3';\n\n \u00edndice de valores - nulls - frecuencia base-frecuencia\n---------------------------------------------------------------------------------------\n     0 Washington, DC. F. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n     1 Apo, AE. F.f. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n     2 Houston, TX. F. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n     3 El Paso, TX. F.,f.\n     4 Nueva York, NY.\n     5 Atlanta, GA F. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n     6Sacramento, CA. F. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n     7 -Miami, FL. F.f.,f. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n     8 Dallas, TX. F.f. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n     9 Chicago, IL. F.,f. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . \n   ...\n(99 filas)\n</code></pre> <p>Esto indica que la combinaci\u00f3n m\u00e1s com\u00fan de ciudad y estado es  Washington en DC, con una frecuencia real (en la muestra) alrededor de  0.35%. La frecuencia de base de la combinaci\u00f3n (como calculada de las  frecuencias simples por columnas) es s\u00f3lo del 0,0027%, result result\u00f3 en dos \u00f3rdenes de subestimaciones de magnitud.</p> <p>Es recomendable crear  MCVestad\u00edsticas objetos s\u00f3lo en combinaciones de columnas que realmente se utilizan en  condiciones juntas, y para las que la falta de optimismo del n\u00famero de  grupos est\u00e1 resultndo en malos planes. De lo contrario, el  <code>ANALYZE</code>y los ciclos de planificaci\u00f3n se desperdician.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/04.-Poblando%20una%20base%20de%20datos/","title":"Index","text":"<p>Uno podr\u00eda necesitar insertar una gran cantidad de datos al popular  primero una base de datos. Esta secci\u00f3n contiene algunas sugerencias  sobre c\u00f3mo hacer este proceso lo m\u00e1s eficiente posible.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/04.-Poblando%20una%20base%20de%20datos/01.-Desactivar%20el%20autocommito/","title":"01.-Desactivar el autocommito","text":"<p>Cuando se usa m\u00faltiplo <code>INSERT</code>s, apagar el autocomprompe y haz una confirmaci\u00f3n al final. (En SQL simple, esto significa emitir  <code>BEGIN</code>al principio y  <code>COMMIT</code>al final. Algunas bibliotecas de clientes pueden hacer esto a la espalda,  en cuyo caso usted necesita asegurarse de que la biblioteca lo hace  cuando usted quiere que lo haga.) Si permite que cada inserci\u00f3n se  comprometa por separado, PostgreSQL est\u00e1 haciendo mucho trabajo para cada fila que se a\u00f1ade. Un beneficio  adicional de hacer todas las inserciones en una transacci\u00f3n es que si la inserci\u00f3n de una fila fallara entonces la inserci\u00f3n de todas las filas  insertadas hasta ese punto se reenvar\u00eda, por lo que no se atascado con  datos parcialmente cargados.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/04.-Poblando%20una%20base%20de%20datos/02.-Uso%20COPY/","title":"02.-Uso COPY","text":"<p>Uso  <code>COPY</code>para cargar todas las filas en un comando, en lugar de utilizar una serie de  <code>INSERT</code>comandos. El  <code>COPY</code>el comando est\u00e1 optimizado para cargar grandes cantidades de filas; es menos flexible que <code>INSERT</code>, pero incurre significativamente menos sobrecargas para grandes cargas de datos. Desde entonces  <code>COPY</code>es un solo comando, no hay necesidad de desactivar el autocommito si se utiliza este m\u00e9todo para poblar una mesa.</p> <p>Si no puedes usar <code>COPY</code>, podr\u00eda ayudar a usar  <code>PREPARE</code>crear un preparado  <code>INSERT</code>declaraci\u00f3n, y luego uso  <code>EXECUTE</code>tantas veces como sea necesario. Esto evita algunos de los gastos generales de analizar y planificar repetidamente <code>INSERT</code>. Diferentes interfaces proporcionan esta facilidad de diferentes maneras; buscar declaraciones preparadas en la documentaci\u00f3n de la interfaz.</p> <p>Tenga en cuenta que cargar un gran n\u00famero de filas utilizando  <code>COPY</code>es casi siempre m\u00e1s r\u00e1pido que el uso <code>INSERT</code>, incluso si  <code>PREPARE</code>se utiliza y se introducen m\u00faltiples inserciones en una sola transacci\u00f3n.</p> <p><code>COPY</code>es m\u00e1s r\u00e1pido cuando se utiliza dentro de la misma transacci\u00f3n que un anterior  <code>CREATE TABLE</code>o o  <code>TRUNCATE</code>comando. En tales casos no hay que escribir WAL, porque en caso de error, los  archivos que contienen los datos reci\u00e9n cargados se eliminar\u00e1n de todos  modos. Sin embargo, esta consideraci\u00f3n s\u00f3lo se aplica cuando el nivel de a nivel es  como todos los comandos deben escribir WAL de otra manera.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/04.-Poblando%20una%20base%20de%20datos/03.-Eliminar%20%C3%ADndices/","title":"03.-Eliminar \u00edndices","text":""},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/04.-Poblando%20una%20base%20de%20datos/03.-Eliminar%20%C3%ADndices/#_1","title":"03.-Eliminar \u00edndices","text":"<p>Si est\u00e1 cargando una tabla reci\u00e9n creada, el m\u00e9todo m\u00e1s r\u00e1pido es crear la tabla, cargar a granel los datos de la tabla utilizando <code>COPY</code>, luego crear cualquier \u00edndice necesario para la tabla. Crear un \u00edndice  en datos preexistentes es m\u00e1s r\u00e1pido que actualizarlo incrementalmente,  ya que cada fila est\u00e1 cargada.</p> <p>Si est\u00e1s agregando grandes cantidades de datos a una tabla  existente, podr\u00eda ser una victoria para bajar los \u00edndices, cargar la  tabla y luego recrear los \u00edndices. Por supuesto, el rendimiento de la  base de datos para otros usuarios podr\u00eda sufrir durante el tiempo que  faltan los \u00edndices. Uno tambi\u00e9n debe pensarse dos veces antes de soltar  un \u00edndice \u00fanico, ya que la comprobaci\u00f3n de errores ofrecida por la  restricci\u00f3n \u00fanica se perder\u00e1 mientras el \u00edndice est\u00e1 desaparecido.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/04.-Poblando%20una%20base%20de%20datos/04.-Eliminar%20las%20restricciones%20de%20la%20clave%20extranjera/","title":"04.-Eliminar las restricciones de la clave extranjera","text":"<p>Al igual que con los \u00edndices, se puede comprobar una restricci\u00f3n de clave extranjera en volumen m\u00e1s eficientemente que fila por fila. As\u00ed que podr\u00eda ser \u00fatil retirar las  restricciones de claves extranjeras, los datos de carga y recrear las  restricciones. Una vez m\u00e1s, hay una compensaci\u00f3n entre la velocidad de  carga de datos y la p\u00e9rdida de verificaci\u00f3n de errores mientras falta la restricci\u00f3n.</p> <p>Es m\u00e1s, cuando se cargan los datos en una tabla con las  restricciones de claves extranjeras existentes, cada nueva fila requiere una entrada en la lista del servidor de eventos desencadenantes  pendientes (ya que es el disparo de un disparador que comprueba la  restricci\u00f3n de claves extra\u00f1as de la fila). Cargar muchos millones de  filas puede hacer que la cola de eventos desencadenante se desborde de  la memoria disponible, lo que conduce a un intercambio intolerable o  incluso un fracaso total del comando. Por lo tanto, puede ser necesario, no s\u00f3lo deseable, soltar y volver a aplicar las claves extranjeras al  cargar grandes cantidades de datos. Si la eliminaci\u00f3n temporal de la  restricci\u00f3n no es aceptable, el \u00fanico otro recurso puede ser dividir la  operaci\u00f3n de carga en transacciones m\u00e1s peque\u00f1as.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/04.-Poblando%20una%20base%20de%20datos/05.-Aumento%20maintenance_work_mem/","title":"05.-Aumento maintenance_work_mem","text":"<p>Aumentar temporalmente la variable de configuraci\u00f3n de mantenimiento.work-mem cuando se cargan grandes cantidades de datos puede conducir a un mejor rendimiento. Esto ayudar\u00e1 a acelerar  <code>CREATE INDEX</code>comandos y  <code>ALTER TABLE ADD FOREIGN KEY</code>comandos. No har\u00e1 mucho por  <code>COPY</code>por s\u00ed mismo, por lo que este consejo s\u00f3lo es \u00fatil cuando se utiliza una o ambas t\u00e9cnicas anteriores.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/04.-Poblando%20una%20base%20de%20datos/06.-Aumento%20max_wal_size/","title":"06.-Aumento max_wal_size","text":"<p>El aumento temporal de la variable de configuraci\u00f3n de tama\u00f1o m\u00e1ximo tambi\u00e9n puede hacer grandes cargas de datos m\u00e1s r\u00e1pido. Esto se debe a que cargar una gran cantidad de datos en PostgreSQL har\u00e1 que los puestos de control se produzcan con m\u00e1s frecuencia que la frecuencia de control normal (especificada por la  <code>checkpoint_timeout</code>variable de configuraci\u00f3n). Cada vez que se produce un puesto de control, todas  las p\u00e1ginas sucias deben ser arrojadas al disco. Al aumentar  <code>max_wal_size</code>temporalmente durante las cargas de datos a granel, se puede reducir el n\u00famero de puestos de control que se requieren.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/04.-Poblando%20una%20base%20de%20datos/07.-Desactivar%20la%20r%C3%A9plica%20de%20WAL%20Archival%20y%20Streaming/","title":"07.-Desactivar la r\u00e9plica de WAL Archival y Streaming","text":"<p>Al cargar grandes cantidades de datos en una instalaci\u00f3n que utiliza  el archivo WAL o la replicaci\u00f3n de streaming, podr\u00eda ser m\u00e1s r\u00e1pido  tomar una nueva copia de seguridad de base despu\u00e9s de que la carga se  haya completado que procesar una gran cantidad de datos WAL  incrementales. Para evitar la tala incremental de WAL mientras se carga, deshabilita la reproducci\u00f3n y la reproducci\u00f3n de la transmisi\u00f3n,  mediante la fijaci\u00f3n de la cantidad a <code>minimal</code>, archive-mode a <code>off</code>, y max-walsenders a cero. Pero tenga en cuenta que cambiar estos ajustes requiere un  reinicio de servidor, y hace que cualquier copia de seguridad de base  tome antes no disponible para la recuperaci\u00f3n de archivos y el servidor  de reserva, lo que puede conducir a la p\u00e9rdida de datos.</p> <p>Aparte de evitar el tiempo para que el archivador o remitente WAL procese los datos WAL, hacer esto realmente har\u00e1 ciertos comandos m\u00e1s  r\u00e1pido, porque no escriben WAL en absoluto si  <code>wal_level</code>es  <code>minimal</code>y la subtransacci\u00f3n actual (o transacci\u00f3n de alto nivel) creada o trunc\u00f3  la tabla o el \u00edndice que cambian. (Pueden garantizar la seguridad de  choque m\u00e1s barato haciendo un  <code>fsync</code>al final que escribiendo WAL.)</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/04.-Poblando%20una%20base%20de%20datos/08.-Corre%20ANALYZEDespu%C3%A9s/","title":"08.-Corre ANALYZEDespu\u00e9s","text":"<p>Siempre que haya alterado significativamente la distribuci\u00f3n de los datos dentro de una tabla, ejecutando  <code>ANALYZE</code>es muy recomendable. Esto incluye cargar a granel grandes cantidades de datos en la tabla. Corriendo  <code>ANALYZE</code>(o <code>VACUUM ANALYZE</code>) garantiza que el planificador tenga estad\u00edsticas actualizadas sobre el  cuadro. Sin estad\u00edsticas ni estad\u00edsticas obsoletas, el planificador  podr\u00eda tomar malas decisiones durante la planificaci\u00f3n de consultas, lo  que conducir\u00eda a un mal desempe\u00f1o en cualquier tabla con estad\u00edsticas  inexactas o inexistentes. Tenga en cuenta que si el demonio de  autovacunum est\u00e1 habilitado, podr\u00eda ejecutarse  <code>ANALYZE</code>autom\u00e1ticamente; v\u00e9anse  y  para m\u00e1s informaci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/11.-Consejos%20de%20rendimiento/04.-Poblando%20una%20base%20de%20datos/09.-Algunas%20notas%20sobre%20pg.dump/","title":"09.-Algunas notas sobre pg.dump","text":"<p>Los scripts de volteo generados por pg.dump aplican autom\u00e1ticamente varias de las directrices anteriores, pero no todas. Para restaurar un basurero de pg\u00e1d lo m\u00e1s r\u00e1pido posible, es necesario hacer algunas cosas adicionales  manualmente. (Tenga en cuenta que estos puntos se aplican mientras se restaura un verdor, no mientras se crea. Los mismos puntos se aplican si cargar un volcado de texto con psql o usar pg-restore para cargar desde un archivo de archivo pg.dump.)</p> <p>Por defecto, pg.dump utiliza <code>COPY</code>, y cuando est\u00e1 generando un completo vertecado de esquema y datos, se  cuidada de cargar datos antes de crear \u00edndices y claves extranjeras. As\u00ed que en este caso varias directrices se manejan autom\u00e1ticamente. Lo que  te queda por hacer es:</p> <ul> <li>Establecer valores apropiados (es decir, m\u00e1s grandes de lo normal) para  <code>maintenance_work_mem</code>y <code>max_wal_size</code>.</li> <li>Si usas el archivo WAL o la replicaci\u00f3n en la transmisi\u00f3n,  considere desactivarlos durante la restauraci\u00f3n. Para hacer eso,  establecido  <code>archive_mode</code>a <code>off</code>,  <code>wal_level</code>a <code>minimal</code>, y  <code>max_wal_senders</code>a cero antes de cargar el versura. Despu\u00e9s, volv\u00ed a los valores correctos y toma una nueva copia de seguridad de base.</li> <li>Experimente con el volcado paralelo y los modos de restauraci\u00f3n tanto de pg.dump como de pg-restore y encuentre el n\u00famero \u00f3ptimo de trabajos simult\u00e1neos a utilizar. Desecho y restauraci\u00f3n en paralelo por medio de la  <code>-j</code>opci\u00f3n debe darle un rendimiento significativamente mayor sobre el modo serie.</li> <li>Considere si todo el versiero debe ser restaurado como una sola transacci\u00f3n. Para hacer eso, pase el  <code>-1</code>o o  <code>--single-transaction</code>opci\u00f3n de l\u00ednea de comandos para psql o pg.restore. Cuando se utiliza este modo, incluso el m\u00e1s peque\u00f1o de los errores  revertir\u00e1 toda la restauraci\u00f3n, posiblemente desechando muchas horas de  procesamiento. Dependiendo de lo interrelacionadas que est\u00e9n los datos,  eso podr\u00eda parecer preferible a la limpieza manual, o no.  <code>COPY</code>Los comandos se ejecutar\u00e1n m\u00e1s r\u00e1pido si utilizas una sola transacci\u00f3n y tienes el archivo WAL apagado.</li> <li>Si varias CPUs est\u00e1n disponibles en el servidor de base de datos, considere el uso de pg.restore 's  <code>--jobs</code>opci\u00f3n. Esto permite la carga de datos y la creaci\u00f3n de \u00edndices simult\u00e1neos.</li> <li>Corre  <code>ANALYZE</code>despu\u00e9s.</li> </ul> <p>Un verdor solo de datos seguir\u00e1 utiliz\u00e1ndose <code>COPY</code>, pero no baja ni recrea \u00edndices, y normalmente no toca las teclas extranjeras. [14] As\u00ed que al cargar un volcado solo con datos, depende de ti caer y  recrear \u00edndices y claves extranjeras si deseas usar esas t\u00e9cnicas.  Todav\u00eda es \u00fatil aumentar  <code>max_wal_size</code>mientras cargan los datos, pero no molestes en aumentar <code>maintenance_work_mem</code>; m\u00e1s bien, har\u00edas eso mientras recreas manualmente \u00edndices y claves extranjeras despu\u00e9s. Y no te olvides de  <code>ANALYZE</code>cuando haya terminado; vea la Secci\u00f3n 25.1.3 y la Secci\u00f3n 25.1.6 para m\u00e1s informaci\u00f3n.</p>"},{"location":"02.-El%20lenguaje%20SQL/12.-Consultas%20paralelas/","title":"Index","text":"<p>PostgreSQL puede dise\u00f1ar planes de consulta que puedan aprovechar m\u00faltiples CPUs  con el fin de responder consultas m\u00e1s r\u00e1pido. Esta caracter\u00edstica se  conoce como consulta paralela. Muchas consultas no pueden beneficiarse  de la consulta paralela, ya sea debido a las limitaciones de la  implementaci\u00f3n actual o porque no hay un plan de consulta imaginable que sea m\u00e1s r\u00e1pido que el plan de consultas en serie. Sin embargo, para las consultas que pueden beneficiarse, la aceleraci\u00f3n de la consulta  paralela suele ser muy significativa. Muchas consultas pueden correr m\u00e1s del doble de r\u00e1pido cuando se usa consultas paralelas, y algunas  consultas pueden correr cuatro veces m\u00e1s r\u00e1pido o incluso m\u00e1s. Las  consultas que toquen una gran cantidad de datos pero devuelve s\u00f3lo unas  pocas filas al usuario normalmente se beneficiar\u00e1n m\u00e1s. Este cap\u00edtulo  explica algunos detalles de c\u00f3mo funciona la consulta paralela y en qu\u00e9  situaciones se pueden utilizar para que los usuarios que deseen hacer  uso de ella puedan entender qu\u00e9 esperar.</p>"},{"location":"02.-El%20lenguaje%20SQL/12.-Consultas%20paralelas/01.-C%C3%B3mo%20funcionan%20las%20consultas%20paralelas/","title":"01.-C\u00f3mo funcionan las consultas paralelas","text":"<p>Cuando el optimizador determina que la consulta paralela es la  estrategia de ejecuci\u00f3n m\u00e1s r\u00e1pida para una consulta en particular,  crear\u00e1 un plan de consulta que incluye un nodo de Gather o Gather Merge. He aqu\u00ed un simple ejemplo:</p> <pre><code>EXPLAIN SELECT * DESDE pgbench.cuentas WHERE filler LIKE '%x%';\n                                     QUERY PLAN\nA------------------------------------------------------------------------------------------------------------\n Recopilar (costo=1000.00..217018.43 filas=1 anchura=97)\n   Trabajadores Planeado: 2\n   --- Parallel Seq Scan en pgbench-accounts (costo=0.00,01.216018.33 filas=1 anchura=97)\n         Filter: (filler . '%x%%'::texto)\n(4 filas)\n</code></pre> <p>En todos los casos, la  <code>Gather</code>o o  <code>Gather Merge</code>el nodo tendr\u00e1 exactamente un plan para ni\u00f1os, que es la parte del plan que se ejecutar\u00e1 en paralelo. Si el  <code>Gather</code>o o  <code>Gather Merge</code>el nodo est\u00e1 en la parte superior del \u00e1rbol de la plana, entonces toda la  consulta se ejecutar\u00e1 en paralelo. Si est\u00e1 en otro lugar en el \u00e1rbol de  la planta, entonces s\u00f3lo la parte del plan de abajo funcionar\u00e1 en  paralelo. En el ejemplo anterior, la consulta accede a una sola tabla,  por lo que s\u00f3lo hay un nodo de plan que el  <code>Gather</code>senos en s\u00ed; ya que ese nodo de plan es un hijo de la  <code>Gather</code>Nodo, correr\u00e1 en paralelo.</p> <p>Usando EXPLAIN, se puede ver el n\u00famero de trabajadores elegidos por el planificador. Cuando el  <code>Gather</code>Durante la ejecuci\u00f3n de la consulta, el proceso que est\u00e1 implementando la sesi\u00f3n del usuario solicitar\u00e1 una serie de procesos de trabajo de antecedentes iguales al n\u00famero de trabajadores elegidos por el planificador. El  n\u00famero de trabajadores de antecedentes que el planificador considerar\u00e1  el uso se limita a como m\u00e1ximo en un m\u00e1ximo de lo general max-parallel-workers.per-gather. El n\u00famero total de trabajadores de origen que pueden existir en cualquier momento est\u00e1 limitado por tanto por los procesos de max-worker y los trabajadores de max-parallel. Por lo tanto, es posible que una consulta paralela funcione con menos  trabajadores de lo planeado, o incluso sin trabajadores en absoluto. El  plan \u00f3ptimo puede depender del n\u00famero de trabajadores disponibles, por  lo que esto puede resultar en un mal desempe\u00f1o de consulta. Si esta  ocurrencia es frecuente, considere aumentar  <code>max_worker_processes</code>y  <code>max_parallel_workers</code>para que m\u00e1s trabajadores puedan ser administrados simult\u00e1neamente o reduciando alternativamente  para que el planificador solicite menos trabajadores.</p> <p>Cada proceso de trabajo de antecedentes que se inicia con \u00e9xito  para una consulta paralela dada ejecutar\u00e1 la parte paralela del plan. El l\u00edder tambi\u00e9n ejecutar\u00e1 esa parte del plan, pero tiene una  responsabilidad adicional: tambi\u00e9n debe leer todas las tuples generadas  por los trabajadores. Cuando la porci\u00f3n paralela del plan genera s\u00f3lo un peque\u00f1o n\u00famero de tuples, el l\u00edder a menudo se comportar\u00e1 muy parecido a un trabajador adicional, acelerando la ejecuci\u00f3n de consultas. Por el  contrario, cuando la porci\u00f3n paralela del plan genera un gran n\u00famero de  tuples, el l\u00edder puede estar casi totalmente ocupado con la lectura de  las tuples generadas por los trabajadores y realizando cualquier otro  paso de procesamiento que se requiera por los nodos del plan por encima  del nivel de la  <code>Gather</code>nodo o  <code>Gather Merge</code>Nodo. En estos casos, el l\u00edder har\u00e1 muy poco del trabajo de ejecutar la parte paralela del plan.</p> <p>Cuando el nodo en la parte superior de la porci\u00f3n paralela del plan es  <code>Gather Merge</code>en lugar de <code>Gather</code>, indica que cada proceso que ejecuta la parte paralela del plan est\u00e1  produciendo tuples en orden ordenado, y que el l\u00edder est\u00e1 realizando una fusi\u00f3n de conservaci\u00f3n de orden. En contraste,  <code>Gather</code>Lee tuples de los trabajadores en cualquier orden que sea conveniente, destruyendo cualquier orden que haya existido.</p>"},{"location":"02.-El%20lenguaje%20SQL/12.-Consultas%20paralelas/02.-%C2%BFCu%C3%A1ndo%20puede%20usarse%20una%20consulta%20paralela%3F/","title":"02.-\u00bfCu\u00e1ndo puede usarse una consulta paralela?","text":"<p>Hay varios ajustes que pueden hacer que el planificador de consultas  no genere un plan de consultas paralelo bajo ninguna circunstancia. Para que cualquier plan de consulta paralelo se genere, los siguientes  ajustes deben ser configurados como se indica.</p> <ul> <li>Debe max_parallel_workers_per_gatherestablecerse un valor superior al cero. Este es un caso especial del principio m\u00e1s  general de que no se deben utilizar m\u00e1s trabajadores que el n\u00famero  configurado a trav\u00e9s de <code>max_parallel_workers_per_gather</code>.</li> </ul> <p>Adem\u00e1s, el sistema no debe funcionar en modo de un solo usuario.  Dado que todo el sistema de bases de datos funciona como un solo proceso en esta situaci\u00f3n, no habr\u00e1 trabajadores de antecedentes disponibles.</p> <p>Incluso cuando en general es posible que se generen planes de  consulta paralela, el planificador no los generar\u00e1 para una consulta  dada si alguno de los siguientes son ciertos:</p> <ul> <li>La consulta escribe cualquier dato o bloquea cualquier fila  de bases de datos. Si una consulta contiene una operaci\u00f3n que modifica  la base de datos, ya sea en el nivel superior o dentro de un CTE, no se  generar\u00e1n planes paralelos para esa consulta. Como excepci\u00f3n, los  siguientes comandos, que crean una nueva tabla y la pueblan, pueden  utilizar un plan paralelo para el subyacente  <code>SELECT</code>parte de la consulta:</li> <li><code>CREATE TABLE ... AS</code></li> <li><code>SELECT INTO</code></li> <li><code>CREATE MATERIALIZED VIEW</code></li> <li><code>REFRESH MATERIALIZED VIEW</code></li> <li>La consulta podr\u00eda ser suspendida durante la ejecuci\u00f3n. En  cualquier situaci\u00f3n en la que el sistema piense que puede ocurrir una  ejecuci\u00f3n parcial o incremental, no se genera ning\u00fan plan paralelo. Por  ejemplo, un cursor creado usando DECLARE CURSOR nunca usar\u00e1 un plan paralelo. Del mismo modo, un bucle PL/pgSQL de la forma  <code>FOR x IN query LOOP .. END LOOP</code>nunca usar\u00e1 un plan paralelo, porque el sistema de consultas paralelas es  incapaz de verificar que el c\u00f3digo en el bucle es seguro de ejecutar  mientras la consulta paralela est\u00e1 activa.</li> <li>La consulta utiliza cualquier funci\u00f3n marcada <code>PARALLEL UNSAFE</code>. La mayor\u00eda de las funciones definidas en el sistema son <code>PARALLEL SAFE</code>, pero las funciones definidas por el usuario est\u00e1n marcadas  <code>PARALLEL UNSAFE</code>por defecto. V\u00e9ase el debate de la secci\u00f3n 15.4.</li> <li>La consulta est\u00e1 corrida dentro de otra consulta que ya es  paralela. Por ejemplo, si una funci\u00f3n llamada por una consulta paralela  emite una consulta SQL misma, esa consulta nunca usar\u00e1 un plan paralelo. Se trata de una limitaci\u00f3n de la aplicaci\u00f3n actual, pero puede no ser  deseable eliminar esta limitaci\u00f3n, ya que podr\u00eda dar lugar a una sola  consulta utilizando un gran n\u00famero de procesos.</li> </ul> <p>Incluso cuando se genera un plan de consultas paralelas para una  consulta particular, hay varias circunstancias en las que ser\u00e1 imposible ejecutar ese plan en paralelo en el momento de la ejecuci\u00f3n. Si esto  ocurre, el l\u00edder ejecutar\u00e1 la parte del plan por debajo de la  <code>Gather</code>nodo por s\u00ed solo, casi como si el  <code>Gather</code>El nodo no estaba presente. Esto suceder\u00e1 si se cumple alguna de las siguientes condiciones:</p> <ul> <li>No se puede obtener trabajadores de antecedentes debido a la limitaci\u00f3n de que el n\u00famero total de trabajadores de origen no puede exceder los procesos de mayor trabajo.</li> <li>No se puede obtener trabajadores de antecedentes debido a la limitaci\u00f3n de que el n\u00famero total de trabajadores de origen lanzados a efectos de  consulta paralela no puede exceder de los trabajadores de m\u00e1ximas.</li> <li>El cliente env\u00eda un mensaje de ejecuci\u00f3n con un conteo de b\u00fasqueda sin cero. V\u00e9ase la discusi\u00f3n del protocolo de consulta ampliada. Dado que libpq actualmente no proporciona ninguna manera de enviar un mensaje de este  tipo, esto s\u00f3lo puede ocurrir cuando se utiliza un cliente que no conf\u00eda en libpq. Si esto es una ocurrencia frecuente, puede ser una buena idea establecer a max_parallel_workers_per_gathercero en sesiones donde es probable que se genere planes de consulta que pueden ser sub\u00f3pties cuando se ejecuten serialmente.</li> </ul>"},{"location":"02.-El%20lenguaje%20SQL/12.-Consultas%20paralelas/03.-Planes%20paralelos/","title":"Index","text":"<p>Debido a que cada trabajador ejecuta la parte paralela del plan hasta  completar, no es posible simplemente tomar un plan de consulta ordinario y ejecutarlo usando m\u00faltiples trabajadores. Cada trabajador producir\u00eda  una copia completa del conjunto de resultados de salida, por lo que la  consulta no funcionar\u00eda m\u00e1s r\u00e1pido de lo normal, pero producir\u00eda  resultados incorrectos. En su lugar, la parte paralela del plan debe ser lo que se conoce internamente al optimizador de la consulta como plan parcial; es decir, debe construirse para que cada proceso que ejecuta el plan  genere s\u00f3lo un subconjunto de las filas de salida de tal manera que cada fila de salida requerida est\u00e9 garantizada para ser generada exactamente por uno de los procesos de cooperaci\u00f3n. Generalmente, esto significa  que el escaneo en la mesa de conducci\u00f3n de la consulta debe ser un  escaneo paralelo.</p>"},{"location":"02.-El%20lenguaje%20SQL/12.-Consultas%20paralelas/03.-Planes%20paralelos/01.-Parallel%20Scans/","title":"01.-Parallel Scans","text":"<p>Actualmente se admiten los siguientes tipos de escaneos de mesa de forma paralelas.</p> <ul> <li>En un escaneo secuencial paralelo, los bloques de la mesa se dividir\u00e1n en rangos y se repartir\u00e1n entre los procesos de cooperaci\u00f3n. Cada proceso de trabajador completar\u00e1 el  escaneo de su rango dado de bloques antes de solicitar una gama  adicional de bloques.</li> <li>En un escaneo paralelo de bitmap heap, se elige un proceso como l\u00edder. Ese proceso realiza un escaneo de uno o m\u00e1s \u00edndices y construye un mapa de bits indicando qu\u00e9 bloques de mesa  necesitan ser visitados. Estos bloques se dividen entonces entre los  procesos de cooperaci\u00f3n como en un escaneo secuencial paralelo. En otras palabras, el escaneo amontonado se realiza en paralelo, pero el escaneo \u00edndice subyacente no lo es.</li> <li>En un escaneo paralelo de \u00edndice o escaneo paralelo solo con \u00edndice, los procesos de cooperaci\u00f3n se turnan para leer los datos del \u00edndice.  Actualmente, los escaneos de \u00edndices paralelos se apoyan s\u00f3lo para  \u00edndices de btree. Cada proceso reclamar\u00e1 un solo bloque de \u00edndice y  escanear\u00e1 y devolver\u00e1 todas las tuples referenciadas por ese bloque;  otros procesos pueden al mismo tiempo devolver sus blas de un bloque de  \u00edndice diferente. Los resultados de un escaneo de btree paralelo se  devuelven en orden ordenado dentro de cada proceso de trabajo.</li> </ul> <p>Otros tipos de escaneo, como escaneos de \u00edndices no de \u00e1rbol, pueden soportar escaneos paralelos en el futuro.</p>"},{"location":"02.-El%20lenguaje%20SQL/12.-Consultas%20paralelas/03.-Planes%20paralelos/02.-Parallel%20Joins/","title":"02.-Parallel Joins","text":"<p>Al igual que en un plan no paralelo, la mesa de conducci\u00f3n puede  unirse a una o m\u00e1s mesas con un bucle anidado, se une o se fusiona. El  lado interno de la uni\u00f3n puede ser cualquier tipo de plan no paralelo  que sea apoyado por el planificador siempre que sea seguro funcionar  dentro de un trabajador paralelo. Dependiendo del tipo de uni\u00f3n, el lado interno tambi\u00e9n puede ser un plan paralelo.</p> <ul> <li>En un bucle anidado unirse, el lado interior siempre es no paralelo. Aunque se ejecuta en su  totalidad, esto es eficiente si el lado interno es un escaneo \u00edndice,  porque los tuples exteriores y por lo tanto los bucles que buscan  valores en el \u00edndice se dividen sobre los procesos de cooperaci\u00f3n.</li> <li>En una uni\u00f3n, el lado interno es siempre un plan no paralelo y por lo tanto ejecutado en su totalidad. Esto puede ser ineficiente, especialmente si se debe  realizar una especie, porque el trabajo y los datos resultantes se  duplican en todos los procesos de cooperaci\u00f3n.</li> <li>En un hash unirse (sin el prefijo \"paralelo\"), el lado interior es ejecutado en su  totalidad por cada proceso de cooperaci\u00f3n para construir copias  id\u00e9nticas de la mesa de hash. Esto puede ser ineficiente si la mesa de  hach hech hech es grande o el plan es caro. En un hash paralelo, el lado interior es un hash paralelo que divide el trabajo de construir una mesa de hach heh compartida sobre los procesos de cooperaci\u00f3n.</li> </ul>"},{"location":"02.-El%20lenguaje%20SQL/12.-Consultas%20paralelas/03.-Planes%20paralelos/03.-Parallel%20Aggregation/","title":"03.-Parallel Aggregation","text":"<p>PostgreSQL soporta la agregaci\u00f3n paralela agregando en dos etapas. Primero, cada  proceso de participaci\u00f3n en la parte paralela de la consulta realiza un  paso de agregaci\u00f3n, produciendo un resultado parcial para cada grupo del que ese proceso est\u00e1 al tanto. Esto se refleja en el plan como  <code>Partial Aggregate</code>Nodo. En segundo lugar, los resultados parciales se transfieren al l\u00edder v\u00eda  <code>Gather</code>o o <code>Gather Merge</code>. Finalmente, el l\u00edder reasigna los resultados en todos los trabajadores  para producir el resultado final. Esto se refleja en el plan como  <code>Finalize Aggregate</code>Nodo.</p> <p>Porque el  <code>Finalize Aggregate</code>el nodo se ejecuta en el proceso de l\u00edder, las consultas que producen un  n\u00famero relativamente grande de grupos en comparaci\u00f3n con el n\u00famero de  filas de entradas parecer\u00e1n menos favorables para el planificador de  consultas. Por ejemplo, en el peor de los casos el n\u00famero de grupos  vistos por la  <code>Finalize Aggregate</code>el nodo podr\u00eda ser tanto como el n\u00famero de filas de entradas que fueron  vistas por todos los procesos de los trabajadores en el  <code>Partial Aggregate</code>etapa. Para estos casos, es evidente que no va a haber ning\u00fan beneficio de  rendimiento para utilizar la agregaci\u00f3n paralela. El planificador de  consultas tiene esto en cuenta durante el proceso de planificaci\u00f3n y es  poco probable que elija agregado paralelo en este escenario.</p> <p>La agregaci\u00f3n paralela no se apoya en todas las situaciones. Cada agregado debe ser seguro para el paralelismo y debe tener una funci\u00f3n combinada. Si el agregado tiene un estado de transici\u00f3n de tipo <code>internal</code>, debe tener funciones de serializaci\u00f3n y desserializaci\u00f3n. Consulte CREATE AGGREGATE para m\u00e1s detalles. La agregaci\u00f3n paralela no se admite si contiene cualquier llamada de funci\u00f3n agregada  <code>DISTINCT</code>o o  <code>ORDER BY</code>cl\u00e1usula y tampoco se apoya para los agregados de conjunto ordenados o cuando la consulta implica <code>GROUPING SETS</code>. S\u00f3lo se puede utilizar cuando todas las uniones involucradas en la consulta tambi\u00e9n son parte de la parte paralela del plan.</p>"},{"location":"02.-El%20lenguaje%20SQL/12.-Consultas%20paralelas/03.-Planes%20paralelos/04.-Parallel%20Append/","title":"04.-Parallel Append","text":"<p>Siempre que PostgreSQL necesita combinar filas de m\u00faltiples fuentes en un solo resultado, utiliza un  <code>Append</code>o o  <code>MergeAppend</code>plan de nodo. Esto ocurre com\u00fanmente cuando se implementa  <code>UNION ALL</code>o cuando se escanea una mesa dividida. Tales nodos se pueden utilizar en  planes paralelos tal como pueden en cualquier otro plan. Sin embargo, en un plan paralelo, el planificador puede en su lugar utilizar un  <code>Parallel Append</code>Nodo.</p> <p>Cuando es un  <code>Append</code>El nodo se utiliza en un plan paralelo, cada proceso ejecutar\u00e1 los planes  del ni\u00f1o en el orden en que aparecen, de modo que todos los procesos  participantes cooperen para ejecutar el primer plan infantil hasta que  est\u00e9 completo y luego pasar al segundo plan aproximadamente al mismo  tiempo. Cuando a  <code>Parallel Append</code>se utiliza en su lugar, el albacea en su lugar extender\u00e1 los procesos  participantes de la manera m\u00e1s uniforme posible a trav\u00e9s de sus planes  para ni\u00f1os, de modo que los m\u00faltiples planes para ni\u00f1os se ejecutan  simult\u00e1neamente. Esto evita la contienda, y tambi\u00e9n evita pagar el costo inicial de un plan infantil en aquellos procesos que nunca lo ejecuten.</p> <p>Adem\u00e1s, a diferencia de un regular  <code>Append</code>nodo, que s\u00f3lo puede tener hijos parciales cuando se utiliza dentro de un plan paralelo, a  <code>Parallel Append</code>El nodo puede tener planes parciales y no parciales para ni\u00f1os. Los ni\u00f1os  no partidistas ser\u00e1n escaneados por un solo proceso, ya que escanearlos  m\u00e1s de una vez producir\u00eda resultados duplicados. Por lo tanto, los  planes que implican la obtenci\u00f3n de m\u00faltiples conjuntos de resultados  pueden lograr un paralelismo de grano gruesa, incluso cuando no se  dispone de planes parciales eficientes. Por ejemplo, considere una  consulta contra una tabla dividida que s\u00f3lo se puede implementar  eficientemente mediante el uso de un \u00edndice que no soporta escaneos  paralelos. El planificador podr\u00eda elegir un  <code>Parallel Append</code>de regular  <code>Index Scan</code>planes; cada escaneo de \u00edndice individual tendr\u00eda que ser ejecutado hasta su  finalizaci\u00f3n por un solo proceso, pero diferentes escaneos podr\u00edan ser  realizados al mismo tiempo por diferentes procesos.</p> <p>enable.parallel-append se puede utilizar para desactivar esta caracter\u00edstica.</p>"},{"location":"02.-El%20lenguaje%20SQL/12.-Consultas%20paralelas/03.-Planes%20paralelos/05.-Parallel%20Plan%20Tips/","title":"05.-Parallel Plan Tips","text":"<p>Si una consulta que se espera que lo haga no produce un plan paralelo, puede intentar reducir el paralelo.setup.cost o parallel-tuple.cost. Por supuesto, este plan puede resultar m\u00e1s lento que el plan de serie  que el planificador prefiri\u00f3, pero esto no siempre ser\u00e1 as\u00ed. Si no  consigues un plan paralelo incluso con valores muy peque\u00f1os de estos  ajustes (por ejemplo, despu\u00e9s de ponerlos a cero a cero), puede haber  alguna raz\u00f3n por la que el planificador de consultas es incapaz de  generar un plan paralelo para tu consulta. V\u00e9anse los art\u00edculos 15.2 y  para informaci\u00f3n sobre por qu\u00e9 puede ser el caso.</p> <p>Al ejecutar un plan paralelo, puede utilizar  <code>EXPLAIN (ANALYZE, VERBOSE)</code>para mostrar estad\u00edsticas por trabajador para cada nodo de plan. Esto puede  ser \u00fatil para determinar si la obra se distribuye uniformemente entre  todos los nodos del plan y, m\u00e1s en general, para comprender las  caracter\u00edsticas de rendimiento del plan.</p>"},{"location":"02.-El%20lenguaje%20SQL/12.-Consultas%20paralelas/04.-Seguridad%20paralela/","title":"Index","text":"<p>El planificador clasifica las operaciones involucradas en una consulta como segura paralela, restringida o insegura paralela. Una operaci\u00f3n segura paralela es aquella que no entra en conflicto con  el uso de consultas paralelas. Una operaci\u00f3n restringida paralela es  aquella que no se puede realizar en un trabajador paralelo, pero que se  puede realizar en el l\u00edder mientras se utiliza la consulta paralela. Por lo tanto, las operaciones restringidas paralelas nunca pueden ocurrir  por debajo de un  <code>Gather</code>o o  <code>Gather Merge</code>nodo, pero puede ocurrir en otra parte de un plan que contiene tal nodo. Una  operaci\u00f3n paralela insegura es una operaci\u00f3n insegura que no se puede  realizar mientras se utiliza la consulta paralela, ni siquiera en el  l\u00edder. Cuando una consulta contiene algo que sea paralelo inseguro, la  consulta paralela est\u00e1 completamente deshabilitada para esa consulta.</p> <p>Las siguientes operaciones siempre est\u00e1n restringidas en paralelo:</p> <ul> <li>Esc\u00e1neres de expresiones comunes de tabla (ETC).</li> <li>Esc\u00e1neres de mesas temporales.</li> <li>Escanes de tablas extranjeras, a menos que el envoltorio de datos extra\u00f1os tenga un  <code>IsForeignScanParallelSafe</code>API que indica lo contrario.</li> <li>Nodos de plan a lo que se hace un  <code>InitPlan</code>est\u00e1 unido.</li> <li>Plane los nodos que hacen referencia a un correlato <code>SubPlan</code>.</li> </ul>"},{"location":"02.-El%20lenguaje%20SQL/12.-Consultas%20paralelas/04.-Seguridad%20paralela/01.-Etiquetado%20paralelo%20para%20funciones%20y%20agregados/","title":"01.-Etiquetado paralelo para funciones y agregados","text":"<p>El planificador no puede determinar autom\u00e1ticamente si una funci\u00f3n  definida por el usuario o agregado es seguro paralelo, restringido  paralelo o inseguro paralelo, porque esto requerir\u00eda predecir cada  operaci\u00f3n que la funci\u00f3n podr\u00eda realizar. En general, esto equivale al  problema de la relaci\u00f3n y, por lo tanto, imposible. Incluso para  funciones simples donde podr\u00eda estar bien hecho, no lo intentamos, ya  que esto ser\u00eda caro y propenso a errores. En cambio, se supone que todas las funciones definidas por el usuario son inseguras paralelas a menos  que se marque otra cosa. Cuando se utiliza CREATE FUNCTION o ALTER FUNCTION, las marcas se pueden configurar especificando <code>PARALLEL SAFE</code>, <code>PARALLEL RESTRICTED</code>, o  <code>PARALLEL UNSAFE</code>seg\u00fan corresponda. Cuando se utiliza CREATE AGGREGATE, el  <code>PARALLEL</code>la opci\u00f3n se puede especificar con <code>SAFE</code>, <code>RESTRICTED</code>, o  <code>UNSAFE</code>como el valor correspondiente.</p> <p>Funciones y agregados deben marcarse  <code>PARALLEL UNSAFE</code>si escriben a la base de datos, acceden a secuencias, cambian el estado de transacci\u00f3n incluso temporalmente (por ejemplo, una funci\u00f3n PL/pgSQL  que establece un  <code>EXCEPTION</code>bloquear para atrapar errores, o realizar cambios persistentes en la  configuraci\u00f3n. Del mismo modo, las funciones deben estar marcadas  <code>PARALLEL RESTRICTED</code>si acceden a mesas temporales, estado de conexi\u00f3n al cliente, cursores,  declaraciones preparadas o varios estados locales de backend que el  sistema no puede sincronizarse entre los trabajadores. Por ejemplo,  <code>setseed</code>y  <code>random</code>est\u00e1n restringidos por esta \u00faltima raz\u00f3n.</p> <p>En general, si una funci\u00f3n est\u00e1 etiquetada como segura cuando  est\u00e1 restringida o es insegura, o si est\u00e1 etiquetada como restringida  cuando es de hecho insegura, puede lanzar errores o producir respuestas  incorrectas cuando se utiliza en una consulta paralela. Las funciones de idioma C podr\u00edan en teor\u00eda mostrar un comportamiento totalmente  indefinido si se etiqueta mal, ya que no hay manera de que el sistema se proteja contra c\u00f3digo C arbitrario, pero en casos muy probables el  resultado no ser\u00e1 peor que para cualquier otra funci\u00f3n. Si tienes dudas, es mejor etiquetar las funciones como <code>UNSAFE</code>.</p> <p>Si una funci\u00f3n ejecutada dentro de un trabajador paralelo  adquiere cerrajas que no est\u00e1n en manos del l\u00edder, por ejemplo  consultando una tabla no referenciada en la consulta, esas cerrajas  ser\u00e1n liberadas a la salida del trabajador, no al final de la  transacci\u00f3n. Si escribes una funci\u00f3n que hace esto, y esta diferencia de comportamiento es importante para ti, marque funciones tales como  <code>PARALLEL RESTRICTED</code>para asegurarse de que ejecuten s\u00f3lo en el l\u00edder.</p> <p>Tenga en cuenta que el planificador de consultas no considera  aplazar la evaluaci\u00f3n de funciones restringidas paralelas o agregados  involucrados en la consulta con el fin de obtener un plan superior. As\u00ed, por ejemplo, si a  <code>WHERE</code>La cl\u00e1usula aplicada a una tabla en particular es paralela, el  planificador de consultas no considerar\u00e1 realizar un escaneo de esa  tabla en la parte paralela de un plan. En algunos casos, ser\u00eda posible  (y tal vez incluso eficiente) incluir el escaneo de esa tabla en la  parte paralela de la consulta y aplazar la evaluaci\u00f3n de la  <code>WHERE</code>cl\u00e1usula para que ocurra por encima de la  <code>Gather</code>Nodo. Sin embargo, el planificador no lo hace.</p>"},{"location":"03.-Tutorial%20Avanzado/01.-Base%20de%20datos%20PostgreSQL%20de%20ejemplo/","title":"Base de datos PostgreSQL de ejemplo","text":"<p>La base de datos de alquiler de DVD representa los procesos comerciales de una tienda de alquiler de DVD. La base de datos de alquiler de DVD  tiene muchos objetos, entre ellos:</p> <ul> <li>15 tablas</li> <li>1 disparador</li> <li>7 vistas</li> <li>8 funciones</li> <li>1 dominio</li> <li>13 secuencias</li> </ul>"},{"location":"03.-Tutorial%20Avanzado/01.-Base%20de%20datos%20PostgreSQL%20de%20ejemplo/#modelo-de-er-de-alquiler-de-dvd","title":"Modelo de ER de alquiler de DVD","text":""},{"location":"03.-Tutorial%20Avanzado/01.-Base%20de%20datos%20PostgreSQL%20de%20ejemplo/#_1","title":"01.-Base de datos PostgreSQL de ejemplo","text":""},{"location":"03.-Tutorial%20Avanzado/01.-Base%20de%20datos%20PostgreSQL%20de%20ejemplo/#tablas","title":"Tablas","text":"<p>Hay 15 tablas en la base de datos de DVD Rental:</p> <ul> <li><code>actor</code> - almacena datos de actores, incluyendo nombre y apellidos.</li> <li><code>film</code> - almacena datos de pel\u00edculas tales como t\u00edtulo, a\u00f1o de lanzamiento, longitud, calificaci\u00f3n, etc.</li> <li><code>film_actor</code> - almacena, guarda las relaciones entre pel\u00edculas y actores.</li> <li><code>category</code> - almacena datos de las categor\u00edas de pel\u00edculas.</li> <li><code>film_category</code> - almacena las relaciones entre pel\u00edculas y categor\u00edas.</li> <li><code>store</code> - contiene los datos de la tienda, incluyendo el personal de gerente y la direcci\u00f3n.</li> <li><code>inventory</code> - almacena datos de inventario.</li> <li><code>rental</code> - almacena datos de alquiler.</li> <li><code>payment</code> - tiendas pagos de los clientes.</li> <li><code>staff</code> - almacena datos del personal.</li> <li><code>customer</code> - almacena datos de clientes.</li> <li><code>address</code> - de tiendas de la direcci\u00f3n de datos para el personal y clientes</li> <li><code>city</code> - alma los nombres de la ciudad.</li> <li><code>country</code> - almacene nombres de pa\u00edses.</li> </ul>"},{"location":"03.-Tutorial%20Avanzado/01.-Base%20de%20datos%20PostgreSQL%20de%20ejemplo/#descargue-la-base-de-datos-de-muestras-postgresql","title":"Descargue la base de datos de muestras PostgreSQL","text":"<p>Puede descargar la base de datos de la muestra de alquiler de DVD PostgreSQL a trav\u00e9s del siguiente enlace:</p> <p>Descargar DVD Rental de la base de datos de muestras</p> <p>El archivo de base de datos est\u00e1 en <code>zip</code>formato ( <code>dvdrental.zip</code>) por lo que usted necesita para extraerlo a   <code>dvdrental.tar</code>antes de cargar la base de datos de la muestra en el servidor de bases de datos PostgreSQL.</p>"},{"location":"03.-Tutorial%20Avanzado/01.-Base%20de%20datos%20PostgreSQL%20de%20ejemplo/#descargar-diagrama-de-er-imprimible","title":"Descargar diagrama de ER imprimible","text":"<p>Adem\u00e1s de la base de datos de muestras, le proporcionamos un diagrama de ERE  imprimible en formato PDF. Puede descargar e imprimir el diagrama de ERE para referencia mientras practica PostgreSQL.</p> <p>Descargar el diagrama de ER imprimible</p> <p>Este tutorial le present\u00f3 una base de datos de muestras PostgreSQL llamada alquiler de DVD. Usaremos esta base de datos en nuestros tutoriales  PostgreSQL, as\u00ed que aseg\u00farese de cargarlo a su servidor.</p>"},{"location":"03.-Tutorial%20Avanzado/01.-Base%20de%20datos%20PostgreSQL%20de%20ejemplo/#cargar-postgresql-base-de-datos-de-ejemplo","title":"Cargar PostgreSQL Base de datos de ejemplo","text":"<p>Antes de seguir adelante con este tutorial, es necesario tener:</p> <ul> <li>Un servidor de bases de datos PostgreSQL instalado en su sistema.</li> <li>Una base de datos de muestra PostgreSQL llamada dvdrental.</li> </ul>"},{"location":"03.-Tutorial%20Avanzado/01.-Base%20de%20datos%20PostgreSQL%20de%20ejemplo/#cargar-la-base-de-datos-de-muestras-usando-herramienta-psql","title":"Cargar la base de datos de muestras usando herramienta <code>psql</code>","text":"<p>Primero, lanza la herramienta psql.</p> <pre><code>&gt;psql\n</code></pre> <p>En segundo lugar, introduzca la informaci\u00f3n de la cuenta para iniciar sesi\u00f3n en el servidor de bases de datos PostgreSQL. Puede utilizar el  valor predeterminado proporcionado por <code>psql</code> pulsando el teclado Enter. Sin embargo, para la contrase\u00f1a, debe introducir la que proporcion\u00f3 durante la instalaci\u00f3n de PostgreSQL.</p> <pre><code>Server [localhost]:\nDatabase [postgres]:\nPort [5432]:\nUsername [postgres]:\nPassword for user postgres:\n</code></pre> <p>En tercer lugar, entrar en el siguiente  <code>CREATE DATABASE</code>declaraci\u00f3n para crear una nueva base de datos dvdrental.</p> <pre><code>postgres= # CREATE DATABASE dvdrental;\nCREATE DATABASE\n</code></pre> <p>PostgreSQL crear\u00e1 una nueva base de datos nombrada <code>dvdrental</code>.</p> <p>Finalmente, entra el comando <code>exit</code> para dejar <code>psql</code>:</p> <pre><code>postgres=# exit\n</code></pre> <p>Luego, navegue por la carpeta de binarios de la carpeta de instalaci\u00f3n PostgreSQL:</p> <pre><code>C:\\&gt;cd C:\\Program Files\\PostgreSQL\\12\\bin\n</code></pre> <p>Despu\u00e9s de eso, utilice la herramienta pg-restore para cargar datos en la base de datos dvdrental:</p> <pre><code>pg_restore -U postgres -d dvdrental C:\\sampledb\\dvdrental.tar\n</code></pre> <p>En este comando:</p> <ul> <li>El  <code>-U postgres</code> especifica al usuario <code>postgres</code> para iniciar sesi\u00f3n en el servidor de bases de datos PostgreSQL.</li> <li>El  <code>-d dvdrental</code> especifica la base de datos de destino para cargar.</li> </ul> <p>Finalmente, introduzca la contrase\u00f1a para el usuario postgres y pulse Enter</p> <pre><code>Password:\n</code></pre> <p>Se tarda unos segundos en cargar los datos almacenados en el archivo <code>dvdrental.tar</code>en la base de datos <code>dvdrental</code>.</p>"},{"location":"03.-Tutorial%20Avanzado/01.-Base%20de%20datos%20PostgreSQL%20de%20ejemplo/#cargar-la-base-de-datos-de-dvd-rental-usando-pgadmin","title":"Cargar la base de datos de DVD Rental usando pgAdmin","text":"<p>Lo siguiente le muestra paso a paso sobre c\u00f3mo utilizar la herramienta pgAdmin para restaurar la base de datos de  del archivo de base de datos:</p> <p>Primero, inicie la herramienta pgAdmin y con\u00e9ctese al servidor PostgreSQL.</p> <p>En segundo lugar, haga clic derecho en las bases de datos y seleccione la opci\u00f3n  men\u00fa:</p> <p></p> <p>En tercer lugar, introduzca el nombre de la base de datos  <code>dvdrental</code>y haga Save clic en el bot\u00f3n Guardar:</p> <p></p> <p>Ver\u00e1 la nueva base de datos vac\u00eda creada bajo el nodo de Bases de Datos:</p> <p></p> <p>Cuarto, haga clic con el bot\u00f3n derecho en la base de datos dvdrental y elija Restaurar... elemento de men\u00fa para restaurar la base de datos del archivo de base de datos descargado:</p> <p></p> <p>Quinto, introduzca la ruta al archivo de la base de datos de ejemplo, por ejemplo, c:sampledb.dvddrental.tar y haga clic en el bot\u00f3n Restore:</p> <p></p> <p>Sexto, el proceso de restauraci\u00f3n se completar\u00e1 en pocos segundos y muestra el siguiente di\u00e1logo una vez que se complete:</p> <p></p> <p>Finalmente, abra la  <code>dvdrental</code>base de datos de panel del navegador de objetos, encontrar\u00e1 tablas en el  <code>public</code>esquema y otros objetos de base de datos como se muestra en la siguiente imagen:</p> <p></p> <p>En este tutorial, has aprendido a cargar el  <code>dvdrental</code>base de datos de muestras en el servidor de bases de datos PostgreSQL para practicar PostgreSQL.</p> <p>Vamos a empezar a aprender PostgreSQL y divertirnos.</p>"},{"location":"03.-Tutorial%20Avanzado/01.-Consultas/01.-SELECT/","title":"SELECT","text":"<p>Resumen : en este tutorial, usted va a aprender a utilizar la declaraci\u00f3n b\u00e1sica PostgreSQL SELECT para consultar datos de una tabla.</p> <p>Tenga en cuenta que si no sabe c\u00f3mo ejecutar una consulta contra la base de datos PostgreSQL usando la herramienta de l\u00ednea de comandos psql o la herramienta GUI , puede comprobar la conexi\u00f3n al tutorial de la base de .</p> <p>Una de las tareas m\u00e1s comunes, cuando se trabaja con la base de datos, es recuperar los datos de las tablas utilizando  <code>SELECT</code>declaraci\u00f3n.</p> <p>El  <code>SELECT</code>La declaraci\u00f3n es una de las declaraciones m\u00e1s complejas en PostgreSQL.  Tiene muchas cl\u00e1usulas que se puede utilizar para formar una consulta  flexible.</p> <p>Debido a su complejidad, lo dividiremos en muchos  tutoriales m\u00e1s cortos y f\u00e1ciles de entender para que puedas aprender  sobre cada cl\u00e1usula m\u00e1s r\u00e1pido.</p> <p>El  <code>SELECT</code>La declaraci\u00f3n tiene las siguientes cl\u00e1usulas:</p> <ul> <li>Seleccionar filas distintas usando  <code>DISTINCT</code>operador.</li> <li>Ordenar las filas usando  <code>ORDER BY</code>cl\u00e1usula.</li> <li>Filtrar filas usando  <code>WHERE</code>cl\u00e1usula.</li> <li>Seleccione un subconjunto de filas de una tabla usando  <code>LIMIT</code>o o  <code>FETCH</code>cl\u00e1usula.</li> <li>Grupo filas en grupos usando  <code>GROUP BY</code>cl\u00e1usula.</li> <li>Grupos de filtro utilizando  <code>HAVING</code>cl\u00e1usula.</li> <li>Unirse a otras mesas usando \u00fanete como <code>INNER JOIN</code>, <code>LEFT JOIN</code>, <code>FULL OUTER JOIN</code>,  <code>CROSS JOIN</code>cl\u00e1usulas.</li> <li>Realizar operaciones establecidas mediante <code>UNION</code>, <code>INTERSECT</code>, y <code>EXCEPT</code>.</li> </ul> <p>En este tutorial, vas a enfocarte en el <code>SELECT</code>y  <code>FROM</code>cl\u00e1usulas.</p>"},{"location":"03.-Tutorial%20Avanzado/01.-Consultas/01.-SELECT/#sintaxis-de-declaracion-postgresql-select","title":"Sintaxis de declaraci\u00f3n PostgreSQL SELECT","text":"<p>Comenzamos con la forma b\u00e1sica de la  <code>SELECT</code>declaraci\u00f3n que recupera los datos de una sola tabla.</p> <p>A continuaci\u00f3n se ilustra la sintaxis de la  <code>SELECT</code>de la declaraci\u00f3n:</p> <pre><code>SELECT\n   select_list\nFROM\n   table_name;Lenguaje de c\u00f3digo: SQL (Idioma de consulta de la imagen de la imagen)(sql)\n</code></pre> <p>En esta sintaxis:</p> <ul> <li>Primero, especifique una lista de selecci\u00f3n que puede ser una columna o una  lista de columnas en una tabla de la que desea recuperar datos. Si  especifica una lista de columnas, necesita colocar una coma (<code>,</code>) entre dos columnas para separarlas. Si desea seleccionar datos de todas las columnas de la tabla, puede utilizar un asterisco (<code>*</code>) abreviatura en lugar de especificar todos los nombres de la columna. La lista selecta tambi\u00e9n puede contener expresiones o valores literales.</li> <li>En segundo lugar, proporcione el nombre de la tabla desde la que desea consultar los datos despu\u00e9s de la  <code>FROM</code>Palabra clave.</li> </ul> <p>El  <code>FROM</code>la cl\u00e1usula es opcional. Si no est\u00e1s consultando datos de ninguna tabla, puedes omitir el  <code>FROM</code>cl\u00e1usula en el  <code>SELECT</code>declaraci\u00f3n.</p> <p>PostgreSQL eval\u00faa el  <code>FROM</code>cl\u00e1usula antes de la  <code>SELECT</code>cl\u00e1usula en el  <code>SELECT</code>de la declaraci\u00f3n:</p> <p></p> <p>Tenga en cuenta que las palabras clave SQL son insensibles. Significa que  <code>SELECT</code>es equivalente a  <code>select</code>o o <code>Select</code>. Por convenci\u00f3n, usaremos todas las palabras clave SQL en may\u00fasculas para hacer las consultas m\u00e1s f\u00e1ciles de leer.</p>"},{"location":"03.-Tutorial%20Avanzado/01.-Consultas/01.-SELECT/#ejemplos-de-postgresql-select","title":"Ejemplos de PostgreSQL SELECT","text":"<p>Exploremos algunos ejemplos de uso de la  <code>SELECT</code>declaraci\u00f3n.</p> <p>Usaremos lo siguiente  <code>customer</code>mesa en el  <code>dvdrental</code> base de datos de muestras para la demostraci\u00f3n.</p> <p></p> <p>Primero, con\u00e9ctese al servidor PostgreSQL usando el  <code>postgres</code>Usuario:</p> <pre><code>psql -U postgres\n</code></pre> <p>Se le pedir\u00e1 que introduzca una contrase\u00f1a para el  <code>postgres</code>usuario.  Despu\u00e9s de introducir la contrase\u00f1a correctamente, estar\u00e1 conectado al servidor PostgreSQL:</p> <pre><code>postgres=#Idioma de c\u00f3digo: PHP (php)\n</code></pre> <p>En segundo lugar, cambie la base de datos actual a dvdrental:</p> <pre><code>\\c dvdrental\n</code></pre> <p>Tercero, ejecutar la consulta en los siguientes ejemplos.</p>"},{"location":"03.-Tutorial%20Avanzado/01.-Consultas/01.-SELECT/#1-usando-la-declaracion-postgresql-select-para-consultar-los-datos-de-un-ejemplo-de-columna","title":"1) Usando la declaraci\u00f3n PostgreSQL SELECT para consultar los datos de un ejemplo de columna","text":"<p>Este ejemplo utiliza la  <code>SELECT</code>declaraci\u00f3n para encontrar los nombres de los primeros nombres de todos los clientes de la  <code>customer</code>cuadro:</p> <pre><code>SELECT first_name FROM customer;Lenguaje de c\u00f3digo: SQL (Idioma de consulta de la imagen de la imagen)(sql)\n</code></pre> <p>Aqu\u00ed est\u00e1 la salida parcial:</p> <pre><code> first_name\n-------------\n Jared\n Mary\n Patricia\n Linda\n Barbara\n...\n</code></pre> <p>Observe que a\u00f1adimos un punto y coma (<code>;</code>) al final de la  <code>SELECT</code>declaraci\u00f3n. El punto y comano no es parte de la declaraci\u00f3n SQL; m\u00e1s bien, sirve  como se\u00f1al de PostgreSQL indicando la conclusi\u00f3n de una declaraci\u00f3n SQL. Adem\u00e1s, se utilizan secos para separar dos o m\u00e1s declaraciones SQL.</p>"},{"location":"03.-Tutorial%20Avanzado/01.-Consultas/01.-SELECT/#2-usando-la-declaracion-postgresql-select-para-consultar-datos-de-varias-columnas-ejemplo","title":"2) Usando la declaraci\u00f3n PostgreSQL SELECT para consultar datos de varias columnas ejemplo","text":"<p>La siguiente consulta utiliza la  <code>SELECT</code>declaraci\u00f3n para recuperar el nombre, apellido y correo electr\u00f3nico de los clientes de la  <code>customer</code>cuadro:</p> <pre><code>SELECT\n   first_name,\n   last_name,\n   email\nFROM\n   customer;Lenguaje de c\u00f3digo: SQL (Idioma de consulta de la imagen de la imagen)(sql)\n</code></pre> <p>Salida parcial:</p> <pre><code> first_name  |  last_name   |                  email\n-------------+--------------+------------------------------------------\n Jared       | Ely          | jared.ely@sakilacustomer.org\n Mary        | Smith        | mary.smith@sakilacustomer.org\n Patricia    | Johnson      | patricia.johnson@sakilacustomer.org\n...\n</code></pre> <p>La salida muestra tres columnas correspondientes de nombre, apellido y correo electr\u00f3nico.</p>"},{"location":"03.-Tutorial%20Avanzado/01.-Consultas/01.-SELECT/#3-usando-la-declaracion-postgresql-select-para-consultar-datos-de-todas-las-columnas-de-un-ejemplo-de-tabla","title":"3) Usando la declaraci\u00f3n PostgreSQL SELECT para consultar datos de todas las columnas de un ejemplo de tabla","text":"<p>La siguiente consulta utiliza la  <code>SELECT *</code>declaraci\u00f3n para recuperar los datos de todas las columnas de la  <code>customer</code>cuadro:</p> <pre><code>SELECT * FROM customer;Lenguaje de c\u00f3digo: SQL (Idioma de consulta de la imagen de la imagen)(sql)\n</code></pre> <p>Salida parcial:</p> <pre><code> customer_id | store_id | first_name  |  last_name   |                  email                   | address_id | activebool | create_date |       last_update       | active\n-------------+----------+-------------+--------------+------------------------------------------+------------+------------+-------------+-------------------------+--------\n         524 |        1 | Jared       | Ely          | jared.ely@sakilacustomer.org             |        530 | t          | 2006-02-14  | 2013-05-26 14:49:45.738 |      1\n           1 |        1 | Mary        | Smith        | mary.smith@sakilacustomer.org            |          5 | t          | 2006-02-14  | 2013-05-26 14:49:45.738 |      1\n           2 |        1 | Patricia    | Johnson      | patricia.johnson@sakilacustomer.org      |          6 | t          | 2006-02-14  | 2013-05-26 14:49:45.738 |      1\n...\n</code></pre> <p>En este ejemplo, usamos un asterisco (<code>*</code>) en el  <code>SELECT</code>cl\u00e1usula, que sirve de abreviatura para todas las columnas.</p> <p>En lugar de enumerar todas las columnas en el  <code>SELECT</code>cl\u00e1usula individualmente, podemos utilizar el asterisco (<code>*</code>) para hacer la consulta m\u00e1s corta.</p> <p>Sin embargo, el uso del asterisco (<code>*</code>) en el  <code>SELECT</code>La declaraci\u00f3n se considera una mala pr\u00e1ctica cuando incrust\u00f3 declaraciones de SQL en el c\u00f3digo de solicitud, como Python, Java o PHP por las siguientes razones:</p> <ul> <li>Actuaci\u00f3n de la base de datos. Supongamos que tiene una tabla con muchas columnas y datos sustanciales, el  <code>SELECT</code>declaraci\u00f3n con el asterisco (<code>*</code>) abreviatura seleccionar\u00e1 los datos de todas las columnas de la tabla,  potencialmente recuperando m\u00e1s datos de los requeridos para la  aplicaci\u00f3n.</li> <li>Rendimiento de la aplicaci\u00f3n. La recuperaci\u00f3n de  datos innecesarios aumenta el tr\u00e1fico entre el servidor PostgreSQL y el  servidor de la aplicaci\u00f3n. En consecuencia, esto puede resultar en  tiempos de respuesta m\u00e1s lentos y una escalabilidad reducida para sus  aplicaciones.</li> </ul> <p>Por estas razones, se recomienda especificar expl\u00edcitamente los nombres de la columna en el  <code>SELECT</code>cl\u00e1usula siempre que sea posible. Esto garantiza que s\u00f3lo los datos necesarios  se recuperen de la base de datos, contribuyendo a consultas m\u00e1s  eficientes y optimizadas.</p> <p>La abreviatura (*) abreviatura debe  reservarse exclusivamente para las consultas ad-hoc que examinan los  datos de la base de datos.</p>"},{"location":"03.-Tutorial%20Avanzado/01.-Consultas/01.-SELECT/#4-usando-la-declaracion-postgresql-select-con-el-ejemplo-de-expresiones","title":"4) Usando la declaraci\u00f3n PostgreSQL SELECT con el ejemplo de expresiones","text":"<p>El siguiente ejemplo utiliza el  <code>SELECT</code>declaraci\u00f3n para devolver los nombres completos y correos electr\u00f3nicos de todos los clientes de la  <code>customer</code>cuadro:</p> <pre><code>SELECT \n   first_name || ' ' || last_name,\n   email\nFROM \n   customer;Lenguaje de c\u00f3digo: SQL (Idioma de consulta de la imagen de la imagen)(sql)\n</code></pre> <p>Producto:</p> <pre><code>       ?column?        |                  email\n-----------------------+------------------------------------------\n Jared Ely             | jared.ely@sakilacustomer.org\n Mary Smith            | mary.smith@sakilacustomer.org\n Patricia Johnson      | patricia.johnson@sakilacustomer.org\n...\n</code></pre> <p>En este ejemplo, utilizamos el operador de concatenaci\u00f3n <code>||</code>para concatenar el primer nombre, el espacio y el apellido de cada cliente.</p> <p>Observe la primera columna de la salida no tiene un nombre, pero <code>?column?</code>. Para asignar un nombre a una columna temporalmente en la consulta, puede utilizar un alias de columna:</p> <pre><code>expression AS column_liasIdioma de c\u00f3digo: PHP (php)\n</code></pre> <p>La palabra clave AS es opcional. Por lo tanto, puede utilizar una sintaxis m\u00e1s corta:</p> <pre><code>expression column_lias\n</code></pre> <p>Por ejemplo, puede asignar una columna alias full-name a la primera columna de la consulta de la siguiente manera:</p> <pre><code>SELECT \n   first_name || ' ' || last_name full_name,\n   email\nFROM \n   customer;Lenguaje de c\u00f3digo: JavaScript (javascript)\n</code></pre> <p>Producto:</p> <pre><code>       full_name       |                  email\n-----------------------+------------------------------------------\n Jared Ely             | jared.ely@sakilacustomer.org\n Mary Smith            | mary.smith@sakilacustomer.org\n Patricia Johnson      | patricia.johnson@sakilacustomer.org\n...\n</code></pre>"},{"location":"03.-Tutorial%20Avanzado/01.-Consultas/01.-SELECT/#5-usando-la-declaracion-postgresql-select-sin-una-clausula-desde","title":"5) Usando la declaraci\u00f3n PostgreSQL SELECT sin una cl\u00e1usula DESDE","text":"<p>El  <code>FROM</code>cl\u00e1usula de la  <code>SELECT</code>La declaraci\u00f3n es opcional. Por lo tanto, puedes omitirlo en la declaraci\u00f3n SELECT.</p> <p>T\u00edpicamente, usas el  <code>SELECT</code>cl\u00e1usula con una funci\u00f3n para recuperar el resultado de la funci\u00f3n. Por ejemplo:</p> <pre><code>SELECT NOW();\n</code></pre> <p>En este ejemplo, utilizamos la  <code>NOW()</code>funci\u00f3n en el  <code>SELECT</code>declaraci\u00f3n. Devuelve la fecha y hora actuales del servidor PostgreSQL.</p>"},{"location":"03.-Tutorial%20Avanzado/01.-Consultas/01.-SELECT/#resumen","title":"Resumen","text":"<ul> <li>Utilice el  <code>SELECT ... FROM</code>declaraci\u00f3n para recuperar los datos de una tabla.</li> <li>PostgreSQL eval\u00faa el  <code>FROM</code>cl\u00e1usula antes de la  <code>SELECT</code>cl\u00e1usula.</li> <li>Utilite un alias de columna para asignar un nombre temporal a una columna o a una expresi\u00f3n en una consulta.</li> <li>En PostgreSQL, la  <code>FROM</code>la cl\u00e1usula es opcional.</li> </ul>"}]}